From 8c8841763fd7abbda34eff8aa1799b0bc3655e11 Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Wed, 13 Nov 2019 09:27:27 -0800
Subject: [PATCH] Don't add prefix to instructions with TLS relocation

Can't add prefix with the following TLS relocations:

i386:

R_386_TLS_GD
R_386_TLS_LDM
R_386_TLS_IE
R_386_TLS_IE_32
R_386_TLS_GOTIE
R_386_TLS_GOTDESC
R_386_TLS_DESC_CALL

x86-64:

R_X86_64_TLSGD
R_X86_64_TLSLD
R_X86_64_GOTTPOFF
R_X86_64_GOTPC32_TLSDESC
R_X86_64_TLSDESC_CALL

since it breaks TLS linker optimization.
---
 gas/config/tc-i386.c | 34 ++++++++++++++++++++++++++++------
 1 file changed, 28 insertions(+), 6 deletions(-)

diff --git a/gas/config/tc-i386.c b/gas/config/tc-i386.c
index d0ac4779d0..b45965447a 100644
--- a/gas/config/tc-i386.c
+++ b/gas/config/tc-i386.c
@@ -365,8 +365,8 @@ struct _i386_insn
     /* Has ZMM register operands.  */
     bfd_boolean has_regzmm;
 
-    /* Has GOTPC relocation.  */
-    bfd_boolean has_gotpc_reloc;
+    /* Has GOTPC or TLS relocation.  */
+    bfd_boolean has_gotpc_tls_reloc;
 
     /* RM and SIB are the modrm byte and the sib byte where the
        addressing modes of this insn are encoded.  */
@@ -8808,8 +8808,9 @@ output_insn (void)
 	    {
 	      /* NB: Don't add prefix with GOTPC relocation since
 		 output_disp() above depends on the fixed encoding
-		 length.  */
-	      unsigned int max = i.has_gotpc_reloc ? 0 : 15 - j;
+		 length.  Can't add prefix with TLS relocation since
+		 it breaks TLS linker optimization.  */
+	      unsigned int max = i.has_gotpc_tls_reloc ? 0 : 15 - j;
 	      /* Prefix count on the current instruction.  */
 	      unsigned int count = !!is_any_vex_encoding (&i.tm);
 	      unsigned int k;
@@ -8988,7 +8989,7 @@ output_disp (fragS *insn_start_frag, offsetT insn_start_off)
 		  if (!object_64bit)
 		    {
 		      reloc_type = BFD_RELOC_386_GOTPC;
-		      i.has_gotpc_reloc = TRUE;
+		      i.has_gotpc_tls_reloc = TRUE;
 		      i.op[n].imms->X_add_number +=
 			encoding_length (insn_start_frag, insn_start_off, p);
 		    }
@@ -9000,6 +9001,27 @@ output_disp (fragS *insn_start_frag, offsetT insn_start_off)
 		       insn, and that is taken care of in other code.  */
 		    reloc_type = BFD_RELOC_X86_64_GOTPC32;
 		}
+	      else if (align_branch_power)
+		{
+		  switch (reloc_type)
+		    {
+		    case BFD_RELOC_386_TLS_GD:
+		    case BFD_RELOC_386_TLS_LDM:
+		    case BFD_RELOC_386_TLS_IE:
+		    case BFD_RELOC_386_TLS_IE_32:
+		    case BFD_RELOC_386_TLS_GOTIE:
+		    case BFD_RELOC_386_TLS_GOTDESC:
+		    case BFD_RELOC_386_TLS_DESC_CALL:
+		    case BFD_RELOC_X86_64_TLSGD:
+		    case BFD_RELOC_X86_64_TLSLD:
+		    case BFD_RELOC_X86_64_GOTTPOFF:
+		    case BFD_RELOC_X86_64_GOTPC32_TLSDESC:
+		    case BFD_RELOC_X86_64_TLSDESC_CALL:
+		      i.has_gotpc_tls_reloc = TRUE;
+		    default:
+		      break;
+		    }
+		}
 	      fixP = fix_new_exp (frag_now, p - frag_now->fr_literal,
 				  size, i.op[n].disps, pcrel,
 				  reloc_type);
@@ -9141,7 +9163,7 @@ output_imm (fragS *insn_start_frag, offsetT insn_start_off)
 		    reloc_type = BFD_RELOC_X86_64_GOTPC32;
 		  else if (size == 8)
 		    reloc_type = BFD_RELOC_X86_64_GOTPC64;
-		  i.has_gotpc_reloc = TRUE;
+		  i.has_gotpc_tls_reloc = TRUE;
 		  i.op[n].imms->X_add_number +=
 		    encoding_length (insn_start_frag, insn_start_off, p);
 		}
-- 
2.21.0

