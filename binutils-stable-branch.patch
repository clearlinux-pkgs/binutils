diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 75ca29c09b9..4846c619312 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,8 @@
+2021-07-18  Nick Clifton  <nickc@redhat.com>
+
+	* version.m4 (BFD_VERSION): Set to 2.37/0
+	* development.sh (development): Set to true.
+
 2021-07-18  Nick Clifton  <nickc@redhat.com>
 
 	* 2.37 release.
diff --git a/bfd/version.m4 b/bfd/version.m4
index a1a9968a298..c5bb62347f8 100644
--- a/bfd/version.m4
+++ b/bfd/version.m4
@@ -1 +1 @@
-m4_define([BFD_VERSION], [2.37])
+m4_define([BFD_VERSION], [2.37.0])
diff --git a/gold/ChangeLog b/gold/ChangeLog
index 79207900dfc..deb0aa504b5 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,9 @@
+2021-07-20  Alan Modra  <amodra@gmail.com>
+
+	PR gold/28106
+	PR gold/27815
+	* gc.h (gc_process_relocs): Use static_cast in Section_id constructor.
+
 2021-07-18  Nick Clifton  <nickc@redhat.com>
 
 	* 2.37 release.
diff --git a/gold/gc.h b/gold/gc.h
index 6ebd81f3fd0..4a1368f5abe 100644
--- a/gold/gc.h
+++ b/gold/gc.h
@@ -247,7 +247,7 @@ gc_process_relocs(
 	      if (is_ordinary) 
 		(*secvec).push_back(Section_id(src_obj, dst_indx));
 	      else
-		(*secvec).push_back(Section_id(reinterpret_cast<Relobj*>(NULL), 0));
+		(*secvec).push_back(Section_id(static_cast<Relobj*>(NULL), 0));
               // If the target of the relocation is an STT_SECTION symbol,
               // make a note of that by storing -1 in the symbol vector.
               if (lsym.get_st_type() == elfcpp::STT_SECTION)
@@ -329,7 +329,7 @@ gc_process_relocs(
               if (is_ordinary && dst_obj != NULL)
 		(*secvec).push_back(Section_id(dst_obj, dst_indx));
 	      else
-		(*secvec).push_back(Section_id(reinterpret_cast<Relobj*>(NULL), 0));
+		(*secvec).push_back(Section_id(static_cast<Relobj*>(NULL), 0));
               (*symvec).push_back(gsym);
 	      (*addendvec).push_back(std::make_pair(
 					static_cast<long long>(symvalue),
diff --git a/libiberty/ChangeLog b/libiberty/ChangeLog
index 8e39fd28eba..3f749455f05 100644
--- a/libiberty/ChangeLog
+++ b/libiberty/ChangeLog
@@ -1,3 +1,9 @@
+2021-07-19  Christopher Wellons  <wellons@nullprogram.com>
+
+	* rust-demangle.c (struct rust_demangler): Change type of
+	"recursion" to unsigned.
+	(RUST_NO_RECURSION_LIMIT): Similarly in cast.
+
 2021-07-15  Nick Clifton  <nickc@redhat.com>
 
 	PR 99935
diff --git a/libiberty/rust-demangle.c b/libiberty/rust-demangle.c
index df09b7b8fdd..ac1eb8eb02c 100644
--- a/libiberty/rust-demangle.c
+++ b/libiberty/rust-demangle.c
@@ -75,10 +75,10 @@ struct rust_demangler
   int version;
 
   /* Recursion depth.  */
-  uint recursion;
+  unsigned recursion;
   /* Maximum number of times demangle_path may be called recursively.  */
 #define RUST_MAX_RECURSION_COUNT  1024
-#define RUST_NO_RECURSION_LIMIT   ((uint) -1)
+#define RUST_NO_RECURSION_LIMIT   ((unsigned) -1)
 
   uint64_t bound_lifetime_depth;
 };
