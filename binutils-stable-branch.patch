diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 8248394eb2..d21a1a6180 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,3 +1,114 @@
+2019-07-08  Alan Modra  <amodra@gmail.com>
+
+	PR 24785
+	* elf32-ppc.c (_bfd_elf_ppc_set_arch): Sanity check .PPC.EMB.apuinfo
+	size before reading first word.
+
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline.
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* elfnn-aarch64.c (elfNN_aarch64_merge_symbol_attribute): New function.
+	(struct elf_aarch64_link_hash_table): Add variant_pcs member.
+	(elfNN_aarch64_allocate_dynrelocs): Update variant_pcs.
+	(elfNN_aarch64_size_dynamic_sections): Add DT_AARCH64_VARIANT_PCS.
+	(elf_backend_merge_symbol_attribute): Define.
+
+2019-07-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
+
+	* elf32-arm.c (elf32_arm_gc_mark_extra_sections): Mark debug
+	sections when .text section contain secure entry functions
+	is marked.
+
+2019-06-24  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24721
+	* elf-properties.c (elf_merge_gnu_property_list): Remove the
+	property after reporting property removal.
+
+2019-04-18  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-04-11  Tamar Christina  <tamar.christina@arm.com>
+
+	PR ld/24302
+	* elfnn-aarch64.c (elfNN_aarch64_size_dynamic_sections): Don't emit
+	DT_TLSDESC_GOT and DT_TLSDESC_PLT when DF_BIND_NOW.
+	(elfNN_aarch64_finish_dynamic_sections): Don't write PLT if DF_BIND_NOW.
+
+2019-04-17  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24458
+	* elfxx-x86.h (SYMBOL_DEFINED_NON_SHARED_P): Also check x86
+	linker_def.
+
+2019-03-25  Claudiu Zissulescu  <claziss@synopsys.com>
+
+	Backport from mainline
+	2019-02-09  Vineet Gupta  <vgupta@synopsys.com>
+	* elf32-arc (INIT_SYM_STRING): Delete.
+	(FINI_SYM_STRING): Likewise.
+	(init_str): Likewise.
+	(fini_str): Likewise.
+
+2019-03-18  Alan Modra  <amodra@gmail.com>
+
+	PR 24355
+	* elf32-ppc.c (ppc_finish_symbols): Don't call write_glink_stub
+	for local iplt syms with ent->plt.offset == -1.  Remove ineffective
+	attempt at writing glink stubs only once.
+
+2019-03-01  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	Backport from mainline
+	This reverts commit 5a12586d44fa8d5dfc74cbca4f2f36a273a16335.
+	2019-01-14  Maamoun Tarsha  <maamountk@hotmail.com>
+
+	PR 20113
+	* elf32-s390.c (allocate_dynrelocs): Update comment.
+
+2019-02-10  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24151
+	* elf64-x86-64.c (elf_x86_64_need_pic): Check
+	SYMBOL_DEFINED_NON_SHARED_P instead of def_regular.
+	(elf_x86_64_relocate_section): Move PIC check for PC-relative
+	relocations to ...
+	(elf_x86_64_check_relocs): Here.
+	(elf_x86_64_finish_dynamic_symbol): Use SYMBOL_DEFINED_NON_SHARED_P
+	to check if a symbol is defined in a non-shared object.
+	* elfxx-x86.h (SYMBOL_DEFINED_NON_SHARED_P): New.
+
+2019-02-08  Alan Modra  <amodra@gmail.com>
+
+	* elf32-ppc.c (ppc_elf_relocate_section): Add %X to "unsupported
+	for bss-plt" warning to make it an error.
+
+2019-02-07  Eric Botcazou  <ebotcazou@adacore.com>
+
+	PR ld/18841
+	* elf32-sparc.c (elf32_sparc_reloc_type_class): Return
+	reloc_class_ifunc for ifunc symbols.
+	* elf64-sparc.c (elf64_sparc_reloc_type_class): Likewise.
+
+2019-02-07  Eric Botcazou  <ebotcazou@adacore.com>
+
+	* elf32-visium.c (visium_elf_howto_parity_reloc): Minor tweak.
+	<R_VISIUM_PC16>: Use explicit range test to detect an overflow.
+
+2019-02-04  Nick Clifton  <nickc@redhat.com>
+
+	* development.sh (experimental) Set to false.
+
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* version.m4 (BFD_VERSION): Set to 2.32.0.
+	* development.sh (development): Set to true.
+	(experimental) Set to true.
+	* configure: Regenerate.
+	* po/bfd.pot: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/bfd/configure b/bfd/configure
index 04786696dc..06f584138a 100755
--- a/bfd/configure
+++ b/bfd/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for bfd 2.32.
+# Generated by GNU Autoconf 2.69 for bfd 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='bfd'
 PACKAGE_TARNAME='bfd'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='bfd 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='bfd 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1391,7 +1391,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures bfd 2.32 to adapt to many kinds of systems.
+\`configure' configures bfd 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1462,7 +1462,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of bfd 2.32:";;
+     short | recursive ) echo "Configuration of bfd 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1589,7 +1589,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-bfd configure 2.32
+bfd configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -2237,7 +2237,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by bfd $as_me 2.32, which was
+It was created by bfd $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -4187,7 +4187,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='bfd'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -16919,7 +16919,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by bfd $as_me 2.32, which was
+This file was extended by bfd $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -16985,7 +16985,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-bfd config.status 2.32
+bfd config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/bfd/development.sh b/bfd/development.sh
index eb0e7b6da1..54d494c105 100644
--- a/bfd/development.sh
+++ b/bfd/development.sh
@@ -16,7 +16,7 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # Controls whether to enable development-mode features by default.
-development=false
+development=true
 
 # Indicate whether this is a release branch.
 experimental=false
diff --git a/bfd/elf-properties.c b/bfd/elf-properties.c
index 5e48d75faa..4a9907ff7e 100644
--- a/bfd/elf-properties.c
+++ b/bfd/elf-properties.c
@@ -322,12 +322,10 @@ elf_merge_gnu_property_list (struct bfd_link_info *info, bfd *first_pbfd,
 			 (bfd_vma) p->property.pr_type, first_pbfd, abfd);
 		  }
 	      }
-	    else
-	      {
-		/* Remove this property.  */
-		*lastp = p->next;
-		continue;
-	      }
+
+	    /* Remove this property.  */
+	    *lastp = p->next;
+	    continue;
 	  }
 	else if (number_p)
 	  {
diff --git a/bfd/elf32-arc.c b/bfd/elf32-arc.c
index c7469ded8a..b86dd59a3b 100644
--- a/bfd/elf32-arc.c
+++ b/bfd/elf32-arc.c
@@ -71,16 +71,6 @@ name_for_global_symbol (struct elf_link_hash_entry *h)
       }									\
   }
 
-
-/* The default symbols representing the init and fini dyn values.
-   TODO: Check what is the relation of those strings with arclinux.em
-   and DT_INIT.  */
-#define INIT_SYM_STRING "_init"
-#define FINI_SYM_STRING "_fini"
-
-char * init_str = INIT_SYM_STRING;
-char * fini_str = FINI_SYM_STRING;
-
 #define ARC_RELOC_HOWTO(TYPE, VALUE, SIZE, BITSIZE, RELOC_FUNCTION, OVERFLOW, FORMULA) \
       case VALUE: \
 	return "R_" #TYPE; \
diff --git a/bfd/elf32-arm.c b/bfd/elf32-arm.c
index 28ee9d55a8..f558d81829 100644
--- a/bfd/elf32-arm.c
+++ b/bfd/elf32-arm.c
@@ -15698,6 +15698,8 @@ elf32_arm_gc_mark_extra_sections (struct bfd_link_info *info,
   struct elf_link_hash_entry **sym_hashes;
   struct elf32_arm_link_hash_entry *cmse_hash;
   bfd_boolean again, is_v8m, first_bfd_browse = TRUE;
+  bfd_boolean debug_sec_need_to_be_marked = FALSE;
+  asection *isec;
 
   _bfd_elf_gc_mark_extra_sections (info, gc_mark_hook);
 
@@ -15759,8 +15761,24 @@ elf32_arm_gc_mark_extra_sections (struct bfd_link_info *info,
 		      if (!cmse_sec->gc_mark
 			  && !_bfd_elf_gc_mark (info, cmse_sec, gc_mark_hook))
 			return FALSE;
+		      /* The debug sections related to these secure entry
+			 functions are marked on enabling below flag.  */
+		      debug_sec_need_to_be_marked = TRUE;
 		    }
 		}
+	      if (debug_sec_need_to_be_marked)
+		{
+		  /* Looping over all the sections of the object file containing
+		     Armv8-M secure entry functions and marking all the debug
+		     sections.  */
+		  for (isec = sub->sections; isec != NULL; isec = isec->next)
+		    {
+		      /* If not a debug sections, skip it.  */
+		      if (!isec->gc_mark && (isec->flags & SEC_DEBUGGING))
+			isec->gc_mark = 1 ;
+		    }
+		  debug_sec_need_to_be_marked = FALSE;
+		}
 	    }
 	}
       first_bfd_browse = FALSE;
diff --git a/bfd/elf32-ppc.c b/bfd/elf32-ppc.c
index 10c04b997f..2349402d8c 100644
--- a/bfd/elf32-ppc.c
+++ b/bfd/elf32-ppc.c
@@ -1077,7 +1077,9 @@ _bfd_elf_ppc_set_arch (bfd *abfd)
   if (mach == 0)
     {
       s = bfd_get_section_by_name (abfd, APUINFO_SECTION_NAME);
-      if (s != NULL && bfd_malloc_and_get_section (abfd, s, &contents))
+      if (s != NULL
+	  && s->size >= 24
+	  && bfd_malloc_and_get_section (abfd, s, &contents))
 	{
 	  unsigned int apuinfo_size = bfd_get_32 (abfd, contents + 4);
 	  unsigned int i;
@@ -8852,7 +8854,7 @@ ppc_elf_relocate_section (bfd *output_bfd,
 	    }
 	  else if (htab->plt_type != PLT_NEW)
 	    info->callbacks->einfo
-	      (_("%P: %H: %s relocation unsupported for bss-plt\n"),
+	      (_("%X%P: %H: %s relocation unsupported for bss-plt\n"),
 	       input_bfd, input_section, rel->r_offset,
 	       howto->name);
 	  break;
@@ -8870,7 +8872,7 @@ ppc_elf_relocate_section (bfd *output_bfd,
 	    }
 	  else if (htab->plt_type != PLT_NEW)
 	    info->callbacks->einfo
-	      (_("%P: %H: %s relocation unsupported for bss-plt\n"),
+	      (_("%X%P: %H: %s relocation unsupported for bss-plt\n"),
 	       input_bfd, input_section, rel->r_offset,
 	       howto->name);
 	  break;
@@ -9704,6 +9706,7 @@ ppc_finish_symbols (struct bfd_link_info *info)
 		bfd_byte *loc;
 		bfd_vma val;
 		Elf_Internal_Rela rela;
+		unsigned char *p;
 
 		if (!get_sym_h (NULL, &sym, &sym_sec, NULL, &local_syms,
 				lplt - local_plt, ibfd))
@@ -9748,14 +9751,9 @@ ppc_finish_symbols (struct bfd_link_info *info)
 		loc = relplt->contents + (relplt->reloc_count++
 					  * sizeof (Elf32_External_Rela));
 		bfd_elf32_swap_reloca_out (info->output_bfd, &rela, loc);
-	      }
-	    if ((ent->glink_offset & 1) == 0)
-	      {
-		unsigned char *p = ((unsigned char *) htab->glink->contents
-				    + ent->glink_offset);
 
+		p = (unsigned char *) htab->glink->contents + ent->glink_offset;
 		write_glink_stub (NULL, ent, htab->elf.iplt, p, info);
-		ent->glink_offset |= 1;
 	      }
 	  }
 
diff --git a/bfd/elf32-s390.c b/bfd/elf32-s390.c
index 1bf8cc2760..49a301f062 100644
--- a/bfd/elf32-s390.c
+++ b/bfd/elf32-s390.c
@@ -1666,7 +1666,8 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void * inf)
 	  /* Make room for this entry.  */
 	  s->size += PLT_ENTRY_SIZE;
 
-	  /* We also need to make an entry in the .got.plt section.  */
+	  /* We also need to make an entry in the .got.plt section, which
+	     will be placed in the .got section by the linker script.  */
 	  htab->elf.sgotplt->size += GOT_ENTRY_SIZE;
 
 	  /* We also need to make an entry in the .rela.plt section.  */
diff --git a/bfd/elf32-sparc.c b/bfd/elf32-sparc.c
index 1873b1ae7c..f5c5863068 100644
--- a/bfd/elf32-sparc.c
+++ b/bfd/elf32-sparc.c
@@ -157,13 +157,44 @@ elf32_sparc_final_write_processing (bfd *abfd,
     }
 }
 
+/* Used to decide how to sort relocs in an optimal manner for the
+   dynamic linker, before writing them out.  */
+
 static enum elf_reloc_type_class
-elf32_sparc_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,
+elf32_sparc_reloc_type_class (const struct bfd_link_info *info,
 			      const asection *rel_sec ATTRIBUTE_UNUSED,
 			      const Elf_Internal_Rela *rela)
 {
+  bfd *abfd = info->output_bfd;
+  const struct elf_backend_data *bed = get_elf_backend_data (abfd);
+  struct _bfd_sparc_elf_link_hash_table *htab
+    = _bfd_sparc_elf_hash_table (info);
+  BFD_ASSERT (htab != NULL);
+
+  if (htab->elf.dynsym != NULL
+      && htab->elf.dynsym->contents != NULL)
+    {
+      /* Check relocation against STT_GNU_IFUNC symbol if there are
+	 dynamic symbols.  */
+      unsigned long r_symndx = htab->r_symndx (rela->r_info);
+      if (r_symndx != STN_UNDEF)
+	{
+	  Elf_Internal_Sym sym;
+	  if (!bed->s->swap_symbol_in (abfd,
+				       (htab->elf.dynsym->contents
+					+ r_symndx * bed->s->sizeof_sym),
+				       0, &sym))
+	    abort ();
+
+	  if (ELF_ST_TYPE (sym.st_info) == STT_GNU_IFUNC)
+	    return reloc_class_ifunc;
+	}
+    }
+
   switch ((int) ELF32_R_TYPE (rela->r_info))
     {
+    case R_SPARC_IRELATIVE:
+      return reloc_class_ifunc;
     case R_SPARC_RELATIVE:
       return reloc_class_relative;
     case R_SPARC_JMP_SLOT:
diff --git a/bfd/elf32-visium.c b/bfd/elf32-visium.c
index 316eb39a9c..de81fdca63 100644
--- a/bfd/elf32-visium.c
+++ b/bfd/elf32-visium.c
@@ -312,7 +312,6 @@ visium_elf_howto_parity_reloc (bfd * input_bfd, arelent *reloc_entry,
   bfd_vma relocation;
   bfd_byte *inplace_address;
   bfd_vma insn;
-  const bfd_vma signmask = 0xffff8000;
 
   /* This part is from bfd_elf_generic_reloc.
      If we're relocating, and this an external symbol, we don't want
@@ -351,19 +350,19 @@ visium_elf_howto_parity_reloc (bfd * input_bfd, arelent *reloc_entry,
 
   if (reloc_entry->howto->pc_relative)
     {
-      relocation -= input_section->output_section->vma
-	+ input_section->output_offset;
+      relocation -= input_section->output_section->vma;
+      relocation -= input_section->output_offset;
       relocation -= reloc_entry->address;
     }
 
   switch (reloc_entry->howto->type)
     {
     case R_VISIUM_PC16:
-      relocation >>= 2;
-      if (ret == bfd_reloc_ok && (relocation & signmask) != 0
-	  && (relocation & signmask) != signmask)
+      if (ret == bfd_reloc_ok
+	  && ((bfd_signed_vma) relocation < -0x20000
+	      || (bfd_signed_vma) relocation > 0x1ffff))
 	ret = bfd_reloc_overflow;
-      relocation &= 0xffff;
+      relocation = (relocation >> 2) & 0xffff;
       break;
     case R_VISIUM_HI16:
     case R_VISIUM_HI16_PCREL:
diff --git a/bfd/elf64-sparc.c b/bfd/elf64-sparc.c
index 7de32c9192..bd29be3a93 100644
--- a/bfd/elf64-sparc.c
+++ b/bfd/elf64-sparc.c
@@ -769,13 +769,44 @@ elf64_sparc_print_symbol_all (bfd *abfd ATTRIBUTE_UNUSED, void * filep,
     return symbol->name;
 }
 
+/* Used to decide how to sort relocs in an optimal manner for the
+   dynamic linker, before writing them out.  */
+
 static enum elf_reloc_type_class
-elf64_sparc_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,
+elf64_sparc_reloc_type_class (const struct bfd_link_info *info,
 			      const asection *rel_sec ATTRIBUTE_UNUSED,
 			      const Elf_Internal_Rela *rela)
 {
+  bfd *abfd = info->output_bfd;
+  const struct elf_backend_data *bed = get_elf_backend_data (abfd);
+  struct _bfd_sparc_elf_link_hash_table *htab
+    = _bfd_sparc_elf_hash_table (info);
+  BFD_ASSERT (htab != NULL);
+
+  if (htab->elf.dynsym != NULL
+      && htab->elf.dynsym->contents != NULL)
+    {
+      /* Check relocation against STT_GNU_IFUNC symbol if there are
+	 dynamic symbols.  */
+      unsigned long r_symndx = htab->r_symndx (rela->r_info);
+      if (r_symndx != STN_UNDEF)
+	{
+	  Elf_Internal_Sym sym;
+	  if (!bed->s->swap_symbol_in (abfd,
+				       (htab->elf.dynsym->contents
+					+ r_symndx * bed->s->sizeof_sym),
+				       0, &sym))
+	    abort ();
+
+	  if (ELF_ST_TYPE (sym.st_info) == STT_GNU_IFUNC)
+	    return reloc_class_ifunc;
+	}
+    }
+
   switch ((int) ELF64_R_TYPE (rela->r_info))
     {
+    case R_SPARC_IRELATIVE:
+      return reloc_class_ifunc;
     case R_SPARC_RELATIVE:
       return reloc_class_relative;
     case R_SPARC_JMP_SLOT:
diff --git a/bfd/elf64-x86-64.c b/bfd/elf64-x86-64.c
index c7d8bca710..6a4b366fdd 100644
--- a/bfd/elf64-x86-64.c
+++ b/bfd/elf64-x86-64.c
@@ -1426,7 +1426,7 @@ elf_x86_64_need_pic (struct bfd_link_info *info,
 	  break;
 	}
 
-      if (!h->def_regular && !h->def_dynamic)
+      if (!SYMBOL_DEFINED_NON_SHARED_P (h) && !h->def_dynamic)
 	und = _("undefined ");
     }
   else
@@ -1855,6 +1855,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,
       const char *name;
       bfd_boolean size_reloc;
       bfd_boolean converted_reloc;
+      bfd_boolean do_check_pic;
 
       r_symndx = htab->r_sym (rel->r_info);
       r_type = ELF32_R_TYPE (rel->r_info);
@@ -2130,6 +2131,13 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,
 	  size_reloc = TRUE;
 	  goto do_size;
 
+	case R_X86_64_PC8:
+	case R_X86_64_PC16:
+	case R_X86_64_PC32:
+	case R_X86_64_PC32_BND:
+	  do_check_pic = TRUE;
+	  goto check_pic;
+
 	case R_X86_64_32:
 	  if (!ABI_64_P (abfd))
 	    goto pointer;
@@ -2153,13 +2161,11 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,
 					&x86_64_elf_howto_table[r_type]);
 	  /* Fall through.  */
 
-	case R_X86_64_PC8:
-	case R_X86_64_PC16:
-	case R_X86_64_PC32:
-	case R_X86_64_PC32_BND:
 	case R_X86_64_PC64:
 	case R_X86_64_64:
 pointer:
+	  do_check_pic = FALSE;
+check_pic:
 	  if (eh != NULL && (sec->flags & SEC_CODE) != 0)
 	    eh->zero_undefweak |= 0x2;
 	  /* We are called after all symbols have been resolved.  Only
@@ -2223,6 +2229,67 @@ pointer:
 		}
 	    }
 
+	  if (do_check_pic)
+	    {
+	      /* Don't complain about -fPIC if the symbol is undefined
+	         when building executable unless it is unresolved weak
+		 symbol, references a dynamic definition in PIE or
+		 -z nocopyreloc is used.  */
+	      bfd_boolean no_copyreloc_p
+		= (info->nocopyreloc
+		   || (h != NULL
+		       && eh->def_protected
+		       && elf_has_no_copy_on_protected (h->root.u.def.section->owner)));
+	      if ((sec->flags & SEC_ALLOC) != 0
+		  && (sec->flags & SEC_READONLY) != 0
+		  && h != NULL
+		  && ((bfd_link_executable (info)
+		       && ((h->root.type == bfd_link_hash_undefweak
+			    && (eh == NULL
+				|| !UNDEFINED_WEAK_RESOLVED_TO_ZERO (info,
+								     eh)))
+			   || (bfd_link_pie (info)
+			       && !SYMBOL_DEFINED_NON_SHARED_P (h)
+			       && h->def_dynamic)
+			   || (no_copyreloc_p
+			       && h->def_dynamic
+			       && !(h->root.u.def.section->flags & SEC_CODE))))
+		      || bfd_link_dll (info)))
+		{
+		  bfd_boolean fail = FALSE;
+		  if (SYMBOL_REFERENCES_LOCAL_P (info, h))
+		    {
+		      /* Symbol is referenced locally.  Make sure it is
+			 defined locally.  */
+		      fail = !SYMBOL_DEFINED_NON_SHARED_P (h);
+		    }
+		  else if (bfd_link_pie (info))
+		    {
+		      /* We can only use PC-relative relocations in PIE
+			 from non-code sections.  */
+		      if (h->type == STT_FUNC
+			  && (sec->flags & SEC_CODE) != 0)
+			fail = TRUE;
+		    }
+		  else if (no_copyreloc_p || bfd_link_dll (info))
+		    {
+		      /* Symbol doesn't need copy reloc and isn't
+			 referenced locally.  Don't allow PC-relative
+			 relocations against default and protected
+			 symbols since address of protected function
+			 and location of protected data may not be in
+			 the shared object.   */
+		      fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT
+			      || ELF_ST_VISIBILITY (h->other) == STV_PROTECTED);
+		    }
+
+		  if (fail)
+		    return elf_x86_64_need_pic (info, abfd, sec, h,
+						symtab_hdr, isym,
+						&x86_64_elf_howto_table[r_type]);
+		}
+	    }
+
 	  size_reloc = FALSE;
 do_size:
 	  if (NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,
@@ -3065,56 +3132,14 @@ use_plt:
 	case R_X86_64_PC16:
 	case R_X86_64_PC32:
 	case R_X86_64_PC32_BND:
-	  /* Don't complain about -fPIC if the symbol is undefined when
-	     building executable unless it is unresolved weak symbol,
-	     references a dynamic definition in PIE or -z nocopyreloc
-	     is used.  */
-	  if ((input_section->flags & SEC_ALLOC) != 0
-	      && (input_section->flags & SEC_READONLY) != 0
-	      && h != NULL
-	      && ((bfd_link_executable (info)
-		   && ((h->root.type == bfd_link_hash_undefweak
-			&& !resolved_to_zero)
-		       || (bfd_link_pie (info)
-			   && !h->def_regular
-			   && h->def_dynamic)
-		       || ((info->nocopyreloc
-			    || (eh->def_protected
-				&& elf_has_no_copy_on_protected (h->root.u.def.section->owner)))
-			   && h->def_dynamic
-			   && !(h->root.u.def.section->flags & SEC_CODE))))
-		  || bfd_link_dll (info)))
-	    {
-	      bfd_boolean fail = FALSE;
-	      if (SYMBOL_REFERENCES_LOCAL_P (info, h))
-		{
-		  /* Symbol is referenced locally.  Make sure it is
-		     defined locally.  */
-		  fail = !(h->def_regular || ELF_COMMON_DEF_P (h));
-		}
-	      else if (!(bfd_link_pie (info)
-			 && (h->needs_copy || eh->needs_copy)))
-		{
-		  /* Symbol doesn't need copy reloc and isn't referenced
-		     locally.  Address of protected function may not be
-		     reachable at run-time.  */
-		  fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT
-			  || (ELF_ST_VISIBILITY (h->other) == STV_PROTECTED
-			      && h->type == STT_FUNC));
-		}
-
-	      if (fail)
-		return elf_x86_64_need_pic (info, input_bfd, input_section,
-					    h, NULL, NULL, howto);
-	    }
 	  /* Since x86-64 has PC-relative PLT, we can use PLT in PIE
 	     as function address.  */
-	  else if (h != NULL
-		   && (input_section->flags & SEC_CODE) == 0
-		   && bfd_link_pie (info)
-		   && h->type == STT_FUNC
-		   && !h->def_regular
-		   && h->def_dynamic)
+	  if (h != NULL
+	      && (input_section->flags & SEC_CODE) == 0
+	      && bfd_link_pie (info)
+	      && h->type == STT_FUNC
+	      && !h->def_regular
+	      && h->def_dynamic)
 	    goto use_plt;
 	  /* Fall through.  */
 
@@ -4271,7 +4296,7 @@ elf_x86_64_finish_dynamic_symbol (bfd *output_bfd,
       else if (bfd_link_pic (info)
 	       && SYMBOL_REFERENCES_LOCAL_P (info, h))
 	{
-	  if (!(h->def_regular || ELF_COMMON_DEF_P (h)))
+	  if (!SYMBOL_DEFINED_NON_SHARED_P (h))
 	    return FALSE;
 	  BFD_ASSERT((h->got.offset & 1) != 0);
 	  rela.r_info = htab->r_info (0, R_X86_64_RELATIVE);
diff --git a/bfd/elfnn-aarch64.c b/bfd/elfnn-aarch64.c
index faa27611d4..1dbd0184ce 100644
--- a/bfd/elfnn-aarch64.c
+++ b/bfd/elfnn-aarch64.c
@@ -2579,6 +2579,9 @@ struct elf_aarch64_link_hash_table
   unsigned int top_index;
   asection **input_list;
 
+  /* JUMP_SLOT relocs for variant PCS symbols may be present.  */
+  int variant_pcs;
+
   /* The offset into splt of the PLT entry for the TLS descriptor
      resolver.  Special values are 0, if not necessary (or not found
      to be necessary yet), and -1 if needed but not determined
@@ -2790,6 +2793,31 @@ elfNN_aarch64_copy_indirect_symbol (struct bfd_link_info *info,
   _bfd_elf_link_hash_copy_indirect (info, dir, ind);
 }
 
+/* Merge non-visibility st_other attributes.  */
+
+static void
+elfNN_aarch64_merge_symbol_attribute (struct elf_link_hash_entry *h,
+				      const Elf_Internal_Sym *isym,
+				      bfd_boolean definition ATTRIBUTE_UNUSED,
+				      bfd_boolean dynamic ATTRIBUTE_UNUSED)
+{
+  unsigned int isym_sto = isym->st_other & ~ELF_ST_VISIBILITY (-1);
+  unsigned int h_sto = h->other & ~ELF_ST_VISIBILITY (-1);
+
+  if (isym_sto == h_sto)
+    return;
+
+  if (isym_sto & ~STO_AARCH64_VARIANT_PCS)
+    /* Not fatal, this callback cannot fail.  */
+    _bfd_error_handler (_("unknown attribute for symbol `%s': 0x%02x"),
+			h->root.root.string, isym_sto);
+
+  /* Note: Ideally we would warn about any attribute mismatch, but
+     this api does not allow that without substantial changes.  */
+  if (isym_sto & STO_AARCH64_VARIANT_PCS)
+    h->other |= STO_AARCH64_VARIANT_PCS;
+}
+
 /* Destroy an AArch64 elf linker hash table.  */
 
 static void
@@ -8369,6 +8397,12 @@ elfNN_aarch64_allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)
 	     updated.  */
 
 	  htab->root.srelplt->reloc_count++;
+
+	  /* Mark the DSO in case R_<CLS>_JUMP_SLOT relocs against
+	     variant PCS symbols are present.  */
+	  if (h->other & STO_AARCH64_VARIANT_PCS)
+	    htab->variant_pcs = 1;
+
 	}
       else
 	{
@@ -8848,13 +8882,14 @@ elfNN_aarch64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,
       if (htab->root.splt->size == 0)
 	htab->root.splt->size += PLT_ENTRY_SIZE;
 
-      htab->tlsdesc_plt = htab->root.splt->size;
-      htab->root.splt->size += PLT_TLSDESC_ENTRY_SIZE;
 
       /* If we're not using lazy TLS relocations, don't generate the
-	 GOT entry required.  */
+	 GOT and PLT entry required.  */
       if (!(info->flags & DF_BIND_NOW))
 	{
+	  htab->tlsdesc_plt = htab->root.splt->size;
+	  htab->root.splt->size += PLT_TLSDESC_ENTRY_SIZE;
+
 	  htab->dt_tlsdesc_got = htab->root.sgot->size;
 	  htab->root.sgot->size += GOT_ENTRY_SIZE;
 	}
@@ -8957,7 +8992,12 @@ elfNN_aarch64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,
 	      || !add_dynamic_entry (DT_JMPREL, 0))
 	    return FALSE;
 
+	  if (htab->variant_pcs
+	      && !add_dynamic_entry (DT_AARCH64_VARIANT_PCS, 0))
+	    return FALSE;
+
 	  if (htab->tlsdesc_plt
+	      && !(info->flags & DF_BIND_NOW)
 	      && (!add_dynamic_entry (DT_TLSDESC_PLT, 0)
 		  || !add_dynamic_entry (DT_TLSDESC_GOT, 0)))
 	    return FALSE;
@@ -9445,6 +9485,7 @@ elfNN_aarch64_finish_dynamic_sections (bfd *output_bfd,
 
 	    case DT_TLSDESC_GOT:
 	      s = htab->root.sgot;
+	      BFD_ASSERT (htab->dt_tlsdesc_got != (bfd_vma)-1);
 	      dyn.d_un.d_ptr = s->output_section->vma + s->output_offset
 		+ htab->dt_tlsdesc_got;
 	      break;
@@ -9464,8 +9505,9 @@ elfNN_aarch64_finish_dynamic_sections (bfd *output_bfd,
 	this_hdr.sh_entsize = htab->plt_entry_size;
 
 
-      if (htab->tlsdesc_plt)
+      if (htab->tlsdesc_plt && !(info->flags & DF_BIND_NOW))
 	{
+	  BFD_ASSERT (htab->dt_tlsdesc_got != (bfd_vma)-1);
 	  bfd_put_NN (output_bfd, (bfd_vma) 0,
 		      htab->root.sgot->contents + htab->dt_tlsdesc_got);
 
@@ -9707,6 +9749,9 @@ const struct elf_size_info elfNN_aarch64_size_info =
 #define elf_backend_copy_indirect_symbol	\
   elfNN_aarch64_copy_indirect_symbol
 
+#define elf_backend_merge_symbol_attribute	\
+  elfNN_aarch64_merge_symbol_attribute
+
 /* Create .dynbss, and .rela.bss sections in DYNOBJ, and set up shortcuts
    to them in our hash.  */
 #define elf_backend_create_dynamic_sections	\
diff --git a/bfd/elfxx-x86.h b/bfd/elfxx-x86.h
index dce24dc106..610b2f3a68 100644
--- a/bfd/elfxx-x86.h
+++ b/bfd/elfxx-x86.h
@@ -161,6 +161,14 @@
        || (ELF_ST_VISIBILITY ((H)->other) \
 	   && (H)->root.type == bfd_link_hash_undefweak))
 
+/* TRUE if this symbol isn't defined by a shared object.  */
+#define SYMBOL_DEFINED_NON_SHARED_P(H) \
+  ((H)->def_regular \
+   || (H)->root.linker_def \
+   || (H)->root.ldscript_def \
+   || ((struct elf_x86_link_hash_entry *) (H))->linker_def \
+   || ELF_COMMON_DEF_P (H))
+
 /* TRUE if relative relocation should be generated.  GOT reference to
    global symbol in PIC will lead to dynamic symbol.  It becomes a
    problem when "time" or "times" is defined as a variable in an
diff --git a/bfd/po/bfd.pot b/bfd/po/bfd.pot
index 3d26acc5bb..5f0ccd0ab6 100644
--- a/bfd/po/bfd.pot
+++ b/bfd/po/bfd.pot
@@ -8,7 +8,7 @@ msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2019-02-02 15:48+0000\n"
+"POT-Creation-Date: 2019-02-02 17:27+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
diff --git a/bfd/version.m4 b/bfd/version.m4
index e062a8b6f0..8aec6807c9 100644
--- a/bfd/version.m4
+++ b/bfd/version.m4
@@ -1 +1 @@
-m4_define([BFD_VERSION], [2.32])
+m4_define([BFD_VERSION], [2.32.0])
diff --git a/binutils/ChangeLog b/binutils/ChangeLog
index e5acf6e2c7..0112181890 100644
--- a/binutils/ChangeLog
+++ b/binutils/ChangeLog
@@ -1,3 +1,90 @@
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline.
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* readelf.c (get_aarch64_dynamic_type): Handle DT_AARCH64_VARIANT_PCS.
+	(get_aarch64_symbol_other): New, handles STO_AARCH64_VARIANT_PCS.
+	(get_symbol_other): Call get_aarch64_symbol_other.
+
+2019-05-21  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-05-21  Tamar Christina  <tamar.christina@arm.com>
+
+	* dwarf.c (dwarf_regnames_aarch64): Add SVE registers.
+	* testsuite/binutils-all/aarch64/sve-dwarf-registers.d: New test.
+	* testsuite/binutils-all/aarch64/sve-dwarf-registers.s: New test.
+
+
+2019-05-13  Alan Modra  <amodra@gmail.com>
+
+	Apply from master.
+	2019-04-30  Alan Modra  <amodra@gmail.com>
+	* wrstabs.c (stab_start_class_type): Add assert to work around
+	gcc9 warning.  Tidy.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-26  Tamar Christina  <tamar.christina@arm.com>
+
+	* testsuite/binutils-all/aarch64/in-order-all.d: Update.
+	* testsuite/binutils-all/aarch64/in-order.d: Likewise.
+	* testsuite/binutils-all/aarch64/out-of-order-all.d: Likewise.
+	* testsuite/binutils-all/aarch64/out-of-order.d: Likewise.
+	* testsuite/binutils-all/aarch64/out-of-order.s: Likewise.
+	* testsuite/binutils-all/arm/in-order-all.d: Likewise.
+	* testsuite/binutils-all/arm/in-order.d: Likewise.
+	* testsuite/binutils-all/arm/out-of-order-all.d: Likewise.
+	* testsuite/binutils-all/arm/out-of-order.d: Likewise.
+	* testsuite/binutils-all/arm/out-of-order.s: Likewise.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* testsuite/binutils-all/arm/in-order-all.d: New test.
+	* testsuite/binutils-all/arm/in-order.d: New test.
+	* testsuite/binutils-all/arm/objdump.exp: Support .d tests.
+	* testsuite/binutils-all/arm/out-of-order-all.d: New test.
+	* testsuite/binutils-all/arm/out-of-order.T: New test.
+	* testsuite/binutils-all/arm/out-of-order.d: New test.
+	* testsuite/binutils-all/arm/out-of-order.s: New test.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* testsuite/binutils-all/aarch64/in-order-all.d: New test.
+	* testsuite/binutils-all/aarch64/out-of-order-all.d: New test.
+	* testsuite/binutils-all/aarch64/out-of-order.d: Update.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* testsuite/binutils-all/aarch64/in-order.d: New test.
+	* testsuite/binutils-all/aarch64/out-of-order.d: Disassemble data as
+	well.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* objdump.c (disassemble_bytes): Pass stop_offset.
+	* testsuite/binutils-all/aarch64/out-of-order.T: New test.
+	* testsuite/binutils-all/aarch64/out-of-order.d: New test.
+	* testsuite/binutils-all/aarch64/out-of-order.s: New test.
+
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* configure: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/binutils/configure b/binutils/configure
index 051db4baa2..edf1c18b9d 100755
--- a/binutils/configure
+++ b/binutils/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for binutils 2.32.
+# Generated by GNU Autoconf 2.69 for binutils 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='binutils'
 PACKAGE_TARNAME='binutils'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='binutils 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='binutils 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1372,7 +1372,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures binutils 2.32 to adapt to many kinds of systems.
+\`configure' configures binutils 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1443,7 +1443,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of binutils 2.32:";;
+     short | recursive ) echo "Configuration of binutils 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1570,7 +1570,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-binutils configure 2.32
+binutils configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -2218,7 +2218,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by binutils $as_me 2.32, which was
+It was created by binutils $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -4168,7 +4168,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='binutils'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -15713,7 +15713,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by binutils $as_me 2.32, which was
+This file was extended by binutils $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -15779,7 +15779,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-binutils config.status 2.32
+binutils config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/binutils/dwarf.c b/binutils/dwarf.c
index 60e0ef8935..36fa68004c 100644
--- a/binutils/dwarf.c
+++ b/binutils/dwarf.c
@@ -7099,13 +7099,17 @@ static const char *const dwarf_regnames_aarch64[] =
   "x16", "x17", "x18", "x19", "x20", "x21", "x22", "x23",
   "x24", "x25", "x26", "x27", "x28", "x29", "x30", "sp",
    NULL, "elr",  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,
-   NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,
-   NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,
-   NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  NULL,
+   NULL,  NULL,  NULL,  NULL,  NULL,  NULL,  "vg", "ffr",
+   "p0",  "p1",  "p2",  "p3",  "p4",  "p5",  "p6",  "p7",
+   "p8",  "p9", "p10", "p11", "p12", "p13", "p14", "p15",
    "v0",  "v1",  "v2",  "v3",  "v4",  "v5",  "v6",  "v7",
    "v8",  "v9", "v10", "v11", "v12", "v13", "v14", "v15",
   "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23",
   "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31",
+   "z0",  "z1",  "z2",  "z3",  "z4",  "z5",  "z6",  "z7",
+   "z8",  "z9", "z10", "z11", "z12", "z13", "z14", "z15",
+  "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23",
+  "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31",
 };
 
 void
diff --git a/binutils/objdump.c b/binutils/objdump.c
index 872539068c..4b98e7b690 100644
--- a/binutils/objdump.c
+++ b/binutils/objdump.c
@@ -1971,6 +1971,7 @@ disassemble_bytes (struct disassemble_info * inf,
 		   disassembling code of course, and when -D is in effect.  */
 		inf->stop_vma = section->vma + stop_offset;
 
+	      inf->stop_offset = stop_offset;
 	      octets = (*disassemble_fn) (section->vma + addr_offset, inf);
 
 	      inf->stop_vma = 0;
diff --git a/binutils/readelf.c b/binutils/readelf.c
index b13eb6a43b..6b4eb41aee 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -1796,6 +1796,17 @@ dump_relocations (Filedata *          filedata,
   return res;
 }
 
+static const char *
+get_aarch64_dynamic_type (unsigned long type)
+{
+  switch (type)
+    {
+    case DT_AARCH64_VARIANT_PCS:  return "AARCH64_VARIANT_PCS";
+    default:
+      return NULL;
+    }
+}
+
 static const char *
 get_mips_dynamic_type (unsigned long type)
 {
@@ -2169,6 +2180,9 @@ get_dynamic_type (Filedata * filedata, unsigned long type)
 
 	  switch (filedata->file_header.e_machine)
 	    {
+	    case EM_AARCH64:
+	      result = get_aarch64_dynamic_type (type);
+	      break;
 	    case EM_MIPS:
 	    case EM_MIPS_RS3_LE:
 	      result = get_mips_dynamic_type (type);
@@ -11053,6 +11067,22 @@ get_solaris_symbol_visibility (unsigned int visibility)
     }
 }
 
+static const char *
+get_aarch64_symbol_other (unsigned int other)
+{
+  static char buf[32];
+
+  if (other & STO_AARCH64_VARIANT_PCS)
+    {
+      other &= ~STO_AARCH64_VARIANT_PCS;
+      if (other == 0)
+	return "VARIANT_PCS";
+      snprintf (buf, sizeof buf, "VARIANT_PCS | %x", other);
+      return buf;
+    }
+  return NULL;
+}
+
 static const char *
 get_mips_symbol_other (unsigned int other)
 {
@@ -11164,6 +11194,9 @@ get_symbol_other (Filedata * filedata, unsigned int other)
 
   switch (filedata->file_header.e_machine)
     {
+    case EM_AARCH64:
+      result = get_aarch64_symbol_other (other);
+      break;
     case EM_MIPS:
       result = get_mips_symbol_other (other);
       break;
diff --git a/binutils/testsuite/binutils-all/aarch64/in-order-all.d b/binutils/testsuite/binutils-all/aarch64/in-order-all.d
new file mode 100644
index 0000000000..a484ca7d17
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/in-order-all.d
@@ -0,0 +1,38 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -e v1 -Ttext-segment=0x400000
+#objdump: -D
+#name: Check if disassembler can handle all sections in default order
+
+.*: +file format .*aarch64.*
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	8b010000 	add	x0, x0, x1
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
+
+Disassembly of section \.rodata:
+
+.+ <\.rodata>:
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
+
+Disassembly of section .global:
+
+.+ <.+>:
+	...
diff --git a/binutils/testsuite/binutils-all/aarch64/in-order.d b/binutils/testsuite/binutils-all/aarch64/in-order.d
new file mode 100644
index 0000000000..1c0532e127
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/in-order.d
@@ -0,0 +1,28 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -e v1 -Ttext-segment=0x400000
+#objdump: -d
+#name: Check if disassembler can handle sections in default order
+
+.*: +file format .*aarch64.*
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.word	0x00000000
+
+Disassembly of section .func2:
+
+.+ <\.func2>:
+[^:]+:	8b010000 	add	x0, x0, x1
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.word	0x00000000
diff --git a/binutils/testsuite/binutils-all/aarch64/out-of-order-all.d b/binutils/testsuite/binutils-all/aarch64/out-of-order-all.d
new file mode 100644
index 0000000000..d3aa79e482
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/out-of-order-all.d
@@ -0,0 +1,38 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -T out-of-order.T
+#objdump: -D
+#name: Check if disassembler can handle all sections in different order than header
+
+.*: +file format .*aarch64.*
+
+Disassembly of section \.global:
+
+.+ <\.global>:
+	...
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	8b010000 	add	x0, x0, x1
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
+
+Disassembly of section \.rodata:
+
+.+ <\.rodata>:
+[^:]+:	00000000 	\.inst	0x00000000 ; undefined
diff --git a/binutils/testsuite/binutils-all/aarch64/out-of-order.T b/binutils/testsuite/binutils-all/aarch64/out-of-order.T
new file mode 100644
index 0000000000..489ae80190
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/out-of-order.T
@@ -0,0 +1,14 @@
+ENTRY(v1)
+SECTIONS
+{
+  . = 0xffe00000;
+  .global : { *(.global) }
+  . = 0x4018280;
+  .func2 : { *(.func2) }
+  . = 0x4005000;
+  .func1 : { *(.func1) }
+  . = 0x4015000;
+  .func3 : { *(.func3) }
+  .data : { *(.data) }
+  .rodata : { *(.rodata) }
+}
\ No newline at end of file
diff --git a/binutils/testsuite/binutils-all/aarch64/out-of-order.d b/binutils/testsuite/binutils-all/aarch64/out-of-order.d
new file mode 100644
index 0000000000..a807b71fa3
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/out-of-order.d
@@ -0,0 +1,27 @@
+#PROG: objcopy
+#ld: -T out-of-order.T
+#objdump: -d
+#name: Check if disassembler can handle sections in different order than header
+
+.*: +file format .*aarch64.*
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	8b010000 	add	x0, x0, x1
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.word	0x00000000
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	8b010000 	add	x0, x0, x1
+[^:]+:	00000000 	\.word	0x00000000
diff --git a/binutils/testsuite/binutils-all/aarch64/out-of-order.s b/binutils/testsuite/binutils-all/aarch64/out-of-order.s
new file mode 100644
index 0000000000..51e66d7d1c
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/out-of-order.s
@@ -0,0 +1,28 @@
+	.text
+	.global v1
+	.section .func1,"ax",@progbits
+	.type v1 %function
+	.size v1, 4
+v1:
+	add x0, x0, x1
+	.word 0
+
+	.section .func2,"ax",@progbits
+	add x0, x0, x1
+
+	.section .func3,"ax",@progbits
+	add x0, x0, x1
+	add x0, x0, x1
+	add x0, x0, x1
+	add x0, x0, x1
+	add x0, x0, x1
+	.word 0
+
+	.data
+	.section .global,"aw",@progbits
+	.xword 0
+	.xword 0
+	.xword 0
+
+	.section .rodata
+	.word 0
diff --git a/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.d b/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.d
new file mode 100644
index 0000000000..84613668d2
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.d
@@ -0,0 +1,25 @@
+#PROG: objcopy
+#readelf: --debug-dump=frames
+
+Contents of the .eh_frame section:
+
+
+00000000 0000000000000018 00000000 CIE
+  Version:               1
+  Augmentation:          "zR"
+  Code alignment factor: 4
+  Data alignment factor: -8
+  Return address column: 30
+  Augmentation data:     1b
+  DW_CFA_def_cfa: r31 \(sp\) ofs 0
+  DW_CFA_def_cfa_register: r96 \(z0\)
+  DW_CFA_def_cfa_offset: 5
+  DW_CFA_restore_extended: r96 \(z0\)
+  DW_CFA_nop
+  DW_CFA_nop
+
+0000001c 0000000000000010 00000020 FDE cie=00000000 pc=0000000000000000..0000000000000000
+  DW_CFA_nop
+  DW_CFA_nop
+  DW_CFA_nop
+
diff --git a/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.s b/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.s
new file mode 100644
index 0000000000..69f17f5eb3
--- /dev/null
+++ b/binutils/testsuite/binutils-all/aarch64/sve-dwarf-registers.s
@@ -0,0 +1,6 @@
+	.arch armv8-a+sve
+	.cfi_startproc
+	.cfi_def_cfa_register 96
+	.cfi_adjust_cfa_offset 5
+	.cfi_restore 96
+	.cfi_endproc
diff --git a/binutils/testsuite/binutils-all/arm/in-order-all.d b/binutils/testsuite/binutils-all/arm/in-order-all.d
new file mode 100644
index 0000000000..5e51ca187a
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/in-order-all.d
@@ -0,0 +1,48 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -e v1 -Ttext-segment=0x400000
+#objdump: -D
+#name: Check if disassembler can handle all sections in default order
+
+.*: +file format .*arm.*
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	e0800001 	add	r0, r0, r1
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.rodata:
+
+.+ <\.rodata>:
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.global:
+
+.+ <.+>:
+	...
+
+Disassembly of section \.ARM\.attributes:
+
+.+ <\.ARM\.attributes>:
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+
diff --git a/binutils/testsuite/binutils-all/arm/in-order.d b/binutils/testsuite/binutils-all/arm/in-order.d
new file mode 100644
index 0000000000..a2c9b9ed9b
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/in-order.d
@@ -0,0 +1,28 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -e v1 -Ttext-segment=0x400000
+#objdump: -d
+#name: Check if disassembler can handle sections in default order
+
+.*: +file format .*arm.*
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	\.word	0x00000000
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	e0800001 	add	r0, r0, r1
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	\.word	0x00000000
diff --git a/binutils/testsuite/binutils-all/arm/objdump.exp b/binutils/testsuite/binutils-all/arm/objdump.exp
index 5013b18bd6..33e3fd1437 100644
--- a/binutils/testsuite/binutils-all/arm/objdump.exp
+++ b/binutils/testsuite/binutils-all/arm/objdump.exp
@@ -111,3 +111,17 @@ if {![binutils_assemble $srcdir/$subdir/rvct_symbol.s tmpdir/rvct_symbol.o]} the
 	fail "skip rvct symbol"
     }
 }
+
+###########################
+# Set up generic test framework
+###########################
+
+set tempfile tmpdir/armtemp.o
+set copyfile tmpdir/armcopy
+
+set test_list [lsort [glob -nocomplain $srcdir/$subdir/*.d]]
+foreach t $test_list {
+    # We need to strip the ".d", but can leave the dirname.
+    verbose [file rootname $t]
+    run_dump_test [file rootname $t]
+}
diff --git a/binutils/testsuite/binutils-all/arm/out-of-order-all.d b/binutils/testsuite/binutils-all/arm/out-of-order-all.d
new file mode 100644
index 0000000000..c1df003455
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/out-of-order-all.d
@@ -0,0 +1,48 @@
+#PROG: objcopy
+#source: out-of-order.s
+#ld: -T out-of-order.T
+#objdump: -D
+#name: Check if disassembler can handle all sections in different order than header
+
+.*: +file format .*arm.*
+
+Disassembly of section \.global:
+
+.+ <\.global>:
+	...
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	e0800001 	add	r0, r0, r1
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.rodata:
+
+.+ <\.rodata>:
+[^:]+:	00000000 	andeq	r0, r0, r0
+
+Disassembly of section \.ARM\.attributes:
+
+.+ <\.ARM\.attributes>:
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+[^:]+:	.+
+
diff --git a/binutils/testsuite/binutils-all/arm/out-of-order.T b/binutils/testsuite/binutils-all/arm/out-of-order.T
new file mode 100644
index 0000000000..489ae80190
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/out-of-order.T
@@ -0,0 +1,14 @@
+ENTRY(v1)
+SECTIONS
+{
+  . = 0xffe00000;
+  .global : { *(.global) }
+  . = 0x4018280;
+  .func2 : { *(.func2) }
+  . = 0x4005000;
+  .func1 : { *(.func1) }
+  . = 0x4015000;
+  .func3 : { *(.func3) }
+  .data : { *(.data) }
+  .rodata : { *(.rodata) }
+}
\ No newline at end of file
diff --git a/binutils/testsuite/binutils-all/arm/out-of-order.d b/binutils/testsuite/binutils-all/arm/out-of-order.d
new file mode 100644
index 0000000000..f880cbcb91
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/out-of-order.d
@@ -0,0 +1,27 @@
+#PROG: objcopy
+#ld: -T out-of-order.T
+#objdump: -d
+#name: Check if disassembler can handle sections in different order than header
+
+.*: +file format .*arm.*
+
+Disassembly of section \.func2:
+
+.+ <\.func2>:
+[^:]+:	e0800001 	add	r0, r0, r1
+
+Disassembly of section \.func1:
+
+.+ <v1>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	\.word	0x00000000
+
+Disassembly of section \.func3:
+
+.+ <\.func3>:
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	e0800001 	add	r0, r0, r1
+[^:]+:	00000000 	\.word	0x00000000
diff --git a/binutils/testsuite/binutils-all/arm/out-of-order.s b/binutils/testsuite/binutils-all/arm/out-of-order.s
new file mode 100644
index 0000000000..3994fe5249
--- /dev/null
+++ b/binutils/testsuite/binutils-all/arm/out-of-order.s
@@ -0,0 +1,29 @@
+	.text
+	.arm
+	.global v1
+	.section .func1,"ax",%progbits
+	.type v1 %function
+	.size v1, 4
+v1:
+	add r0, r0, r1
+	.word 0
+
+	.section .func2,"ax",%progbits
+	add r0, r0, r1
+
+	.section .func3,"ax",%progbits
+	add r0, r0, r1
+	add r0, r0, r1
+	add r0, r0, r1
+	add r0, r0, r1
+	add r0, r0, r1
+	.word 0
+
+	.data
+	.section .global,"aw",%progbits
+	.word 0
+	.word 0
+	.word 0
+
+	.section .rodata
+	.word 0
diff --git a/binutils/wrstabs.c b/binutils/wrstabs.c
index 3d1839f131..3e941dcefd 100644
--- a/binutils/wrstabs.c
+++ b/binutils/wrstabs.c
@@ -1440,18 +1440,15 @@ stab_end_struct_type (void *p)
 /* Start outputting a class.  */
 
 static bfd_boolean
-stab_start_class_type (void *p, const char *tag, unsigned int id, bfd_boolean structp, unsigned int size, bfd_boolean vptr, bfd_boolean ownvptr)
+stab_start_class_type (void *p, const char *tag, unsigned int id,
+		       bfd_boolean structp, unsigned int size,
+		       bfd_boolean vptr, bfd_boolean ownvptr)
 {
   struct stab_write_handle *info = (struct stab_write_handle *) p;
-  bfd_boolean definition;
-  char *vstring;
+  bfd_boolean definition = FALSE;
+  char *vstring = NULL;
 
-  if (! vptr || ownvptr)
-    {
-      definition = FALSE;
-      vstring = NULL;
-    }
-  else
+  if (vptr && !ownvptr)
     {
       definition = info->type_stack->definition;
       vstring = stab_pop_type (info);
@@ -1472,17 +1469,16 @@ stab_start_class_type (void *p, const char *tag, unsigned int id, bfd_boolean st
 	}
       else
 	{
+	  assert (vstring);
 	  vtable = (char *) xmalloc (strlen (vstring) + 3);
 	  sprintf (vtable, "~%%%s", vstring);
 	  free (vstring);
+	  if (definition)
+	    info->type_stack->definition = TRUE;
 	}
-
       info->type_stack->vtable = vtable;
     }
 
-  if (definition)
-    info->type_stack->definition = TRUE;
-
   return TRUE;
 }
 
diff --git a/gas/ChangeLog b/gas/ChangeLog
index d023975fe8..46b58d2a30 100644
--- a/gas/ChangeLog
+++ b/gas/ChangeLog
@@ -1,3 +1,137 @@
+2019-08-02  Alan Modra  <amodra@gmail.com>
+
+	Backport from master
+	2019-01-25  Wu Heng  <wu.heng@zte.com.cn>
+	PR gas/23940
+	* macro.c (getstring): Check array bound before accessing.
+
+2019-07-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
+
+	Backport from mainline
+	2019-07-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
+
+	* testsuite/gas/aarch64/sysreg-4.s: Test gmid_el1 read.
+	* testsuite/gas/aarch64/sysreg-4.d: Update expected output.
+	* testsuite/gas/aarch64/illegal-sysreg-4.l: Likewise.
+
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* config/tc-aarch64.c (aarch64_elf_copy_symbol_attributes): Define.
+	* config/tc-aarch64.h (aarch64_elf_copy_symbol_attributes): Declare.
+	(OBJ_COPY_SYMBOL_ATTRIBUTES): Define.
+	* testsuite/gas/aarch64/symbol-variant_pcs-3.d: New test.
+	* testsuite/gas/aarch64/symbol-variant_pcs-3.s: New test.
+
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* config/tc-aarch64.c (s_variant_pcs): New function.
+	* doc/c-aarch64.texi: Document .variant_pcs.
+	* testsuite/gas/aarch64/symbol-variant_pcs-1.d: New test.
+	* testsuite/gas/aarch64/symbol-variant_pcs-1.s: New test.
+	* testsuite/gas/aarch64/symbol-variant_pcs-2.d: New test.
+	* testsuite/gas/aarch64/symbol-variant_pcs-2.s: New test.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* testsuite/gas/aarch64/sve-movprfx_27.s,
+	* testsuite/gas/aarch64/sve-movprfx_27.d: New test.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* testsuite/gas/aarch64/sve-movprfx_26.s: Also test FCVTZS, FCVTZU,
+	SCVTF, UCVTF, LSR and ASR.
+	* testsuite/gas/aarch64/sve-movprfx_26.d: Update accordingly.
+	* testsuite/gas/aarch64/sve-movprfx_26.l: Likewise.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* testsuite/gas/aarch64/sve-movprfx_25.s: Allow CPY Z1.D.P1/M,X1
+	to be prefixed by MOVPRFX.
+	* testsuite/gas/aarch64/sve-movprfx_25.d: Update accordingly.
+	* testsuite/gas/aarch64/sve-movprfx_25.l: Likewise.
+
+2019-05-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>
+
+	Backport from mainline
+	2019-05-21  Andre Vieira  <andre.simoesdiasvieira@arm.com>
+
+	PR24559
+	* config/tc-arm.c (move_or_literal_pool): Set size_req to 0 for MOVW
+	replacement.
+	* testsuite/gas/arm/load-pseudo.s: New test input.
+	* testsuite/gas/arm/m0-load-pseudo.d: New test.
+	* testsuite/gas/arm/m23-load-pseudo.d: New test.
+	* testsuite/gas/arm/m33-load-pseudo.d: New test.
+
+2019-04-16  Sudakshina Das  <sudi.das@arm.com>
+
+	Backport from mainline
+	2019-04-11  Sudakshina Das  <sudi.das@arm.com>
+
+	* config/tc-aarch64.c (process_omitted_operand): Add case for
+	AARCH64_OPND_Rt_SP.
+	(parse_operands): Likewise.
+	* testsuite/gas/aarch64/armv8_5-a-memtag.d: Update tests.
+	* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.
+	* testsuite/gas/aarch64/illegal-memtag.l: Likewise.
+	* testsuite/gas/aarch64/illegal-memtag.s: Likewise.
+
+2019-04-16  Sudakshina Das  <sudi.das@arm.com>
+
+	Backport from mainline
+	2019-04-11  Sudakshina Das  <sudi.das@arm.com>
+
+	* testsuite/gas/aarch64/armv8_5-a-memtag.d: New tests for ldgm and stgm.
+	* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.
+	* testsuite/gas/aarch64/illegal-memtag.l: Likewise.
+	* testsuite/gas/aarch64/illegal-memtag.s: Likewise.
+
+2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	Backport from mainline
+	2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	* testsuite/gas/s390/zarch-arch13.s: Adjust testcase to optable changes.
+	* testsuite/gas/s390/zarch-arch13.d: Likewise.
+
+2019-02-10  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR gas/24165
+	* config/tc-i386.h (MAX_MEM_FOR_RS_ALIGN_CODE): Set to
+	(alignment ? ((1 << alignment) - 1) : 1)
+	(i386_tc_frag_data): Add max_bytes.
+	(TC_FRAG_INIT): Track max_chars in max_bytes.
+	(HANDLE_ALIGN): Replace MAX_MEM_FOR_RS_ALIGN_CODE with
+	fragP->tc_frag_data.max_bytes.
+
+2019-02-07  Tamar Christina  <tamar.christina@arm.com>
+
+	* config/tc-arm.c (insns): Redefine THUMB_VARIANT and ARM_VARIANT for
+	hlt to armv1.
+	* testsuite/gas/arm/armv8a-automatic-hlt.d: Update TAGs
+	* testsuite/gas/arm/hlt.d: New test.
+	* testsuite/gas/arm/hlt.s: New test.
+
+2019-02-07  Eric Botcazou  <ebotcazou@adacore.com>
+
+	* config/tc-visium.c (md_assemble) <mode_cad>: Align instruction on
+	64-bit boundaries for the GR6.
+	* testsuite/gas/visium/allinsn_gr6.s: Tweak.
+	* testsuite/gas/visium/allinsn_gr6.d: Likewise.
+	* testsuite/gas/visium/bra-1.d: New test.
+	* testsuite/gas/visium/bra-1.s: Likewise.
+	* testsuite/gas/visium/visium.exp: Run bra-1 test.
+
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* configure: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/gas/config/tc-aarch64.c b/gas/config/tc-aarch64.c
index 1acf6f671b..9cb7b7c722 100644
--- a/gas/config/tc-aarch64.c
+++ b/gas/config/tc-aarch64.c
@@ -1938,6 +1938,28 @@ s_aarch64_elf_cons (int nbytes)
   demand_empty_rest_of_line ();
 }
 
+/* Mark symbol that it follows a variant PCS convention.  */
+
+static void
+s_variant_pcs (int ignored ATTRIBUTE_UNUSED)
+{
+  char *name;
+  char c;
+  symbolS *sym;
+  asymbol *bfdsym;
+  elf_symbol_type *elfsym;
+
+  c = get_symbol_name (&name);
+  if (!*name)
+    as_bad (_("Missing symbol name in directive"));
+  sym = symbol_find_or_make (name);
+  restore_line_pointer (c);
+  demand_empty_rest_of_line ();
+  bfdsym = symbol_get_bfdsym (sym);
+  elfsym = elf_symbol_from (bfd_asymbol_bfd (bfdsym), bfdsym);
+  gas_assert (elfsym);
+  elfsym->internal_elf_sym.st_other |= STO_AARCH64_VARIANT_PCS;
+}
 #endif /* OBJ_ELF */
 
 /* Output a 32-bit word, but mark as an instruction.  */
@@ -2084,6 +2106,7 @@ const pseudo_typeS md_pseudo_table[] = {
   {"long", s_aarch64_elf_cons, 4},
   {"xword", s_aarch64_elf_cons, 8},
   {"dword", s_aarch64_elf_cons, 8},
+  {"variant_pcs", s_variant_pcs, 0},
 #endif
   {0, 0, 0}
 };
@@ -5135,6 +5158,7 @@ process_omitted_operand (enum aarch64_opnd type, const aarch64_opcode *opcode,
     case AARCH64_OPND_Rm:
     case AARCH64_OPND_Rt:
     case AARCH64_OPND_Rt2:
+    case AARCH64_OPND_Rt_SP:
     case AARCH64_OPND_Rs:
     case AARCH64_OPND_Ra:
     case AARCH64_OPND_Rt_SYS:
@@ -5511,6 +5535,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)
 
 	case AARCH64_OPND_Rd_SP:
 	case AARCH64_OPND_Rn_SP:
+	case AARCH64_OPND_Rt_SP:
 	case AARCH64_OPND_SVE_Rn_SP:
 	case AARCH64_OPND_Rm_SP:
 	  po_int_reg_or_fail (REG_TYPE_R_SP);
@@ -9320,3 +9345,35 @@ aarch64_copy_symbol_attributes (symbolS * dest, symbolS * src)
 {
   AARCH64_GET_FLAG (dest) = AARCH64_GET_FLAG (src);
 }
+
+#ifdef OBJ_ELF
+/* Same as elf_copy_symbol_attributes, but without copying st_other.
+   This is needed so AArch64 specific st_other values can be independently
+   specified for an IFUNC resolver (that is called by the dynamic linker)
+   and the symbol it resolves (aliased to the resolver).  In particular,
+   if a function symbol has special st_other value set via directives,
+   then attaching an IFUNC resolver to that symbol should not override
+   the st_other setting.  Requiring the directive on the IFUNC resolver
+   symbol would be unexpected and problematic in C code, where the two
+   symbols appear as two independent function declarations.  */
+
+void
+aarch64_elf_copy_symbol_attributes (symbolS *dest, symbolS *src)
+{
+  struct elf_obj_sy *srcelf = symbol_get_obj (src);
+  struct elf_obj_sy *destelf = symbol_get_obj (dest);
+  if (srcelf->size)
+    {
+      if (destelf->size == NULL)
+	destelf->size = XNEW (expressionS);
+      *destelf->size = *srcelf->size;
+    }
+  else
+    {
+      if (destelf->size != NULL)
+	free (destelf->size);
+      destelf->size = NULL;
+    }
+  S_SET_SIZE (dest, S_GET_SIZE (src));
+}
+#endif
diff --git a/gas/config/tc-aarch64.h b/gas/config/tc-aarch64.h
index 50b76d3019..93d3371324 100644
--- a/gas/config/tc-aarch64.h
+++ b/gas/config/tc-aarch64.h
@@ -130,6 +130,12 @@ void aarch64_copy_symbol_attributes (symbolS *, symbolS *);
   (aarch64_copy_symbol_attributes (DEST, SRC))
 #endif
 
+#ifdef OBJ_ELF
+void aarch64_elf_copy_symbol_attributes (symbolS *, symbolS *);
+#define OBJ_COPY_SYMBOL_ATTRIBUTES(DEST, SRC) \
+  aarch64_elf_copy_symbol_attributes (DEST, SRC)
+#endif
+
 #define TC_START_LABEL(STR, NUL_CHAR, NEXT_CHAR)			\
   (NEXT_CHAR == ':' || (NEXT_CHAR == '/' && aarch64_data_in_code ()))
 #define tc_canonicalize_symbol_name(str) aarch64_canonicalize_symbol_name (str);
diff --git a/gas/config/tc-arm.c b/gas/config/tc-arm.c
index 81b5ceedcc..138e377691 100644
--- a/gas/config/tc-arm.c
+++ b/gas/config/tc-arm.c
@@ -8082,6 +8082,11 @@ move_or_literal_pool (int i, enum lit_type t, bfd_boolean mode_3)
 		      inst.instruction |= (imm & 0x0800) << 15;
 		      inst.instruction |= (imm & 0x0700) << 4;
 		      inst.instruction |= (imm & 0x00ff);
+		      /*  In case this replacement is being done on Armv8-M
+			  Baseline we need to make sure to disable the
+			  instruction size check, as otherwise GAS will reject
+			  the use of this T32 instruction.  */
+		      inst.size_req = 0;
 		      return TRUE;
 		    }
 		}
@@ -20187,11 +20192,22 @@ static const struct asm_opcode insns[] =
 #define THUMB_VARIANT & arm_ext_v8
 
  tCE("sevl",	320f005, _sevl,    0, (),		noargs,	t_hint),
- TUE("hlt",	1000070, ba80,     1, (oIffffb),	bkpt,	t_hlt),
  TCE("ldaexd",	1b00e9f, e8d000ff, 3, (RRnpc, oRRnpc, RRnpcb),
 							ldrexd, t_ldrexd),
  TCE("stlexd",	1a00e90, e8c000f0, 4, (RRnpc, RRnpc, oRRnpc, RRnpcb),
 							strexd, t_strexd),
+
+/* Defined in V8 but is in undefined encoding space for earlier
+   architectures.  However earlier architectures are required to treat
+   this instuction as a semihosting trap as well.  Hence while not explicitly
+   defined as such, it is in fact correct to define the instruction for all
+   architectures.  */
+#undef  THUMB_VARIANT
+#define THUMB_VARIANT  & arm_ext_v1
+#undef  ARM_VARIANT
+#define ARM_VARIANT  & arm_ext_v1
+ TUE("hlt",	1000070, ba80,     1, (oIffffb),	bkpt,	t_hlt),
+
  /* ARMv8 T32 only.  */
 #undef  ARM_VARIANT
 #define ARM_VARIANT  NULL
diff --git a/gas/config/tc-i386.h b/gas/config/tc-i386.h
index f10b00df9c..fcb87e83a8 100644
--- a/gas/config/tc-i386.h
+++ b/gas/config/tc-i386.h
@@ -206,7 +206,7 @@ if ((n)									\
     goto around;							\
   }
 
-#define MAX_MEM_FOR_RS_ALIGN_CODE 4095
+#define MAX_MEM_FOR_RS_ALIGN_CODE  (alignment ? ((1 << alignment) - 1) : 1)
 
 void i386_print_statistics (FILE *);
 #define tc_print_statistics i386_print_statistics
@@ -251,6 +251,7 @@ struct i386_tc_frag_data
   enum processor_type isa;
   i386_cpu_flags isa_flags;
   enum processor_type tune;
+  unsigned int max_bytes;
 };
 
 /* We need to emit the right NOP pattern in .align frags.  This is
@@ -258,12 +259,14 @@ struct i386_tc_frag_data
    the isa/tune settings at the time the .align was assembled.  */
 #define TC_FRAG_TYPE struct i386_tc_frag_data
 
+/* NB: max_chars is a local variable in frag_var_init.  */
 #define TC_FRAG_INIT(FRAGP)					\
  do								\
    {								\
      (FRAGP)->tc_frag_data.isa = cpu_arch_isa;			\
      (FRAGP)->tc_frag_data.isa_flags = cpu_arch_isa_flags;	\
      (FRAGP)->tc_frag_data.tune = cpu_arch_tune;		\
+     (FRAGP)->tc_frag_data.max_bytes = max_chars;		\
    }								\
  while (0)
 
@@ -280,7 +283,8 @@ if (fragP->fr_type == rs_align_code) 					\
     offsetT __count = (fragP->fr_next->fr_address			\
 		       - fragP->fr_address				\
 		       - fragP->fr_fix);				\
-    if (__count > 0 && __count <= MAX_MEM_FOR_RS_ALIGN_CODE)		\
+    if (__count > 0							\
+	&& (unsigned int) __count <= fragP->tc_frag_data.max_bytes)	\
       md_generate_nops (fragP, fragP->fr_literal + fragP->fr_fix,	\
 			__count, 0);					\
   }
diff --git a/gas/config/tc-visium.c b/gas/config/tc-visium.c
index 36a682c408..bbd320e5ed 100644
--- a/gas/config/tc-visium.c
+++ b/gas/config/tc-visium.c
@@ -1368,6 +1368,10 @@ md_assemble (char *str0)
       if (previous_mode == mode_cad || previous_mode == mode_ci)
 	as_bad ("branch instruction in delay slot");
 
+      /* For the GR6, BRA insns must be aligned on 64-bit boundaries.  */
+      if (visium_arch == VISIUM_ARCH_GR6)
+	do_align (3, NULL, 0, 0);
+
       this_dest = r3;
       condition_code = cc;
       break;
diff --git a/gas/configure b/gas/configure
index 2c0dc012ae..3cb0c2cb11 100755
--- a/gas/configure
+++ b/gas/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for gas 2.32.
+# Generated by GNU Autoconf 2.69 for gas 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='gas'
 PACKAGE_TARNAME='gas'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='gas 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='gas 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1368,7 +1368,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures gas 2.32 to adapt to many kinds of systems.
+\`configure' configures gas 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1439,7 +1439,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of gas 2.32:";;
+     short | recursive ) echo "Configuration of gas 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1573,7 +1573,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-gas configure 2.32
+gas configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -2038,7 +2038,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by gas $as_me 2.32, which was
+It was created by gas $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -3985,7 +3985,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='gas'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -15672,7 +15672,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by gas $as_me 2.32, which was
+This file was extended by gas $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -15738,7 +15738,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-gas config.status 2.32
+gas config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/gas/doc/c-aarch64.texi b/gas/doc/c-aarch64.texi
index 7451f2f795..f754538a06 100644
--- a/gas/doc/c-aarch64.texi
+++ b/gas/doc/c-aarch64.texi
@@ -425,6 +425,12 @@ should only be done if it is really necessary.
 
 @c VVVVVVVVVVVVVVVVVVVVVVVVVV
 
+@cindex @code{.variant_pcs} directive, AArch64
+@item .variant_pcs @var{symbol}
+This directive marks @var{symbol} referencing a function that may
+follow a variant procedure call standard with different register
+usage convention from the base procedure call standard.
+
 @c WWWWWWWWWWWWWWWWWWWWWWWWWW
 @c XXXXXXXXXXXXXXXXXXXXXXXXXX
 
diff --git a/gas/macro.c b/gas/macro.c
index 68ae04b010..5f41c13cb8 100644
--- a/gas/macro.c
+++ b/gas/macro.c
@@ -285,8 +285,8 @@ getstring (size_t idx, sb *in, sb *acc)
 	{
 	  int nest = 0;
 	  idx++;
-	  while ((in->ptr[idx] != '>' || nest)
-		 && idx < in->len)
+	  while (idx < in->len
+		 && (in->ptr[idx] != '>' || nest))
 	    {
 	      if (in->ptr[idx] == '!')
 		{
diff --git a/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d b/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d
index 53a95fb302..37981bc14d 100644
--- a/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d
+++ b/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d
@@ -57,64 +57,64 @@ Disassembly of section \.text:
 .*:	badf001f 	cmpp	x0, sp
 .*:	d9200800 	stg	x0, \[x0\]
 .*:	d9200b60 	stg	x0, \[x27\]
-.*:	d920081f 	stg	xzr, \[x0\]
+.*:	d920081f 	stg	sp, \[x0\]
 .*:	d93fb81b 	stg	x27, \[x0, #-80\]
 .*:	d9200c00 	stg	x0, \[x0, #0\]!
-.*:	d9200c1f 	stg	xzr, \[x0, #0\]!
+.*:	d9200c1f 	stg	sp, \[x0, #0\]!
 .*:	d920ac1b 	stg	x27, \[x0, #160\]!
 .*:	d9200400 	stg	x0, \[x0\], #0
-.*:	d920041f 	stg	xzr, \[x0\], #0
+.*:	d920041f 	stg	sp, \[x0\], #0
 .*:	d93a641b 	stg	x27, \[x0\], #-1440
 .*:	d92ffbe0 	stg	x0, \[sp, #4080\]
-.*:	d92ffbff 	stg	xzr, \[sp, #4080\]
+.*:	d92ffbff 	stg	sp, \[sp, #4080\]
 .*:	d9300bfb 	stg	x27, \[sp, #-4096\]
 .*:	d92fffe0 	stg	x0, \[sp, #4080\]!
-.*:	d93007ff 	stg	xzr, \[sp\], #-4096
+.*:	d93007ff 	stg	sp, \[sp\], #-4096
 .*:	d9600800 	stzg	x0, \[x0\]
 .*:	d9600b60 	stzg	x0, \[x27\]
-.*:	d960081f 	stzg	xzr, \[x0\]
+.*:	d960081f 	stzg	sp, \[x0\]
 .*:	d97fb81b 	stzg	x27, \[x0, #-80\]
 .*:	d9600c00 	stzg	x0, \[x0, #0\]!
-.*:	d9600c1f 	stzg	xzr, \[x0, #0\]!
+.*:	d9600c1f 	stzg	sp, \[x0, #0\]!
 .*:	d960ac1b 	stzg	x27, \[x0, #160\]!
 .*:	d9600400 	stzg	x0, \[x0\], #0
-.*:	d960041f 	stzg	xzr, \[x0\], #0
+.*:	d960041f 	stzg	sp, \[x0\], #0
 .*:	d97a641b 	stzg	x27, \[x0\], #-1440
 .*:	d96ffbe0 	stzg	x0, \[sp, #4080\]
-.*:	d96ffbff 	stzg	xzr, \[sp, #4080\]
+.*:	d96ffbff 	stzg	sp, \[sp, #4080\]
 .*:	d9700bfb 	stzg	x27, \[sp, #-4096\]
 .*:	d96fffe0 	stzg	x0, \[sp, #4080\]!
-.*:	d97007ff 	stzg	xzr, \[sp\], #-4096
+.*:	d97007ff 	stzg	sp, \[sp\], #-4096
 .*:	d9a00800 	st2g	x0, \[x0\]
 .*:	d9a00b60 	st2g	x0, \[x27\]
-.*:	d9a0081f 	st2g	xzr, \[x0\]
+.*:	d9a0081f 	st2g	sp, \[x0\]
 .*:	d9bfb81b 	st2g	x27, \[x0, #-80\]
 .*:	d9a00c00 	st2g	x0, \[x0, #0\]!
-.*:	d9a00c1f 	st2g	xzr, \[x0, #0\]!
+.*:	d9a00c1f 	st2g	sp, \[x0, #0\]!
 .*:	d9a0ac1b 	st2g	x27, \[x0, #160\]!
 .*:	d9a00400 	st2g	x0, \[x0\], #0
-.*:	d9a0041f 	st2g	xzr, \[x0\], #0
+.*:	d9a0041f 	st2g	sp, \[x0\], #0
 .*:	d9ba641b 	st2g	x27, \[x0\], #-1440
 .*:	d9affbe0 	st2g	x0, \[sp, #4080\]
-.*:	d9affbff 	st2g	xzr, \[sp, #4080\]
+.*:	d9affbff 	st2g	sp, \[sp, #4080\]
 .*:	d9b00bfb 	st2g	x27, \[sp, #-4096\]
 .*:	d9afffe0 	st2g	x0, \[sp, #4080\]!
-.*:	d9b007ff 	st2g	xzr, \[sp\], #-4096
+.*:	d9b007ff 	st2g	sp, \[sp\], #-4096
 .*:	d9e00800 	stz2g	x0, \[x0\]
 .*:	d9e00b60 	stz2g	x0, \[x27\]
-.*:	d9e0081f 	stz2g	xzr, \[x0\]
+.*:	d9e0081f 	stz2g	sp, \[x0\]
 .*:	d9ffb81b 	stz2g	x27, \[x0, #-80\]
 .*:	d9e00c00 	stz2g	x0, \[x0, #0\]!
-.*:	d9e00c1f 	stz2g	xzr, \[x0, #0\]!
+.*:	d9e00c1f 	stz2g	sp, \[x0, #0\]!
 .*:	d9e0ac1b 	stz2g	x27, \[x0, #160\]!
 .*:	d9e00400 	stz2g	x0, \[x0\], #0
-.*:	d9e0041f 	stz2g	xzr, \[x0\], #0
+.*:	d9e0041f 	stz2g	sp, \[x0\], #0
 .*:	d9fa641b 	stz2g	x27, \[x0\], #-1440
 .*:	d9effbe0 	stz2g	x0, \[sp, #4080\]
-.*:	d9effbff 	stz2g	xzr, \[sp, #4080\]
+.*:	d9effbff 	stz2g	sp, \[sp, #4080\]
 .*:	d9f00bfb 	stz2g	x27, \[sp, #-4096\]
 .*:	d9efffe0 	stz2g	x0, \[sp, #4080\]!
-.*:	d9f007ff 	stz2g	xzr, \[sp\], #-4096
+.*:	d9f007ff 	stz2g	sp, \[sp\], #-4096
 .*:	69000000 	stgp	x0, x0, \[x0\]
 .*:	69006c00 	stgp	x0, x27, \[x0\]
 .*:	6900001b 	stgp	x27, x0, \[x0\]
@@ -143,3 +143,15 @@ Disassembly of section \.text:
 .*:	d9200379 	stzgm	x25, \[x27\]
 .*:	d92003e0 	stzgm	x0, \[sp\]
 .*:	d920001f 	stzgm	xzr, \[x0\]
+.*:	d9e00000 	ldgm	x0, \[x0\]
+.*:	d9e0001b 	ldgm	x27, \[x0\]
+.*:	d9e00360 	ldgm	x0, \[x27\]
+.*:	d9e00379 	ldgm	x25, \[x27\]
+.*:	d9e003e0 	ldgm	x0, \[sp\]
+.*:	d9e0001f 	ldgm	xzr, \[x0\]
+.*:	d9a00000 	stgm	x0, \[x0\]
+.*:	d9a0001b 	stgm	x27, \[x0\]
+.*:	d9a00360 	stgm	x0, \[x27\]
+.*:	d9a00379 	stgm	x25, \[x27\]
+.*:	d9a003e0 	stgm	x0, \[sp\]
+.*:	d9a0001f 	stgm	xzr, \[x0\]
diff --git a/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s b/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s
index 2ca1a68201..bd01d73b00 100644
--- a/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s
+++ b/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s
@@ -19,19 +19,19 @@ func:
 	.macro expand_stg op
 	\op x0, [x0, #0]
 	\op x0, [x27, #0]
-	\op xzr, [x0, #0]
+	\op sp, [x0, #0]
 	\op x27, [x0, #-80]
 	\op x0, [x0, #0]!
-	\op xzr, [x0, #0]!
+	\op sp, [x0, #0]!
 	\op x27, [x0, #160]!
 	\op x0, [x0], #0
-	\op xzr, [x0], #0
+	\op sp, [x0], #0
 	\op x27, [x0], #-1440
 	\op x0, [sp, #4080]
-	\op xzr, [sp, #4080]
+	\op sp, [sp, #4080]
 	\op x27, [sp, #-4096]
 	\op x0, [sp, #4080]!
-	\op xzr, [sp], #-4096
+	\op sp, [sp], #-4096
 	.endm
 
 	.macro expand_ldg_bulk op
@@ -113,3 +113,5 @@ func:
 	ldg x0, [x0, #-4096]
 
 	expand_ldg_bulk stzgm
+	expand_ldg_bulk ldgm
+	expand_ldg_bulk stgm
diff --git a/gas/testsuite/gas/aarch64/illegal-memtag.l b/gas/testsuite/gas/aarch64/illegal-memtag.l
index aa79aacc18..67ec2831a5 100644
--- a/gas/testsuite/gas/aarch64/illegal-memtag.l
+++ b/gas/testsuite/gas/aarch64/illegal-memtag.l
@@ -14,6 +14,10 @@
 [^:]*:[0-9]+: Error: immediate offset out of range -1024 to 1008 at operand 3 -- `stgp x1,x2,\[x3,#-1025\]'
 [^:]*:[0-9]+: Error: the optional immediate offset can only be 0 at operand 2 -- `stzgm x2,\[x3,#16\]'
 [^:]*:[0-9]+: Error: invalid addressing mode at operand 2 -- `stzgm x4,\[x5,#16\]!'
+[^:]*:[0-9]+: Error: the optional immediate offset can only be 0 at operand 2 -- `ldgm x2,\[x3,#16\]'
+[^:]*:[0-9]+: Error: invalid addressing mode at operand 2 -- `ldgm x4,\[x5,#16\]!'
+[^:]*:[0-9]+: Error: the optional immediate offset can only be 0 at operand 2 -- `stgm x2,\[x3,#16\]'
+[^:]*:[0-9]+: Error: invalid addressing mode at operand 2 -- `stgm x4,\[x5,#16\]!'
 [^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `irg xzr,x2,x3'
 [^:]*:[0-9]+: Error: operand 2 must be an integer or stack pointer register -- `irg x1,xzr,x3'
 [^:]*:[0-9]+: Error: operand 3 must be an integer register -- `irg x1,x2,sp'
@@ -34,10 +38,10 @@
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `st2g x2,\[xzr,#0\]!'
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stzg x2,\[xzr\],#0'
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stz2g x2,\[xzr,#0\]'
-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stg sp,\[x2,#0\]'
-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `st2g sp,\[x2,#0\]!'
-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stzg sp,\[x2\],#0'
-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stz2g sp,\[x2,#0\]'
+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stg xzr,\[x2,#0\]'
+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `st2g xzr,\[x2,#0\]!'
+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stzg xzr,\[x2\],#0'
+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stz2g xzr,\[x2,#0\]'
 [^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stgp sp,x2,\[x3\]'
 [^:]*:[0-9]+: Error: operand 2 must be an integer register -- `stgp x1,sp,\[x3\]'
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 3 -- `stgp x0,x0,\[xzr\]'
@@ -45,3 +49,7 @@
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `ldg x0,\[xzr,#16\]'
 [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stzgm x0,\[xzr\]'
 [^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stzgm sp,\[x3\]'
+[^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `ldgm x0,\[xzr\]'
+[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `ldgm sp,\[x3\]'
+[^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stgm x0,\[xzr\]'
+[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stgm sp,\[x3\]'
diff --git a/gas/testsuite/gas/aarch64/illegal-memtag.s b/gas/testsuite/gas/aarch64/illegal-memtag.s
index 9c9c48b3bd..aa574f40f4 100644
--- a/gas/testsuite/gas/aarch64/illegal-memtag.s
+++ b/gas/testsuite/gas/aarch64/illegal-memtag.s
@@ -24,6 +24,12 @@ func:
 	stzgm x2, [x3, #16]
 	stzgm x4, [x5, #16]!
 
+	# LDGM/STGM
+	ldgm x2, [x3, #16]
+	ldgm x4, [x5, #16]!
+	stgm x2, [x3, #16]
+	stgm x4, [x5, #16]!
+
 	# Illegal SP/XZR registers
 	irg xzr, x2, x3
 	irg x1, xzr, x3
@@ -45,10 +51,10 @@ func:
 	st2g x2, [xzr, #0]!
 	stzg x2, [xzr], #0
 	stz2g x2, [xzr, #0]
-	stg sp, [x2, #0]
-	st2g sp, [x2, #0]!
-	stzg sp, [x2], #0
-	stz2g sp, [x2, #0]
+	stg xzr, [x2, #0]
+	st2g xzr, [x2, #0]!
+	stzg xzr, [x2], #0
+	stz2g xzr, [x2, #0]
 	stgp sp, x2, [x3]
 	stgp x1, sp, [x3]
 	stgp x0, x0, [xzr]
@@ -59,3 +65,7 @@ func:
 	# Xt == Xn with writeback should not complain
 	st2g x2, [x2, #0]!
 	stzg x2, [x2], #0
+	ldgm x0, [xzr]
+	ldgm sp, [x3]
+	stgm x0, [xzr]
+	stgm sp, [x3]
diff --git a/gas/testsuite/gas/aarch64/illegal-sysreg-4.l b/gas/testsuite/gas/aarch64/illegal-sysreg-4.l
index d431f9bfc5..590f20e107 100644
--- a/gas/testsuite/gas/aarch64/illegal-sysreg-4.l
+++ b/gas/testsuite/gas/aarch64/illegal-sysreg-4.l
@@ -23,6 +23,7 @@
 [^:]*:[0-9]+: Error: selected processor does not support system register name 'tfsr_el12'
 [^:]*:[0-9]+: Error: selected processor does not support system register name 'rgsr_el1'
 [^:]*:[0-9]+: Error: selected processor does not support system register name 'gcr_el1'
+[^:]*:[0-9]+: Error: selected processor does not support system register name 'gmid_el1'
 [^:]*:[0-9]+: Error: selected processor does not support PSTATE field name 'tco'
 [^:]*:[0-9]+: Error: selected processor does not support system register name 'tco'
 [^:]*:[0-9]+: Error: selected processor does not support PSTATE field name 'tco'
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_25.d b/gas/testsuite/gas/aarch64/sve-movprfx_25.d
index 1573856462..2b4f654823 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_25.d
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_25.d
@@ -21,7 +21,7 @@ Disassembly of section .*:
 [^:]+:	04d12461 	movprfx	z1.d, p1/m, z3.d
 [^:]+:	05e8a441 	mov	z1.d, p1/m, x2
 [^:]+:	04d12461 	movprfx	z1.d, p1/m, z3.d
-[^:]+:	05e8a421 	mov	z1.d, p1/m, x1  // note: output register of preceding `movprfx' used as input at operand 3
+[^:]+:	05e8a421 	mov	z1.d, p1/m, x1
 [^:]+:	04d12461 	movprfx	z1.d, p1/m, z3.d
 [^:]+:	05e08441 	mov	z1.d, p1/m, d2
 [^:]+:	04d12461 	movprfx	z1.d, p1/m, z3.d
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_25.l b/gas/testsuite/gas/aarch64/sve-movprfx_25.l
index ec7e2dbd60..259ad55547 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_25.l
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_25.l
@@ -1,5 +1,4 @@
 [^:]*: Assembler messages:
 .*: Warning: predicate register differs from that in preceding `movprfx' at operand 2 -- `cpy z1.d,p9/m,#12'
 .*: Warning: merging predicate expected due to preceding `movprfx' at operand 2 -- `cpy z1.d,p1/z,#12'
-.*: Warning: output register of preceding `movprfx' used as input at operand 3 -- `cpy z1.d,p1/m,x1'
 .*: Warning: output register of preceding `movprfx' used as input at operand 3 -- `cpy z1.d,p1/m,d1'
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_25.s b/gas/testsuite/gas/aarch64/sve-movprfx_25.s
index 58124cee1c..0e64763de1 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_25.s
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_25.s
@@ -29,7 +29,7 @@ f:
    movprfx z1.d, p1/m, z3.d
    cpy z1.d, p1/m, x2
 
-   /* Not OK, scalar but register z1 and x1 are architecturally the same.  */
+   /* OK, scalar predicated, alias mov.  */
    movprfx z1.d, p1/m, z3.d
    cpy z1.d, p1/m, x1
 
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_26.d b/gas/testsuite/gas/aarch64/sve-movprfx_26.d
index 00bafdc830..1f7a85d4e8 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_26.d
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_26.d
@@ -16,8 +16,48 @@ Disassembly of section .*:
 [^:]+:	65cba440 	fcvt	z0.d, p1/m, z2.s  // note: register size not compatible with previous `movprfx' at operand 1
 [^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
 [^:]+:	65cba440 	fcvt	z0.d, p1/m, z2.s
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d8a440 	fcvtzs	z0.s, p1/m, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d8a440 	fcvtzs	z0.s, p1/m, z2.d
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65dca440 	fcvtzs	z0.d, p1/m, z2.s  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65dca440 	fcvtzs	z0.d, p1/m, z2.s
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d9a440 	fcvtzu	z0.s, p1/m, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d9a440 	fcvtzu	z0.s, p1/m, z2.d
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65dda440 	fcvtzu	z0.d, p1/m, z2.s  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65dda440 	fcvtzu	z0.d, p1/m, z2.s
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d4a440 	scvtf	z0.s, p1/m, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d4a440 	scvtf	z0.s, p1/m, z2.d
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d0a440 	scvtf	z0.d, p1/m, z2.s  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d0a440 	scvtf	z0.d, p1/m, z2.s
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d5a440 	ucvtf	z0.s, p1/m, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d5a440 	ucvtf	z0.s, p1/m, z2.d
+[^:]+:	04912420 	movprfx	z0.s, p1/m, z1.s
+[^:]+:	65d1a440 	ucvtf	z0.d, p1/m, z2.s  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	65d1a440 	ucvtf	z0.d, p1/m, z2.s
 [^:]+:	04112420 	movprfx	z0.b, p1/m, z1.b
 [^:]+:	041b8440 	lsl	z0.b, p1/m, z0.b, z2.d
 [^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
 [^:]+:	041b8440 	lsl	z0.b, p1/m, z0.b, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04112420 	movprfx	z0.b, p1/m, z1.b
+[^:]+:	04198440 	lsr	z0.b, p1/m, z0.b, z2.d
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	04198440 	lsr	z0.b, p1/m, z0.b, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
+[^:]+:	04112420 	movprfx	z0.b, p1/m, z1.b
+[^:]+:	04188440 	asr	z0.b, p1/m, z0.b, z2.d
+[^:]+:	04d12420 	movprfx	z0.d, p1/m, z1.d
+[^:]+:	04188440 	asr	z0.b, p1/m, z0.b, z2.d  // note: register size not compatible with previous `movprfx' at operand 1
 [^:]+:	d65f03c0 	ret
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_26.l b/gas/testsuite/gas/aarch64/sve-movprfx_26.l
index 695f90fde0..3595566318 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_26.l
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_26.l
@@ -1,4 +1,14 @@
 [^:]*: Assembler messages:
 .*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvt Z0.S,P1/M,Z2.D'
 .*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvt Z0.D,P1/M,Z2.S'
-.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `lsl Z0.B,P1/M,Z0.B,Z2.D'
\ No newline at end of file
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvtzs Z0.S,P1/M,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvtzs Z0.D,P1/M,Z2.S'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvtzu Z0.S,P1/M,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `fcvtzu Z0.D,P1/M,Z2.S'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `scvtf Z0.S,P1/M,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `scvtf Z0.D,P1/M,Z2.S'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `ucvtf Z0.S,P1/M,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `ucvtf Z0.D,P1/M,Z2.S'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `lsl Z0.B,P1/M,Z0.B,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `lsr Z0.B,P1/M,Z0.B,Z2.D'
+.*: Warning: register size not compatible with previous `movprfx' at operand 1 -- `asr Z0.B,P1/M,Z0.B,Z2.D'
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_26.s b/gas/testsuite/gas/aarch64/sve-movprfx_26.s
index 15f52db144..859a0e20bd 100644
--- a/gas/testsuite/gas/aarch64/sve-movprfx_26.s
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_26.s
@@ -4,28 +4,44 @@
   .arch armv8-a+sve
 
 f:
+  .macro test_cvt, insn
+
   /* Not OK, 64-bit operation, upper 32-bits cleared.  */
   movprfx Z0.S, P1/M, Z1.S
-  fcvt Z0.S, P1/M, Z2.D
+  \insn Z0.S, P1/M, Z2.D
 
   /* OK, 64-bit operation, upper 32-bits cleared.  */
   movprfx Z0.D, P1/M, Z1.D
-  fcvt Z0.S, P1/M, Z2.D
+  \insn Z0.S, P1/M, Z2.D
 
   /* Not OK, 64-bit operation ignoring 32-bits.  */
   movprfx Z0.S, P1/M, Z1.S
-  fcvt Z0.D, P1/M, Z2.S
+  \insn Z0.D, P1/M, Z2.S
 
   /* OK, 64-bit operation ignoring 32-bits.  */
   movprfx Z0.D, P1/M, Z1.D
-  fcvt Z0.D, P1/M, Z2.S
+  \insn Z0.D, P1/M, Z2.S
+  .endm test_cvt
 
+  .macro test_shift, insn
   /* OK, 8-bit operation.  */
   movprfx Z0.B, P1/M, Z1.B
-  lsl Z0.B, P1/M, Z0.B, Z2.D
+  \insn Z0.B, P1/M, Z0.B, Z2.D
 
   /* Not Ok, destination register sizes don't match.  */
   movprfx Z0.D, P1/M, Z1.D
-  lsl Z0.B, P1/M, Z0.B, Z2.D
+  \insn Z0.B, P1/M, Z0.B, Z2.D
+  .endm test_shift
+
+  test_cvt fcvt
+  test_cvt fcvtzs
+  test_cvt fcvtzu
+  test_cvt scvtf
+  test_cvt ucvtf
+
+  test_shift lsl
+  test_shift lsr
+  test_shift asr
+
   ret
 
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_27.d b/gas/testsuite/gas/aarch64/sve-movprfx_27.d
new file mode 100644
index 0000000000..ef0bc9ad00
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_27.d
@@ -0,0 +1,14 @@
+#source: sve-movprfx_27.s
+#as: -march=armv8-a+sve -I$srcdir/$subdir
+#objdump: -Dr -M notes
+
+.* file format .*
+
+Disassembly of section .*:
+
+0+ <.*>:
+[^:]+:	0420bc20 	movprfx	z0, z1
+[^:]+:	0590ce00 	fmov	z0.s, p0/m, #1.0+(e\+00)?
+[^:]+:	0420bc20 	movprfx	z0, z1
+[^:]+:	0590ce00 	fmov	z0.s, p0/m, #1.0+(e\+00)?
+[^:]+:	d65f03c0 	ret
diff --git a/gas/testsuite/gas/aarch64/sve-movprfx_27.s b/gas/testsuite/gas/aarch64/sve-movprfx_27.s
new file mode 100644
index 0000000000..bb4d3a70b6
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/sve-movprfx_27.s
@@ -0,0 +1,11 @@
+	.text
+	.arch armv8-a+sve
+
+f:
+	movprfx z0, z1
+	fmov z0.s, p0/m, #1.0
+
+	movprfx z0, z1
+	fcpy z0.s, p0/m, #1.0
+
+	ret
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.d b/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.d
new file mode 100644
index 0000000000..6257ce1687
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.d
@@ -0,0 +1,10 @@
+#objdump: -t
+
+.*:     file format .*
+
+SYMBOL TABLE:
+0+ l    d  \.text	0+ \.text
+0+ l    d  \.data	0+ \.data
+0+ l    d  \.bss	0+ \.bss
+0+ l       \.text	0+ func
+0+         \*UND\*	0+ 0x80 foobar
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.s b/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.s
new file mode 100644
index 0000000000..aecb9bde57
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-1.s
@@ -0,0 +1,8 @@
+.text
+.variant_pcs foobar
+func:
+	bl	foobar
+	b	foobar
+
+.data
+.xword	foobar
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.d b/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.d
new file mode 100644
index 0000000000..d9b60ac8e7
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.d
@@ -0,0 +1,9 @@
+#objdump: -t
+
+.*:     file format .*
+
+SYMBOL TABLE:
+0+ l    d  \.text	0+ \.text
+0+ l    d  \.data	0+ \.data
+0+ l    d  \.bss	0+ \.bss
+0+ l       \.text	0+ 0x80 foo
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.s b/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.s
new file mode 100644
index 0000000000..820733b306
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-2.s
@@ -0,0 +1,4 @@
+.text
+.variant_pcs foo
+foo:
+	ret
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.d b/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.d
new file mode 100644
index 0000000000..204914efbd
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.d
@@ -0,0 +1,12 @@
+#objdump: -t
+
+.*:     file format .*
+
+SYMBOL TABLE:
+0+ l    d  \.text	0+ \.text
+0+ l    d  \.data	0+ \.data
+0+ l    d  \.bss	0+ \.bss
+0+ g       \.text	0+ 0x80 foo_vpcs
+0+ g       \.text	0+ foo_base
+0+ g       \.text	0+ 0x80 alias_vpcs
+0+ g       \.text	0+ alias_base
diff --git a/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.s b/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.s
new file mode 100644
index 0000000000..9960831682
--- /dev/null
+++ b/gas/testsuite/gas/aarch64/symbol-variant_pcs-3.s
@@ -0,0 +1,20 @@
+.text
+.global foo_vpcs
+.global foo_base
+.global alias_vpcs
+.global alias_base
+
+.variant_pcs foo_vpcs
+.variant_pcs alias_vpcs
+
+foo_vpcs:
+foo_base:
+	bl foo_vpcs
+	bl foo_base
+	bl alias_vpcs
+	bl alias_base
+
+/* Check that the STO_AARCH64_VARIANT_PCS is not affected by .set.  */
+
+.set alias_base, foo_vpcs
+.set alias_vpcs, foo_base
diff --git a/gas/testsuite/gas/aarch64/sysreg-4.d b/gas/testsuite/gas/aarch64/sysreg-4.d
index ab6e217fc1..bc3d0bdb7f 100644
--- a/gas/testsuite/gas/aarch64/sysreg-4.d
+++ b/gas/testsuite/gas/aarch64/sysreg-4.d
@@ -28,6 +28,7 @@ Disassembly of section \.text:
 .*:	d53d660c 	mrs	x12, tfsr_el12
 .*:	d53810a1 	mrs	x1, rgsr_el1
 .*:	d53810c3 	mrs	x3, gcr_el1
+.*:	d5390084 	mrs	x4, gmid_el1
 .*:	d51b42e1 	msr	tco, x1
 .*:	d51b42e2 	msr	tco, x2
 .*:	d5186621 	msr	tfsre0_el1, x1
diff --git a/gas/testsuite/gas/aarch64/sysreg-4.s b/gas/testsuite/gas/aarch64/sysreg-4.s
index 6c18b4a4e4..ace9803081 100644
--- a/gas/testsuite/gas/aarch64/sysreg-4.s
+++ b/gas/testsuite/gas/aarch64/sysreg-4.s
@@ -24,6 +24,7 @@ func:
 	mrs x12, TFSR_EL12
 	mrs x1, rgsr_el1
 	mrs x3, gcr_el1
+	mrs x4, gmid_el1
 
 	# MSR (register)
 	msr tco, x1
diff --git a/gas/testsuite/gas/arm/armv8a-automatic-hlt.d b/gas/testsuite/gas/arm/armv8a-automatic-hlt.d
index ee6c428538..9ce94d36c9 100644
--- a/gas/testsuite/gas/arm/armv8a-automatic-hlt.d
+++ b/gas/testsuite/gas/arm/armv8a-automatic-hlt.d
@@ -5,4 +5,6 @@ Attribute Section: aeabi
 File Attributes
   Tag_CPU_arch: v8
   Tag_CPU_arch_profile: Application
+  Tag_ARM_ISA_use: Yes
   Tag_THUMB_ISA_use: Thumb-2
+
diff --git a/gas/testsuite/gas/arm/hlt.d b/gas/testsuite/gas/arm/hlt.d
new file mode 100644
index 0000000000..b05c1fb8d6
--- /dev/null
+++ b/gas/testsuite/gas/arm/hlt.d
@@ -0,0 +1,35 @@
+#objdump: -d
+# This test is only valid on ELF based ports.
+#notarget: *-*-pe *-*-wince
+
+.*:     file format .*
+
+Disassembly of section \.text:
+
+0+ <.*>:
+[^:]+:\s+ba80      	hlt	0x0000
+[^:]+:\s+ba8f      	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+ba80      	hlt	0x0000
+[^:]+:\s+ba8f      	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+ba80      	hlt	0x0000
+[^:]+:\s+ba8f      	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+ba80      	hlt	0x0000
+[^:]+:\s+ba8f      	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+ba80      	hlt	0x0000
+[^:]+:\s+ba8f      	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
+[^:]+:\s+e1000070 	hlt	0x0000
+[^:]+:\s+e100007f 	hlt	0x000f
diff --git a/gas/testsuite/gas/arm/hlt.s b/gas/testsuite/gas/arm/hlt.s
new file mode 100644
index 0000000000..02d1316bca
--- /dev/null
+++ b/gas/testsuite/gas/arm/hlt.s
@@ -0,0 +1,22 @@
+# Test that hlt is available for all architectures.
+.macro gen_for_arch arch, has_thumb
+	.arch \arch
+	.ifc "yes","\has_thumb"
+	.thumb
+	hlt
+	hlt 0xf
+	.endif
+	.arm
+	hlt
+	hlt 0xf
+.endm
+
+gen_for_arch armv8-a, yes
+gen_for_arch armv7-a, yes
+gen_for_arch armv6, yes
+gen_for_arch armv5t, yes
+gen_for_arch armv4t, yes
+gen_for_arch armv3, no
+gen_for_arch armv2, no
+gen_for_arch armv1, no
+
diff --git a/gas/testsuite/gas/arm/load-pseudo.s b/gas/testsuite/gas/arm/load-pseudo.s
new file mode 100644
index 0000000000..2102522b71
--- /dev/null
+++ b/gas/testsuite/gas/arm/load-pseudo.s
@@ -0,0 +1,3 @@
+.syntax unified
+ldr r0, =(0x30)
+ldr r0, =(0x70000000)
diff --git a/gas/testsuite/gas/arm/m0-load-pseudo.d b/gas/testsuite/gas/arm/m0-load-pseudo.d
new file mode 100644
index 0000000000..cc7e08518f
--- /dev/null
+++ b/gas/testsuite/gas/arm/m0-load-pseudo.d
@@ -0,0 +1,12 @@
+# name: Load pseudo-operation for Cortex-M0
+# as: -mcpu=cortex-m0
+# objdump: -dr --prefix-addresses --show-raw-insn -M force-thumb
+# source: load-pseudo.s
+
+.*: +file format .*arm.*
+
+
+Disassembly of section .text:
+[^>]*> 4800      	ldr	r0, \[pc, #0\]	; \(00000004 [^>]*>\)
+[^>]*> 4801      	ldr	r0, \[pc, #4\]	; \(00000008 [^>]*>\)
+#...
diff --git a/gas/testsuite/gas/arm/m23-load-pseudo.d b/gas/testsuite/gas/arm/m23-load-pseudo.d
new file mode 100644
index 0000000000..2e0dbe5479
--- /dev/null
+++ b/gas/testsuite/gas/arm/m23-load-pseudo.d
@@ -0,0 +1,12 @@
+# name: Load pseudo-operation for Cortex-M23
+# as: -mcpu=cortex-m23
+# objdump: -dr --prefix-addresses --show-raw-insn -M force-thumb
+# source: load-pseudo.s
+
+.*: +file format .*arm.*
+
+
+Disassembly of section .text:
+[^>]*> f240 0030 	movw	r0, #48	; 0x30
+[^>]*> 4800      	ldr	r0, \[pc, #0\]	; \(00000008 [^>]*>\)
+#...
diff --git a/gas/testsuite/gas/arm/m33-load-pseudo.d b/gas/testsuite/gas/arm/m33-load-pseudo.d
new file mode 100644
index 0000000000..e77bffd0f4
--- /dev/null
+++ b/gas/testsuite/gas/arm/m33-load-pseudo.d
@@ -0,0 +1,11 @@
+# name: Load pseudo-operation for Cortex-M33
+# as: -mcpu=cortex-m33
+# objdump: -dr --prefix-addresses --show-raw-insn -M force-thumb
+# source: load-pseudo.s
+
+.*: +file format .*arm.*
+
+
+Disassembly of section .text:
+[^>]*> f04f 0030 	mov.w	r0, #48	; 0x30
+[^>]*> f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
diff --git a/gas/testsuite/gas/s390/zarch-arch13.d b/gas/testsuite/gas/s390/zarch-arch13.d
index 2530be6d52..fecbeb548c 100644
--- a/gas/testsuite/gas/s390/zarch-arch13.d
+++ b/gas/testsuite/gas/s390/zarch-arch13.d
@@ -61,27 +61,27 @@ Disassembly of section .text:
 .*:	b9 e3 bd 69 [	 ]*selgrnh	%r6,%r9,%r11
 .*:	b9 e3 bd 69 [	 ]*selgrnh	%r6,%r9,%r11
 .*:	b9 e3 be 69 [	 ]*selgrno	%r6,%r9,%r11
-.*:	b9 c0 bd 69 [	 ]*selhhhrnh	%r6,%r9,%r11
-.*:	b9 c0 b1 69 [	 ]*selhhhro	%r6,%r9,%r11
-.*:	b9 c0 b2 69 [	 ]*selhhhrh	%r6,%r9,%r11
-.*:	b9 c0 b2 69 [	 ]*selhhhrh	%r6,%r9,%r11
-.*:	b9 c0 b3 69 [	 ]*selhhhrnle	%r6,%r9,%r11
-.*:	b9 c0 b4 69 [	 ]*selhhhrl	%r6,%r9,%r11
-.*:	b9 c0 b4 69 [	 ]*selhhhrl	%r6,%r9,%r11
-.*:	b9 c0 b5 69 [	 ]*selhhhrnhe	%r6,%r9,%r11
-.*:	b9 c0 b6 69 [	 ]*selhhhrlh	%r6,%r9,%r11
-.*:	b9 c0 b7 69 [	 ]*selhhhrne	%r6,%r9,%r11
-.*:	b9 c0 b7 69 [	 ]*selhhhrne	%r6,%r9,%r11
-.*:	b9 c0 b8 69 [	 ]*selhhhre	%r6,%r9,%r11
-.*:	b9 c0 b8 69 [	 ]*selhhhre	%r6,%r9,%r11
-.*:	b9 c0 b9 69 [	 ]*selhhhrnlh	%r6,%r9,%r11
-.*:	b9 c0 ba 69 [	 ]*selhhhrhe	%r6,%r9,%r11
-.*:	b9 c0 bb 69 [	 ]*selhhhrnl	%r6,%r9,%r11
-.*:	b9 c0 bb 69 [	 ]*selhhhrnl	%r6,%r9,%r11
-.*:	b9 c0 bc 69 [	 ]*selhhhrle	%r6,%r9,%r11
-.*:	b9 c0 bd 69 [	 ]*selhhhrnh	%r6,%r9,%r11
-.*:	b9 c0 bd 69 [	 ]*selhhhrnh	%r6,%r9,%r11
-.*:	b9 c0 be 69 [	 ]*selhhhrno	%r6,%r9,%r11
+.*:	b9 c0 bd 69 [	 ]*selfhrnh	%r6,%r9,%r11
+.*:	b9 c0 b1 69 [	 ]*selfhro	%r6,%r9,%r11
+.*:	b9 c0 b2 69 [	 ]*selfhrh	%r6,%r9,%r11
+.*:	b9 c0 b2 69 [	 ]*selfhrh	%r6,%r9,%r11
+.*:	b9 c0 b3 69 [	 ]*selfhrnle	%r6,%r9,%r11
+.*:	b9 c0 b4 69 [	 ]*selfhrl	%r6,%r9,%r11
+.*:	b9 c0 b4 69 [	 ]*selfhrl	%r6,%r9,%r11
+.*:	b9 c0 b5 69 [	 ]*selfhrnhe	%r6,%r9,%r11
+.*:	b9 c0 b6 69 [	 ]*selfhrlh	%r6,%r9,%r11
+.*:	b9 c0 b7 69 [	 ]*selfhrne	%r6,%r9,%r11
+.*:	b9 c0 b7 69 [	 ]*selfhrne	%r6,%r9,%r11
+.*:	b9 c0 b8 69 [	 ]*selfhre	%r6,%r9,%r11
+.*:	b9 c0 b8 69 [	 ]*selfhre	%r6,%r9,%r11
+.*:	b9 c0 b9 69 [	 ]*selfhrnlh	%r6,%r9,%r11
+.*:	b9 c0 ba 69 [	 ]*selfhrhe	%r6,%r9,%r11
+.*:	b9 c0 bb 69 [	 ]*selfhrnl	%r6,%r9,%r11
+.*:	b9 c0 bb 69 [	 ]*selfhrnl	%r6,%r9,%r11
+.*:	b9 c0 bc 69 [	 ]*selfhrle	%r6,%r9,%r11
+.*:	b9 c0 bd 69 [	 ]*selfhrnh	%r6,%r9,%r11
+.*:	b9 c0 bd 69 [	 ]*selfhrnh	%r6,%r9,%r11
+.*:	b9 c0 be 69 [	 ]*selfhrno	%r6,%r9,%r11
 .*:	e6 f6 9f a0 d0 06 [	 ]*vlbr	%v15,4000\(%r6,%r9\),13
 .*:	e6 f6 9f a0 10 06 [	 ]*vlbrh	%v15,4000\(%r6,%r9\)
 .*:	e6 f6 9f a0 20 06 [	 ]*vlbrf	%v15,4000\(%r6,%r9\)
@@ -130,11 +130,8 @@ Disassembly of section .text:
 .*:	e7 f1 42 00 87 8b [	 ]*vstrsf	%v15,%v17,%v20,%v24
 .*:	e7 f1 42 d0 87 8b [	 ]*vstrsf	%v15,%v17,%v20,%v24,13
 .*:	e7 f1 40 20 87 8b [	 ]*vstrszb	%v15,%v17,%v20,%v24
-.*:	e7 f1 40 f0 87 8b [	 ]*vstrszb	%v15,%v17,%v20,%v24,13
 .*:	e7 f1 41 20 87 8b [	 ]*vstrszh	%v15,%v17,%v20,%v24
-.*:	e7 f1 41 f0 87 8b [	 ]*vstrszh	%v15,%v17,%v20,%v24,13
 .*:	e7 f1 42 20 87 8b [	 ]*vstrszf	%v15,%v17,%v20,%v24
-.*:	e7 f1 42 f0 87 8b [	 ]*vstrszf	%v15,%v17,%v20,%v24,13
 .*:	e7 f1 00 bc d4 c3 [	 ]*vcfps	%v15,%v17,13,12,11
 .*:	e7 f1 00 cd 24 c3 [	 ]*wcefb	%v15,%v17,5,12
 .*:	e7 f1 00 cd 24 c3 [	 ]*wcefb	%v15,%v17,5,12
@@ -154,3 +151,4 @@ Disassembly of section .text:
 .*:	e6 6f 00 d0 00 52 [	 ]*vcvbg	%r6,%v15,13
 .*:	e6 6f 00 dc 00 52 [	 ]*vcvbg	%r6,%v15,13,12
 .*:	b9 3a 00 69 [	 ]*kdsa	%r6,%r9
+.*:	07 07 [	 ]*nopr	%r7
diff --git a/gas/testsuite/gas/s390/zarch-arch13.s b/gas/testsuite/gas/s390/zarch-arch13.s
index 2dbbafb663..9563a1b469 100644
--- a/gas/testsuite/gas/s390/zarch-arch13.s
+++ b/gas/testsuite/gas/s390/zarch-arch13.s
@@ -55,27 +55,27 @@ foo:
 	selgrnh	%r6,%r9,%r11
 	selgrnp	%r6,%r9,%r11
 	selgrno	%r6,%r9,%r11
-	selhhhr	%r6,%r9,%r11,13
-	selhhhro	%r6,%r9,%r11
-	selhhhrh	%r6,%r9,%r11
-	selhhhrp	%r6,%r9,%r11
-	selhhhrnle	%r6,%r9,%r11
-	selhhhrl	%r6,%r9,%r11
-	selhhhrm	%r6,%r9,%r11
-	selhhhrnhe	%r6,%r9,%r11
-	selhhhrlh	%r6,%r9,%r11
-	selhhhrne	%r6,%r9,%r11
-	selhhhrnz	%r6,%r9,%r11
-	selhhhre	%r6,%r9,%r11
-	selhhhrz	%r6,%r9,%r11
-	selhhhrnlh	%r6,%r9,%r11
-	selhhhrhe	%r6,%r9,%r11
-	selhhhrnl	%r6,%r9,%r11
-	selhhhrnm	%r6,%r9,%r11
-	selhhhrle	%r6,%r9,%r11
-	selhhhrnh	%r6,%r9,%r11
-	selhhhrnp	%r6,%r9,%r11
-	selhhhrno	%r6,%r9,%r11
+	selfhr	%r6,%r9,%r11,13
+	selfhro	%r6,%r9,%r11
+	selfhrh	%r6,%r9,%r11
+	selfhrp	%r6,%r9,%r11
+	selfhrnle	%r6,%r9,%r11
+	selfhrl	%r6,%r9,%r11
+	selfhrm	%r6,%r9,%r11
+	selfhrnhe	%r6,%r9,%r11
+	selfhrlh	%r6,%r9,%r11
+	selfhrne	%r6,%r9,%r11
+	selfhrnz	%r6,%r9,%r11
+	selfhre	%r6,%r9,%r11
+	selfhrz	%r6,%r9,%r11
+	selfhrnlh	%r6,%r9,%r11
+	selfhrhe	%r6,%r9,%r11
+	selfhrnl	%r6,%r9,%r11
+	selfhrnm	%r6,%r9,%r11
+	selfhrle	%r6,%r9,%r11
+	selfhrnh	%r6,%r9,%r11
+	selfhrnp	%r6,%r9,%r11
+	selfhrno	%r6,%r9,%r11
 	vlbr	%v15,4000(%r6,%r9),13
 	vlbrh	%v15,4000(%r6,%r9)
 	vlbrf	%v15,4000(%r6,%r9)
@@ -124,11 +124,8 @@ foo:
 	vstrsf	%v15,%v17,%v20,%v24
 	vstrsf	%v15,%v17,%v20,%v24,13
 	vstrszb	%v15,%v17,%v20,%v24
-	vstrszb	%v15,%v17,%v20,%v24,13
 	vstrszh	%v15,%v17,%v20,%v24
-	vstrszh	%v15,%v17,%v20,%v24,13
 	vstrszf	%v15,%v17,%v20,%v24
-	vstrszf	%v15,%v17,%v20,%v24,13
 	vcfps	%v15,%v17,13,12,11
 	vcefb	%v15,%v17,13,12
 	wcefb	%v15,%v17,13,12
diff --git a/gas/testsuite/gas/visium/allinsn_gr6.d b/gas/testsuite/gas/visium/allinsn_gr6.d
index bb198eca8e..c7f627bb34 100644
--- a/gas/testsuite/gas/visium/allinsn_gr6.d
+++ b/gas/testsuite/gas/visium/allinsn_gr6.d
@@ -86,10 +86,10 @@ Disassembly of section .text:
  120:	06 a5 1a 02 	asr.w   r6,r5,0
  124:	86 a5 1a 12 	asr.w   r6,r5,1
  128:	86 a7 23 f1 	asr.b   r8,r7,31
- 12c:	0f 89 28 04 	bra     eq,r9,r10
- 130:	07 a0 00 04 	rflag   r0
- 134:	af 87 04 04 	bra     ne,r7,r1
- 138:	07 e0 ae 04 	readmda r11
+ 12c:	07 a0 00 04 	rflag   r0
+ 130:	0f 89 28 04 	bra     eq,r9,r10
+ 134:	07 e0 ae 04 	readmda r11
+ 138:	af 87 04 04 	bra     ne,r7,r1
  13c:	07 e0 b3 f4 	eamread r12,31
  140:	87 cd 30 04 	extb.l  r12,r13
  144:	87 cf 38 02 	extb.w  r14,r15
@@ -130,8 +130,8 @@ Disassembly of section .text:
  1d0:	84 a7 7f ff 	moviu   r7,0x7FFF
  1d4:	04 c6 00 01 	moviq   r6,1
  1d8:	84 47 ff ff 	subi    r7,65535
- 1dc:	ff 86 00 04 	bra     tr,r6,r0
- 1e0:	86 00 00 04 	add.l   r0,r0,r0
+ 1dc:	86 00 00 04 	add.l   r0,r0,r0
+ 1e0:	ff 86 00 04 	bra     tr,r6,r0
  1e4:	d3 e3 84 5c 	fpinst  10,f1,f3,f5
  1e8:	db e4 88 6c 	fpinst  11,f2,f4,f6
  1ec:	7b ed ac fc 	fpinst  15,f11,f13,f15
diff --git a/gas/testsuite/gas/visium/allinsn_gr6.s b/gas/testsuite/gas/visium/allinsn_gr6.s
index 32953fbfb8..11006b836b 100644
--- a/gas/testsuite/gas/visium/allinsn_gr6.s
+++ b/gas/testsuite/gas/visium/allinsn_gr6.s
@@ -93,11 +93,10 @@ sreg:
 	asr.w	r6,r5,1
 	asr.b	r8,r7,31
 
-	bra	eq,r9,r10
 	rflag	r0
-	bra	ne,r7,r1
-
+	bra	eq,r9,r10
 	eamread	r11,0
+	bra	ne,r7,r1
 	eamread	r12,31
 
 	extb.l	r12,r13
@@ -151,8 +150,8 @@ sreg:
 	moviq	r6,1
 	subi	r7,65535
 
-	bra	tr,r6,r0
 	add.l	r0,r0,r0
+	bra	tr,r6,r0
 
 
 	fpinst	10,f1,f3,f5
diff --git a/gas/testsuite/gas/visium/bra-1.d b/gas/testsuite/gas/visium/bra-1.d
new file mode 100644
index 0000000000..483b36bc8f
--- /dev/null
+++ b/gas/testsuite/gas/visium/bra-1.d
@@ -0,0 +1,12 @@
+#as: -mtune=gr6
+#objdump: -d
+#name: bra-1
+
+.*: +file format .*
+
+Disassembly of section .text:
+
+00000000 <foo>:
+	...
+   8:	ff 95 54 04 	bra     tr,r21,r21
+   c:	00 00 00 00 	nop
diff --git a/gas/testsuite/gas/visium/bra-1.s b/gas/testsuite/gas/visium/bra-1.s
new file mode 100644
index 0000000000..11544b887d
--- /dev/null
+++ b/gas/testsuite/gas/visium/bra-1.s
@@ -0,0 +1,5 @@
+        .text
+foo:
+	nop
+	bra tr,r21,r21
+	 nop
diff --git a/gas/testsuite/gas/visium/visium.exp b/gas/testsuite/gas/visium/visium.exp
index eabe1b0aa3..4c1ac2c7e7 100644
--- a/gas/testsuite/gas/visium/visium.exp
+++ b/gas/testsuite/gas/visium/visium.exp
@@ -24,6 +24,7 @@ if [istarget visium-*-*] {
     run_dump_test "allinsn_def"
     run_dump_test "allinsn_gr5"
     run_dump_test "allinsn_gr6"
+    run_dump_test "bra-1"
     run_dump_test "brr-1"
     run_dump_test "brr-2"
     run_dump_test "high-1"
diff --git a/gold/ChangeLog b/gold/ChangeLog
index 458bed793e..62a1b34ff5 100644
--- a/gold/ChangeLog
+++ b/gold/ChangeLog
@@ -1,3 +1,7 @@
+2019-02-12  Nick Clifton  <nickc@redhat.com>
+
+	* po/fr.po: Updated French translation.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release.
diff --git a/gold/po/fr.po b/gold/po/fr.po
index 9c0e2b50ce..f17af45c7a 100644
--- a/gold/po/fr.po
+++ b/gold/po/fr.po
@@ -1,18 +1,18 @@
 # Gold french translation
-# Copyright © 2015 Free Software Foundation, Inc.
+# Copyright © 2019 Free Software Foundation, Inc.
 # This file is distributed under the same license as the binutils package.
 #
-# Grégoire Scano <gregoire.scano@malloc.fr>, 2015, 2018
+# Grégoire Scano <gregoire.scano@malloc.fr>, 2015, 2018, 2019
 #
 # stub => espace d'amorçage
 # patch space => espace de retouche
 # relocation => relocalisation
 msgid ""
 msgstr ""
-"Project-Id-Version: gold 2.30.90\n"
+"Project-Id-Version: gold 2.31.90\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2018-06-24 19:43+0100\n"
-"PO-Revision-Date: 2018-07-17 18:45+0800\n"
+"POT-Creation-Date: 2019-01-19 16:33+0000\n"
+"PO-Revision-Date: 2019-02-12 09:56+0800\n"
 "Last-Translator: Grégoire Scano <gregoire.scano@malloc.fr>\n"
 "Language-Team: French <traduc@traduc.org>\n"
 "Language: fr\n"
@@ -43,27 +43,27 @@ msgstr "relocalisation dynamique "
 msgid "Invalid/unrecognized reloc reloc %d."
 msgstr "Relocalisation %d non valide ou non reconnue."
 
-#: aarch64.cc:511 arm.cc:7391 mips.cc:6681
+#: aarch64.cc:511 arm.cc:7391 mips.cc:6685
 #, c-format
 msgid "undefined or discarded local symbol %u from  object %s in GOT"
-msgstr "symbole local %u de l'objet %s dans GOT non définit ou écarté"
+msgstr "symbole local %u non-défini ou écarté depuis l'objet %s dans la GOT"
 
-#: aarch64.cc:532 arm.cc:7413 mips.cc:6700
+#: aarch64.cc:532 arm.cc:7413 mips.cc:6704
 #, c-format
 msgid "undefined or discarded symbol %s in GOT"
-msgstr "symbole %s dans GOT non définit ou écarté"
+msgstr "symbole %s non définit ou écarté dans la GOT"
 
-#: aarch64.cc:1931 arm.cc:6543 object.cc:898
+#: aarch64.cc:1931 arm.cc:6543 object.cc:900
 #, c-format
 msgid "invalid symbol table name index: %u"
 msgstr "index de nom de table de symboles invalide : %u"
 
-#: aarch64.cc:1939 arm.cc:6551 object.cc:904
+#: aarch64.cc:1939 arm.cc:6551 object.cc:906
 #, c-format
 msgid "symbol table name section has wrong type: %u"
 msgstr "la section de nom de table de symboles a un type incorrect : %u"
 
-#: aarch64.cc:3831 arm.cc:10905 mips.cc:9604 powerpc.cc:2659 target.cc:94
+#: aarch64.cc:3831 arm.cc:10905 mips.cc:9608 powerpc.cc:2762 target.cc:94
 #, c-format
 msgid "%s: unsupported ELF file type %d"
 msgstr "%s : type de fichier ELF %d non pris en charge"
@@ -81,16 +81,16 @@ msgstr "** PLT"
 #: aarch64.cc:5553
 #, c-format
 msgid "Stub is too far away, try a smaller value for '--stub-group-size'. The current value is 0x%lx."
-msgstr "L'espace d'amorçage est bien trop loin, essayez une value plus petite pour « --stub-group-size ». La valeur actuelle est 0x%lx."
+msgstr "L'espace d'amorçage est bien trop loin, essayez une valeur plus petite pour « --stub-group-size ». La valeur actuelle est 0x%lx."
 
-#: aarch64.cc:6015 arm.cc:8477 i386.cc:1772 mips.cc:12457 powerpc.cc:6422
+#: aarch64.cc:6015 arm.cc:8477 i386.cc:1772 mips.cc:12461 powerpc.cc:6525
 #: s390.cc:2180 s390.cc:2628 sparc.cc:2134 tilegx.cc:3137 tilegx.cc:3589
-#: x86_64.cc:3412 x86_64.cc:3864
+#: x86_64.cc:3429 x86_64.cc:3881
 #, c-format
 msgid "%s: unsupported reloc %u against local symbol"
-msgstr "%s : la relocalisation %u vis à vis du symbole local n'est pas prise en charge"
+msgstr "%s : la relocalisation %u vers un symbole local n'est pas prise en charge"
 
-#: aarch64.cc:6056 powerpc.cc:6527 s390.cc:2254 sparc.cc:2230
+#: aarch64.cc:6056 powerpc.cc:6630 s390.cc:2254 sparc.cc:2230
 msgid "requires unsupported dynamic reloc; recompile with -fPIC"
 msgstr "nécessite une relocalisation dynamique non prise en charge ; veuillez recompiler avec -fPIC"
 
@@ -107,27 +107,27 @@ msgstr "%s : la relocalisation %u n'est pas prise en charge pour un lien indép
 #: aarch64.cc:6287
 #, c-format
 msgid "%s: unsupported TLSLE reloc %u in shared code."
-msgstr "%s : relocalisation TLSLE %u non prise en charge dans un code partagé"
+msgstr "%s : relocalisation TLSLE %u non prise en charge dans un code partagé."
 
-#: aarch64.cc:6372 arm.cc:8885 i386.cc:2127 mips.cc:12470 powerpc.cc:7211
+#: aarch64.cc:6372 arm.cc:8885 i386.cc:2127 mips.cc:12474 powerpc.cc:7314
 #: s390.cc:3059 s390.cc:3076 sparc.cc:2572 tilegx.cc:3605 tilegx.cc:4144
-#: x86_64.cc:3880 x86_64.cc:4399
+#: x86_64.cc:3897 x86_64.cc:4416
 #, c-format
 msgid "%s: unsupported reloc %u against global symbol %s"
-msgstr "%s : la relocalisation %u vis à vis du symbole global %s n'est pas prise en charge"
+msgstr "%s : la relocalisation %u vers le symbole global %s n'est pas prise en charge"
 
 #: aarch64.cc:6711
 #, c-format
 msgid "%s: unsupported TLSLE reloc type %u in shared objects."
-msgstr "%s : le type de relocalisation %u n'est pas prise en charge pour les objets partagés"
+msgstr "%s : le type de relocalisation TLSLE %u n'est pas prise en charge pour les objets partagés"
 
 #: aarch64.cc:6756
 #, c-format
 msgid "%s: unsupported reloc type in global scan"
-msgstr "%s : type de relocalisation non prise en charge pour un balayage global"
+msgstr "%s : type de relocalisation non prise en charge lors d'un balayage global"
 
-#: aarch64.cc:6896 powerpc.cc:8195 s390.cc:4009 sparc.cc:3164 tilegx.cc:4211
-#: x86_64.cc:4464
+#: aarch64.cc:6896 powerpc.cc:8298 s390.cc:4009 sparc.cc:3164 tilegx.cc:4211
+#: x86_64.cc:4481
 #, c-format
 msgid "%s: unsupported REL reloc section"
 msgstr "%s : section de relocalisation REL non prise en charge"
@@ -137,8 +137,8 @@ msgstr "%s : section de relocalisation REL non prise en charge"
 msgid "cannot relocate %s in object file"
 msgstr "impossible de relocaliser %s dans le fichier objet"
 
-#: aarch64.cc:7332 i386.cc:2988 i386.cc:3754 mips.cc:10072 powerpc.cc:9756
-#: s390.cc:3460 sparc.cc:3695 tilegx.cc:4726 x86_64.cc:4947
+#: aarch64.cc:7332 i386.cc:2988 i386.cc:3754 mips.cc:10076 powerpc.cc:10096
+#: s390.cc:3460 sparc.cc:3695 tilegx.cc:4726 x86_64.cc:4964
 #, c-format
 msgid "unexpected reloc %u in object file"
 msgstr "relocalisation %u inattendue dans le fichier objet"
@@ -166,12 +166,12 @@ msgstr "la relaxation gd_to_ie sur %u n'est pas prise en charge"
 #: aarch64.cc:7626
 #, c-format
 msgid "%s: unsupported reloc %u in non-static TLSLE mode."
-msgstr "%s : la relocalisation %u dans un mode TLSLE non statique n'est pas prise en charge"
+msgstr "%s : la relocalisation %u n'est pas prise en charge dans un mode TLSLE non statique"
 
 #: aarch64.cc:7711
 #, c-format
 msgid "%s: unsupported TLS reloc %u."
-msgstr "%s : la relocalisation %u n'est pas prise en charge"
+msgstr "%s : la relocalisation TLS %u n'est pas prise en charge"
 
 #. Ideally we should give up gd_to_le relaxation and do gd access.
 #. However the gd_to_le relaxation decision has been made early
@@ -184,27 +184,27 @@ msgstr "%s : la relocalisation %u n'est pas prise en charge"
 #: aarch64.cc:7768 aarch64.cc:7868
 #, c-format
 msgid "unexpected reloc insn sequence while relaxing tls gd to le for reloc %u."
-msgstr "insn sequence relocalisation imprévue lors de la relaxation tls_gd_to_le pour la relocalisation %u."
+msgstr "relocalisation de séquence insn imprévue lors de la relaxation tls_gd_to_le pour la relocalisation %u."
 
 #: aarch64.cc:7943
 #, c-format
 msgid "TLS variable referred by reloc %u is too far from TP."
-msgstr "la variable TLS mentionnée par la relocalisation %u est trop loin du TP."
+msgstr "la variable TLS visée par la relocalisation %u est trop loin du TP."
 
 #: aarch64.cc:8013
 #, c-format
 msgid "TLS variable referred by reloc %u is too far from TP. We Can't do gd_to_le relaxation.\n"
-msgstr "la variable TLS mentionnée par la relocalisation %u est trop loin du TP. Impossible d'effectuer la relaxation gd_to_le.\n"
+msgstr "la variable TLS visée par la relocalisation %u est trop loin du TP. Impossible d'effectuer la relaxation gd_to_le.\n"
 
 #: aarch64.cc:8037
 #, c-format
 msgid "unsupported tlsdesc gd_to_le optimization on reloc %u"
-msgstr "optimisation tlsdesc fd_to_le sur la relocalisation %u non prise en charge"
+msgstr "optimisation tlsdesc gd_to_le sur la relocalisation %u non prise en charge"
 
 #: aarch64.cc:8109
 #, c-format
 msgid "Don't support tlsdesc gd_to_ie optimization on reloc %u"
-msgstr "Ne supporte pas l'optimisation tlsdesc gs_to_ie sur la relocalisation %u"
+msgstr "Ne prend pas en charge l'optimisation tlsdesc gs_to_ie sur la relocalisation %u"
 
 #: aarch64.cc:8444
 #, c-format
@@ -229,7 +229,7 @@ msgstr "%s : mauvais noms pour la table de symboles de l'archive"
 #: archive.cc:363
 #, c-format
 msgid "%s: malformed archive header at %zu"
-msgstr "%s : mauvais en-tête d'archive à la position %zu"
+msgstr "%s : en-tête d'archive malformé à la position %zu"
 
 #: archive.cc:383
 #, c-format
@@ -249,44 +249,49 @@ msgstr "%s : index de nom étendu incorrect à la position %zu"
 #: archive.cc:440
 #, c-format
 msgid "%s: bad extended name entry at header %zu"
-msgstr "%s : nom d'entrée étendu incorrect dans l'en-tête %zu"
+msgstr "%s : nom d'entrée étendue incorrect dans l'en-tête %zu"
 
 #: archive.cc:537
 #, c-format
 msgid "%s: short archive header at %zu"
 msgstr "%s : en-tête d'archive trop court à la position %zu"
 
-#: archive.cc:723
+#: archive.cc:727
 #, c-format
-msgid "%s: member at %zu is not an ELF object"
-msgstr "%s : le membre à la position %zu n'est pas un objet ELF"
+msgid "%s: plugin failed to claim member %s at %zu"
+msgstr "%s : le greffon n'a pas pu récupérer le membre %s à la position %zu"
 
-#: archive.cc:1084
+#: archive.cc:731
+#, c-format
+msgid "%s: member %s at %zu is not an ELF object"
+msgstr "%s : le membre %s à la position %zu n'est pas un objet ELF"
+
+#: archive.cc:1093
 #, c-format
 msgid "%s: archive libraries: %u\n"
-msgstr "%s : nombre de bibliothèques dans l'archive : %u\n"
+msgstr "%s : bibliothèques dans l'archive : %u\n"
 
-#: archive.cc:1086
+#: archive.cc:1095
 #, c-format
 msgid "%s: total archive members: %u\n"
 msgstr "%s : nombre total de membres dans l'archive : %u\n"
 
-#: archive.cc:1088
+#: archive.cc:1097
 #, c-format
 msgid "%s: loaded archive members: %u\n"
-msgstr "%s : nombre de membres de l'archive chargés : %u\n"
+msgstr "%s : membres chargés de l'archive : %u\n"
 
-#: archive.cc:1318
+#: archive.cc:1327
 #, c-format
 msgid "%s: lib groups: %u\n"
 msgstr "%s : groupes de la bibliothèque : %u\n"
 
-#: archive.cc:1320
+#: archive.cc:1329
 #, c-format
 msgid "%s: total lib groups members: %u\n"
 msgstr "%s : nombre total de membres de groupes de la bibliothèque : %u\n"
 
-#: archive.cc:1322
+#: archive.cc:1331
 #, c-format
 msgid "%s: loaded lib groups members: %u\n"
 msgstr "%s : nombre de membres de groupes de la bibliothèque chargés : %u\n"
@@ -314,7 +319,7 @@ msgstr "%s : l'instruction Thumb BLX cible la fonction thumb « %s »."
 
 #: arm.cc:4294
 msgid "conditional branch to PLT in THUMB-2 not supported yet."
-msgstr "branche conditionnelle vers PLT dans THUMB-2 non prise en charge pour le moment."
+msgstr "branche conditionnelle vers la PLT dans THUMB-2 non prise en charge pour le moment."
 
 #: arm.cc:5432
 msgid "PREL31 overflow in EXIDX_CANTUNWIND entry"
@@ -324,7 +329,7 @@ msgstr "débordement PREL31 dans l'entrée EXIDX_CANTUNWIND"
 #: arm.cc:5678
 #, c-format
 msgid "uneven .ARM.exidx section size in %s section %u"
-msgstr "la taille de la section .ARM.exidx dans la %s section %u est impaire"
+msgstr "la taille de la section .ARM.exidx est impaire dans la section %2$u de %1$s"
 
 #: arm.cc:6004
 msgid "Found non-EXIDX input sections in EXIDX output section"
@@ -382,27 +387,27 @@ msgid "requires unsupported dynamic reloc %s; recompile with -fPIC"
 msgstr "nécessite une relocalisation dynamique %s non prise en charge ; recompiler avec -fPIC"
 
 #: arm.cc:8547 i386.cc:1786 s390.cc:2271 sparc.cc:2247 tilegx.cc:3223
-#: x86_64.cc:3522
+#: x86_64.cc:3539
 #, c-format
 msgid "%s: unsupported TLS reloc %u for IFUNC symbol"
 msgstr "%s : la relocalisation TLS %u pour un symbole IFUNC n'est pas prise en charge"
 
-#: arm.cc:8643 i386.cc:1862 powerpc.cc:6801 s390.cc:2364 x86_64.cc:3620
+#: arm.cc:8643 i386.cc:1862 powerpc.cc:6904 s390.cc:2364 x86_64.cc:3637
 #, c-format
 msgid "section symbol %u has bad shndx %u"
 msgstr "le symbole de section %u a un mauvais shndx %u"
 
 #. These are relocations which should only be seen by the
 #. dynamic linker, and should never be seen here.
-#: arm.cc:8752 arm.cc:9233 i386.cc:1950 i386.cc:2436 mips.cc:11254
+#: arm.cc:8752 arm.cc:9233 i386.cc:1950 i386.cc:2436 mips.cc:11258
 #: s390.cc:2463 s390.cc:2897 sparc.cc:2553 sparc.cc:3033 tilegx.cc:3584
-#: tilegx.cc:4139 x86_64.cc:3736 x86_64.cc:4272
+#: tilegx.cc:4139 x86_64.cc:3753 x86_64.cc:4289
 #, c-format
 msgid "%s: unexpected reloc %u in object file"
 msgstr "%s : relocalisation %u inattendue dans le fichier objet"
 
-#: arm.cc:8784 i386.cc:1984 mips.cc:10703 s390.cc:2507 sparc.cc:2452
-#: tilegx.cc:3488 x86_64.cc:3768
+#: arm.cc:8784 i386.cc:1984 mips.cc:10707 s390.cc:2507 sparc.cc:2452
+#: tilegx.cc:3488 x86_64.cc:3785
 #, c-format
 msgid "local symbol %u has bad shndx %u"
 msgstr "le symbole local %u a un mauvais shndx %u"
@@ -417,10 +422,10 @@ msgid "unable to provide V4BX reloc interworking fix up; the target profile does
 msgstr "impossible de fournir une correction de relocalisation V4BX interopérable ; le profil de la cible ne prend pas en charge l'instruction BX"
 
 #: arm.cc:10247 i386.cc:3020 i386.cc:3102 i386.cc:3167 i386.cc:3203
-#: i386.cc:3275 mips.cc:12292 powerpc.cc:9807 s390.cc:3466 s390.cc:3537
+#: i386.cc:3275 mips.cc:12296 powerpc.cc:10147 s390.cc:3466 s390.cc:3537
 #: s390.cc:3574 s390.cc:3596 s390.cc:3621 sparc.cc:3701 sparc.cc:3892
-#: sparc.cc:3953 sparc.cc:4060 tilegx.cc:4732 x86_64.cc:4968 x86_64.cc:5094
-#: x86_64.cc:5166 x86_64.cc:5200
+#: sparc.cc:3953 sparc.cc:4060 tilegx.cc:4732 x86_64.cc:4985 x86_64.cc:5111
+#: x86_64.cc:5183 x86_64.cc:5217
 #, c-format
 msgid "unsupported reloc %u"
 msgstr "la relocalisation %u n'est pas prise en charge"
@@ -537,7 +542,7 @@ msgstr "** attributs"
 msgid "cannot open %s: %s:"
 msgstr "impossible d'ouvrir %s : %s :"
 
-#: common.cc:351 output.cc:2514 output.cc:2613
+#: common.cc:351 output.cc:2515 output.cc:2614
 #, c-format
 msgid "out of patch space in section %s; relink with --incremental-full"
 msgstr "à court d'espace de retouche dans la section %s ; rééditer les liens avec --incremental-full"
@@ -648,7 +653,7 @@ msgstr "l'index du nom de la table des symboles dynamiques est incorrect : %u"
 msgid "dynamic symbol table name section has wrong type: %u"
 msgstr "le type de la section de nom de table des symboles dynamiques est incorrect : %u"
 
-#: dynobj.cc:498 object.cc:737 object.cc:1597
+#: dynobj.cc:498 object.cc:737 object.cc:1599
 #, c-format
 msgid "bad section name offset for section %u: %lu"
 msgstr "l'offset du nom de section pour la section %u est incorrect : %lu"
@@ -1041,14 +1046,14 @@ msgstr "impossible d'utiliser -r avec l'objet dynamique %s"
 msgid "cannot use non-ELF output format with dynamic object %s"
 msgstr "le format de sortie ELF est obligatoire avec l'objet dynamique %s"
 
-#: gold.cc:634
+#: gold.cc:640
 #, c-format
 msgid "cannot mix split-stack '%s' and non-split-stack '%s' when using -r"
 msgstr "impossible d'utiliser split-stack « %s » et non-split-stack « %s » avec -r"
 
 #. FIXME: This needs to specify the location somehow.
-#: i386.cc:639 i386.cc:2800 sparc.cc:324 sparc.cc:3296 x86_64.cc:1072
-#: x86_64.cc:4660
+#: i386.cc:639 i386.cc:2800 sparc.cc:324 sparc.cc:3296 x86_64.cc:1073
+#: x86_64.cc:4677
 msgid "missing expected TLS relocation"
 msgstr "absence de la relocalisation TLS attendue"
 
@@ -1079,14 +1084,14 @@ msgstr "relocalisation %u imprévue vers un symbole local sans registre de base
 
 #: i386.cc:3175
 msgid "both SUN and GNU model TLS relocations"
-msgstr "SUN et GNU modèlent les relocalisations TLS"
+msgstr "SUN et GNU suivent les relocalisations TLS"
 
-#: i386.cc:3768 mips.cc:10076
+#: i386.cc:3768 mips.cc:10080
 #, c-format
 msgid "unsupported reloc %u in object file"
 msgstr "la relocalisation %u n'est pas prise en charge dans le fichier objet"
 
-#: i386.cc:4037 powerpc.cc:8149 s390.cc:4877 x86_64.cc:6005
+#: i386.cc:4037 powerpc.cc:8252 s390.cc:4877 x86_64.cc:6022
 #, c-format
 msgid "failed to match split-stack sequence at section %u offset %0zx"
 msgstr "l'association de séquence de la pile scindée (split-stack) à l'offset %2$0zx de la section %1$u a échoué"
@@ -1137,7 +1142,7 @@ msgstr "%s : fichier de script a changé"
 msgid "unsupported ELF machine number %d"
 msgstr "le numéro de machine ELF %d n'est pas pris en charge"
 
-#: incremental.cc:871 object.cc:3346
+#: incremental.cc:871 object.cc:3357
 #, c-format
 msgid "%s: incompatible target"
 msgstr "%s : cible incompatible"
@@ -1280,12 +1285,12 @@ msgstr "l'argument « %s » de --build-id n'est pas reconnu"
 msgid "load segment overlap [0x%llx -> 0x%llx] and [0x%llx -> 0x%llx]"
 msgstr "le segment de chargement chevauche [0x%llx -> 0x%llx] et [0x%llx -> 0x%llx]"
 
-#: layout.cc:4226 output.cc:4589
+#: layout.cc:4226 output.cc:4590
 #, c-format
 msgid "out of patch space for section %s; relink with --incremental-full"
 msgstr "à court d'espace de retouche pour la section %s ; rééditer les liens avec --incremental-full"
 
-#: layout.cc:4235 output.cc:4597
+#: layout.cc:4235 output.cc:4598
 #, c-format
 msgid "%s: section changed size; relink with --incremental-full"
 msgstr "%s : changement de taille de la section ; rééditer les liens avec --incremental-full"
@@ -1370,26 +1375,26 @@ msgstr ""
 msgid "%s: %s merged constants size: %lu; input: %zu; output: %zu\n"
 msgstr "%s : %s a fusionné la taille des constantes : %lu ; entrée : %zu ; sortie : %zu\n"
 
-#: merge.cc:453
+#: merge.cc:455
 msgid "mergeable string section length not multiple of character size"
 msgstr "la longueur de la section des chaînes fusionnables n'est pas un multiple de la taille d'un caractère"
 
-#: merge.cc:462
+#: merge.cc:464
 #, c-format
 msgid "%s: last entry in mergeable string section '%s' not null terminated"
 msgstr "%s : la dernière entrée de la section des chaînes fusionnables « %s » ne termine pas par le caractère nul"
 
-#: merge.cc:526
+#: merge.cc:528
 #, c-format
 msgid "%s: section %s contains incorrectly aligned strings; the alignment of those strings won't be preserved"
 msgstr "%s : la section %s contient des chaînes de caractères incorrectement alignées ; leur alignement ne sera pas préservé"
 
-#: merge.cc:653
+#: merge.cc:655
 #, c-format
 msgid "%s: %s input bytes: %zu\n"
 msgstr "%s : %s octets en entrée : %zu\n"
 
-#: merge.cc:655
+#: merge.cc:657
 #, c-format
 msgid "%s: %s input strings: %zu\n"
 msgstr "%s : %s chaînes de caractères en entrée : %zu\n"
@@ -1422,165 +1427,165 @@ msgstr ".reginfo"
 msgid ".MIPS.abiflags"
 msgstr ".MIPS.abiflags"
 
-#: mips.cc:4628
+#: mips.cc:4632
 msgid "JALX to a non-word-aligned address"
 msgstr "JALX vers un adresse non alignée sur un mot"
 
-#: mips.cc:4682
+#: mips.cc:4686
 msgid "Unsupported jump between ISA modes; consider recompiling with interlinking enabled."
 msgstr "Sauts non pris en charge entre des modes ISA ; envisagez de recompiler avec l'inter-édition de liens activée."
 
-#: mips.cc:5482
+#: mips.cc:5486
 msgid "small-data section exceeds 64KB; lower small-data size limit (see option -G)"
 msgstr "la section de petites données dépasse 64Ko ; diminuez la limite de taille des petites données (voir l'option -G)"
 
-#: mips.cc:6903
+#: mips.cc:6907
 #, c-format
 msgid "%s: .MIPS.abiflags section has unsupported version %u"
 msgstr "%s : la section .MIPS.abiflags a une version %u non prise en charge"
 
-#: mips.cc:6966
+#: mips.cc:6970
 #, c-format
 msgid "%s: Warning: bad `%s' option size %u smaller than its header"
 msgstr "%s : Avertissement : l'option « %s » a une mauvaise taille %u plus petite que son en-tête"
 
-#: mips.cc:7046
+#: mips.cc:7050
 #, c-format
 msgid "no relocation found in mips16 stub section '%s'"
 msgstr "pas de relocalisations trouvées dans la section d'amorçage mips16 « %s »"
 
-#: mips.cc:7548 mips.cc:7711
+#: mips.cc:7552 mips.cc:7715
 #, c-format
 msgid ".got.plt offset of %ld from .plt beyond the range of ADDIUPC"
 msgstr "décalage de .got.plt de %ld depuis .plt hors de portée de l'intervalle de ADDIUPC"
 
-#: mips.cc:8259
+#: mips.cc:8263
 #, c-format
 msgid "Warning: bad `%s' option size %u smaller than its header in output section"
 msgstr "Avertissement : mauvaise taille %2$u pour l'option « %1$s » car plus petite que son en-tête dans la section de sortie"
 
-#: mips.cc:9099
+#: mips.cc:9103
 #, c-format
 msgid "%s: Unknown architecture %s"
 msgstr "%s : Architecture %s inconnue"
 
-#: mips.cc:9200
+#: mips.cc:9204
 #, c-format
 msgid "%s: Inconsistent ISA between e_flags and .MIPS.abiflags"
 msgstr "%s : ISA incohérent entre e_flags et .MIPS.abiflags"
 
-#: mips.cc:9204
+#: mips.cc:9208
 #, c-format
 msgid "%s: Inconsistent FP ABI between .gnu.attributes and .MIPS.abiflags"
 msgstr "%s : FP ABI incohérent entre .gnu.attributes et .MIPS.abiflags"
 
-#: mips.cc:9207
+#: mips.cc:9211
 #, c-format
 msgid "%s: Inconsistent ASEs between e_flags and .MIPS.abiflags"
 msgstr "%s : ASEs incohérents entre e_flags et .MIPS.abiflags"
 
-#: mips.cc:9213
+#: mips.cc:9217
 #, c-format
 msgid "%s: Inconsistent ISA extensions between e_flags and .MIPS.abiflags"
 msgstr "%s : extensions ISA incohérentes entre e_flags et .MIPS.abiflags"
 
-#: mips.cc:9216
+#: mips.cc:9220
 #, c-format
 msgid "%s: Unexpected flag in the flags2 field of .MIPS.abiflags (0x%x)"
 msgstr "%s : Drapeau non attendu dans le champ du drapeau flags2 de .MIPS.abiflags (0x%x)"
 
-#: mips.cc:9238
+#: mips.cc:9242
 msgid "-mips32r2 -mfp64 (12 callee-saved)"
 msgstr "-mips32r2 -mfp64 (12 appelant économisés)"
 
-#: mips.cc:9279
+#: mips.cc:9283
 #, c-format
 msgid "%s: FP ABI %s is incompatible with %s"
 msgstr "%s : FP ABI %s n'est pas compatible avec %s"
 
-#: mips.cc:9414
+#: mips.cc:9418
 #, c-format
 msgid "%s: linking abicalls files with non-abicalls files"
 msgstr "%s : éditer les liens de fichiers abicalls avec des fichiers non abicalls"
 
-#: mips.cc:9427
+#: mips.cc:9431
 #, c-format
 msgid "%s: linking 32-bit code with 64-bit code"
 msgstr "%s : édition de liens d'un code 32 bits avec un code 64 bits"
 
 #. The ISAs aren't compatible.
-#: mips.cc:9453 mips.cc:9505 mips.cc:9519
+#: mips.cc:9457 mips.cc:9509 mips.cc:9523
 #, c-format
 msgid "%s: linking %s module with previous %s modules"
 msgstr "%s : édition de liens du module %s avec les précédants %s modules"
 
-#: mips.cc:9469
+#: mips.cc:9473
 #, c-format
 msgid "%s: ABI mismatch: linking %s module with previous %s modules"
 msgstr "%s : désaccord ABI : édition de liens du module %s avec les précédants %s modules"
 
-#: mips.cc:9491
+#: mips.cc:9495
 #, c-format
 msgid "%s: ASE mismatch: linking %s module with previous %s modules"
 msgstr "%s : désaccord ASE : édition de liens du module %s avec les précédants %s modules"
 
-#: mips.cc:9532
+#: mips.cc:9536
 #, c-format
 msgid "%s: uses different e_flags (0x%x) fields than previous modules (0x%x)"
 msgstr "%s : utilise des champs de e_flags (0x%x) différents des modules précédants (0x%x)"
 
-#: mips.cc:9940
+#: mips.cc:9944
 #, c-format
 msgid "Unknown dynamic tag 0x%x"
 msgstr "Etiquette dynamique 0x%x inconnue"
 
-#: mips.cc:10381 mips.cc:12318
+#: mips.cc:10385 mips.cc:12322
 #, c-format
 msgid "relocation overflow: %u against local symbol %u in %s"
 msgstr "débordement de relocalisation : %u vers le symbole local %u dans %s"
 
-#: mips.cc:10387 mips.cc:12334
+#: mips.cc:10391 mips.cc:12338
 msgid "unexpected opcode while processing relocation"
 msgstr "code-opération (opcode) non attendu lors du traitement de la relocalisation"
 
-#: mips.cc:10535
+#: mips.cc:10539
 #, c-format
 msgid "CALL16 reloc at 0x%lx not against global symbol "
 msgstr "relocalisation CALL16 à 0x%lx ne va pas vers un symbole global"
 
-#: mips.cc:10787 mips.cc:11292
+#: mips.cc:10791 mips.cc:11296
 #, c-format
 msgid "%s: relocation %u against `%s' can not be used when making a shared object; recompile with -fPIC"
 msgstr "%s : la relocalisation %u vers « %s » ne peut pas être utilisée lors de la création d'un objet partagé ; recompilez avec -fPIC"
 
-#: mips.cc:11103
+#: mips.cc:11107
 #, c-format
 msgid "non-dynamic relocations refer to dynamic symbol %s"
 msgstr "les relocalisations non dynamiques se réfèrrent au symbole dynamique %s"
 
-#: mips.cc:11580
+#: mips.cc:11584
 msgid "relocations against _gp_disp are permitted only with R_MIPS_HI16 and R_MIPS_LO16 relocations."
 msgstr "les relocalisation vers _gp_disp ne sont permises qu'avec les relocalisations R_MIPS_HI16 et R_MIPS_LO16."
 
-#: mips.cc:11715
+#: mips.cc:11719
 msgid "MIPS16 and microMIPS functions cannot call each other"
 msgstr "les fonctions MIPS16 et microMIPS ne peuvent pas s'appeler mutuellement"
 
-#: mips.cc:12323
+#: mips.cc:12327
 #, c-format
 msgid "relocation overflow: %u against '%s' defined in %s"
 msgstr "débordement de relocalisation : %u vers « %s » définit dans %s"
 
-#: mips.cc:12329
+#: mips.cc:12333
 #, c-format
 msgid "relocation overflow: %u against '%s'"
 msgstr "débordement de relocalisation : %u vers « %s »"
 
-#: mips.cc:12338
+#: mips.cc:12342
 msgid "unaligned PC-relative relocation"
 msgstr "relocalisation relative au PC non alignée"
 
-#: nacl.cc:43 object.cc:174 object.cc:3394 output.cc:5231
+#: nacl.cc:43 object.cc:174 object.cc:3405 output.cc:5232
 #, c-format
 msgid "%s: %s"
 msgstr "%s : %s"
@@ -1604,120 +1609,120 @@ msgstr "l'index étendu du symbole %u est hors de portée : %u"
 msgid "section name section has wrong type: %u"
 msgstr "la section de nom de section est de type incorrect : %u"
 
-#: object.cc:994
+#: object.cc:996
 #, c-format
 msgid "section group %u info %u out of range"
 msgstr "l'information %u du groupe de section %u est hors limite"
 
-#: object.cc:1013
+#: object.cc:1015
 #, c-format
 msgid "symbol %u name offset %u out of range"
 msgstr "l'offset %u du nom de symbole %u est hors de portée"
 
-#: object.cc:1031
+#: object.cc:1033
 #, c-format
 msgid "symbol %u invalid section index %u"
 msgstr "l'index de section %u du symbole %u est invalide"
 
-#: object.cc:1083
+#: object.cc:1085
 #, c-format
 msgid "section %u in section group %u out of range"
 msgstr "la section %u dans le groupe de section %u est hors limite"
 
-#: object.cc:1091
+#: object.cc:1093
 #, c-format
 msgid "invalid section group %u refers to earlier section %u"
 msgstr "le groupe de section %u n'est pas correct et fait référence à la section antérieure %u"
 
-#: object.cc:1316
+#: object.cc:1318
 #, c-format
 msgid "%s: corrupt .note.gnu.property section (note too short)"
 msgstr "%s : section .note.gnu.property corrompue (note trop courte)"
 
-#: object.cc:1329
+#: object.cc:1331
 #, c-format
 msgid "%s: corrupt .note.gnu.property section (name is not 'GNU')"
 msgstr "%s : section .note.gnu.property corrompue (le nom n'est pas « GNU »)"
 
-#: object.cc:1337
+#: object.cc:1339
 #, c-format
 msgid "%s: unsupported note type %d in .note.gnu.property section"
 msgstr "%s : le type de note %d est non pris en charge dans la section .note.gnu.property"
 
-#: object.cc:1348 object.cc:1360 object.cc:1369
+#: object.cc:1350 object.cc:1362 object.cc:1371
 #, c-format
 msgid "%s: corrupt .note.gnu.property section"
 msgstr "%s : section .note.gnu.property corrompue"
 
-#: object.cc:1521 reloc.cc:290 reloc.cc:925
+#: object.cc:1523 reloc.cc:290 reloc.cc:925
 #, c-format
 msgid "relocation section %u has bad info %u"
 msgstr "la section de relocalisation %u a une mauvaise information %u"
 
-#: object.cc:1769
+#: object.cc:1775
 #, c-format
 msgid "%s: removing unused section from '%s' in file '%s'"
 msgstr "%s : suppression de la section inutilisée depuis « %s » dans le fichier « %s »"
 
-#: object.cc:1795
+#: object.cc:1801
 #, c-format
 msgid "%s: ICF folding section '%s' in file '%s' into '%s' in file '%s'"
 msgstr "%s : ICF place la section « %s » du fichier « %s » dans la section « %s » du fichier « %s »"
 
-#: object.cc:2093
+#: object.cc:2099
 msgid "size of symbols is not multiple of symbol size"
 msgstr "la taille des symboles n'est pas un multiple de la taille d'un symbole"
 
-#: object.cc:2329
+#: object.cc:2335
 #, c-format
 msgid "local symbol %u section name out of range: %u >= %u"
 msgstr "le nom de section du symbole local %u est hors limite : %u >= %u"
 
-#: object.cc:2423
+#: object.cc:2429
 #, c-format
 msgid "unknown section index %u for local symbol %u"
 msgstr "l'index de section %u n'est pas connu pour le symbole local %u"
 
-#: object.cc:2433
+#: object.cc:2439
 #, c-format
 msgid "local symbol %u section index %u out of range"
 msgstr "l'index de section %u du symbole local %u est hors de portée"
 
-#: object.cc:3101 reloc.cc:833
+#: object.cc:3110 reloc.cc:833
 #, c-format
 msgid "could not decompress section %s"
 msgstr "impossible de décompresser la section %s"
 
-#: object.cc:3225
+#: object.cc:3236
 #, c-format
 msgid "%s is not supported but is required for %s in %s"
 msgstr "%s n'est pas pris en charge mais reste nécessaire pour %s dans %s"
 
-#: object.cc:3302
+#: object.cc:3313
 msgid "function "
 msgstr "fonction"
 
-#: object.cc:3336
+#: object.cc:3347
 #, c-format
 msgid "%s: unsupported ELF machine number %d"
 msgstr "%s : numéro de machine ELF %d non pris en charge"
 
-#: object.cc:3410 plugin.cc:2265
+#: object.cc:3421 plugin.cc:2279
 #, c-format
 msgid "%s: not configured to support 32-bit big-endian object"
 msgstr "%s : non configuré pour prendre en charge les objets 32 bits gros-boutistes"
 
-#: object.cc:3426 plugin.cc:2274
+#: object.cc:3437 plugin.cc:2288
 #, c-format
 msgid "%s: not configured to support 32-bit little-endian object"
 msgstr "%s : non configuré pour prendre en charge les objets 32 bits petits-boutistes"
 
-#: object.cc:3445 plugin.cc:2286
+#: object.cc:3456 plugin.cc:2300
 #, c-format
 msgid "%s: not configured to support 64-bit big-endian object"
 msgstr "%s : non configuré pour prendre en charge les objets 64 bits gros-boutistes"
 
-#: object.cc:3461 plugin.cc:2295
+#: object.cc:3472 plugin.cc:2309
 #, c-format
 msgid "%s: not configured to support 64-bit little-endian object"
 msgstr "%s : non configuré pour prendre en charge les objets 64 bits petits-boutistes"
@@ -1999,7 +2004,7 @@ msgstr "Non pris en charge"
 msgid "Do not copy DT_NEEDED tags from shared libraries"
 msgstr "Ne pas copier l'étiquette DT_NEEDED depuis des bibliothèques partagées"
 
-#: options.h:689 options.h:1467
+#: options.h:689 options.h:1471
 msgid "Allow multiple definitions of symbols"
 msgstr "Autorise les définitions multiples de symboles"
 
@@ -2031,7 +2036,7 @@ msgstr "Utiliser DT_NEEDED seulement pour les bibliothèques partagées utilisé
 msgid "Use DT_NEEDED for all shared libraries"
 msgstr "Utiliser DT_NEEDED pour toutes les bibliothèques partagées"
 
-#: options.h:706 options.h:906 options.h:1362 options.h:1372
+#: options.h:706 options.h:906 options.h:1362 options.h:1376
 msgid "Ignored"
 msgstr "Ignoré"
 
@@ -2059,8 +2064,8 @@ msgstr "[=STYLE]"
 msgid "Chunk size for '--build-id=tree'"
 msgstr "Taille des morceaux pour « --build-id=tree »"
 
-#: options.h:727 options.h:732 options.h:1246 options.h:1255 options.h:1443
-#: options.h:1465 options.h:1498
+#: options.h:727 options.h:732 options.h:1246 options.h:1255 options.h:1447
+#: options.h:1469 options.h:1502
 msgid "SIZE"
 msgstr "TAILLE"
 
@@ -2247,7 +2252,7 @@ msgid "Export SYMBOL to dynamic symbol table"
 msgstr "Exporter SYMBOLE vers la table de symboles dynamiques"
 
 #: options.h:850 options.h:872 options.h:990 options.h:1007 options.h:1338
-#: options.h:1403 options.h:1417
+#: options.h:1407 options.h:1421
 msgid "SYMBOL"
 msgstr "SYMBOLE"
 
@@ -2564,7 +2569,7 @@ msgstr "Aligner les données sur les pages, définir le texte en lecture seule"
 msgid "Use less memory and more disk I/O (included only for compatibility with GNU ld)"
 msgstr "Utiliser moins de mémoire et plus d'entrées/sorties disque (présent uniquement pour compatibilité avec GNU ld)"
 
-#: options.h:1062 options.h:1445
+#: options.h:1062 options.h:1449
 msgid "Report undefined symbols (even with --shared)"
 msgstr "Signaler les symboles non définis (même avec --shared)"
 
@@ -2989,214 +2994,222 @@ msgid "Do not warn about duplicate common symbols"
 msgstr "Ne pas avertir des symboles communs dupliqués"
 
 #: options.h:1365
+msgid "Warn when discarding version information"
+msgstr "Avertir lorsque les informations de version sont écartés"
+
+#: options.h:1366
+msgid "Do not warn when discarding version information"
+msgstr "Ne pas avertir lorsque les informations de version sont écartés"
+
+#: options.h:1369
 msgid "Warn if the stack is executable"
 msgstr "Avertir si la pile est exécutable"
 
-#: options.h:1366
+#: options.h:1370
 msgid "Do not warn if the stack is executable"
 msgstr "Ne pas avertir si le tas est exécutable"
 
-#: options.h:1369
+#: options.h:1373
 msgid "Don't warn about mismatched input files"
 msgstr "Ne pas avertir à propos des discordances dans les fichiers d'entrée"
 
-#: options.h:1375
+#: options.h:1379
 msgid "Warn when skipping an incompatible library"
 msgstr "Avertir lorsqu'une bibliothèque incompatible est écartée"
 
-#: options.h:1376
+#: options.h:1380
 msgid "Don't warn when skipping an incompatible library"
 msgstr "Ne pas avertir lorsqu'une bibliothèque incompatible est écartée"
 
-#: options.h:1379
+#: options.h:1383
 msgid "Warn if text segment is not shareable"
 msgstr "Avertir si le segment de texte n'est pas partageable"
 
-#: options.h:1380
+#: options.h:1384
 msgid "Do not warn if text segment is not shareable"
 msgstr "Ne pas avertir si le segment de texte n'est pas partageable"
 
-#: options.h:1383
+#: options.h:1387
 msgid "Report unresolved symbols as warnings"
 msgstr "Signaler les symboles non définis comme des avertissements"
 
-#: options.h:1387
+#: options.h:1391
 msgid "Report unresolved symbols as errors"
 msgstr "Signaler les symboles non définis comme des erreurs"
 
-#: options.h:1391
+#: options.h:1395
 msgid "(ARM only) Do not warn about objects with incompatible wchar_t sizes"
 msgstr "(ARM seulement) Ne pas avertir des objets avec des tailles du type wchar_t incompatibles"
 
-#: options.h:1395
+#: options.h:1399
 msgid "Convert unresolved symbols to weak references"
 msgstr "Convertir les symboles non résolus en références faibles"
 
-#: options.h:1399
+#: options.h:1403
 msgid "Include all archive contents"
 msgstr "Inclure tout le contenu de l'archive"
 
-#: options.h:1400
+#: options.h:1404
 msgid "Include only needed archive contents"
 msgstr "Inclure uniquement le contenu utile de l'archive"
 
-#: options.h:1403
+#: options.h:1407
 msgid "Use wrapper functions for SYMBOL"
 msgstr "Encapsuler le SYMBOLE dans des fonctions"
 
-#: options.h:1408
+#: options.h:1412
 msgid "Delete all local symbols"
 msgstr "Supprimer tous les symboles locaux"
 
-#: options.h:1410
+#: options.h:1414
 msgid "Delete all temporary local symbols"
 msgstr "Supprimer tous les symboles locaux temporaires"
 
-#: options.h:1412
+#: options.h:1416
 msgid "Keep all local symbols"
 msgstr "Conserver tous les symboles locaux"
 
-#: options.h:1417
+#: options.h:1421
 msgid "Trace references to symbol"
 msgstr "Tracer les références au symbole"
 
-#: options.h:1420
+#: options.h:1424
 msgid "Allow unused version in script"
 msgstr "Autoriser les versions inutilisées dans les scripts"
 
-#: options.h:1421
+#: options.h:1425
 msgid "Do not allow unused version in script"
 msgstr "Ne pas autoriser les versions inutilisées dans les scripts"
 
-#: options.h:1424
+#: options.h:1428
 msgid "Default search path for Solaris compatibility"
 msgstr "Chemin de recherche par défaut pour la compatibilité Solaris"
 
-#: options.h:1425
+#: options.h:1429
 msgid "PATH"
 msgstr "CHEMIN"
 
-#: options.h:1430
+#: options.h:1434
 msgid "Start a library search group"
 msgstr "Démarrer un groupe de recherche de bibliothèque"
 
-#: options.h:1432
+#: options.h:1436
 msgid "End a library search group"
 msgstr "Arrêter un groupe de recherche de bibliothèque"
 
-#: options.h:1437
+#: options.h:1441
 msgid "(x86-64 only) Generate a BND PLT for Intel MPX"
 msgstr "(x86-64 seulement) Génére un BND PLT pour Intel MPX"
 
-#: options.h:1438
+#: options.h:1442
 msgid "Generate a regular PLT"
 msgstr "Générer un PLT habituel"
 
-#: options.h:1440
+#: options.h:1444
 msgid "Sort dynamic relocs"
 msgstr "Trier les relocalisations dynamiques"
 
-#: options.h:1441
+#: options.h:1445
 msgid "Do not sort dynamic relocs"
 msgstr "Ne pas trier les relocalisations dynamiques"
 
-#: options.h:1443
+#: options.h:1447
 msgid "Set common page size to SIZE"
 msgstr "Fixer la taille des pages mémoire communes à TAILLE"
 
-#: options.h:1448
+#: options.h:1452
 msgid "Mark output as requiring executable stack"
 msgstr "Marquer la sortie comme nécessitant une pile exécutable"
 
-#: options.h:1450
+#: options.h:1454
 msgid "Make symbols in DSO available for subsequently loaded objects"
 msgstr "Rendre les symboles dans le DSO disponible pour les objets chargés ultérieurement"
 
-#: options.h:1453
+#: options.h:1457
 msgid "Mark DSO to be initialized first at runtime"
 msgstr "Marquer le DSO afin qu'il soit initialisé en premier lors de l'exécution"
 
-#: options.h:1456
+#: options.h:1460
 msgid "Mark object to interpose all DSOs but executable"
 msgstr "Marquer l'objet afin qu'il interpose tous les DSO sauf l'exécutable"
 
-#: options.h:1459
+#: options.h:1463
 msgid "Mark object for lazy runtime binding"
 msgstr "Marquer l'objet pour une liaison paresseuse lors de l'exécution"
 
-#: options.h:1462
+#: options.h:1466
 msgid "Mark object requiring immediate process"
 msgstr "Marquer l'objet comme nécessitant un traitement immédiat"
 
-#: options.h:1465
+#: options.h:1469
 msgid "Set maximum page size to SIZE"
 msgstr "Fixer la taille maximale des pages à TAILLE"
 
-#: options.h:1473
+#: options.h:1477
 msgid "Do not create copy relocs"
 msgstr "Ne pas créer de copies de relocalisations"
 
-#: options.h:1475
+#: options.h:1479
 msgid "Mark object not to use default search paths"
 msgstr "Marquer l'objet comme ne devant pas utiliser les chemins de recherches par défaut"
 
-#: options.h:1478
+#: options.h:1482
 msgid "Mark DSO non-deletable at runtime"
 msgstr "Marquer le DSO comme non supprimable à l'exécution"
 
-#: options.h:1481
+#: options.h:1485
 msgid "Mark DSO not available to dlopen"
 msgstr "Marquer le DSO comme non disponible pour dlopen()"
 
-#: options.h:1484
+#: options.h:1488
 msgid "Mark DSO not available to dldump"
 msgstr "Marquer le DSO comme non disponible pour dldump()"
 
-#: options.h:1487
+#: options.h:1491
 msgid "Mark output as not requiring executable stack"
 msgstr "Marquer la sortie comme ne nécessitant pas une pile exécutable"
 
-#: options.h:1489
+#: options.h:1493
 msgid "Mark object for immediate function binding"
 msgstr "Marquer l'objet pour la liaison immédiate des fonctions"
 
-#: options.h:1492
+#: options.h:1496
 msgid "Mark DSO to indicate that needs immediate $ORIGIN processing at runtime"
 msgstr "Marquer le DSO pour indiquer qu'il nécessite un traitement immédiat de $ORIGINE à l'exécution"
 
-#: options.h:1495
+#: options.h:1499
 msgid "Where possible mark variables read-only after relocation"
 msgstr "Marquer les variables en lecture seule après relocalisation lorsque cela est possible"
 
-#: options.h:1496
+#: options.h:1500
 msgid "Don't mark variables read-only after relocation"
 msgstr "Ne pas marquer les variables en lecture seule après relocalisation"
 
-#: options.h:1498
+#: options.h:1502
 msgid "Set PT_GNU_STACK segment p_memsz to SIZE"
 msgstr "Fixe la p_memsz du segment PT_GNU_STACK à TAILLE"
 
-#: options.h:1500
+#: options.h:1504
 msgid "Do not permit relocations in read-only segments"
 msgstr "Ne pas permettre de relocalisations dans des segments en lecture seule"
 
-#: options.h:1501 options.h:1503
+#: options.h:1505 options.h:1507
 msgid "Permit relocations in read-only segments"
 msgstr "Permettre de relocalisations dans des segments en lecture seule"
 
-#: options.h:1506
+#: options.h:1510
 msgid "Move .text.unlikely sections to a separate segment."
 msgstr "Déplacer les sections .text.unlikely vers un segment séparé."
 
-#: options.h:1507
+#: options.h:1511
 msgid "Do not move .text.unlikely sections to a separate segment."
 msgstr "Ne pas déplacer les sections .text.unlikely vers un segment séparé."
 
-#: options.h:1510
+#: options.h:1514
 msgid "Keep .text.hot, .text.startup, .text.exit and .text.unlikely as separate sections in the final binary."
 msgstr "Garder .text.hot, .text.startup, .text.exit et .text.unlikely comme sections séparées dans le binaire final."
 
-#: options.h:1512
+#: options.h:1516
 msgid "Merge all .text.* prefix sections."
 msgstr "Fusionner tous les préfixes de section .text.* ."
 
@@ -3208,86 +3221,86 @@ msgstr "groupe de section retenu mais élément de groupe éliminé"
 msgid "out of patch space (GOT); relink with --incremental-full"
 msgstr "à court d'espace de retouche (GOT) ; rééditer les liens avec --incremental-full"
 
-#: output.cc:2454
+#: output.cc:2460
 #, c-format
 msgid "invalid alignment %lu for section \"%s\""
 msgstr "l'alignement %lu de la section « %s » n'est pas valide"
 
-#: output.cc:4617
+#: output.cc:4618
 msgid "script places BSS section in the middle of a LOAD segment; space will be allocated in the file"
 msgstr "le script place la section BSS au milieu d'un segment LOAD ; de l'espace sera alloué dans le fichier"
 
-#: output.cc:4639
+#: output.cc:4640
 #, c-format
 msgid "dot moves backward in linker script from 0x%llx to 0x%llx"
 msgstr "le point est déplacé en arrière dans le script de l'éditeur de liens de 0x%llx à 0x%llx"
 
-#: output.cc:4642
+#: output.cc:4643
 #, c-format
 msgid "address of section '%s' moves backward from 0x%llx to 0x%llx"
 msgstr "l'adresse de la section « %s » est déplacée en arrière de 0x%llx à 0x%llx"
 
-#: output.cc:5011
+#: output.cc:5012
 #, c-format
 msgid "%s: incremental base and output file name are the same"
 msgstr "%s : les noms des fichiers de sortie et de base incrémentale sont identiques"
 
-#: output.cc:5018
+#: output.cc:5019
 #, c-format
 msgid "%s: stat: %s"
 msgstr "%s : stat : %s"
 
-#: output.cc:5023
+#: output.cc:5024
 #, c-format
 msgid "%s: incremental base file is empty"
 msgstr "%s : le fichier incrémental de base est vide"
 
-#: output.cc:5035 output.cc:5133
+#: output.cc:5036 output.cc:5134
 #, c-format
 msgid "%s: open: %s"
 msgstr "%s : open() : %s"
 
-#: output.cc:5052
+#: output.cc:5053
 #, c-format
 msgid "%s: read failed: %s"
 msgstr "%s : échec de read() : %s"
 
-#: output.cc:5057
+#: output.cc:5058
 #, c-format
 msgid "%s: file too short: read only %lld of %lld bytes"
 msgstr "%s : fichier trop court : seulement %lld octets lus sur %lld"
 
-#: output.cc:5157
+#: output.cc:5158
 #, c-format
 msgid "%s: mremap: %s"
 msgstr "%s : mremap() : %s"
 
-#: output.cc:5176
+#: output.cc:5177
 #, c-format
 msgid "%s: mmap: %s"
 msgstr "%s : mmap() : %s"
 
-#: output.cc:5268
+#: output.cc:5269
 #, c-format
 msgid "%s: mmap: failed to allocate %lu bytes for output file: %s"
 msgstr "%s : mmap() : impossible d'allouer %lu octet(s) pour le fichier de sortie : %s"
 
-#: output.cc:5286
+#: output.cc:5287
 #, c-format
 msgid "%s: munmap: %s"
 msgstr "%s : munmap() : %s"
 
-#: output.cc:5306
+#: output.cc:5307
 #, c-format
 msgid "%s: write: unexpected 0 return-value"
 msgstr "%s : valeur de retour 0 inattendue"
 
-#: output.cc:5308
+#: output.cc:5309
 #, c-format
 msgid "%s: write: %s"
 msgstr "%s : write() : %s"
 
-#: output.cc:5323
+#: output.cc:5324
 #, c-format
 msgid "%s: close: %s"
 msgstr "%s : close() : %s"
@@ -3368,129 +3381,159 @@ msgstr "%s : impossible de charger le greffon de bibliothèque : %s"
 msgid "%s: could not find onload entry point"
 msgstr "%s : impossible de trouver le point d'entrée de chargement"
 
-#: plugin.cc:528
+#: plugin.cc:540
 #, c-format
 msgid "%s: recording to %s"
 msgstr "%s : enregistrement vers %s"
 
-#: plugin.cc:571
+#: plugin.cc:585
 #, c-format
 msgid "%s: can't open (%s)"
 msgstr "%s : impossible d'ouvrir (%s)"
 
-#: plugin.cc:577
+#: plugin.cc:591
 #, c-format
 msgid "%s: can't create (%s)"
 msgstr "%s : impossible de créer (%s)"
 
-#: plugin.cc:586
+#: plugin.cc:600
 #, c-format
 msgid "%s: write error while making copy of file (%s)"
 msgstr "%s : écrire les erreurs lors de la copie de fichiers (%s)"
 
-#: plugin.cc:1168
+#: plugin.cc:1182
 msgid "input files added by plug-ins in --incremental mode not supported yet"
 msgstr "les fichiers d'entrée ajoutés par les greffons pour le mode --incremental ne sont pas encore pris en charge"
 
-#: powerpc.cc:1188
+#: powerpc.cc:1213
 msgid "missing expected __tls_get_addr call"
 msgstr "un appel attendu à __tls_get_addr est manquant"
 
-#: powerpc.cc:2097 powerpc.cc:2363
+#: powerpc.cc:2131 powerpc.cc:2449
 #, c-format
 msgid "%s: ABI version %d is not compatible with ABI version %d output"
 msgstr "%s : la version ABI %d n'est pas compatible avec la sortie de la version ABI %d"
 
-#: powerpc.cc:2131 powerpc.cc:2405
+#: powerpc.cc:2165 powerpc.cc:2508
 #, c-format
 msgid "%s: .opd invalid in abiv%d"
 msgstr "%s : .opd invalide dans abiv%d"
 
-#: powerpc.cc:2209
+#: powerpc.cc:2243
 #, c-format
 msgid "%s: unexpected reloc type %u in .opd section"
 msgstr "%s : type relocalisation %u inattendue dans la section .opd"
 
-#: powerpc.cc:2220
+#: powerpc.cc:2254
 #, c-format
 msgid "%s: .opd is not a regular array of opd entries"
 msgstr "%s : .opd n'est pas un tableau licite d'entrées opd"
 
-#: powerpc.cc:2341
+#: powerpc.cc:2377
 #, c-format
 msgid "%s: local symbol %d has invalid st_other for ABI version 1"
 msgstr "%s : le symbole local %da un st_other invalide pour la version ABI 1"
 
-#: powerpc.cc:3016
+#: powerpc.cc:3119
 #, c-format
 msgid "%s:%s exceeds group size"
 msgstr "%s : %s dépasse la taille d'un groupe"
 
-#: powerpc.cc:3352
+#: powerpc.cc:3455
 #, c-format
 msgid "%s:%s: branch in non-executable section, no long branch stub for you"
 msgstr "%s : %s : branchement dans une section non exécutable, pas d'espace d'amorçage pour branche distante pour toi"
 
-#: powerpc.cc:3470
+#: powerpc.cc:3573
 #, c-format
 msgid "%s: stub group size is too large; retrying with %#x"
 msgstr "%s : la taille du group d'espace d'amorçage est trop grande ; nouvelle tentative avec %#x"
 
-#: powerpc.cc:5089
+#: powerpc.cc:5192
 msgid "** glink"
 msgstr "** glink"
 
-#: powerpc.cc:5324 powerpc.cc:5771
+#: powerpc.cc:5427 powerpc.cc:5874
 #, c-format
 msgid "%s: linkage table error against `%s'"
 msgstr "%s : erreur dans la table d'édition de liens vers « %s »"
 
-#: powerpc.cc:5901
+#: powerpc.cc:6004
 msgid "** save/restore"
 msgstr "** sauvegarder/restaurer"
 
-#: powerpc.cc:6610
+#: powerpc.cc:6713
 #, c-format
 msgid "%s: unsupported reloc %u for IFUNC symbol"
 msgstr "%s : relocalisation %u pour un symbole IFUNC non prise en charge"
 
-#: powerpc.cc:6849 powerpc.cc:7488
+#: powerpc.cc:6952 powerpc.cc:7591
 #, c-format
 msgid "tocsave symbol %u has bad shndx %u"
 msgstr "le symbole tocsave %u a un mauvais shndx %u"
 
-#: powerpc.cc:7111 powerpc.cc:7791
+#: powerpc.cc:7214 powerpc.cc:7894
 #, c-format
 msgid "%s: toc optimization is not supported for %#08x instruction"
 msgstr "%s : optimization toc non prise en charge pour l'instruction %#08x"
 
-#: powerpc.cc:7177 powerpc.cc:7853
+#: powerpc.cc:7280 powerpc.cc:7956
 #, c-format
 msgid "%s: unsupported -mbss-plt code"
 msgstr "%s : code -mbss-plt non pris en charge"
 
-#: powerpc.cc:8115
+#: powerpc.cc:8218
 #, c-format
 msgid "split-stack stack size overflow at section %u offset %0zx"
 msgstr "dépassement de la taille de pile de la pile scindée à l'offset %2$0zx de la section %1$u a échoué"
 
-#: powerpc.cc:8186
+#: powerpc.cc:8289
 msgid "--plt-localentry is especially dangerous without ld.so support to detect ABI violations"
 msgstr "--plt-localentry est particulièrement dangereux sans support ld.so pour détecter les violations ABI"
 
-#: powerpc.cc:8527
+#: powerpc.cc:8584 powerpc.cc:8590
+#, c-format
+msgid "%s uses hard float, %s uses soft float"
+msgstr "%s utilise des flottants matériels, %s utilise des flottants logiciels"
+
+#: powerpc.cc:8596 powerpc.cc:8603
+#, c-format
+msgid "%s uses double-precision hard float, %s uses single-precision hard float"
+msgstr "%s utilise des flotants matériels double précision, %s utilise des flottants matériels simple précision"
+
+#: powerpc.cc:8620 powerpc.cc:8626
+#, c-format
+msgid "%s uses 64-bit long double, %s uses 128-bit long double"
+msgstr "%s utilise des long double de 64 bits, %s utilise des long double de 128 bits"
+
+#: powerpc.cc:8632 powerpc.cc:8638
+#, c-format
+msgid "%s uses IBM long double, %s uses IEEE long double"
+msgstr "%s utilise des long double IBM, %s utilise des long double IEEE"
+
+#: powerpc.cc:8686 powerpc.cc:8692
+#, c-format
+msgid "%s uses AltiVec vector ABI, %s uses SPE vector ABI"
+msgstr "%s utilise des vecteurs ABI AltiVec, %s utilise des vecteurs ABI SPE"
+
+#: powerpc.cc:8721 powerpc.cc:8728
+#, c-format
+msgid "%s uses r3/r4 for small structure returns, %s uses memory"
+msgstr "%s utilise r3/r4 pour le retour de petites structures, %s utilise la mémoire"
+
+#: powerpc.cc:8867
 msgid "__tls_get_addr call lacks marker reloc"
 msgstr "appel __tls_get_add sans marqueur de relocalisation"
 
-#: powerpc.cc:8757
+#: powerpc.cc:9097
 msgid "call lacks nop, can't restore toc; recompile with -fPIC"
 msgstr "nop fait défaut lors de l'appel, impossible de restaurer la toc ; recompiler avec -fPIC"
 
-#: powerpc.cc:9838 s390.cc:3474
+#: powerpc.cc:10178 s390.cc:3474
 msgid "relocation overflow"
 msgstr "débordement de relocalisation"
 
-#: powerpc.cc:9840
+#: powerpc.cc:10180
 msgid "try relinking with a smaller --stub-group-size"
 msgstr "essayez d'éditer les liens avec un --stub-group-size plus petit"
 
@@ -3629,11 +3672,11 @@ msgstr "éditeur de liens défini"
 msgid "R_390_PC32DBL target misaligned at %llx"
 msgstr "la cible R_390_PC32DBL n'est pas bien alignée à %llx"
 
-#: s390.cc:1094 tilegx.cc:2088 x86_64.cc:1762
+#: s390.cc:1094 tilegx.cc:2088 x86_64.cc:1779
 msgid "out of patch space (PLT); relink with --incremental-full"
 msgstr "à court d'espace de retouche (PLT) ; rééditer les liens avec --incremental-full"
 
-#: s390.cc:3672 s390.cc:3728 x86_64.cc:5288
+#: s390.cc:3672 s390.cc:3728 x86_64.cc:5305
 #, c-format
 msgid "unsupported reloc type %u"
 msgstr "le type de relocalisation %u n'est pas pris en charge"
@@ -3999,27 +4042,27 @@ msgstr "versym hors de portée pour le symbole %zu : %u"
 msgid "versym for symbol %zu has no name: %u"
 msgstr "versym sans nom pour le symbole %zu : %u"
 
-#: symtab.cc:2623
+#: symtab.cc:2627
 #, c-format
 msgid "discarding version information for %s@%s, defined in unused shared library %s (linked with --as-needed)"
 msgstr "abandonne l'information de version pour %s@%s, définit dans la bibiliothèque partagée %s (liens édités avec --as-needed)"
 
-#: symtab.cc:2970 symtab.cc:3116
+#: symtab.cc:2974 symtab.cc:3120
 #, c-format
 msgid "%s: unsupported symbol section 0x%x"
 msgstr "%s : la section de symbole 0x%x n'est pas prise en charge"
 
-#: symtab.cc:3448
+#: symtab.cc:3452
 #, c-format
 msgid "%s: symbol table entries: %zu; buckets: %zu\n"
 msgstr "%s : entrées de la table de symboles : %zu ; groupes de blocs : %zu\n"
 
-#: symtab.cc:3451
+#: symtab.cc:3455
 #, c-format
 msgid "%s: symbol table entries: %zu\n"
 msgstr "%s : entrées de la table de symbole : %zu\n"
 
-#: symtab.cc:3608
+#: symtab.cc:3612
 #, c-format
 msgid "while linking %s: symbol '%s' defined in multiple places (possible ODR violation):"
 msgstr "lors de l'édition de liens de %s : le symbole « %s » est défini à plusieurs endroits (violation ODR possible) :"
@@ -4028,7 +4071,7 @@ msgstr "lors de l'édition de liens de %s : le symbole « %s » est défini 
 #. which may not be the location we expect to intersect
 #. with another definition.  We could print the whole
 #. set of locations, but that seems too verbose.
-#: symtab.cc:3615 symtab.cc:3618
+#: symtab.cc:3619 symtab.cc:3622
 #, c-format
 msgid "  %s from %s\n"
 msgstr "  %s depuis %s\n"
@@ -4080,7 +4123,7 @@ msgstr "la relocalisation a un mauvais offset %zu"
 msgid "linker does not include stack split support required by %s"
 msgstr "l'éditeur de liens n'inclut pas la prise en charge de la scission de pile requis par %s"
 
-#: tilegx.cc:2738 x86_64.cc:3112
+#: tilegx.cc:2738 x86_64.cc:3129
 msgid "TLS_DESC not yet supported for incremental linking"
 msgstr "TLS_DESC n'est pas encore pris en charge pour l'édition de liens incrémentale"
 
@@ -4088,10 +4131,10 @@ msgstr "TLS_DESC n'est pas encore pris en charge pour l'édition de liens incré
 msgid "TLS_DESC not yet supported for TILEGX"
 msgstr "TLS_DESC n'est pas encore pris en charge pour TILEGX"
 
-#: tilegx.cc:3202 x86_64.cc:3500
+#: tilegx.cc:3202 x86_64.cc:3517
 #, c-format
 msgid "requires unsupported dynamic reloc %u; recompile with -fPIC"
-msgstr "nécessite une relocalisation dynamique %u non prise en charge ; veuillez recompiler avec -fPIC"
+msgstr "nécessite une relocalisation %u dynamique non prise en charge ; veuillez recompiler avec -fPIC"
 
 #: tls.h:59
 msgid "TLS relocation out of range"
@@ -4104,8 +4147,8 @@ msgstr "relocalisation TLS pour une instruction invalide"
 #. This output is intended to follow the GNU standards.
 #: version.cc:65
 #, c-format
-msgid "Copyright (C) 2018 Free Software Foundation, Inc.\n"
-msgstr "Copyright (C) 2018 Free Software Foundation, Inc.\n"
+msgid "Copyright (C) 2019 Free Software Foundation, Inc.\n"
+msgstr "Copyright (C) 2019 Free Software Foundation, Inc.\n"
 
 #: version.cc:66
 #, c-format
@@ -4124,46 +4167,46 @@ msgstr ""
 msgid "%s failed: %s"
 msgstr "%s() a échoué : %s"
 
-#: x86_64.cc:1595
+#: x86_64.cc:1602
 #, c-format
 msgid "%s: corrupt .note.gnu.property section (pr_datasz for property %d is not 4)"
 msgstr "%s : section .note.gnu.property corrompue (pr_datasz pour la propriété %d n'est pas 4)"
 
-#: x86_64.cc:1603
+#: x86_64.cc:1610
 #, c-format
 msgid "%s: unknown program property type 0x%x in .note.gnu.property section"
 msgstr "%s : le type de propriété du programme 0x%x est inconnu dans la section .note.gnu.property"
 
-#: x86_64.cc:1995
+#: x86_64.cc:2012
 #, c-format
 msgid "PC-relative offset overflow in PLT entry %d"
 msgstr "débordement du décalage relatif au PC dans l'entrée PLT %d"
 
-#: x86_64.cc:2177 x86_64.cc:2411
+#: x86_64.cc:2194 x86_64.cc:2428
 #, c-format
 msgid "PC-relative offset overflow in APLT entry %d"
 msgstr "débordement du décalage relatif au PC dans l'entrée APLT %d"
 
-#: x86_64.cc:3465
+#: x86_64.cc:3482
 msgid "requires dynamic R_X86_64_32 reloc which may overflow at runtime; recompile with -fPIC"
-msgstr "nécessite une relocalisation dynamique R_X86_64_32 pouvant déborder à l'exécution ; veuillez recompiler avec -fPIC"
+msgstr "nécessite une relocalisation R_X86_64_32 dynamique pouvant déborder à l'exécution ; veuillez recompiler avec -fPIC"
 
-#: x86_64.cc:3485
+#: x86_64.cc:3502
 #, c-format
 msgid "requires dynamic %s reloc against '%s' which may overflow at runtime; recompile with -fPIC"
-msgstr "nécessite une relocalisation dynamique %s vers « %s » pouvant déborder à l'exécution ; recompiler avec -fPIC"
+msgstr "nécessite une relocalisation %s dynamique vers « %s » pouvant déborder à l'exécution ; recompiler avec -fPIC"
 
-#: x86_64.cc:4979
+#: x86_64.cc:4996
 #, c-format
 msgid "relocation overflow: reference to local symbol %u in %s"
 msgstr "débordement de relocalisation : référence au symbole local %u dans %s"
 
-#: x86_64.cc:4986
+#: x86_64.cc:5003
 #, c-format
 msgid "relocation overflow: reference to '%s' defined in %s"
 msgstr "débordement de relocalisation : la référence à  « %s » est définie dans %s"
 
-#: x86_64.cc:4994
+#: x86_64.cc:5011
 #, c-format
 msgid "relocation overflow: reference to '%s'"
 msgstr "débordement de relocalisation : référence à « %s »"
diff --git a/gprof/ChangeLog b/gprof/ChangeLog
index efb5f144a9..4e46f4a066 100644
--- a/gprof/ChangeLog
+++ b/gprof/ChangeLog
@@ -1,3 +1,7 @@
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* configure: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/gprof/configure b/gprof/configure
index f0de0966b5..161ede8f80 100755
--- a/gprof/configure
+++ b/gprof/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for gprof 2.32.
+# Generated by GNU Autoconf 2.69 for gprof 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='gprof'
 PACKAGE_TARNAME='gprof'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='gprof 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='gprof 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1337,7 +1337,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures gprof 2.32 to adapt to many kinds of systems.
+\`configure' configures gprof 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1408,7 +1408,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of gprof 2.32:";;
+     short | recursive ) echo "Configuration of gprof 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1519,7 +1519,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-gprof configure 2.32
+gprof configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -1884,7 +1884,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by gprof $as_me 2.32, which was
+It was created by gprof $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -3831,7 +3831,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='gprof'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -13086,7 +13086,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by gprof $as_me 2.32, which was
+This file was extended by gprof $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -13152,7 +13152,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-gprof config.status 2.32
+gprof config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/include/ChangeLog b/include/ChangeLog
index a5ca6d048e..0e1d7d433d 100644
--- a/include/ChangeLog
+++ b/include/ChangeLog
@@ -1,3 +1,25 @@
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline.
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* elf/aarch64.h (DT_AARCH64_VARIANT_PCS): Define.
+	(STO_AARCH64_VARIANT_PCS): Define.
+
+2019-04-16  Sudakshina Das  <sudi.das@arm.com>
+
+	Backport from mainline.
+	2019-04-11  Sudakshina Das  <sudi.das@arm.com>
+
+	* opcode/aarch64.h (enum aarch64_opnd): Add AARCH64_OPND_Rt_SP.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* dis-asm.h (struct disassemble_info): Add stop_offset.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release.
diff --git a/include/dis-asm.h b/include/dis-asm.h
index 22c593ece6..4e1263c90e 100644
--- a/include/dis-asm.h
+++ b/include/dis-asm.h
@@ -221,6 +221,12 @@ typedef struct disassemble_info
      file being disassembled.  */
   bfd_vma stop_vma;
 
+  /* The end range of the current range being disassembled.  This is required
+     in order to notify the disassembler when it's currently handling a
+     different range than it was before.  This prevent unsafe optimizations when
+     disassembling such as the way mapping symbols are found on AArch64.  */
+  bfd_vma stop_offset;
+
 } disassemble_info;
 
 /* This struct is used to pass information about valid disassembler
diff --git a/include/elf/aarch64.h b/include/elf/aarch64.h
index 3133ea6f66..841d8479cf 100644
--- a/include/elf/aarch64.h
+++ b/include/elf/aarch64.h
@@ -35,6 +35,12 @@
 						entry point.  */
 #define SHF_COMDEF		0x80000000   /* Section may be multiply defined
 						in the input to a link step.  */
+/* Processor specific dynamic array tags.  */
+#define DT_AARCH64_VARIANT_PCS	(DT_LOPROC + 5)
+
+/* AArch64-specific values for st_other.  */
+#define STO_AARCH64_VARIANT_PCS	0x80  /* Symbol may follow different call
+					 convention from the base PCS.  */
 
 /* Relocation types.  */
 
diff --git a/include/opcode/aarch64.h b/include/opcode/aarch64.h
index 0c0234ab20..5dc5fb750a 100644
--- a/include/opcode/aarch64.h
+++ b/include/opcode/aarch64.h
@@ -184,6 +184,7 @@ enum aarch64_opnd
   AARCH64_OPND_Rm,	/* Integer register as source.  */
   AARCH64_OPND_Rt,	/* Integer register used in ld/st instructions.  */
   AARCH64_OPND_Rt2,	/* Integer register used in ld/st pair instructions.  */
+  AARCH64_OPND_Rt_SP,	/* Integer Rt or SP used in STG instructions.  */
   AARCH64_OPND_Rs,	/* Integer register used in ld/st exclusive.  */
   AARCH64_OPND_Ra,	/* Integer register used in ddp_3src instructions.  */
   AARCH64_OPND_Rt_SYS,	/* Integer register used in system instructions.  */
diff --git a/ld/ChangeLog b/ld/ChangeLog
index 84673af576..0704764dd2 100644
--- a/ld/ChangeLog
+++ b/ld/ChangeLog
@@ -1,3 +1,124 @@
+2019-07-25  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
+
+	Backport from mainline
+	2019-07-22  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
+
+	* testsuite/ld-arm/cmse_main_sec_debug.d: Modify regexps to
+	allow for output from an arm-none-linux-gnueabihf target.
+
+2019-07-05  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	Backport from mainline.
+	2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* testsuite/ld-aarch64/aarch64-elf.exp: Add new tests.
+	* testsuite/ld-aarch64/variant_pcs-1.s: New asm for tests.
+	* testsuite/ld-aarch64/variant_pcs-2.s: New asm for tests.
+	* testsuite/ld-aarch64/variant_pcs-now.d: New test.
+	* testsuite/ld-aarch64/variant_pcs-r.d: New test.
+	* testsuite/ld-aarch64/variant_pcs-shared.d: New test.
+	* testsuite/ld-aarch64/variant_pcs.ld: New linker script for tests.
+
+	2019-05-28  Szabolcs Nagy  <szabolcs.nagy@arm.com>
+
+	* testsuite/ld-aarch64/variant_pcs-now.d: Use --hash-style=sysv.
+	* testsuite/ld-aarch64/variant_pcs-shared.d: Likewise.
+
+2019-07-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>
+
+	* testsuite/ld-arm/arm-elf.exp: Add tests.
+	* testsuite/ld-arm/cmse_main.s: New test.
+	* testsuite/ld-arm/cmse_main_sec_debug.d: Likewise.
+	* testsuite/ld-arm/cmse_sec_debug.s: Likewise.
+
+2019-06-24  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24721
+	* testsuite/ld-x86-64/x86-64.exp: Run PR ld/24721 tests.
+	* testsuite/ld-x86-64/pr24721-x32.d: New file.
+	* testsuite/ld-x86-64/pr24721.d: Likewise.
+	* testsuite/ld-x86-64/pr24721.map: Likewise.
+	* testsuite/ld-x86-64/pr24721a.s: Likewise.
+	* testsuite/ld-x86-64/pr24721b.s: Likewise.
+
+2019-05-17  Alan Modra  <amodra@gmail.com>
+
+	PR 24567
+	* plugin.c (plugin_notice): Do not let a common symbol override
+	a non-common definition in IR.
+
+2019-04-18  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-04-11  Tamar Christina  <tamar.christina@arm.com>
+
+	PR ld/24302
+	* testsuite/ld-aarch64/aarch64-elf.exp: Add new test.
+	* testsuite/ld-aarch64/tls-relax-gdesc-le-now.d: New test.
+
+
+2019-04-17  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24458
+	* testsuite/ld-x86-64/x86-64.exp: Run PR ld/24458 tests.
+	* testsuite/ld-x86-64/pr24458.s: New file.
+	* testsuite/ld-x86-64/pr24458a-x32.d: Likewise.
+	* testsuite/ld-x86-64/pr24458a.d: Likewise.
+	* testsuite/ld-x86-64/pr24458b-x32.d: Likewise.
+	* testsuite/ld-x86-64/pr24458b.d: Likewise.
+	* testsuite/ld-x86-64/pr24458c-x32.d: Likewise.
+	* testsuite/ld-x86-64/pr24458c.d: Likewise.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	* testsuite/ld-arm/jump-reloc-veneers-cond-long.d: Update disassembly.
+	* testsuite/ld-arm/jump-reloc-veneers-long.d: Update disassembly.
+
+2019-02-09  Vineet Gupta  <vgupta@synopsys.com>
+
+	* emultempl/arclinux.em: Delete special INIT/FINI handling.
+
+2019-03-01  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	Backport from mainline
+	This reverts commit 5a12586d44fa8d5dfc74cbca4f2f36a273a16335.
+	2019-01-14  Maamoun Tarsha  <maamountk@hotmail.com>
+
+	PR 20113
+	* emulparams/elf64_s390.sh (SEPARATE_GOTPLT): Define.
+	* emulparams/elf_s390.sh (SEPARATE_GOTPLT): Define.
+	* testsuite/ld-s390/gotreloc_31-1.dd: Update expected output.
+	* testsuite/ld-s390/tlsbin.dd: Likewise.
+	* testsuite/ld-s390/tlsbin.rd: Likewise.
+	* testsuite/ld-s390/tlsbin.sd: Likewise.
+	* testsuite/ld-s390/tlsbin_64.dd: Likewise.
+	* testsuite/ld-s390/tlsbin_64.rd: Likewise.
+	* testsuite/ld-s390/tlsbin_64.sd: Likewise.
+	* testsuite/ld-s390/tlspic.dd: Likewise.
+	* testsuite/ld-s390/tlspic.rd: Likewise.
+	* testsuite/ld-s390/tlspic.sd: Likewise.
+	* testsuite/ld-s390/tlspic_64.dd: Likewise.
+	* testsuite/ld-s390/tlspic_64.rd: Likewise.
+	* testsuite/ld-s390/tlspic_64.sd: Likewise.
+	* testsuite/ld-s390/s390.exp: Skip s390 tests for tpf targets.
+
+2019-02-12  Nick Clifton  <nickc@redhat.com>
+
+	* po/fr.po: Updated French translation.
+
+2019-02-10  H.J. Lu  <hongjiu.lu@intel.com>
+
+	PR ld/24151
+	* testsuite/ld-x86-64/pr24151a-x32.d: New file.
+	* testsuite/ld-x86-64/pr24151a.d: Likewise.
+	* testsuite/ld-x86-64/pr24151a.s: Likewise.
+	* testsuite/ld-x86-64/x86-64.exp: Run pr24151a and pr24151a-x32.
+
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* configure: Regenerate.
+	* po/ld.pot: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/ld/configure b/ld/configure
index 98a9dfaa33..4f0b75a0d8 100755
--- a/ld/configure
+++ b/ld/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for ld 2.32.
+# Generated by GNU Autoconf 2.69 for ld 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='ld'
 PACKAGE_TARNAME='ld'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='ld 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='ld 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1389,7 +1389,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures ld 2.32 to adapt to many kinds of systems.
+\`configure' configures ld 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1460,7 +1460,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of ld 2.32:";;
+     short | recursive ) echo "Configuration of ld 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1595,7 +1595,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-ld configure 2.32
+ld configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -2310,7 +2310,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by ld $as_me 2.32, which was
+It was created by ld $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -4261,7 +4261,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='ld'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -18221,7 +18221,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by ld $as_me 2.32, which was
+This file was extended by ld $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -18287,7 +18287,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-ld config.status 2.32
+ld config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/ld/emulparams/elf64_s390.sh b/ld/emulparams/elf64_s390.sh
index e0239bebf7..8d02042856 100644
--- a/ld/emulparams/elf64_s390.sh
+++ b/ld/emulparams/elf64_s390.sh
@@ -14,7 +14,6 @@ GENERATE_PIE_SCRIPT=yes
 GENERATE_RELRO_SCRIPT=yes
 NO_SMALL_DATA=yes
 EXTRA_EM_FILE=s390
-SEPARATE_GOTPLT=24
 IREL_IN_PLT=
 SEPARATE_GOTPLT=0
 test -z "$RELRO" && unset SEPARATE_GOTPLT
diff --git a/ld/emulparams/elf_s390.sh b/ld/emulparams/elf_s390.sh
index 39c746c866..f2286ecc16 100644
--- a/ld/emulparams/elf_s390.sh
+++ b/ld/emulparams/elf_s390.sh
@@ -11,5 +11,4 @@ TEMPLATE_NAME=elf32
 GENERATE_SHLIB_SCRIPT=yes
 GENERATE_PIE_SCRIPT=yes
 NO_SMALL_DATA=yes
-SEPARATE_GOTPLT=12
 IREL_IN_PLT=
diff --git a/ld/emultempl/arclinux.em b/ld/emultempl/arclinux.em
index 3163712fbd..48b6a616db 100644
--- a/ld/emultempl/arclinux.em
+++ b/ld/emultempl/arclinux.em
@@ -1,7 +1,7 @@
 # This shell script emits a C file. -*- C -*-
 # Copyright (C) 2007-2019 Free Software Foundation, Inc.
 #
-# Copyright 2008-2012 Synopsys Inc.
+# Copyright 2008-2019 Synopsys Inc.
 #
 # This file is part of GLD, the Gnu Linker.
 #
@@ -23,30 +23,3 @@
 # This file is sourced from elf32.em, and defines extra arc-linux
 # specific routines.
 #
-cat >>e${EMULATION_NAME}.c <<EOF
-extern char * init_str;
-extern char * fini_str;
-EOF
-
-PARSE_AND_LIST_PROLOGUE='
-#define OPTION_INIT 300+1
-#define OPTION_FINI (OPTION_INIT+1)
-'
-PARSE_AND_LIST_LONGOPTS='
-  /* PE options */
-  { "init", required_argument, NULL, OPTION_INIT },
-  { "fini", required_argument, NULL, OPTION_FINI },
-'
-
-# FIXME: Should set PARSE_AND_LIST_OPTIONS to provide a short description
-# of the options.
-
-PARSE_AND_LIST_ARGS_CASES='
-    case OPTION_FINI:
-      fini_str = optarg;
-      break;
-
-    case OPTION_INIT:
-      init_str = optarg;
-      break;
-'
diff --git a/ld/plugin.c b/ld/plugin.c
index ea1a7f7064..e4e781c2a8 100644
--- a/ld/plugin.c
+++ b/ld/plugin.c
@@ -1316,30 +1316,36 @@ plugin_notice (struct bfd_link_info *info,
 	  ref = TRUE;
 	}
 
-      /* Otherwise, it must be a new def.  */
-      else
+
+      /* A common symbol should be merged with other commons or
+	 defs with the same name.  In particular, a common ought
+	 to be overridden by a def in a -flto object.  In that
+	 sense a common is also a ref.  */
+      else if (bfd_is_com_section (section))
 	{
-	  /* Ensure any symbol defined in an IR dummy BFD takes on a
-	     new value from a real BFD.  Weak symbols are not normally
-	     overridden by a new weak definition, and strong symbols
-	     will normally cause multiple definition errors.  Avoid
-	     this by making the symbol appear to be undefined.  */
-	  if (((h->type == bfd_link_hash_defweak
-		|| h->type == bfd_link_hash_defined)
-	       && is_ir_dummy_bfd (sym_bfd = h->u.def.section->owner))
-	      || (h->type == bfd_link_hash_common
-		  && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner)))
+	  if (h->type == bfd_link_hash_common
+	      && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner))
 	    {
 	      h->type = bfd_link_hash_undefweak;
 	      h->u.undef.abfd = sym_bfd;
 	    }
+	  ref = TRUE;
+	}
 
-	  /* A common symbol should be merged with other commons or
-	     defs with the same name.  In particular, a common ought
-	     to be overridden by a def in a -flto object.  In that
-	     sense a common is also a ref.  */
-	  if (bfd_is_com_section (section))
-	    ref = TRUE;
+      /* Otherwise, it must be a new def.
+	 Ensure any symbol defined in an IR dummy BFD takes on a
+	 new value from a real BFD.  Weak symbols are not normally
+	 overridden by a new weak definition, and strong symbols
+	 will normally cause multiple definition errors.  Avoid
+	 this by making the symbol appear to be undefined.  */
+      else if (((h->type == bfd_link_hash_defweak
+		 || h->type == bfd_link_hash_defined)
+		&& is_ir_dummy_bfd (sym_bfd = h->u.def.section->owner))
+	       || (h->type == bfd_link_hash_common
+		   && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner)))
+	{
+	  h->type = bfd_link_hash_undefweak;
+	  h->u.undef.abfd = sym_bfd;
 	}
 
       if (ref)
diff --git a/ld/po/fr.po b/ld/po/fr.po
index bebaccec1d..c8c0b148fa 100644
--- a/ld/po/fr.po
+++ b/ld/po/fr.po
@@ -1,15 +1,15 @@
 # Messages français pour ld.
-# Copyright © 2004, 2015 Free Software Foundation, Inc.
+# Copyright © 2019 Free Software Foundation, Inc.
 # This file is distributed under the same license as the binutils package.
 # Michel Robitaille <robitail@IRO.UMontreal.CA>, 1996-2011
-# Grégoire Scano <gregoire.scano@malloc.fr>, 2011-2012, 2015, 2018
+# Grégoire Scano <gregoire.scano@malloc.fr>, 2011-2012, 2015, 2018-2019
 #
 msgid ""
 msgstr ""
-"Project-Id-Version: ld 2.30.90\n"
+"Project-Id-Version: ld 2.31.90\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2018-06-24 19:43+0100\n"
-"PO-Revision-Date: 2018-11-09 12:10+0800\n"
+"POT-Creation-Date: 2019-01-19 16:38+0000\n"
+"PO-Revision-Date: 2019-02-12 10:23+0800\n"
 "Last-Translator: Grégoire Scano <gregoire.scano@malloc.fr>\n"
 "Language-Team: French <traduc@traduc.org>\n"
 "Language: fr\n"
@@ -60,7 +60,7 @@ msgstr "Aucun symbol\n"
 msgid "%P: symbol `%pT' missing from main hash table\n"
 msgstr "%P : symbole « %pT » manquant dans la table de hachage principale\n"
 
-#: ldcref.c:517 ldcref.c:628 ldmain.c:1211 ldmisc.c:335 pe-dll.c:715
+#: ldcref.c:517 ldcref.c:628 ldmain.c:1223 ldmisc.c:335 pe-dll.c:715
 #: pe-dll.c:1296 pe-dll.c:1417 pe-dll.c:1535 earm_wince_pe.c:1430
 #: earm_wince_pe.c:1637 earmpe.c:1430 earmpe.c:1637 ei386pe.c:1430
 #: ei386pe.c:1637 ei386pe_posix.c:1430 ei386pe_posix.c:1637 ei386pep.c:1414
@@ -69,7 +69,7 @@ msgstr "%P : symbole « %pT » manquant dans la table de hachage principale\n
 msgid "%F%P: %pB: could not read symbols: %E\n"
 msgstr "%B%F : %pB : impossible de lire les symboles : %E\n"
 
-#: ldcref.c:690 ldcref.c:697 ldmain.c:1273 ldmain.c:1280
+#: ldcref.c:690 ldcref.c:697 ldmain.c:1285 ldmain.c:1292
 msgid "%F%P: %pB: could not read relocs: %E\n"
 msgstr "%F%P : %pB : impossible de lire les relocalisations : %E\n"
 
@@ -142,69 +142,69 @@ msgstr "%F%P : échec de bfd_hash_allocate lors de la création du symbole %s\n
 msgid "%F%P: bfd_hash_lookup failed creating symbol %s\n"
 msgstr "%F%P : échec de bfd_hash_lookup lors de la création du symbole %s\n"
 
-#: ldexp.c:549
+#: ldexp.c:551
 msgid "%P: warning: address of `%s' isn't multiple of maximum page size\n"
 msgstr "%P : avertissement : l'adresse de «%s» n'est pas un multiple de la taille maximale des pages\n"
 
-#: ldexp.c:627
+#: ldexp.c:630
 msgid "%F%P:%pS %% by zero\n"
 msgstr "%F%P : %pS %% par zéro\n"
 
-#: ldexp.c:636
+#: ldexp.c:639
 msgid "%F%P:%pS / by zero\n"
 msgstr "%F%P : %pS : / par zéro\n"
 
-#: ldexp.c:745 ldlang.c:3411 ldmain.c:1178 earm_wince_pe.c:1765 earmpe.c:1765
+#: ldexp.c:749 ldlang.c:3610 ldmain.c:1190 earm_wince_pe.c:1765 earmpe.c:1765
 #: ei386pe.c:1765 ei386pe_posix.c:1765 ei386pep.c:1638 emcorepe.c:1765
 #: eppcpe.c:1765 eshpe.c:1765
 msgid "%F%P: bfd_link_hash_lookup failed: %E\n"
 msgstr "%F%P : bfd_link_hash_lookup en échec : %E\n"
 
-#: ldexp.c:757
+#: ldexp.c:761
 msgid "%X%P:%pS: unresolvable symbol `%s' referenced in expression\n"
 msgstr "%X%P : %pS : symbole non résolu « %s » référencé dans l'expression\n"
 
-#: ldexp.c:772
+#: ldexp.c:776
 msgid "%F%P:%pS: undefined symbol `%s' referenced in expression\n"
 msgstr "%F%P : %pS : symbole non résolu « %s » référencé dans l'expression\n"
 
-#: ldexp.c:798 ldexp.c:816 ldexp.c:844
+#: ldexp.c:802 ldexp.c:820 ldexp.c:848
 msgid "%F%P:%pS: undefined section `%s' referenced in expression\n"
 msgstr "%F%P : %pS : section non définie « %s » référencée dans l'expression\n"
 
-#: ldexp.c:876 ldexp.c:892
+#: ldexp.c:880 ldexp.c:896
 msgid "%F%P:%pS: undefined MEMORY region `%s' referenced in expression\n"
 msgstr "%F%P : %pS : région MÉMOIRE indéfinie « %s » référencé dans l'expression\n"
 
-#: ldexp.c:904
+#: ldexp.c:908
 msgid "%F%P:%pS: unknown constant `%s' referenced in expression\n"
 msgstr "%F%P : %pS : constante inconnue « %s » référencée dans l'expression\n"
 
-#: ldexp.c:1052
+#: ldexp.c:1056
 msgid "%F%P:%pS can not PROVIDE assignment to location counter\n"
 msgstr "%F%P : %pS ne peut FOURNIR une assignation au compteur de localisation\n"
 
-#: ldexp.c:1085
+#: ldexp.c:1089
 msgid "%F%P:%pS invalid assignment to location counter\n"
 msgstr "%F%P : %pS affection invalide au compteur de localisation\n"
 
-#: ldexp.c:1089
+#: ldexp.c:1093
 msgid "%F%P:%pS assignment to location counter invalid outside of SECTIONS\n"
 msgstr "%F%P : %pS affection au compteur de localisation invalide en dehors des SECTIONS\n"
 
-#: ldexp.c:1108
+#: ldexp.c:1112
 msgid "%F%P:%pS cannot move location counter backwards (from %V to %V)\n"
 msgstr "%F%P : %pS ne peut déplacer le compteur de localisation par en arrière (de %V vers %V)\n"
 
-#: ldexp.c:1167
+#: ldexp.c:1171
 msgid "%F%P:%s: hash creation failed\n"
 msgstr "%F%P : %s : la création du hachage a échoué\n"
 
-#: ldexp.c:1519 ldexp.c:1545 ldexp.c:1605
+#: ldexp.c:1524 ldexp.c:1566 ldexp.c:1626
 msgid "%F%P:%pS: nonconstant expression for %s\n"
 msgstr "%F%P : %pS : expression non constante pour %s\n"
 
-#: ldexp.c:1631 ldlang.c:1234 ldlang.c:3187 ldlang.c:7174
+#: ldexp.c:1652 ldlang.c:1250 ldlang.c:3386 ldlang.c:7377
 msgid "%F%P: can not create hash table: %E\n"
 msgstr "%F%P : ne peut créer une table de hachage : %E\n"
 
@@ -224,40 +224,41 @@ msgstr "%F%P : ne peut créer une table de hachage : %E\n"
 #: eavr3.c:544 eavr31.c:544 eavr35.c:544 eavr4.c:544 eavr5.c:544 eavr51.c:544
 #: eavr6.c:544 eavrtiny.c:544 eavrxmega1.c:544 eavrxmega2.c:544
 #: eavrxmega3.c:544 eavrxmega4.c:544 eavrxmega5.c:544 eavrxmega6.c:544
-#: eavrxmega7.c:544 ecriself.c:341 ecrislinux.c:341 ed10velf.c:341
-#: eelf32_sparc.c:341 eelf32_sparc_sol2.c:472 eelf32_sparc_vxworks.c:370
-#: eelf32_spu.c:875 eelf32_tic6x_be.c:479 eelf32_tic6x_elf_be.c:479
-#: eelf32_tic6x_elf_le.c:479 eelf32_tic6x_le.c:479 eelf32_tic6x_linux_be.c:479
+#: eavrxmega7.c:544 ecriself.c:341 ecrislinux.c:341 ecskyelf.c:598
+#: ecskyelf_linux.c:598 ed10velf.c:341 eelf32_sparc.c:341
+#: eelf32_sparc_sol2.c:472 eelf32_sparc_vxworks.c:370 eelf32_spu.c:1011
+#: eelf32_tic6x_be.c:479 eelf32_tic6x_elf_be.c:479 eelf32_tic6x_elf_le.c:479
+#: eelf32_tic6x_le.c:479 eelf32_tic6x_linux_be.c:479
 #: eelf32_tic6x_linux_le.c:479 eelf32_x86_64.c:344 eelf32_x86_64_nacl.c:341
-#: eelf32am33lin.c:341 eelf32b4300.c:567 eelf32bfin.c:350 eelf32bfinfd.c:350
-#: eelf32bmip.c:567 eelf32bmipn32.c:585 eelf32bsmip.c:585 eelf32btsmip.c:567
-#: eelf32btsmip_fbsd.c:567 eelf32btsmipn32.c:567 eelf32btsmipn32_fbsd.c:567
-#: eelf32cr16.c:492 eelf32cr16c.c:341 eelf32crx.c:380 eelf32ebmip.c:567
-#: eelf32ebmipvxworks.c:596 eelf32elmip.c:567 eelf32elmipvxworks.c:596
+#: eelf32am33lin.c:341 eelf32b4300.c:568 eelf32bfin.c:350 eelf32bfinfd.c:350
+#: eelf32bmip.c:568 eelf32bmipn32.c:586 eelf32bsmip.c:586 eelf32btsmip.c:568
+#: eelf32btsmip_fbsd.c:568 eelf32btsmipn32.c:568 eelf32btsmipn32_fbsd.c:568
+#: eelf32cr16.c:492 eelf32cr16c.c:341 eelf32crx.c:380 eelf32ebmip.c:568
+#: eelf32ebmipvxworks.c:597 eelf32elmip.c:568 eelf32elmipvxworks.c:597
 #: eelf32epiphany.c:341 eelf32epiphany_4x4.c:343 eelf32frvfd.c:341
-#: eelf32ip2k.c:341 eelf32l4300.c:567 eelf32lm32.c:341 eelf32lm32fd.c:341
-#: eelf32lmip.c:567 eelf32lppc.c:544 eelf32lppclinux.c:544 eelf32lppcnto.c:544
-#: eelf32lppcsim.c:544 eelf32lr5900.c:567 eelf32lr5900n32.c:567
+#: eelf32ip2k.c:341 eelf32l4300.c:568 eelf32lm32.c:341 eelf32lm32fd.c:341
+#: eelf32lmip.c:568 eelf32lppc.c:557 eelf32lppclinux.c:557 eelf32lppcnto.c:557
+#: eelf32lppcsim.c:557 eelf32lr5900.c:568 eelf32lr5900n32.c:568
 #: eelf32lriscv.c:406 eelf32lriscv_ilp32.c:406 eelf32lriscv_ilp32f.c:406
-#: eelf32lsmip.c:567 eelf32ltsmip.c:567 eelf32ltsmip_fbsd.c:567
-#: eelf32ltsmipn32.c:567 eelf32ltsmipn32_fbsd.c:567 eelf32m32c.c:352
+#: eelf32lsmip.c:568 eelf32ltsmip.c:568 eelf32ltsmip_fbsd.c:568
+#: eelf32ltsmipn32.c:568 eelf32ltsmipn32_fbsd.c:568 eelf32m32c.c:352
 #: eelf32mb_linux.c:341 eelf32mbel_linux.c:341 eelf32mcore.c:341
 #: eelf32mep.c:341 eelf32metag.c:616 eelf32microblaze.c:341
-#: eelf32microblazeel.c:341 eelf32mipswindiss.c:567 eelf32or1k.c:341
-#: eelf32or1k_linux.c:341 eelf32ppc.c:544 eelf32ppc_fbsd.c:544
-#: eelf32ppclinux.c:544 eelf32ppcnto.c:544 eelf32ppcsim.c:544
-#: eelf32ppcvxworks.c:518 eelf32ppcwindiss.c:544 eelf32rl78.c:341
+#: eelf32microblazeel.c:341 eelf32mipswindiss.c:568 eelf32or1k.c:341
+#: eelf32or1k_linux.c:341 eelf32ppc.c:557 eelf32ppc_fbsd.c:557
+#: eelf32ppclinux.c:557 eelf32ppcnto.c:557 eelf32ppcsim.c:557
+#: eelf32ppcvxworks.c:531 eelf32ppcwindiss.c:557 eelf32rl78.c:341
 #: eelf32rx.c:357 eelf32tilegx.c:341 eelf32tilegx_be.c:341 eelf32tilepro.c:341
 #: eelf32vax.c:341 eelf32visium.c:341 eelf32xc16x.c:341 eelf32xc16xl.c:341
 #: eelf32xc16xs.c:341 eelf32xstormy16.c:352 eelf32xtensa.c:2228
 #: eelf64_aix.c:341 eelf64_ia64.c:365 eelf64_ia64_fbsd.c:365 eelf64_s390.c:356
 #: eelf64_sparc.c:341 eelf64_sparc_fbsd.c:341 eelf64_sparc_sol2.c:472
 #: eelf64alpha.c:424 eelf64alpha_fbsd.c:424 eelf64alpha_nbsd.c:424
-#: eelf64bmip.c:585 eelf64btsmip.c:567 eelf64btsmip_fbsd.c:567
-#: eelf64hppa.c:341 eelf64lppc.c:991 eelf64lriscv.c:406
-#: eelf64lriscv_lp64.c:406 eelf64lriscv_lp64f.c:406 eelf64ltsmip.c:567
-#: eelf64ltsmip_fbsd.c:567 eelf64mmix.c:452 eelf64ppc.c:991
-#: eelf64ppc_fbsd.c:991 eelf64rdos.c:341 eelf64tilegx.c:341
+#: eelf64bmip.c:586 eelf64btsmip.c:568 eelf64btsmip_fbsd.c:568
+#: eelf64hppa.c:341 eelf64lppc.c:1003 eelf64lriscv.c:406
+#: eelf64lriscv_lp64.c:406 eelf64lriscv_lp64f.c:406 eelf64ltsmip.c:568
+#: eelf64ltsmip_fbsd.c:568 eelf64mmix.c:452 eelf64ppc.c:1003
+#: eelf64ppc_fbsd.c:1003 eelf64rdos.c:341 eelf64tilegx.c:341
 #: eelf64tilegx_be.c:341 eelf_i386.c:344 eelf_i386_be.c:341
 #: eelf_i386_chaos.c:341 eelf_i386_fbsd.c:341 eelf_i386_ldso.c:341
 #: eelf_i386_nacl.c:341 eelf_i386_sol2.c:472 eelf_i386_vxworks.c:370
@@ -273,13 +274,13 @@ msgstr "%F%P : ne peut créer une table de hachage : %E\n"
 #: em32relf_linux.c:341 em32rlelf.c:341 em32rlelf_linux.c:341
 #: em68hc11elf.c:641 em68hc11elfb.c:641 em68hc12elf.c:641 em68hc12elfb.c:641
 #: em68kelf.c:491 em68kelfnbsd.c:491 em9s12zelf.c:341 emn10300.c:341
-#: ends32belf.c:518 ends32belf16m.c:518 ends32belf_linux.c:518 ends32elf.c:518
-#: ends32elf16m.c:518 ends32elf_linux.c:518 enios2elf.c:634 enios2linux.c:634
-#: eppclynx.c:544 epruelf.c:361 escore3_elf.c:361 escore7_elf.c:361
+#: ends32belf.c:448 ends32belf16m.c:448 ends32belf_linux.c:448 ends32elf.c:448
+#: ends32elf16m.c:448 ends32elf_linux.c:448 enios2elf.c:634 enios2linux.c:634
+#: eppclynx.c:557 epruelf.c:361 escore3_elf.c:361 escore7_elf.c:361
 #: eshelf.c:341 eshelf_fd.c:341 eshelf_linux.c:341 eshelf_nbsd.c:341
 #: eshelf_nto.c:341 eshelf_uclinux.c:341 eshelf_vxworks.c:370 eshlelf.c:341
 #: eshlelf_fd.c:341 eshlelf_linux.c:341 eshlelf_nbsd.c:341 eshlelf_nto.c:341
-#: eshlelf_vxworks.c:370 ev850.c:387 ev850_rh850.c:387 exgateelf.c:341
+#: eshlelf_vxworks.c:370 ev850.c:387 ev850_rh850.c:387
 #, c-format
 msgid "attempt to open %s failed\n"
 msgstr "échec de la tentative d'ouverture de %s\n"
@@ -335,31 +336,31 @@ msgstr "%F%P : ne peut ouvrir le fichier de scripts de l'éditeur de liens %s 
 msgid "%F%P: cannot represent machine `%s'\n"
 msgstr "%F%P : ne peut représenter la machine « %s »\n"
 
-#: ldlang.c:1318
+#: ldlang.c:1334
 msgid "%P:%pS: warning: redeclaration of memory region `%s'\n"
 msgstr "%P : %pS : avertissement : redéclaration de la région mémoire « %s »\n"
 
-#: ldlang.c:1324
+#: ldlang.c:1340
 msgid "%P:%pS: warning: memory region `%s' not declared\n"
 msgstr "%P : %pS : avertissement : région mémoire %s non déclarée\n"
 
-#: ldlang.c:1361
+#: ldlang.c:1377
 msgid "%F%P:%pS: error: alias for default memory region\n"
 msgstr "%F%P : %pS : erreur : synonyme pour la région mémoire par défault\n"
 
-#: ldlang.c:1372
+#: ldlang.c:1388
 msgid "%F%P:%pS: error: redefinition of memory region alias `%s'\n"
 msgstr "%F%P : %pS : erreur : redéfinition du synonyme de la région mémoire « %s »\n"
 
-#: ldlang.c:1379
+#: ldlang.c:1395
 msgid "%F%P:%pS: error: memory region `%s' for alias `%s' does not exist\n"
 msgstr "%F%P : %pS : erreur : la région mémoire « %s » de synonyme « %s » n'existe pas\n"
 
-#: ldlang.c:1438 ldlang.c:1477
+#: ldlang.c:1454 ldlang.c:1493
 msgid "%F%P: failed creating section `%s': %E\n"
 msgstr "%F%P : ne peut créer la section « %s » : %E\n"
 
-#: ldlang.c:1998
+#: ldlang.c:2195
 msgid ""
 "\n"
 "As-needed library included to satisfy reference by file (symbol)\n"
@@ -369,7 +370,7 @@ msgstr ""
 "Bibliothèque requise inclue pour satisfaire la référence par fichier (symbole)\n"
 "\n"
 
-#: ldlang.c:2064
+#: ldlang.c:2261
 #, c-format
 msgid ""
 "\n"
@@ -380,7 +381,7 @@ msgstr ""
 "Sections d'entrée éliminées\n"
 "\n"
 
-#: ldlang.c:2072
+#: ldlang.c:2269
 msgid ""
 "\n"
 "Memory Configuration\n"
@@ -390,23 +391,23 @@ msgstr ""
 "Configuration mémoire\n"
 "\n"
 
-#: ldlang.c:2074
+#: ldlang.c:2271
 msgid "Name"
 msgstr "Nom"
 
-#: ldlang.c:2074
+#: ldlang.c:2271
 msgid "Origin"
 msgstr "Origine"
 
-#: ldlang.c:2074
+#: ldlang.c:2271
 msgid "Length"
 msgstr "Longueur"
 
-#: ldlang.c:2074
+#: ldlang.c:2271
 msgid "Attributes"
 msgstr "Attributs"
 
-#: ldlang.c:2114
+#: ldlang.c:2311
 #, c-format
 msgid ""
 "\n"
@@ -417,27 +418,27 @@ msgstr ""
 "Script de l'éditeurs de liens and table de projection mémoire\n"
 "\n"
 
-#: ldlang.c:2167
+#: ldlang.c:2364
 msgid "%F%P: illegal use of `%s' section\n"
 msgstr "%F%P : utilisation illégale de la section « %s »\n"
 
-#: ldlang.c:2176
+#: ldlang.c:2373
 msgid "%F%P: output format %s cannot represent section called %s: %E\n"
 msgstr "%F%P : le format de sortie %s ne peut pas représenter la section %s\n"
 
-#: ldlang.c:2773
+#: ldlang.c:2974
 msgid "%P: %pB: file not recognized: %E; matching formats:"
 msgstr "%P : %pB : fichier non reconnu : %E ; formats correspondants :"
 
-#: ldlang.c:2781
+#: ldlang.c:2982
 msgid "%F%P: %pB: file not recognized: %E\n"
 msgstr "%F%P : %pB : fichier non reconnu : %E\n"
 
-#: ldlang.c:2854
+#: ldlang.c:3053
 msgid "%F%P: %pB: member %pB in archive is not an object\n"
 msgstr "%F%P : %pB : membre %B dans l'archive n'est pas un objet\n"
 
-#: ldlang.c:2869 ldlang.c:2883 eaarch64cloudabi.c:776 eaarch64cloudabib.c:776
+#: ldlang.c:3068 ldlang.c:3082 eaarch64cloudabi.c:776 eaarch64cloudabib.c:776
 #: eaarch64elf.c:776 eaarch64elf32.c:776 eaarch64elf32b.c:776
 #: eaarch64elfb.c:776 eaarch64fbsd.c:776 eaarch64fbsdb.c:776
 #: eaarch64linux.c:776 eaarch64linux32.c:776 eaarch64linux32b.c:776
@@ -453,40 +454,41 @@ msgstr "%F%P : %pB : membre %B dans l'archive n'est pas un objet\n"
 #: eavr3.c:664 eavr31.c:664 eavr35.c:664 eavr4.c:664 eavr5.c:664 eavr51.c:664
 #: eavr6.c:664 eavrtiny.c:664 eavrxmega1.c:664 eavrxmega2.c:664
 #: eavrxmega3.c:664 eavrxmega4.c:664 eavrxmega5.c:664 eavrxmega6.c:664
-#: eavrxmega7.c:664 ecriself.c:461 ecrislinux.c:461 ed10velf.c:461
-#: eelf32_sparc.c:461 eelf32_sparc_sol2.c:592 eelf32_sparc_vxworks.c:490
-#: eelf32_spu.c:995 eelf32_tic6x_be.c:599 eelf32_tic6x_elf_be.c:599
-#: eelf32_tic6x_elf_le.c:599 eelf32_tic6x_le.c:599 eelf32_tic6x_linux_be.c:599
+#: eavrxmega7.c:664 ecriself.c:461 ecrislinux.c:461 ecskyelf.c:718
+#: ecskyelf_linux.c:718 ed10velf.c:461 eelf32_sparc.c:461
+#: eelf32_sparc_sol2.c:592 eelf32_sparc_vxworks.c:490 eelf32_spu.c:1131
+#: eelf32_tic6x_be.c:599 eelf32_tic6x_elf_be.c:599 eelf32_tic6x_elf_le.c:599
+#: eelf32_tic6x_le.c:599 eelf32_tic6x_linux_be.c:599
 #: eelf32_tic6x_linux_le.c:599 eelf32_x86_64.c:464 eelf32_x86_64_nacl.c:461
-#: eelf32am33lin.c:461 eelf32b4300.c:687 eelf32bfin.c:470 eelf32bfinfd.c:470
-#: eelf32bmip.c:687 eelf32bmipn32.c:705 eelf32bsmip.c:705 eelf32btsmip.c:687
-#: eelf32btsmip_fbsd.c:687 eelf32btsmipn32.c:687 eelf32btsmipn32_fbsd.c:687
-#: eelf32cr16.c:612 eelf32cr16c.c:461 eelf32crx.c:500 eelf32ebmip.c:687
-#: eelf32ebmipvxworks.c:716 eelf32elmip.c:687 eelf32elmipvxworks.c:716
+#: eelf32am33lin.c:461 eelf32b4300.c:688 eelf32bfin.c:470 eelf32bfinfd.c:470
+#: eelf32bmip.c:688 eelf32bmipn32.c:706 eelf32bsmip.c:706 eelf32btsmip.c:688
+#: eelf32btsmip_fbsd.c:688 eelf32btsmipn32.c:688 eelf32btsmipn32_fbsd.c:688
+#: eelf32cr16.c:612 eelf32cr16c.c:461 eelf32crx.c:500 eelf32ebmip.c:688
+#: eelf32ebmipvxworks.c:717 eelf32elmip.c:688 eelf32elmipvxworks.c:717
 #: eelf32epiphany.c:461 eelf32epiphany_4x4.c:463 eelf32frvfd.c:461
-#: eelf32ip2k.c:461 eelf32l4300.c:687 eelf32lm32.c:461 eelf32lm32fd.c:461
-#: eelf32lmip.c:687 eelf32lppc.c:664 eelf32lppclinux.c:664 eelf32lppcnto.c:664
-#: eelf32lppcsim.c:664 eelf32lr5900.c:687 eelf32lr5900n32.c:687
+#: eelf32ip2k.c:461 eelf32l4300.c:688 eelf32lm32.c:461 eelf32lm32fd.c:461
+#: eelf32lmip.c:688 eelf32lppc.c:677 eelf32lppclinux.c:677 eelf32lppcnto.c:677
+#: eelf32lppcsim.c:677 eelf32lr5900.c:688 eelf32lr5900n32.c:688
 #: eelf32lriscv.c:526 eelf32lriscv_ilp32.c:526 eelf32lriscv_ilp32f.c:526
-#: eelf32lsmip.c:687 eelf32ltsmip.c:687 eelf32ltsmip_fbsd.c:687
-#: eelf32ltsmipn32.c:687 eelf32ltsmipn32_fbsd.c:687 eelf32m32c.c:472
+#: eelf32lsmip.c:688 eelf32ltsmip.c:688 eelf32ltsmip_fbsd.c:688
+#: eelf32ltsmipn32.c:688 eelf32ltsmipn32_fbsd.c:688 eelf32m32c.c:472
 #: eelf32mb_linux.c:461 eelf32mbel_linux.c:461 eelf32mcore.c:461
 #: eelf32mep.c:461 eelf32metag.c:736 eelf32microblaze.c:461
-#: eelf32microblazeel.c:461 eelf32mipswindiss.c:687 eelf32or1k.c:461
-#: eelf32or1k_linux.c:461 eelf32ppc.c:664 eelf32ppc_fbsd.c:664
-#: eelf32ppclinux.c:664 eelf32ppcnto.c:664 eelf32ppcsim.c:664
-#: eelf32ppcvxworks.c:638 eelf32ppcwindiss.c:664 eelf32rl78.c:461
+#: eelf32microblazeel.c:461 eelf32mipswindiss.c:688 eelf32or1k.c:461
+#: eelf32or1k_linux.c:461 eelf32ppc.c:677 eelf32ppc_fbsd.c:677
+#: eelf32ppclinux.c:677 eelf32ppcnto.c:677 eelf32ppcsim.c:677
+#: eelf32ppcvxworks.c:651 eelf32ppcwindiss.c:677 eelf32rl78.c:461
 #: eelf32rx.c:477 eelf32tilegx.c:461 eelf32tilegx_be.c:461 eelf32tilepro.c:461
 #: eelf32vax.c:461 eelf32visium.c:461 eelf32xc16x.c:461 eelf32xc16xl.c:461
 #: eelf32xc16xs.c:461 eelf32xstormy16.c:472 eelf32xtensa.c:2348
 #: eelf64_aix.c:461 eelf64_ia64.c:485 eelf64_ia64_fbsd.c:485 eelf64_s390.c:476
 #: eelf64_sparc.c:461 eelf64_sparc_fbsd.c:461 eelf64_sparc_sol2.c:592
 #: eelf64alpha.c:544 eelf64alpha_fbsd.c:544 eelf64alpha_nbsd.c:544
-#: eelf64bmip.c:705 eelf64btsmip.c:687 eelf64btsmip_fbsd.c:687
-#: eelf64hppa.c:461 eelf64lppc.c:1111 eelf64lriscv.c:526
-#: eelf64lriscv_lp64.c:526 eelf64lriscv_lp64f.c:526 eelf64ltsmip.c:687
-#: eelf64ltsmip_fbsd.c:687 eelf64mmix.c:572 eelf64ppc.c:1111
-#: eelf64ppc_fbsd.c:1111 eelf64rdos.c:461 eelf64tilegx.c:461
+#: eelf64bmip.c:706 eelf64btsmip.c:688 eelf64btsmip_fbsd.c:688
+#: eelf64hppa.c:461 eelf64lppc.c:1123 eelf64lriscv.c:526
+#: eelf64lriscv_lp64.c:526 eelf64lriscv_lp64f.c:526 eelf64ltsmip.c:688
+#: eelf64ltsmip_fbsd.c:688 eelf64mmix.c:572 eelf64ppc.c:1123
+#: eelf64ppc_fbsd.c:1123 eelf64rdos.c:461 eelf64tilegx.c:461
 #: eelf64tilegx_be.c:461 eelf_i386.c:464 eelf_i386_be.c:461
 #: eelf_i386_chaos.c:461 eelf_i386_fbsd.c:461 eelf_i386_ldso.c:461
 #: eelf_i386_nacl.c:461 eelf_i386_sol2.c:592 eelf_i386_vxworks.c:490
@@ -502,171 +504,171 @@ msgstr "%F%P : %pB : membre %B dans l'archive n'est pas un objet\n"
 #: em32relf_linux.c:461 em32rlelf.c:461 em32rlelf_linux.c:461
 #: em68hc11elf.c:761 em68hc11elfb.c:761 em68hc12elf.c:761 em68hc12elfb.c:761
 #: em68kelf.c:611 em68kelfnbsd.c:611 em9s12zelf.c:461 emn10300.c:461
-#: ends32belf.c:638 ends32belf16m.c:638 ends32belf_linux.c:638 ends32elf.c:638
-#: ends32elf16m.c:638 ends32elf_linux.c:638 enios2elf.c:754 enios2linux.c:754
-#: eppclynx.c:664 epruelf.c:481 escore3_elf.c:481 escore7_elf.c:481
+#: ends32belf.c:568 ends32belf16m.c:568 ends32belf_linux.c:568 ends32elf.c:568
+#: ends32elf16m.c:568 ends32elf_linux.c:568 enios2elf.c:754 enios2linux.c:754
+#: eppclynx.c:677 epruelf.c:481 escore3_elf.c:481 escore7_elf.c:481
 #: eshelf.c:461 eshelf_fd.c:461 eshelf_linux.c:461 eshelf_nbsd.c:461
 #: eshelf_nto.c:461 eshelf_uclinux.c:461 eshelf_vxworks.c:490 eshlelf.c:461
 #: eshlelf_fd.c:461 eshlelf_linux.c:461 eshlelf_nbsd.c:461 eshlelf_nto.c:461
-#: eshlelf_vxworks.c:490 ev850.c:507 ev850_rh850.c:507 exgateelf.c:461
+#: eshlelf_vxworks.c:490 ev850.c:507 ev850_rh850.c:507
 msgid "%F%P: %pB: error adding symbols: %E\n"
 msgstr "%F%P : %pB : erreur lors de l'ajout de symboles : %E\n"
 
-#: ldlang.c:3157
+#: ldlang.c:3356
 msgid "%P: warning: could not find any targets that match endianness requirement\n"
 msgstr "%P : avertissement : le repérage des cibles qui concordent avec le boutisme requis a échoué\n"
 
-#: ldlang.c:3171
+#: ldlang.c:3370
 msgid "%F%P: target %s not found\n"
 msgstr "%F%P : cible %s non trouvée\n"
 
-#: ldlang.c:3173
+#: ldlang.c:3372
 msgid "%F%P: cannot open output file %s: %E\n"
 msgstr "%F%P : ne peut ouvrir le fichier de sortie %s : %E\n"
 
-#: ldlang.c:3179
+#: ldlang.c:3378
 msgid "%F%P: %s: can not make object file: %E\n"
 msgstr "%F%P : %s : ne peut créer le fichier objet : %E\n"
 
-#: ldlang.c:3183
+#: ldlang.c:3382
 msgid "%F%P: %s: can not set architecture: %E\n"
 msgstr "%F%P : %s : ne peut initialiser l'architecture : %E\n"
 
-#: ldlang.c:3342
+#: ldlang.c:3541
 msgid "%P: warning: %s contains output sections; did you forget -T?\n"
 msgstr "%P : avertissement : %s contient des sections de sortie; avez-vous oublié -T?\n"
 
-#: ldlang.c:3480
+#: ldlang.c:3680
 msgid "%X%P: required symbol `%s' not defined\n"
 msgstr "%X%P : symbole requis « %s » non défini\n"
 
-#: ldlang.c:3770
+#: ldlang.c:3970
 msgid "%F%P: %s not found for insert\n"
 msgstr "%F%P : %s pas trouvé pour insertion\n"
 
-#: ldlang.c:4011
+#: ldlang.c:4211
 msgid " load address 0x%V"
 msgstr " address de chargement 0x%V"
 
-#: ldlang.c:4247
+#: ldlang.c:4447
 msgid "%W (size before relaxing)\n"
 msgstr "%W (taille avant relaxe)\n"
 
-#: ldlang.c:4340
+#: ldlang.c:4540
 #, c-format
 msgid "Address of section %s set to "
 msgstr "Adresse de la section %s initialisé à "
 
-#: ldlang.c:4538
+#: ldlang.c:4738
 #, c-format
 msgid "Fail with %d\n"
 msgstr "Échec avec %d\n"
 
-#: ldlang.c:4810
+#: ldlang.c:5012
 msgid "%X%P: section %s VMA wraps around address space\n"
 msgstr "%X%P : la VMA de la section %s englobe l'espace d'adressage\n"
 
-#: ldlang.c:4816
+#: ldlang.c:5018
 msgid "%X%P: section %s LMA wraps around address space\n"
 msgstr "%X%P : la LMA de la section %s englobe l'espace d'adressage\n"
 
-#: ldlang.c:4867
+#: ldlang.c:5069
 msgid "%X%P: section %s LMA [%V,%V] overlaps section %s LMA [%V,%V]\n"
 msgstr "%X%P : la LMA de la section %s [%V,%V] chevauche la LMA de la section %s [%V,%V]\n"
 
-#: ldlang.c:4910
+#: ldlang.c:5112
 msgid "%X%P: section %s VMA [%V,%V] overlaps section %s VMA [%V,%V]\n"
 msgstr "%X%P: la VMA de la section %s [%V,%V] chevauche la VMA de la section %s [%V,%V]\n"
 
-#: ldlang.c:4933
+#: ldlang.c:5135
 msgid "%X%P: region `%s' overflowed by %lu byte\n"
 msgid_plural "%X%P: region `%s' overflowed by %lu bytes\n"
 msgstr[0] "%X%P : la région « %s » est débordée de %lu octet\n"
 msgstr[1] "%X%P : la région « %s » est débordée de %lu octets\n"
 
-#: ldlang.c:4958
+#: ldlang.c:5160
 msgid "%X%P: address 0x%v of %pB section `%s' is not within region `%s'\n"
 msgstr "%X%P : l'adresse 0x%v de %pB de la section «%s» n'est pas dans la région «%s»\n"
 
-#: ldlang.c:4969
+#: ldlang.c:5171
 msgid "%X%P: %pB section `%s' will not fit in region `%s'\n"
 msgstr "%X%P : %pB la section «%s» ne va pas s'adapter à la région «%s»\n"
 
-#: ldlang.c:5050
+#: ldlang.c:5252
 msgid "%F%P:%pS: non constant or forward reference address expression for section %s\n"
 msgstr "%F%P : %pS : référence d'adresse avant d'expression ou non constante pour la section %s\n"
 
-#: ldlang.c:5075
+#: ldlang.c:5277
 msgid "%X%P: internal error on COFF shared library section %s\n"
 msgstr "%X%P : erreur interne dans la section de bibliothèque partagée COFF %s\n"
 
-#: ldlang.c:5134
+#: ldlang.c:5336
 msgid "%F%P: error: no memory region specified for loadable section `%s'\n"
 msgstr "%F%P : erreur : aucune région mémoire spécifiée pour la section chargeable « %s »\n"
 
-#: ldlang.c:5139
+#: ldlang.c:5341
 msgid "%P: warning: no memory region specified for loadable section `%s'\n"
 msgstr "%P : avertissement : aucune région mémoire spécifiée pour la section chargeable « %s »\n"
 
-#: ldlang.c:5162
+#: ldlang.c:5365
 msgid "%P: warning: changing start of section %s by %lu byte\n"
 msgid_plural "%P: warning: changing start of section %s by %lu bytes\n"
 msgstr[0] "%P : avertissement : modification du début de la section %s de %lu octet\n"
 msgstr[1] "%P : avertissement : modification du début de la section %s de %lu octets\n"
 
-#: ldlang.c:5256
+#: ldlang.c:5460
 msgid "%P: warning: dot moved backwards before `%s'\n"
 msgstr "%P : avertissement : point (.) déplacé avant « %s »\n"
 
-#: ldlang.c:5435
+#: ldlang.c:5639
 msgid "%F%P: can't relax section: %E\n"
 msgstr "%F%P : ne peut relâcher la section : %E\n"
 
-#: ldlang.c:5817
+#: ldlang.c:6021
 msgid "%F%P: invalid data statement\n"
 msgstr "%F%P : déclaration invalide de données\n"
 
-#: ldlang.c:5850
+#: ldlang.c:6054
 msgid "%F%P: invalid reloc statement\n"
 msgstr "%F%P : déclaration invalide de relocalisation\n"
 
-#: ldlang.c:6184
+#: ldlang.c:6408
 msgid "%F%P: gc-sections requires either an entry or an undefined symbol\n"
 msgstr "%F%P : gc-sections requière soit une entrée, soit un symbole non définit\n"
 
-#: ldlang.c:6209
+#: ldlang.c:6433
 msgid "%F%P: %s: can't set start address\n"
 msgstr "%F%P : %s : ne peut initialiser l'adresse de départ\n"
 
-#: ldlang.c:6222 ldlang.c:6241
+#: ldlang.c:6446 ldlang.c:6465
 msgid "%F%P: can't set start address\n"
 msgstr "%F%P : impossible d'initialiser l'adresse de départ\n"
 
-#: ldlang.c:6234
+#: ldlang.c:6458
 msgid "%P: warning: cannot find entry symbol %s; defaulting to %V\n"
 msgstr "%P : avertissement : le symbole d'entrée %s est introuvable ; utilise par défaut %V\n"
 
-#: ldlang.c:6246
+#: ldlang.c:6470
 msgid "%P: warning: cannot find entry symbol %s; not setting start address\n"
 msgstr "%P : avertissement : le symbole d'entrée %s est introuvable ; pas d'initialisation de l'adresse de départ\n"
 
-#: ldlang.c:6300
+#: ldlang.c:6524
 msgid "%F%P: relocatable linking with relocations from format %s (%pB) to format %s (%pB) is not supported\n"
 msgstr "%F%P : l'édition de liens relocalisables avec une relocalisation du format %s (%pB) vers le format %s (%pB) n'est pas prise en charge\n"
 
-#: ldlang.c:6310
+#: ldlang.c:6534
 msgid "%X%P: %s architecture of input file `%pB' is incompatible with %s output\n"
 msgstr "%X%P : architecture %s du fichier d'entrée « %B » est incompatible avec la sortie %s\n"
 
-#: ldlang.c:6332
+#: ldlang.c:6556
 msgid "%X%P: failed to merge target specific data of file %pB\n"
 msgstr "%X%P : échec de fusion des données spécifiques cibles du fichier %pB\n"
 
-#: ldlang.c:6403
+#: ldlang.c:6627
 msgid "%F%P: could not define common symbol `%pT': %E\n"
 msgstr "%F%P : Impossible de définir le symbole commun «%pT» : %E\n"
 
-#: ldlang.c:6415
+#: ldlang.c:6639
 msgid ""
 "\n"
 "Allocating common symbols\n"
@@ -674,7 +676,7 @@ msgstr ""
 "\n"
 "Allocation des symboles communs\n"
 
-#: ldlang.c:6416
+#: ldlang.c:6640
 msgid ""
 "Common symbol       size              file\n"
 "\n"
@@ -682,174 +684,178 @@ msgstr ""
 "Symbole commun      taille            fichier\n"
 "\n"
 
-#: ldlang.c:6490
+#: ldlang.c:6714
 msgid "%X%P: error: unplaced orphan section `%pA' from `%pB'\n"
 msgstr "%X%P : erreur : section orpheline « %pA » non placée depuis « %pB »\n"
 
-#: ldlang.c:6508
+#: ldlang.c:6732
 msgid "%P: warning: orphan section `%pA' from `%pB' being placed in section `%s'\n"
 msgstr "%P : avertissement : la section orpheline « %pA » de « %pB » est placée dans la section « %s »\n"
 
-#: ldlang.c:6599
+#: ldlang.c:6823
 msgid "%F%P: invalid character %c (%d) in flags\n"
 msgstr "%F%P : caractère %c (%d) invalide dans les fanions\n"
 
-#: ldlang.c:6726
+#: ldlang.c:6931
 msgid "%F%P:%pS: error: align with input and explicit align specified\n"
 msgstr "%F%P : %pS : erreur : alignement avec l'entrée et alignement explicite défini\n"
 
-#: ldlang.c:7198
+#: ldlang.c:7404
 msgid "%F%P: %s: plugin reported error after all symbols read\n"
 msgstr "%F%P : %s : le greffon a reporté une erreur après avoir lu tous les symboles\n"
 
-#: ldlang.c:7602
+#: ldlang.c:7809
 msgid "%F%P: multiple STARTUP files\n"
 msgstr "%F%P : fichiers DÉPART multiples\n"
 
-#: ldlang.c:7648
+#: ldlang.c:7855
 msgid "%X%P:%pS: section has both a load address and a load region\n"
 msgstr "%X%P : %pS : section a à la fois une adresse de chargement et une région de chargement\n"
 
-#: ldlang.c:7763
+#: ldlang.c:7970
 msgid "%X%P:%pS: PHDRS and FILEHDR are not supported when prior PT_LOAD headers lack them\n"
 msgstr "%X%P : %pS : PHDRS et FILEHDR ne sont pas pris en charge lorsque des entêtes prioritaires PT_LOAD ne les ont pas\n"
 
-#: ldlang.c:7836
+#: ldlang.c:8043
 msgid "%F%P: no sections assigned to phdrs\n"
 msgstr "%F%P : aucune section n'est assignée à phdrs\n"
 
-#: ldlang.c:7874
+#: ldlang.c:8081
 msgid "%F%P: bfd_record_phdr failed: %E\n"
 msgstr "%F%P : bfd_record_phdr en échec : %E\n"
 
-#: ldlang.c:7894
+#: ldlang.c:8101
 msgid "%X%P: section `%s' assigned to non-existent phdr `%s'\n"
 msgstr "%X%P : section « %s » affectée à phdr inexistent « %s »\n"
 
-#: ldlang.c:8317
+#: ldlang.c:8524
 msgid "%X%P: unknown language `%s' in version information\n"
 msgstr "%X%P : langage inconnue « %s » dans l'information de la version\n"
 
-#: ldlang.c:8462
+#: ldlang.c:8669
 msgid "%X%P: anonymous version tag cannot be combined with other version tags\n"
 msgstr "%X%P : étiquette de version anonyme ne peut être combinée avec d'autres étiquettes de version\n"
 
-#: ldlang.c:8471
+#: ldlang.c:8678
 msgid "%X%P: duplicate version tag `%s'\n"
 msgstr "%X%P : duplication de l'étiquette de version « %s »\n"
 
-#: ldlang.c:8492 ldlang.c:8501 ldlang.c:8519 ldlang.c:8529
+#: ldlang.c:8699 ldlang.c:8708 ldlang.c:8726 ldlang.c:8736
 msgid "%X%P: duplicate expression `%s' in version information\n"
 msgstr "%X%P : duplication de l'expression « %s » dans l'information de version\n"
 
-#: ldlang.c:8569
+#: ldlang.c:8776
 msgid "%X%P: unable to find version dependency `%s'\n"
 msgstr "%X%P : incapable de repérer les dépendences de version « %s »\n"
 
-#: ldlang.c:8592
+#: ldlang.c:8799
 msgid "%X%P: unable to read .exports section contents\n"
 msgstr "%X%P : incapable de lire le contenu de la section .exports\n"
 
-#: ldlang.c:8630
+#: ldlang.c:8837
 msgid "%F%P: invalid origin for memory region %s\n"
 msgstr "%F%P : origine invalide pour la région mémoire %s\n"
 
-#: ldlang.c:8639
+#: ldlang.c:8846
 msgid "%F%P: invalid length for memory region %s\n"
 msgstr "%F%P : longueur invalide pour la région mémoire %s\n"
 
-#: ldlang.c:8749
+#: ldlang.c:8956
 msgid "%X%P: unknown feature `%s'\n"
 msgstr "%P%F : caractéristique inconnue «%s»\n"
 
-#: ldmain.c:248
+#: ldmain.c:213
+msgid "%F%P: fatal error: libbfd ABI mismatch\n"
+msgstr "%F%P : erreur fatale : l'ABI de libbfd ne concorde pas\n"
+
+#: ldmain.c:249
 msgid "%X%P: can't set BFD default target to `%s': %E\n"
 msgstr "%X%P : impossible d'initialiser la cible par défaut de BFD à « %s » : %E\n"
 
-#: ldmain.c:347
+#: ldmain.c:348
 msgid "built in linker script"
 msgstr "construit dans le script d'édition de liens"
 
-#: ldmain.c:357
+#: ldmain.c:358
 msgid "using external linker script:"
 msgstr "utilisation du script externe d'édition de liens :"
 
-#: ldmain.c:359
+#: ldmain.c:360
 msgid "using internal linker script:"
 msgstr "utilisation du script interne d'édition de liens :"
 
-#: ldmain.c:406
+#: ldmain.c:407
 msgid "%F%P: --no-define-common may not be used without -shared\n"
 msgstr "%F%P : --no-define-common ne doit pas être utilisé sans -shared\n"
 
-#: ldmain.c:412
+#: ldmain.c:413
 msgid "%F%P: no input files\n"
 msgstr "%F%P : aucun fichier d'entrée\n"
 
-#: ldmain.c:416
+#: ldmain.c:417
 msgid "%P: mode %s\n"
 msgstr "%P : mode %s\n"
 
-#: ldmain.c:432 ends32belf.c:2236 ends32belf16m.c:2236 ends32belf_linux.c:2365
-#: ends32elf.c:2236 ends32elf16m.c:2236 ends32elf_linux.c:2365
+#: ldmain.c:433 ends32belf.c:2137 ends32belf16m.c:2137 ends32belf_linux.c:2266
+#: ends32elf.c:2137 ends32elf16m.c:2137 ends32elf_linux.c:2266
 msgid "%F%P: cannot open map file %s: %E\n"
 msgstr "%F%P : impossible d'ouvrir le fichier de la table de projection %s : %E\n"
 
-#: ldmain.c:481
+#: ldmain.c:483
 msgid "%P: link errors found, deleting executable `%s'\n"
 msgstr "%P : erreurs de lien trouvés, destruction de l'exécutable « %s »\n"
 
-#: ldmain.c:490
+#: ldmain.c:492
 msgid "%F%P: %pB: final close failed: %E\n"
 msgstr "%F%P : %pB : fermeture finale en échec : %E\n"
 
-#: ldmain.c:517
+#: ldmain.c:519
 msgid "%F%P: unable to open for source of copy `%s'\n"
 msgstr "%F%P : incapable d'ouvrir la copie source de « %s »\n"
 
-#: ldmain.c:520
+#: ldmain.c:522
 msgid "%F%P: unable to open for destination of copy `%s'\n"
 msgstr "%F%P : incpapable d'ouvrir la copie destination de « %s »\n"
 
-#: ldmain.c:527
+#: ldmain.c:529
 msgid "%P: error writing file `%s'\n"
 msgstr "%P : erreur lors de l'écriture du fichier « %s »\n"
 
-#: ldmain.c:532 pe-dll.c:1925
+#: ldmain.c:534 pe-dll.c:1925
 #, c-format
 msgid "%P: error closing file `%s'\n"
 msgstr "%P : erreur lors de la fermeture du fichier « %s »\n"
 
-#: ldmain.c:546
+#: ldmain.c:548
 #, c-format
 msgid "%s: total time in link: %ld.%06ld\n"
 msgstr "%s : temps total d'édition de liens : %ld.%06ld\n"
 
-#: ldmain.c:629
+#: ldmain.c:635
 msgid "%F%P: missing argument to -m\n"
 msgstr "%F%P : argument manquant pour -m\n"
 
-#: ldmain.c:679 ldmain.c:696 ldmain.c:716 ldmain.c:748 pe-dll.c:1377
+#: ldmain.c:685 ldmain.c:702 ldmain.c:722 ldmain.c:754 pe-dll.c:1377
 msgid "%F%P: bfd_hash_table_init failed: %E\n"
 msgstr "%F%P : bfd_hash_table_init en échec : %E\n"
 
-#: ldmain.c:683 ldmain.c:700 ldmain.c:720
+#: ldmain.c:689 ldmain.c:706 ldmain.c:726
 msgid "%F%P: bfd_hash_lookup failed: %E\n"
 msgstr "%F%P : bfd_hash_lookup en échec : %E\n"
 
-#: ldmain.c:734
+#: ldmain.c:740
 msgid "%X%P: error: duplicate retain-symbols-file\n"
 msgstr "%X%P : erreur : duplication dans retain-symbols-file\n"
 
-#: ldmain.c:778
+#: ldmain.c:784
 msgid "%F%P: bfd_hash_lookup for insertion failed: %E\n"
 msgstr "%F%P : échec de bfd_hash_lookup lors d'une insertion : %E\n"
 
-#: ldmain.c:783
+#: ldmain.c:789
 msgid "%P: `-retain-symbols-file' overrides `-s' and `-S'\n"
 msgstr "%P : « -retain-symbols-file » écrase les options « -s » et « -S »\n"
 
-#: ldmain.c:882
+#: ldmain.c:892
 msgid ""
 "Archive member included to satisfy reference by file (symbol)\n"
 "\n"
@@ -857,135 +863,135 @@ msgstr ""
 "Membre d'archive inclu pour satisfaire la référence par fichier (symbole)\n"
 "\n"
 
-#: ldmain.c:989
+#: ldmain.c:1001
 msgid "%X%P: %C: multiple definition of `%pT'"
 msgstr "%X%P : %C : définitions multiples de « %pT »"
 
-#: ldmain.c:992
+#: ldmain.c:1004
 msgid "; %D: first defined here"
 msgstr "; %D : défini pour la première fois ici"
 
-#: ldmain.c:997
+#: ldmain.c:1009
 msgid "%P: disabling relaxation; it will not work with multiple definitions\n"
 msgstr "%P : désactivation de la relâche : il ne pourra pas travailler avec des définitions multiples\n"
 
-#: ldmain.c:1050
+#: ldmain.c:1062
 msgid "%P: %pB: warning: definition of `%pT' overriding common from %pB\n"
 msgstr "%B : %pB : avertissement : la définition de « %pT » écrase le commun de %pB\n"
 
-#: ldmain.c:1054
+#: ldmain.c:1066
 msgid "%P: %pB: warning: definition of `%pT' overriding common\n"
 msgstr "%P : %pB : avertissement : la définition de « %pT » écrase le commun\n"
 
-#: ldmain.c:1063
+#: ldmain.c:1075
 msgid "%P: %pB: warning: common of `%pT' overridden by definition from %pB\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » est écrasé par sa définition depuis %pB\n"
 
-#: ldmain.c:1067
+#: ldmain.c:1079
 msgid "%P: %pB: warning: common of `%pT' overridden by definition\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » est écrasé par une définition\n"
 
-#: ldmain.c:1076
+#: ldmain.c:1088
 msgid "%P: %pB: warning: common of `%pT' overridden by larger common from %pB\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » est écrasé par un commun de plus grande taille depuis %pB\n"
 
-#: ldmain.c:1080
+#: ldmain.c:1092
 msgid "%P: %pB: warning: common of `%pT' overridden by larger common\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » est écrasé par un commun de plus grande taille\n"
 
-#: ldmain.c:1087
+#: ldmain.c:1099
 msgid "%P: %pB: warning: common of `%pT' overriding smaller common from %pB\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » écrase un commun de plus petite taille\n"
 
-#: ldmain.c:1091
+#: ldmain.c:1103
 msgid "%P: %pB: warning: common of `%pT' overriding smaller common\n"
 msgstr "%P : %pB : avertissement : le commun de « %pT » écrase un commun de plus petite taille\n"
 
-#: ldmain.c:1098
+#: ldmain.c:1110
 msgid "%P: %pB and %pB: warning: multiple common of `%pT'\n"
 msgstr "%P : %pB et %pB : avertissement : communs multiples de « %pT »\n"
 
-#: ldmain.c:1101
+#: ldmain.c:1113
 msgid "%P: %pB: warning: multiple common of `%pT'\n"
 msgstr "%P : %pB : avertissement : communs multiples de « %pT »\n"
 
-#: ldmain.c:1120 ldmain.c:1156
+#: ldmain.c:1132 ldmain.c:1168
 msgid "%P: warning: global constructor %s used\n"
 msgstr "%P : avertissement : constructeur global %s est utilisé\n"
 
-#: ldmain.c:1166
+#: ldmain.c:1178
 msgid "%F%P: BFD backend error: BFD_RELOC_CTOR unsupported\n"
 msgstr "%F%P : erreur du moteur BFD : BFD_RELOC_CTOR non pris en charge\n"
 
 #. We found a reloc for the symbol we are looking for.
-#: ldmain.c:1238 ldmain.c:1240 ldmain.c:1242 ldmain.c:1250 ldmain.c:1293
+#: ldmain.c:1250 ldmain.c:1252 ldmain.c:1254 ldmain.c:1262 ldmain.c:1305
 msgid "warning: "
 msgstr "avertissement : "
 
-#: ldmain.c:1346
+#: ldmain.c:1358
 msgid "%X%P: %C: undefined reference to `%pT'\n"
 msgstr "%X%P : %C : référence indéfinie vers « %pT »\n"
 
-#: ldmain.c:1349
+#: ldmain.c:1361
 msgid "%P: %C: warning: undefined reference to `%pT'\n"
 msgstr "%P : %C : avertissement : référence indéfinie vers « %pT »\n"
 
-#: ldmain.c:1355
+#: ldmain.c:1367
 msgid "%X%P: %D: more undefined references to `%pT' follow\n"
 msgstr "%X%P : %D : encore plus de références indéfinies suivent vers « %pT »\n"
 
-#: ldmain.c:1358
+#: ldmain.c:1370
 msgid "%P: %D: warning: more undefined references to `%pT' follow\n"
 msgstr "%P : %D : avertissement : encore plus de références indéfinies suivent vers « %pT »\n"
 
-#: ldmain.c:1369
+#: ldmain.c:1381
 msgid "%X%P: %pB: undefined reference to `%pT'\n"
 msgstr "%X%P : %pB : référence indéfinie vers « %pT »\n"
 
-#: ldmain.c:1372
+#: ldmain.c:1384
 msgid "%P: %pB: warning: undefined reference to `%pT'\n"
 msgstr "%P : %pB : avertissement : référence indéfinie vers « %pT »\n"
 
-#: ldmain.c:1378
+#: ldmain.c:1390
 msgid "%X%P: %pB: more undefined references to `%pT' follow\n"
 msgstr "%X%P : %pB : encore plus de références indéfinies suivent vers « %pT »\n"
 
-#: ldmain.c:1381
+#: ldmain.c:1393
 msgid "%P: %pB: warning: more undefined references to `%pT' follow\n"
 msgstr "%P : %pB : avertissement : encore plus de références indéfinies suivent vers « %pT »\n"
 
-#: ldmain.c:1418
+#: ldmain.c:1430
 msgid " additional relocation overflows omitted from the output\n"
 msgstr " débordement de relocalisation additionnelle omise à partir de la sortie\n"
 
-#: ldmain.c:1431
+#: ldmain.c:1443
 #, c-format
 msgid " relocation truncated to fit: %s against undefined symbol `%pT'"
 msgstr " relocalisation tronquée pour concorder avec la taille : %s vers le symbole indéfini %pT"
 
-#: ldmain.c:1437
+#: ldmain.c:1449
 #, c-format
 msgid " relocation truncated to fit: %s against symbol `%pT' defined in %pA section in %pB"
 msgstr " relocalisation tronquée pour concorder : %s vers le symbole « %pT » défini sans la section %pA dans %pB"
 
-#: ldmain.c:1450
+#: ldmain.c:1462
 #, c-format
 msgid " relocation truncated to fit: %s against `%pT'"
 msgstr " relocalisation tronquée pour concorder : %s avec « %pT »"
 
-#: ldmain.c:1466
-msgid "%X%P: %H: dangerous relocation: %s\n"
-msgstr "%X%P : %H : relocalisation dangereuse : %s\n"
+#: ldmain.c:1478
+msgid "%X%H: dangerous relocation: %s\n"
+msgstr "%X%H : relocalisation dangereuse : %s\n"
 
-#: ldmain.c:1480
-msgid "%X%P: %H: reloc refers to symbol `%pT' which is not being output\n"
-msgstr "%X%P : %H : la relocalisation réfère au symbole «%pT» qui n'est pas écrit\n"
+#: ldmain.c:1492
+msgid "%X%H: reloc refers to symbol `%pT' which is not being output\n"
+msgstr "%X%H : la relocalisation réfère au symbole «%pT» qui n'est pas écrit\n"
 
-#: ldmain.c:1514
+#: ldmain.c:1526
 msgid "%P: %pB: reference to %s\n"
 msgstr "%P : %pB : référence vers %s\n"
 
-#: ldmain.c:1516
+#: ldmain.c:1528
 msgid "%P: %pB: definition of %s\n"
 msgstr "%P : %pB : définition de %s\n"
 
@@ -994,24 +1000,24 @@ msgstr "%P : %pB : définition de %s\n"
 msgid "%pB: in function `%pT':\n"
 msgstr "%pB : dans la fonction « %pT » :\n"
 
-#: ldmisc.c:527
+#: ldmisc.c:525
 #, c-format
 msgid "no symbol"
 msgstr "aucun symbole"
 
-#: ldmisc.c:634
+#: ldmisc.c:632
 msgid "%F%P: internal error %s %d\n"
 msgstr "%F%P : erreur interne %s %d\n"
 
-#: ldmisc.c:698
+#: ldmisc.c:696
 msgid "%P: internal error: aborting at %s:%d in %s\n"
 msgstr "%P : erreur interne : arrêt immédiat à %s:%d dans %s\n"
 
-#: ldmisc.c:701
+#: ldmisc.c:699
 msgid "%P: internal error: aborting at %s:%d\n"
 msgstr "%P : erreur interne : arrêt immédiat à %s:%d\n"
 
-#: ldmisc.c:703
+#: ldmisc.c:701
 msgid "%F%P: please report this bug\n"
 msgstr "%F%P : merci de signaler cette anomalie\n"
 
@@ -1023,8 +1029,8 @@ msgstr "GNU ld %s\n"
 
 #: ldver.c:41
 #, c-format
-msgid "Copyright (C) 2018 Free Software Foundation, Inc.\n"
-msgstr "Copyright (C) 2018 Free Software Foundation, Inc.\n"
+msgid "Copyright (C) 2019 Free Software Foundation, Inc.\n"
+msgstr "Copyright (C) 2019 Free Software Foundation, Inc.\n"
 
 #: ldver.c:42
 #, c-format
@@ -1840,19 +1846,20 @@ msgstr "%F%P : -assert option non reconnue « %s »\n"
 msgid "%F%P: unknown demangling style `%s'\n"
 msgstr "%F%P : style inconnu de recouvrement du transcodage par mutilisation « %s »\n"
 
-#: lexsup.c:866 lexsup.c:1339 eaarch64cloudabi.c:2511 eaarch64cloudabib.c:2511
-#: eaarch64elf.c:2511 eaarch64elf32.c:2511 eaarch64elf32b.c:2511
-#: eaarch64elfb.c:2511 eaarch64fbsd.c:2511 eaarch64fbsdb.c:2511
-#: eaarch64linux.c:2518 eaarch64linux32.c:2518 eaarch64linux32b.c:2518
-#: eaarch64linuxb.c:2518 earmelf.c:2805 earmelf_fbsd.c:2812
-#: earmelf_fuchsia.c:2805 earmelf_linux.c:2805 earmelf_linux_eabi.c:2805
-#: earmelf_linux_fdpiceabi.c:2805 earmelf_nacl.c:2805 earmelf_nbsd.c:2805
-#: earmelf_phoenix.c:2805 earmelf_vxworks.c:2841 earmelfb.c:2805
-#: earmelfb_fbsd.c:2812 earmelfb_fuchsia.c:2805 earmelfb_linux.c:2805
-#: earmelfb_linux_eabi.c:2805 earmelfb_linux_fdpiceabi.c:2805
-#: earmelfb_nacl.c:2805 earmelfb_nbsd.c:2805 earmnto.c:2780 earmsymbian.c:2805
-#: eelf32metag.c:2429 eelf64lppc.c:2875 eelf64ppc.c:2875 eelf64ppc_fbsd.c:2882
-#: ehppaelf.c:2290 ehppalinux.c:2467 ehppanbsd.c:2467 ehppaobsd.c:2467
+#: lexsup.c:866 lexsup.c:1339 eaarch64cloudabi.c:2512 eaarch64cloudabib.c:2512
+#: eaarch64elf.c:2512 eaarch64elf32.c:2512 eaarch64elf32b.c:2512
+#: eaarch64elfb.c:2512 eaarch64fbsd.c:2512 eaarch64fbsdb.c:2512
+#: eaarch64linux.c:2519 eaarch64linux32.c:2519 eaarch64linux32b.c:2519
+#: eaarch64linuxb.c:2519 earmelf.c:2806 earmelf_fbsd.c:2813
+#: earmelf_fuchsia.c:2806 earmelf_linux.c:2806 earmelf_linux_eabi.c:2806
+#: earmelf_linux_fdpiceabi.c:2806 earmelf_nacl.c:2806 earmelf_nbsd.c:2806
+#: earmelf_phoenix.c:2806 earmelf_vxworks.c:2842 earmelfb.c:2806
+#: earmelfb_fbsd.c:2813 earmelfb_fuchsia.c:2806 earmelfb_linux.c:2806
+#: earmelfb_linux_eabi.c:2806 earmelfb_linux_fdpiceabi.c:2806
+#: earmelfb_nacl.c:2806 earmelfb_nbsd.c:2806 earmnto.c:2781 earmsymbian.c:2806
+#: ecskyelf.c:2262 ecskyelf_linux.c:2424 eelf32metag.c:2430 eelf64lppc.c:2888
+#: eelf64ppc.c:2888 eelf64ppc_fbsd.c:2895 ehppaelf.c:2291 ehppalinux.c:2468
+#: ehppanbsd.c:2468 ehppaobsd.c:2468
 msgid "%F%P: invalid number `%s'\n"
 msgstr "%F%P : nombre invalide « %s »\n"
 
@@ -2103,52 +2110,62 @@ msgstr "  -z relro                    Créer l'en-tête de programme RELRO\n"
 msgid "  -z norelro                  Don't create RELRO program header (default)\n"
 msgstr "  -z norelro                  Ne pas créer l'en-tête de programme RELRO (défaut)\n"
 
-#: lexsup.c:1799
+#: lexsup.c:1800
+#, c-format
+msgid "  -z separate-code            Create separate code program header (default)\n"
+msgstr "  -z separate-code            Créer l'en-tête de programme de code séparé (défaut)\n"
+
+#: lexsup.c:1802
+#, c-format
+msgid "  -z noseparate-code          Don't create separate code program header\n"
+msgstr "  -z noseparate-code          Ne pas créer l'en-tête de programme de code séparé\n"
+
+#: lexsup.c:1805
 #, c-format
 msgid "  -z separate-code            Create separate code program header\n"
 msgstr "  -z separate-code            Créer l'en-tête de programme de code séparé\n"
 
-#: lexsup.c:1801
+#: lexsup.c:1807
 #, c-format
 msgid "  -z noseparate-code          Don't create separate code program header (default)\n"
 msgstr "  -z noseparate-code          Ne pas créer l'en-tête de programme de code séparé (défaut)\n"
 
-#: lexsup.c:1803
+#: lexsup.c:1810
 #, c-format
 msgid "  -z common                   Generate common symbols with STT_COMMON type\n"
 msgstr "  -z common                   Générer les symboles communs avec STT_COMMON pour type\n"
 
-#: lexsup.c:1805
+#: lexsup.c:1812
 #, c-format
 msgid "  -z nocommon                 Generate common symbols with STT_OBJECT type\n"
 msgstr "  -z nocommon                 Générer les symboles communs avec STT_OBJECT pour type\n"
 
-#: lexsup.c:1807
+#: lexsup.c:1814
 #, c-format
 msgid "  -z stack-size=SIZE          Set size of stack segment\n"
 msgstr "  -z stack-size=TAILLE        Fixe la taille du segment de pile\n"
 
-#: lexsup.c:1809
+#: lexsup.c:1816
 #, c-format
 msgid "  -z text                     Treat DT_TEXTREL in shared object as error\n"
 msgstr "  -z text                     Traiter DT_TEXTREL dans les objets partagés comme des erreurs\n"
 
-#: lexsup.c:1811
+#: lexsup.c:1818
 #, c-format
 msgid "  -z notext                   Don't treat DT_TEXTREL in shared object as error\n"
 msgstr "  -z notext                   Ne pas traiter DT_TEXTREL dans les objets partagés comme des erreurs\n"
 
-#: lexsup.c:1813
+#: lexsup.c:1820
 #, c-format
 msgid "  -z textoff                  Don't treat DT_TEXTREL in shared object as error\n"
 msgstr "  -z textoff                  Ne pas traiter DT_TEXTREL dans les objets partagés comme des erreurs\n"
 
-#: lexsup.c:1820
+#: lexsup.c:1827
 #, c-format
 msgid "  --build-id[=STYLE]          Generate build ID note\n"
 msgstr "  --build-id[=STYLE]          Générer la note de l'ID de contruction\n"
 
-#: lexsup.c:1822
+#: lexsup.c:1829
 #, c-format
 msgid ""
 "  --compress-debug-sections=[none|zlib|zlib-gnu|zlib-gabi]\n"
@@ -2157,57 +2174,57 @@ msgstr ""
 "  --compress-debug-sections=[none|zlib|zlib-gnu|zlib-gabi]\n"
 "                              Compresser les sections de debogage DWARF en utilisant zlib\n"
 
-#: lexsup.c:1826
+#: lexsup.c:1833
 #, c-format
 msgid "                               Default: zlib-gabi\n"
 msgstr "                               Défaut: zlib-gabi\n"
 
-#: lexsup.c:1829
+#: lexsup.c:1836
 #, c-format
 msgid "                               Default: none\n"
 msgstr "                               Défaut: none\n"
 
-#: lexsup.c:1832
+#: lexsup.c:1839
 #, c-format
 msgid "  -z common-page-size=SIZE    Set common page size to SIZE\n"
 msgstr "  -z common-page-size=TAILLE    Fixe la taille courante des pages à TAILLE\n"
 
-#: lexsup.c:1834
+#: lexsup.c:1841
 #, c-format
 msgid "  -z max-page-size=SIZE       Set maximum page size to SIZE\n"
 msgstr "  -z max-page-size=TAILLE       Fixe la taille maximale des pages à TAILLE\n"
 
-#: lexsup.c:1836
+#: lexsup.c:1843
 #, c-format
 msgid "  -z defs                     Report unresolved symbols in object files\n"
 msgstr "  -z defs                     Signaler les symboles non résolus dans les fichiers objets\n"
 
-#: lexsup.c:1838
+#: lexsup.c:1845
 #, c-format
 msgid "  -z muldefs                  Allow multiple definitions\n"
 msgstr "-z muldefs                  Autoriser les définitions multiples\n"
 
-#: lexsup.c:1840
+#: lexsup.c:1847
 #, c-format
 msgid "  -z execstack                Mark executable as requiring executable stack\n"
 msgstr "  -z execstack                Marquer l'exécutable comme nécessitant une pile d'exécution\n"
 
-#: lexsup.c:1842
+#: lexsup.c:1849
 #, c-format
 msgid "  -z noexecstack              Mark executable as not requiring executable stack\n"
 msgstr "  -z noexecstack              Marquer l'exécutable comme ne nécessitant pas d'une pile d'exécution\n"
 
-#: lexsup.c:1844
+#: lexsup.c:1851
 #, c-format
 msgid "  -z globalaudit              Mark executable requiring global auditing\n"
 msgstr "  -z globalaudit              Marquer l'exécutable comme nécessitant un audit global\n"
 
-#: lexsup.c:1851
+#: lexsup.c:1858
 #, c-format
 msgid "  --ld-generated-unwind-info  Generate exception handling info for PLT\n"
 msgstr "  --ld-generated-unwind-info  Générer les informations de gestion des exception pour le PLT\n"
 
-#: lexsup.c:1853
+#: lexsup.c:1860
 #, c-format
 msgid ""
 "  --no-ld-generated-unwind-info\n"
@@ -2216,49 +2233,49 @@ msgstr ""
 "  --no-ld-generated-unwind-info\n"
 "                              Ne pas générer les informations de gestion des exception pour le PLT\n"
 
-#: lexsup.c:1864
+#: lexsup.c:1871
 #, c-format
 msgid "ELF emulations:\n"
 msgstr "ELF émulations:\n"
 
-#: lexsup.c:1882
+#: lexsup.c:1889
 #, c-format
 msgid "Usage: %s [options] file...\n"
 msgstr "Usage : %s [options] fichier...\n"
 
-#: lexsup.c:1884
+#: lexsup.c:1891
 #, c-format
 msgid "Options:\n"
 msgstr "Options :\n"
 
-#: lexsup.c:1962
+#: lexsup.c:1969
 #, c-format
 msgid "  @FILE"
 msgstr "  @FICHIER"
 
-#: lexsup.c:1965
+#: lexsup.c:1972
 #, c-format
 msgid "Read options from FILE\n"
 msgstr "Lire les options à partir du FICHIER\n"
 
 #. Note: Various tools (such as libtool) depend upon the
 #. format of the listings below - do not change them.
-#: lexsup.c:1970
+#: lexsup.c:1977
 #, c-format
 msgid "%s: supported targets:"
 msgstr "%s : cibles prises en charge :"
 
-#: lexsup.c:1978
+#: lexsup.c:1985
 #, c-format
 msgid "%s: supported emulations: "
 msgstr "%s : émulations prises en charge : "
 
-#: lexsup.c:1983
+#: lexsup.c:1990
 #, c-format
 msgid "%s: emulation specific options:\n"
 msgstr "%s : options spécifiques d'émulation :\n"
 
-#: lexsup.c:1990
+#: lexsup.c:1997
 #, c-format
 msgid "Report bugs to %s\n"
 msgstr "Rapporter toutes anomalies à %s\n"
@@ -2312,12 +2329,12 @@ msgstr "%X%P : ne peut exporter %s : symbole non repéré\n"
 #: earmelfb.c:620 earmelfb_fbsd.c:620 earmelfb_fuchsia.c:620
 #: earmelfb_linux.c:620 earmelfb_linux_eabi.c:620
 #: earmelfb_linux_fdpiceabi.c:620 earmelfb_nacl.c:620 earmelfb_nbsd.c:620
-#: earmnto.c:620 earmsymbian.c:620 eelf32b4300.c:238 eelf32bmip.c:238
-#: eelf32bmipn32.c:256 eelf32bsmip.c:256 eelf32btsmip.c:238
-#: eelf32btsmip_fbsd.c:238 eelf32btsmipn32.c:238 eelf32btsmipn32_fbsd.c:238
-#: eelf32ebmip.c:238 eelf32ebmipvxworks.c:238 eelf32elmip.c:238
-#: eelf32elmipvxworks.c:238 eelf32l4300.c:238 eelf32lmip.c:238
-#: eelf32lr5900.c:238 eelf32lr5900n32.c:238 eelf32lsmip.c:238
+#: earmnto.c:620 earmsymbian.c:620 ecskyelf.c:208 ecskyelf_linux.c:208
+#: eelf32b4300.c:238 eelf32bmip.c:238 eelf32bmipn32.c:256 eelf32bsmip.c:256
+#: eelf32btsmip.c:238 eelf32btsmip_fbsd.c:238 eelf32btsmipn32.c:238
+#: eelf32btsmipn32_fbsd.c:238 eelf32ebmip.c:238 eelf32ebmipvxworks.c:238
+#: eelf32elmip.c:238 eelf32elmipvxworks.c:238 eelf32l4300.c:238
+#: eelf32lmip.c:238 eelf32lr5900.c:238 eelf32lr5900n32.c:238 eelf32lsmip.c:238
 #: eelf32ltsmip.c:238 eelf32ltsmip_fbsd.c:238 eelf32ltsmipn32.c:238
 #: eelf32ltsmipn32_fbsd.c:238 eelf32metag.c:139 eelf32mipswindiss.c:238
 #: eelf64bmip.c:256 eelf64btsmip.c:238 eelf64btsmip_fbsd.c:238
@@ -2424,7 +2441,7 @@ msgstr "%X%P : erreur : impossible d'utiliser de longs noms de section pour ce
 msgid "<no plugin>"
 msgstr "<no plugin>"
 
-#: plugin.c:246 plugin.c:1017
+#: plugin.c:246 plugin.c:1010
 msgid "%F%P: %s: error loading plugin: %s\n"
 msgstr "%F%P : %s : erreur lors du chargement du greffon : %s\n"
 
@@ -2449,39 +2466,39 @@ msgid "%F%P: unsupported input file size: %s (%ld bytes)\n"
 msgstr "%F%P : taille de fichier d'entré non pris en charge : %s (%ld octets)\n"
 
 #. We should not have a new, indirect or warning symbol here.
-#: plugin.c:726
+#: plugin.c:719
 msgid "%F%P: %s: plugin symbol table corrupt (sym type %d)\n"
 msgstr "%F%P : %s : table de symboles du greffon corrompue (type de symbole %d)\n"
 
-#: plugin.c:786
+#: plugin.c:779
 msgid "%P: %pB: symbol `%s' definition: %d, visibility: %d, resolution: %d\n"
 msgstr "%P : %pB : définition du symbole « %s » : %d, visibilité: %d, résolution: %d\n"
 
-#: plugin.c:861
+#: plugin.c:854
 msgid "%P: warning: "
 msgstr "%P : avertissement : "
 
-#: plugin.c:872
+#: plugin.c:865
 msgid "%P: error: "
 msgstr "%P : erreur : "
 
-#: plugin.c:1024
+#: plugin.c:1017
 msgid "%F%P: %s: plugin error: %d\n"
 msgstr "%F%P : %s : erreur du greffon : %d\n"
 
-#: plugin.c:1079
+#: plugin.c:1072
 msgid "%F%P: plugin_strdup failed to allocate memory: %s\n"
 msgstr "%F%P : échec de l'allocation mémoire de plugin_strdup : %s\n"
 
-#: plugin.c:1111
+#: plugin.c:1104
 msgid "%F%P: plugin failed to allocate memory for input: %s\n"
 msgstr "%F%P : le greffon a échoué à allouer de la mémoire pour l'entrée : %s\n"
 
-#: plugin.c:1138
+#: plugin.c:1131
 msgid "%F%P: %s: plugin reported error claiming file\n"
 msgstr "%F%P : %s : le greffon à signalé une erreur lors de la recherche d'un fichier\n"
 
-#: plugin.c:1248
+#: plugin.c:1241
 msgid "%P: %s: error in plugin cleanup: %d (ignored)\n"
 msgstr "%P : %s : erreur lors du nettoyage du greffon : %d (ignoré)\n"
 
@@ -2499,22 +2516,23 @@ msgstr "%P : %s : erreur lors du nettoyage du greffon : %d (ignoré)\n"
 #: eavr1.c:81 eavr2.c:81 eavr25.c:81 eavr3.c:81 eavr31.c:81 eavr35.c:81
 #: eavr4.c:81 eavr5.c:81 eavr51.c:81 eavr6.c:81 eavrtiny.c:81 eavrxmega1.c:81
 #: eavrxmega2.c:81 eavrxmega3.c:81 eavrxmega4.c:81 eavrxmega5.c:81
-#: eavrxmega6.c:81 eavrxmega7.c:81 ecriself.c:81 ecrislinux.c:81 ed10velf.c:81
-#: ed30v_e.c:64 ed30v_o.c:64 ed30velf.c:64 eelf32_dlx.c:64 eelf32_sparc.c:81
-#: eelf32_sparc_sol2.c:81 eelf32_sparc_vxworks.c:81 eelf32_spu.c:81
-#: eelf32_tic6x_be.c:81 eelf32_tic6x_elf_be.c:81 eelf32_tic6x_elf_le.c:81
-#: eelf32_tic6x_le.c:81 eelf32_tic6x_linux_be.c:81 eelf32_tic6x_linux_le.c:81
-#: eelf32_x86_64.c:84 eelf32_x86_64_nacl.c:81 eelf32am33lin.c:81
-#: eelf32b4300.c:81 eelf32bfin.c:81 eelf32bfinfd.c:81 eelf32bmip.c:81
-#: eelf32bmipn32.c:81 eelf32bsmip.c:81 eelf32btsmip.c:81
-#: eelf32btsmip_fbsd.c:81 eelf32btsmipn32.c:81 eelf32btsmipn32_fbsd.c:81
-#: eelf32cr16.c:81 eelf32cr16c.c:81 eelf32crx.c:81 eelf32ebmip.c:81
-#: eelf32ebmipvxworks.c:81 eelf32elmip.c:81 eelf32elmipvxworks.c:81
-#: eelf32epiphany.c:81 eelf32epiphany_4x4.c:81 eelf32fr30.c:64 eelf32frv.c:64
-#: eelf32frvfd.c:81 eelf32ft32.c:64 eelf32ip2k.c:81 eelf32iq10.c:64
-#: eelf32iq2000.c:64 eelf32l4300.c:81 eelf32lm32.c:81 eelf32lm32fd.c:81
-#: eelf32lmip.c:81 eelf32lppc.c:81 eelf32lppclinux.c:81 eelf32lppcnto.c:81
-#: eelf32lppcsim.c:81 eelf32lr5900.c:81 eelf32lr5900n32.c:81 eelf32lriscv.c:81
+#: eavrxmega6.c:81 eavrxmega7.c:81 ecriself.c:81 ecrislinux.c:81 ecskyelf.c:81
+#: ecskyelf_linux.c:81 ed10velf.c:81 ed30v_e.c:64 ed30v_o.c:64 ed30velf.c:64
+#: eelf32_dlx.c:64 eelf32_sparc.c:81 eelf32_sparc_sol2.c:81
+#: eelf32_sparc_vxworks.c:81 eelf32_spu.c:81 eelf32_tic6x_be.c:81
+#: eelf32_tic6x_elf_be.c:81 eelf32_tic6x_elf_le.c:81 eelf32_tic6x_le.c:81
+#: eelf32_tic6x_linux_be.c:81 eelf32_tic6x_linux_le.c:81 eelf32_x86_64.c:84
+#: eelf32_x86_64_nacl.c:81 eelf32am33lin.c:81 eelf32b4300.c:81 eelf32bfin.c:81
+#: eelf32bfinfd.c:81 eelf32bmip.c:81 eelf32bmipn32.c:81 eelf32bsmip.c:81
+#: eelf32btsmip.c:81 eelf32btsmip_fbsd.c:81 eelf32btsmipn32.c:81
+#: eelf32btsmipn32_fbsd.c:81 eelf32cr16.c:81 eelf32cr16c.c:81 eelf32crx.c:81
+#: eelf32ebmip.c:81 eelf32ebmipvxworks.c:81 eelf32elmip.c:81
+#: eelf32elmipvxworks.c:81 eelf32epiphany.c:81 eelf32epiphany_4x4.c:81
+#: eelf32fr30.c:64 eelf32frv.c:64 eelf32frvfd.c:81 eelf32ft32.c:64
+#: eelf32ip2k.c:81 eelf32iq10.c:64 eelf32iq2000.c:64 eelf32l4300.c:81
+#: eelf32lm32.c:81 eelf32lm32fd.c:81 eelf32lmip.c:81 eelf32lppc.c:81
+#: eelf32lppclinux.c:81 eelf32lppcnto.c:81 eelf32lppcsim.c:81
+#: eelf32lr5900.c:81 eelf32lr5900n32.c:81 eelf32lriscv.c:81
 #: eelf32lriscv_ilp32.c:81 eelf32lriscv_ilp32f.c:81 eelf32lsmip.c:81
 #: eelf32ltsmip.c:81 eelf32ltsmip_fbsd.c:81 eelf32ltsmipn32.c:81
 #: eelf32ltsmipn32_fbsd.c:81 eelf32m32c.c:81 eelf32mb_linux.c:81
@@ -2555,7 +2573,7 @@ msgstr "%P : %s : erreur lors du nettoyage du greffon : %d (ignoré)\n"
 #: eshelf_nbsd.c:81 eshelf_nto.c:81 eshelf_uclinux.c:81 eshelf_vxworks.c:81
 #: eshlelf.c:81 eshlelf_fd.c:81 eshlelf_linux.c:81 eshlelf_nbsd.c:81
 #: eshlelf_nto.c:81 eshlelf_vxworks.c:81 ev850.c:81 ev850_rh850.c:81
-#: exgateelf.c:81
+#: exgateelf.c:64
 msgid "%F%P: map sections to segments failed: %E\n"
 msgstr "%F%P : échec de l'association de sections à des segments : %E\n"
 
@@ -2575,16 +2593,17 @@ msgstr "%F%P : échec de l'association de sections à des segments : %E\n"
 #: eavr3.c:101 eavr31.c:101 eavr35.c:101 eavr4.c:101 eavr5.c:101 eavr51.c:101
 #: eavr6.c:101 eavrtiny.c:101 eavrxmega1.c:101 eavrxmega2.c:101
 #: eavrxmega3.c:101 eavrxmega4.c:101 eavrxmega5.c:101 eavrxmega6.c:101
-#: eavrxmega7.c:101 ecriself.c:101 ecrislinux.c:101 ed10velf.c:101
-#: ed30v_e.c:84 ed30v_o.c:84 ed30velf.c:84 eelf32_dlx.c:84 eelf32_sparc.c:101
-#: eelf32_sparc_sol2.c:101 eelf32_sparc_vxworks.c:101 eelf32_spu.c:101
-#: eelf32_tic6x_be.c:101 eelf32_tic6x_elf_be.c:101 eelf32_tic6x_elf_le.c:101
-#: eelf32_tic6x_le.c:101 eelf32_tic6x_linux_be.c:101
-#: eelf32_tic6x_linux_le.c:101 eelf32_x86_64.c:104 eelf32_x86_64_nacl.c:101
-#: eelf32am33lin.c:101 eelf32b4300.c:101 eelf32bfin.c:101 eelf32bfinfd.c:101
-#: eelf32bmip.c:101 eelf32bmipn32.c:101 eelf32bsmip.c:101 eelf32btsmip.c:101
-#: eelf32btsmip_fbsd.c:101 eelf32btsmipn32.c:101 eelf32btsmipn32_fbsd.c:101
-#: eelf32cr16.c:101 eelf32cr16c.c:101 eelf32crx.c:101 eelf32ebmip.c:101
+#: eavrxmega7.c:101 ecriself.c:101 ecrislinux.c:101 ecskyelf.c:101
+#: ecskyelf_linux.c:101 ed10velf.c:101 ed30v_e.c:84 ed30v_o.c:84 ed30velf.c:84
+#: eelf32_dlx.c:84 eelf32_sparc.c:101 eelf32_sparc_sol2.c:101
+#: eelf32_sparc_vxworks.c:101 eelf32_spu.c:101 eelf32_tic6x_be.c:101
+#: eelf32_tic6x_elf_be.c:101 eelf32_tic6x_elf_le.c:101 eelf32_tic6x_le.c:101
+#: eelf32_tic6x_linux_be.c:101 eelf32_tic6x_linux_le.c:101 eelf32_x86_64.c:104
+#: eelf32_x86_64_nacl.c:101 eelf32am33lin.c:101 eelf32b4300.c:101
+#: eelf32bfin.c:101 eelf32bfinfd.c:101 eelf32bmip.c:101 eelf32bmipn32.c:101
+#: eelf32bsmip.c:101 eelf32btsmip.c:101 eelf32btsmip_fbsd.c:101
+#: eelf32btsmipn32.c:101 eelf32btsmipn32_fbsd.c:101 eelf32cr16.c:101
+#: eelf32cr16c.c:101 eelf32crx.c:101 eelf32ebmip.c:101
 #: eelf32ebmipvxworks.c:101 eelf32elmip.c:101 eelf32elmipvxworks.c:101
 #: eelf32epiphany.c:101 eelf32epiphany_4x4.c:101 eelf32fr30.c:84
 #: eelf32frv.c:84 eelf32frvfd.c:101 eelf32ft32.c:84 eelf32ip2k.c:101
@@ -2635,7 +2654,7 @@ msgstr "%F%P : échec de l'association de sections à des segments : %E\n"
 #: eshelf_nbsd.c:101 eshelf_nto.c:101 eshelf_uclinux.c:101
 #: eshelf_vxworks.c:101 eshlelf.c:101 eshlelf_fd.c:101 eshlelf_linux.c:101
 #: eshlelf_nbsd.c:101 eshlelf_nto.c:101 eshlelf_vxworks.c:101 ev850.c:101
-#: ev850_rh850.c:101 exgateelf.c:101
+#: ev850_rh850.c:101 exgateelf.c:84
 msgid "%F%P: looping in map_segments"
 msgstr "%F%P : boucle dans map_segments"
 
@@ -2653,19 +2672,19 @@ msgstr "%F%P : boucle dans map_segments"
 #: eavr3.c:230 eavr31.c:230 eavr35.c:230 eavr4.c:230 eavr5.c:230 eavr51.c:230
 #: eavr6.c:230 eavrtiny.c:230 eavrxmega1.c:230 eavrxmega2.c:230
 #: eavrxmega3.c:230 eavrxmega4.c:230 eavrxmega5.c:230 eavrxmega6.c:230
-#: eavrxmega7.c:230 eelf32b4300.c:271 eelf32bmip.c:271 eelf32bmipn32.c:289
-#: eelf32bsmip.c:289 eelf32btsmip.c:271 eelf32btsmip_fbsd.c:271
-#: eelf32btsmipn32.c:271 eelf32btsmipn32_fbsd.c:271 eelf32ebmip.c:271
-#: eelf32ebmipvxworks.c:271 eelf32elmip.c:271 eelf32elmipvxworks.c:271
-#: eelf32l4300.c:271 eelf32lmip.c:271 eelf32lr5900.c:271 eelf32lr5900n32.c:271
-#: eelf32lsmip.c:271 eelf32ltsmip.c:271 eelf32ltsmip_fbsd.c:271
-#: eelf32ltsmipn32.c:271 eelf32ltsmipn32_fbsd.c:271 eelf32metag.c:258
-#: eelf32mipswindiss.c:271 eelf64bmip.c:289 eelf64btsmip.c:271
-#: eelf64btsmip_fbsd.c:271 eelf64lppc.c:523 eelf64ltsmip.c:271
-#: eelf64ltsmip_fbsd.c:271 eelf64ppc.c:523 eelf64ppc_fbsd.c:523 ehppaelf.c:282
-#: ehppalinux.c:282 ehppanbsd.c:282 ehppaobsd.c:282 em68hc11elf.c:349
-#: em68hc11elfb.c:349 em68hc12elf.c:349 em68hc12elfb.c:349 enios2elf.c:275
-#: enios2linux.c:275
+#: eavrxmega7.c:230 ecskyelf.c:254 ecskyelf_linux.c:254 eelf32b4300.c:271
+#: eelf32bmip.c:271 eelf32bmipn32.c:289 eelf32bsmip.c:289 eelf32btsmip.c:271
+#: eelf32btsmip_fbsd.c:271 eelf32btsmipn32.c:271 eelf32btsmipn32_fbsd.c:271
+#: eelf32ebmip.c:271 eelf32ebmipvxworks.c:271 eelf32elmip.c:271
+#: eelf32elmipvxworks.c:271 eelf32l4300.c:271 eelf32lmip.c:271
+#: eelf32lr5900.c:271 eelf32lr5900n32.c:271 eelf32lsmip.c:271
+#: eelf32ltsmip.c:271 eelf32ltsmip_fbsd.c:271 eelf32ltsmipn32.c:271
+#: eelf32ltsmipn32_fbsd.c:271 eelf32metag.c:258 eelf32mipswindiss.c:271
+#: eelf64bmip.c:289 eelf64btsmip.c:271 eelf64btsmip_fbsd.c:271
+#: eelf64lppc.c:523 eelf64ltsmip.c:271 eelf64ltsmip_fbsd.c:271 eelf64ppc.c:523
+#: eelf64ppc_fbsd.c:523 ehppaelf.c:282 ehppalinux.c:282 ehppanbsd.c:282
+#: ehppaobsd.c:282 em68hc11elf.c:349 em68hc11elfb.c:349 em68hc12elf.c:349
+#: em68hc12elfb.c:349 enios2elf.c:275 enios2linux.c:275
 msgid "%X%P: can not make stub section: %E\n"
 msgstr "%X%P : impossible de créer une section d'amorçage : %E\n"
 
@@ -2673,79 +2692,78 @@ msgstr "%X%P : impossible de créer une section d'amorçage : %E\n"
 #: eaarch64elf32.c:315 eaarch64elf32b.c:315 eaarch64elfb.c:315
 #: eaarch64fbsd.c:315 eaarch64fbsdb.c:315 eaarch64linux.c:315
 #: eaarch64linux32.c:315 eaarch64linux32b.c:315 eaarch64linuxb.c:315
-#: earcelf.c:1827 earcelf_prof.c:1827 earclinux.c:1829 earclinux_nps.c:1829
-#: earclinux_prof.c:1829 earcv2elf.c:1827 earcv2elfx.c:1827 earmelf.c:455
+#: earcelf.c:1828 earcelf_prof.c:1828 earclinux.c:1830 earclinux_nps.c:1830
+#: earclinux_prof.c:1830 earcv2elf.c:1828 earcv2elfx.c:1828 earmelf.c:455
 #: earmelf_fbsd.c:455 earmelf_fuchsia.c:455 earmelf_linux.c:455
 #: earmelf_linux_eabi.c:455 earmelf_linux_fdpiceabi.c:455 earmelf_nacl.c:455
 #: earmelf_nbsd.c:455 earmelf_phoenix.c:455 earmelf_vxworks.c:455
 #: earmelfb.c:455 earmelfb_fbsd.c:455 earmelfb_fuchsia.c:455
 #: earmelfb_linux.c:455 earmelfb_linux_eabi.c:455
 #: earmelfb_linux_fdpiceabi.c:455 earmelfb_nacl.c:455 earmelfb_nbsd.c:455
-#: earmnto.c:455 earmsymbian.c:455 eavr1.c:2030 eavr2.c:2030 eavr25.c:2030
-#: eavr3.c:2030 eavr31.c:2030 eavr35.c:2030 eavr4.c:2030 eavr5.c:2030
-#: eavr51.c:2030 eavr6.c:2030 eavrtiny.c:2030 eavrxmega1.c:2030
-#: eavrxmega2.c:2030 eavrxmega3.c:2030 eavrxmega4.c:2030 eavrxmega5.c:2030
-#: eavrxmega6.c:2030 eavrxmega7.c:2030 ecriself.c:1827 ecrislinux.c:1827
-#: ed10velf.c:1827 eelf32_sparc.c:1827 eelf32_sparc_sol2.c:1958
-#: eelf32_sparc_vxworks.c:1856 eelf32_spu.c:2361 eelf32_tic6x_be.c:233
+#: earmnto.c:455 earmsymbian.c:455 eavr1.c:2031 eavr2.c:2031 eavr25.c:2031
+#: eavr3.c:2031 eavr31.c:2031 eavr35.c:2031 eavr4.c:2031 eavr5.c:2031
+#: eavr51.c:2031 eavr6.c:2031 eavrtiny.c:2031 eavrxmega1.c:2031
+#: eavrxmega2.c:2031 eavrxmega3.c:2031 eavrxmega4.c:2031 eavrxmega5.c:2031
+#: eavrxmega6.c:2031 eavrxmega7.c:2031 ecriself.c:1828 ecrislinux.c:1828
+#: ed10velf.c:1828 eelf32_sparc.c:1828 eelf32_sparc_sol2.c:1959
+#: eelf32_sparc_vxworks.c:1857 eelf32_spu.c:2498 eelf32_tic6x_be.c:233
 #: eelf32_tic6x_elf_be.c:233 eelf32_tic6x_elf_le.c:233 eelf32_tic6x_le.c:233
 #: eelf32_tic6x_linux_be.c:233 eelf32_tic6x_linux_le.c:233
-#: eelf32_x86_64.c:2159 eelf32_x86_64_nacl.c:1827 eelf32am33lin.c:1827
-#: eelf32b4300.c:2053 eelf32bfin.c:1836 eelf32bfinfd.c:1836 eelf32bmip.c:2053
-#: eelf32bmipn32.c:2071 eelf32bsmip.c:2071 eelf32btsmip.c:2053
-#: eelf32btsmip_fbsd.c:2060 eelf32btsmipn32.c:2053 eelf32btsmipn32_fbsd.c:2060
-#: eelf32cr16.c:1978 eelf32cr16c.c:1827 eelf32crx.c:1866 eelf32ebmip.c:2053
-#: eelf32ebmipvxworks.c:2082 eelf32elmip.c:2053 eelf32elmipvxworks.c:2082
-#: eelf32epiphany.c:1827 eelf32epiphany_4x4.c:1829 eelf32frvfd.c:1827
-#: eelf32ip2k.c:1827 eelf32l4300.c:2053 eelf32lm32.c:1827 eelf32lm32fd.c:1827
-#: eelf32lmip.c:2053 eelf32lppc.c:2030 eelf32lppclinux.c:2030
-#: eelf32lppcnto.c:2030 eelf32lppcsim.c:2030 eelf32lr5900.c:2053
-#: eelf32lr5900n32.c:2053 eelf32lriscv.c:141 eelf32lriscv_ilp32.c:141
-#: eelf32lriscv_ilp32f.c:141 eelf32lsmip.c:2053 eelf32ltsmip.c:2053
-#: eelf32ltsmip_fbsd.c:2060 eelf32ltsmipn32.c:2053 eelf32ltsmipn32_fbsd.c:2060
-#: eelf32m32c.c:1838 eelf32mb_linux.c:1827 eelf32mbel_linux.c:1827
-#: eelf32mcore.c:1827 eelf32mep.c:1827 eelf32metag.c:308
-#: eelf32microblaze.c:1827 eelf32microblazeel.c:1827 eelf32mipswindiss.c:2053
-#: eelf32or1k.c:1827 eelf32or1k_linux.c:1827 eelf32ppc.c:2030
-#: eelf32ppc_fbsd.c:2037 eelf32ppclinux.c:2030 eelf32ppcnto.c:2030
-#: eelf32ppcsim.c:2030 eelf32ppcvxworks.c:2004 eelf32ppcwindiss.c:2030
-#: eelf32rl78.c:1827 eelf32rx.c:1843 eelf32tilegx.c:1827
-#: eelf32tilegx_be.c:1827 eelf32tilepro.c:1827 eelf32vax.c:1827
-#: eelf32visium.c:1827 eelf32xc16x.c:1827 eelf32xc16xl.c:1827
-#: eelf32xc16xs.c:1827 eelf32xstormy16.c:1838 eelf32xtensa.c:3714
-#: eelf64_aix.c:1827 eelf64_ia64.c:1851 eelf64_ia64_fbsd.c:1858
-#: eelf64_ia64_vms.c:262 eelf64_s390.c:1842 eelf64_sparc.c:1827
-#: eelf64_sparc_fbsd.c:1834 eelf64_sparc_sol2.c:1958 eelf64alpha.c:1910
-#: eelf64alpha_fbsd.c:1917 eelf64alpha_nbsd.c:1910 eelf64bmip.c:2071
-#: eelf64btsmip.c:2053 eelf64btsmip_fbsd.c:2060 eelf64hppa.c:1827
+#: eelf32_x86_64.c:2160 eelf32_x86_64_nacl.c:1828 eelf32am33lin.c:1828
+#: eelf32b4300.c:2055 eelf32bfin.c:1837 eelf32bfinfd.c:1837 eelf32bmip.c:2055
+#: eelf32bmipn32.c:2073 eelf32bsmip.c:2073 eelf32btsmip.c:2055
+#: eelf32btsmip_fbsd.c:2062 eelf32btsmipn32.c:2055 eelf32btsmipn32_fbsd.c:2062
+#: eelf32cr16.c:1979 eelf32cr16c.c:1828 eelf32crx.c:1867 eelf32ebmip.c:2055
+#: eelf32ebmipvxworks.c:2084 eelf32elmip.c:2055 eelf32elmipvxworks.c:2084
+#: eelf32epiphany.c:1828 eelf32epiphany_4x4.c:1830 eelf32frvfd.c:1828
+#: eelf32ip2k.c:1828 eelf32l4300.c:2055 eelf32lm32.c:1828 eelf32lm32fd.c:1828
+#: eelf32lmip.c:2055 eelf32lppc.c:2044 eelf32lppclinux.c:2044
+#: eelf32lppcnto.c:2044 eelf32lppcsim.c:2044 eelf32lr5900.c:2055
+#: eelf32lr5900n32.c:2055 eelf32lriscv.c:141 eelf32lriscv_ilp32.c:141
+#: eelf32lriscv_ilp32f.c:141 eelf32lsmip.c:2055 eelf32ltsmip.c:2055
+#: eelf32ltsmip_fbsd.c:2062 eelf32ltsmipn32.c:2055 eelf32ltsmipn32_fbsd.c:2062
+#: eelf32m32c.c:1839 eelf32mb_linux.c:1828 eelf32mbel_linux.c:1828
+#: eelf32mcore.c:1828 eelf32mep.c:1828 eelf32metag.c:308
+#: eelf32microblaze.c:1828 eelf32microblazeel.c:1828 eelf32mipswindiss.c:2055
+#: eelf32or1k.c:1828 eelf32or1k_linux.c:1828 eelf32ppc.c:2044
+#: eelf32ppc_fbsd.c:2051 eelf32ppclinux.c:2044 eelf32ppcnto.c:2044
+#: eelf32ppcsim.c:2044 eelf32ppcvxworks.c:2018 eelf32ppcwindiss.c:2044
+#: eelf32rl78.c:1828 eelf32rx.c:1844 eelf32tilegx.c:1828
+#: eelf32tilegx_be.c:1828 eelf32tilepro.c:1828 eelf32vax.c:1828
+#: eelf32visium.c:1828 eelf32xc16x.c:1828 eelf32xc16xl.c:1828
+#: eelf32xc16xs.c:1828 eelf32xstormy16.c:1839 eelf32xtensa.c:3715
+#: eelf64_aix.c:1828 eelf64_ia64.c:1852 eelf64_ia64_fbsd.c:1859
+#: eelf64_ia64_vms.c:262 eelf64_s390.c:1843 eelf64_sparc.c:1828
+#: eelf64_sparc_fbsd.c:1835 eelf64_sparc_sol2.c:1959 eelf64alpha.c:1911
+#: eelf64alpha_fbsd.c:1918 eelf64alpha_nbsd.c:1911 eelf64bmip.c:2073
+#: eelf64btsmip.c:2055 eelf64btsmip_fbsd.c:2062 eelf64hppa.c:1828
 #: eelf64lppc.c:633 eelf64lriscv.c:141 eelf64lriscv_lp64.c:141
-#: eelf64lriscv_lp64f.c:141 eelf64ltsmip.c:2053 eelf64ltsmip_fbsd.c:2060
-#: eelf64mmix.c:1938 eelf64ppc.c:633 eelf64ppc_fbsd.c:633 eelf64rdos.c:1827
-#: eelf64tilegx.c:1827 eelf64tilegx_be.c:1827 eelf_i386.c:2159
-#: eelf_i386_be.c:1827 eelf_i386_chaos.c:1827 eelf_i386_fbsd.c:1834
-#: eelf_i386_ldso.c:1834 eelf_i386_nacl.c:1827 eelf_i386_sol2.c:1965
-#: eelf_i386_vxworks.c:1856 eelf_iamcu.c:1827 eelf_k1om.c:2159
-#: eelf_k1om_fbsd.c:1834 eelf_l1om.c:2159 eelf_l1om_fbsd.c:1834
-#: eelf_s390.c:1827 eelf_x86_64.c:2159 eelf_x86_64_cloudabi.c:1827
-#: eelf_x86_64_fbsd.c:1834 eelf_x86_64_nacl.c:1827 eelf_x86_64_sol2.c:1958
-#: eh8300elf.c:1827 eh8300elf_linux.c:1827 eh8300helf.c:1827
-#: eh8300helf_linux.c:1827 eh8300hnelf.c:1827 eh8300self.c:1827
-#: eh8300self_linux.c:1827 eh8300snelf.c:1827 eh8300sxelf.c:1827
-#: eh8300sxelf_linux.c:1827 eh8300sxnelf.c:1827 ehppa64linux.c:1827
+#: eelf64lriscv_lp64f.c:141 eelf64ltsmip.c:2055 eelf64ltsmip_fbsd.c:2062
+#: eelf64mmix.c:1939 eelf64ppc.c:633 eelf64ppc_fbsd.c:633 eelf64rdos.c:1828
+#: eelf64tilegx.c:1828 eelf64tilegx_be.c:1828 eelf_i386.c:2160
+#: eelf_i386_be.c:1828 eelf_i386_chaos.c:1828 eelf_i386_fbsd.c:1835
+#: eelf_i386_ldso.c:1835 eelf_i386_nacl.c:1828 eelf_i386_sol2.c:1966
+#: eelf_i386_vxworks.c:1857 eelf_iamcu.c:1828 eelf_k1om.c:2160
+#: eelf_k1om_fbsd.c:1835 eelf_l1om.c:2160 eelf_l1om_fbsd.c:1835
+#: eelf_s390.c:1828 eelf_x86_64.c:2160 eelf_x86_64_cloudabi.c:1828
+#: eelf_x86_64_fbsd.c:1835 eelf_x86_64_nacl.c:1828 eelf_x86_64_sol2.c:1959
+#: eh8300elf.c:1828 eh8300elf_linux.c:1828 eh8300helf.c:1828
+#: eh8300helf_linux.c:1828 eh8300hnelf.c:1828 eh8300self.c:1828
+#: eh8300self_linux.c:1828 eh8300snelf.c:1828 eh8300sxelf.c:1828
+#: eh8300sxelf_linux.c:1828 eh8300sxnelf.c:1828 ehppa64linux.c:1828
 #: ehppaelf.c:332 ehppalinux.c:332 ehppanbsd.c:332 ehppaobsd.c:332
-#: ei386lynx.c:1834 ei386moss.c:1827 ei386nto.c:1827 em32relf.c:1827
-#: em32relf_linux.c:1827 em32rlelf.c:1827 em32rlelf_linux.c:1827
-#: em68hc11elf.c:2127 em68hc11elfb.c:2127 em68hc12elf.c:2127
-#: em68hc12elfb.c:2127 em68kelf.c:1977 em68kelfnbsd.c:1977 em9s12zelf.c:1827
-#: emn10300.c:1827 ends32belf.c:2004 ends32belf16m.c:2004
-#: ends32belf_linux.c:2004 ends32elf.c:2004 ends32elf16m.c:2004
-#: ends32elf_linux.c:2004 enios2elf.c:325 enios2linux.c:325 eppclynx.c:2037
-#: epruelf.c:1847 escore3_elf.c:1847 escore7_elf.c:1847 eshelf.c:1827
-#: eshelf_fd.c:1827 eshelf_linux.c:1827 eshelf_nbsd.c:1827 eshelf_nto.c:1827
-#: eshelf_uclinux.c:1827 eshelf_vxworks.c:1856 eshlelf.c:1827
-#: eshlelf_fd.c:1827 eshlelf_linux.c:1827 eshlelf_nbsd.c:1827
-#: eshlelf_nto.c:1827 eshlelf_vxworks.c:1856 ev850.c:1873 ev850_rh850.c:1873
-#: exgateelf.c:1827
+#: ei386lynx.c:1835 ei386moss.c:1828 ei386nto.c:1828 em32relf.c:1828
+#: em32relf_linux.c:1828 em32rlelf.c:1828 em32rlelf_linux.c:1828
+#: em68hc11elf.c:2128 em68hc11elfb.c:2128 em68hc12elf.c:2128
+#: em68hc12elfb.c:2128 em68kelf.c:1978 em68kelfnbsd.c:1978 em9s12zelf.c:1828
+#: emn10300.c:1828 ends32belf.c:1935 ends32belf16m.c:1935
+#: ends32belf_linux.c:1935 ends32elf.c:1935 ends32elf16m.c:1935
+#: ends32elf_linux.c:1935 enios2elf.c:325 enios2linux.c:325 eppclynx.c:2051
+#: epruelf.c:1848 escore3_elf.c:1848 escore7_elf.c:1848 eshelf.c:1828
+#: eshelf_fd.c:1828 eshelf_linux.c:1828 eshelf_nbsd.c:1828 eshelf_nto.c:1828
+#: eshelf_uclinux.c:1828 eshelf_vxworks.c:1857 eshlelf.c:1828
+#: eshlelf_fd.c:1828 eshlelf_linux.c:1828 eshlelf_nbsd.c:1828
+#: eshlelf_nto.c:1828 eshlelf_vxworks.c:1857 ev850.c:1874 ev850_rh850.c:1874
 msgid "%X%P: .eh_frame/.stab edit: %E\n"
 msgstr "%X%P : édition de .eh_frame/.stab : %E\n"
 
@@ -2759,7 +2777,7 @@ msgstr "%X%P : édition de .eh_frame/.stab : %E\n"
 #: earmelfb.c:470 earmelfb_fbsd.c:470 earmelfb_fuchsia.c:470
 #: earmelfb_linux.c:470 earmelfb_linux_eabi.c:470
 #: earmelfb_linux_fdpiceabi.c:470 earmelfb_nacl.c:470 earmelfb_nbsd.c:470
-#: earmnto.c:470 earmsymbian.c:470
+#: earmnto.c:470 earmsymbian.c:470 ecskyelf.c:304 ecskyelf_linux.c:304
 msgid "%X%P: could not compute sections lists for stub generation: %E\n"
 msgstr "%X%P : impossible de calculer les listes de sections pour la génération d'espace d'amorçage : %E\n"
 
@@ -2860,8 +2878,8 @@ msgstr "%X%P : impossible de construire les secteurs d'amorçage : %E\n"
 #: eavrxmega7.c:194 eelf32lriscv.c:162 eelf32lriscv_ilp32.c:162
 #: eelf32lriscv_ilp32f.c:162 eelf64lriscv.c:162 eelf64lriscv_lp64.c:162
 #: eelf64lriscv_lp64f.c:162 ei386pe.c:1370 ei386pe_posix.c:1370
-#: emcorepe.c:1370 ends32belf.c:133 ends32belf16m.c:133 ends32belf_linux.c:133
-#: ends32elf.c:133 ends32elf16m.c:133 ends32elf_linux.c:133 eppcpe.c:1370
+#: emcorepe.c:1370 ends32belf.c:126 ends32belf16m.c:126 ends32belf_linux.c:126
+#: ends32elf.c:126 ends32elf16m.c:126 ends32elf_linux.c:126 eppcpe.c:1370
 #: escore3_elf.c:128 escore7_elf.c:128 eshpe.c:1370 ev850.c:142
 #: ev850_rh850.c:142
 msgid "%F%P: error: cannot change output format whilst linking %s binaries\n"
@@ -2883,40 +2901,41 @@ msgstr "%F%P : erreur : impossible de changer le format de sortie lors de l'é
 #: eavr3.c:331 eavr31.c:331 eavr35.c:331 eavr4.c:331 eavr5.c:331 eavr51.c:331
 #: eavr6.c:331 eavrtiny.c:331 eavrxmega1.c:331 eavrxmega2.c:331
 #: eavrxmega3.c:331 eavrxmega4.c:331 eavrxmega5.c:331 eavrxmega6.c:331
-#: eavrxmega7.c:331 ecriself.c:128 ecrislinux.c:128 ed10velf.c:128
-#: eelf32_sparc.c:128 eelf32_sparc_sol2.c:259 eelf32_sparc_vxworks.c:157
-#: eelf32_spu.c:662 eelf32_tic6x_be.c:266 eelf32_tic6x_elf_be.c:266
-#: eelf32_tic6x_elf_le.c:266 eelf32_tic6x_le.c:266 eelf32_tic6x_linux_be.c:266
+#: eavrxmega7.c:331 ecriself.c:128 ecrislinux.c:128 ecskyelf.c:385
+#: ecskyelf_linux.c:385 ed10velf.c:128 eelf32_sparc.c:128
+#: eelf32_sparc_sol2.c:259 eelf32_sparc_vxworks.c:157 eelf32_spu.c:798
+#: eelf32_tic6x_be.c:266 eelf32_tic6x_elf_be.c:266 eelf32_tic6x_elf_le.c:266
+#: eelf32_tic6x_le.c:266 eelf32_tic6x_linux_be.c:266
 #: eelf32_tic6x_linux_le.c:266 eelf32_x86_64.c:131 eelf32_x86_64_nacl.c:128
-#: eelf32am33lin.c:128 eelf32b4300.c:354 eelf32bfin.c:137 eelf32bfinfd.c:137
-#: eelf32bmip.c:354 eelf32bmipn32.c:372 eelf32bsmip.c:372 eelf32btsmip.c:354
-#: eelf32btsmip_fbsd.c:354 eelf32btsmipn32.c:354 eelf32btsmipn32_fbsd.c:354
-#: eelf32cr16.c:279 eelf32cr16c.c:128 eelf32crx.c:167 eelf32ebmip.c:354
-#: eelf32ebmipvxworks.c:383 eelf32elmip.c:354 eelf32elmipvxworks.c:383
+#: eelf32am33lin.c:128 eelf32b4300.c:355 eelf32bfin.c:137 eelf32bfinfd.c:137
+#: eelf32bmip.c:355 eelf32bmipn32.c:373 eelf32bsmip.c:373 eelf32btsmip.c:355
+#: eelf32btsmip_fbsd.c:355 eelf32btsmipn32.c:355 eelf32btsmipn32_fbsd.c:355
+#: eelf32cr16.c:279 eelf32cr16c.c:128 eelf32crx.c:167 eelf32ebmip.c:355
+#: eelf32ebmipvxworks.c:384 eelf32elmip.c:355 eelf32elmipvxworks.c:384
 #: eelf32epiphany.c:128 eelf32epiphany_4x4.c:130 eelf32frvfd.c:128
-#: eelf32ip2k.c:128 eelf32l4300.c:354 eelf32lm32.c:128 eelf32lm32fd.c:128
-#: eelf32lmip.c:354 eelf32lppc.c:331 eelf32lppclinux.c:331 eelf32lppcnto.c:331
-#: eelf32lppcsim.c:331 eelf32lr5900.c:354 eelf32lr5900n32.c:354
+#: eelf32ip2k.c:128 eelf32l4300.c:355 eelf32lm32.c:128 eelf32lm32fd.c:128
+#: eelf32lmip.c:355 eelf32lppc.c:344 eelf32lppclinux.c:344 eelf32lppcnto.c:344
+#: eelf32lppcsim.c:344 eelf32lr5900.c:355 eelf32lr5900n32.c:355
 #: eelf32lriscv.c:193 eelf32lriscv_ilp32.c:193 eelf32lriscv_ilp32f.c:193
-#: eelf32lsmip.c:354 eelf32ltsmip.c:354 eelf32ltsmip_fbsd.c:354
-#: eelf32ltsmipn32.c:354 eelf32ltsmipn32_fbsd.c:354 eelf32m32c.c:139
+#: eelf32lsmip.c:355 eelf32ltsmip.c:355 eelf32ltsmip_fbsd.c:355
+#: eelf32ltsmipn32.c:355 eelf32ltsmipn32_fbsd.c:355 eelf32m32c.c:139
 #: eelf32mb_linux.c:128 eelf32mbel_linux.c:128 eelf32mcore.c:128
 #: eelf32mep.c:128 eelf32metag.c:403 eelf32microblaze.c:128
-#: eelf32microblazeel.c:128 eelf32mipswindiss.c:354 eelf32or1k.c:128
-#: eelf32or1k_linux.c:128 eelf32ppc.c:331 eelf32ppc_fbsd.c:331
-#: eelf32ppclinux.c:331 eelf32ppcnto.c:331 eelf32ppcsim.c:331
-#: eelf32ppcvxworks.c:305 eelf32ppcwindiss.c:331 eelf32rl78.c:128
+#: eelf32microblazeel.c:128 eelf32mipswindiss.c:355 eelf32or1k.c:128
+#: eelf32or1k_linux.c:128 eelf32ppc.c:344 eelf32ppc_fbsd.c:344
+#: eelf32ppclinux.c:344 eelf32ppcnto.c:344 eelf32ppcsim.c:344
+#: eelf32ppcvxworks.c:318 eelf32ppcwindiss.c:344 eelf32rl78.c:128
 #: eelf32rx.c:144 eelf32tilegx.c:128 eelf32tilegx_be.c:128 eelf32tilepro.c:128
 #: eelf32vax.c:128 eelf32visium.c:128 eelf32xc16x.c:128 eelf32xc16xl.c:128
 #: eelf32xc16xs.c:128 eelf32xstormy16.c:139 eelf32xtensa.c:2015
 #: eelf64_aix.c:128 eelf64_ia64.c:152 eelf64_ia64_fbsd.c:152 eelf64_s390.c:143
 #: eelf64_sparc.c:128 eelf64_sparc_fbsd.c:128 eelf64_sparc_sol2.c:259
 #: eelf64alpha.c:211 eelf64alpha_fbsd.c:211 eelf64alpha_nbsd.c:211
-#: eelf64bmip.c:372 eelf64btsmip.c:354 eelf64btsmip_fbsd.c:354
-#: eelf64hppa.c:128 eelf64lppc.c:778 eelf64lriscv.c:193
-#: eelf64lriscv_lp64.c:193 eelf64lriscv_lp64f.c:193 eelf64ltsmip.c:354
-#: eelf64ltsmip_fbsd.c:354 eelf64mmix.c:239 eelf64ppc.c:778
-#: eelf64ppc_fbsd.c:778 eelf64rdos.c:128 eelf64tilegx.c:128
+#: eelf64bmip.c:373 eelf64btsmip.c:355 eelf64btsmip_fbsd.c:355
+#: eelf64hppa.c:128 eelf64lppc.c:790 eelf64lriscv.c:193
+#: eelf64lriscv_lp64.c:193 eelf64lriscv_lp64f.c:193 eelf64ltsmip.c:355
+#: eelf64ltsmip_fbsd.c:355 eelf64mmix.c:239 eelf64ppc.c:790
+#: eelf64ppc_fbsd.c:790 eelf64rdos.c:128 eelf64tilegx.c:128
 #: eelf64tilegx_be.c:128 eelf_i386.c:131 eelf_i386_be.c:128
 #: eelf_i386_chaos.c:128 eelf_i386_fbsd.c:128 eelf_i386_ldso.c:128
 #: eelf_i386_nacl.c:128 eelf_i386_sol2.c:259 eelf_i386_vxworks.c:157
@@ -2932,13 +2951,13 @@ msgstr "%F%P : erreur : impossible de changer le format de sortie lors de l'é
 #: em32relf_linux.c:128 em32rlelf.c:128 em32rlelf_linux.c:128
 #: em68hc11elf.c:428 em68hc11elfb.c:428 em68hc12elf.c:428 em68hc12elfb.c:428
 #: em68kelf.c:278 em68kelfnbsd.c:278 em9s12zelf.c:128 emn10300.c:128
-#: ends32belf.c:305 ends32belf16m.c:305 ends32belf_linux.c:305 ends32elf.c:305
-#: ends32elf16m.c:305 ends32elf_linux.c:305 enios2elf.c:421 enios2linux.c:421
-#: eppclynx.c:331 epruelf.c:148 escore3_elf.c:148 escore7_elf.c:148
+#: ends32belf.c:235 ends32belf16m.c:235 ends32belf_linux.c:235 ends32elf.c:235
+#: ends32elf16m.c:235 ends32elf_linux.c:235 enios2elf.c:421 enios2linux.c:421
+#: eppclynx.c:344 epruelf.c:148 escore3_elf.c:148 escore7_elf.c:148
 #: eshelf.c:128 eshelf_fd.c:128 eshelf_linux.c:128 eshelf_nbsd.c:128
 #: eshelf_nto.c:128 eshelf_uclinux.c:128 eshelf_vxworks.c:157 eshlelf.c:128
 #: eshlelf_fd.c:128 eshlelf_linux.c:128 eshlelf_nbsd.c:128 eshlelf_nto.c:128
-#: eshlelf_vxworks.c:157 ev850.c:174 ev850_rh850.c:174 exgateelf.c:128
+#: eshlelf_vxworks.c:157 ev850.c:174 ev850_rh850.c:174
 msgid "%P: warning: -z dynamic-undefined-weak ignored\n"
 msgstr "%P : avertissement : -z dynamic-undefined-weak ignoré\n"
 
@@ -2958,40 +2977,41 @@ msgstr "%P : avertissement : -z dynamic-undefined-weak ignoré\n"
 #: eavr3.c:358 eavr31.c:358 eavr35.c:358 eavr4.c:358 eavr5.c:358 eavr51.c:358
 #: eavr6.c:358 eavrtiny.c:358 eavrxmega1.c:358 eavrxmega2.c:358
 #: eavrxmega3.c:358 eavrxmega4.c:358 eavrxmega5.c:358 eavrxmega6.c:358
-#: eavrxmega7.c:358 ecriself.c:155 ecrislinux.c:155 ed10velf.c:155
-#: eelf32_sparc.c:155 eelf32_sparc_sol2.c:286 eelf32_sparc_vxworks.c:184
-#: eelf32_spu.c:689 eelf32_tic6x_be.c:293 eelf32_tic6x_elf_be.c:293
-#: eelf32_tic6x_elf_le.c:293 eelf32_tic6x_le.c:293 eelf32_tic6x_linux_be.c:293
+#: eavrxmega7.c:358 ecriself.c:155 ecrislinux.c:155 ecskyelf.c:412
+#: ecskyelf_linux.c:412 ed10velf.c:155 eelf32_sparc.c:155
+#: eelf32_sparc_sol2.c:286 eelf32_sparc_vxworks.c:184 eelf32_spu.c:825
+#: eelf32_tic6x_be.c:293 eelf32_tic6x_elf_be.c:293 eelf32_tic6x_elf_le.c:293
+#: eelf32_tic6x_le.c:293 eelf32_tic6x_linux_be.c:293
 #: eelf32_tic6x_linux_le.c:293 eelf32_x86_64.c:158 eelf32_x86_64_nacl.c:155
-#: eelf32am33lin.c:155 eelf32b4300.c:381 eelf32bfin.c:164 eelf32bfinfd.c:164
-#: eelf32bmip.c:381 eelf32bmipn32.c:399 eelf32bsmip.c:399 eelf32btsmip.c:381
-#: eelf32btsmip_fbsd.c:381 eelf32btsmipn32.c:381 eelf32btsmipn32_fbsd.c:381
-#: eelf32cr16.c:306 eelf32cr16c.c:155 eelf32crx.c:194 eelf32ebmip.c:381
-#: eelf32ebmipvxworks.c:410 eelf32elmip.c:381 eelf32elmipvxworks.c:410
+#: eelf32am33lin.c:155 eelf32b4300.c:382 eelf32bfin.c:164 eelf32bfinfd.c:164
+#: eelf32bmip.c:382 eelf32bmipn32.c:400 eelf32bsmip.c:400 eelf32btsmip.c:382
+#: eelf32btsmip_fbsd.c:382 eelf32btsmipn32.c:382 eelf32btsmipn32_fbsd.c:382
+#: eelf32cr16.c:306 eelf32cr16c.c:155 eelf32crx.c:194 eelf32ebmip.c:382
+#: eelf32ebmipvxworks.c:411 eelf32elmip.c:382 eelf32elmipvxworks.c:411
 #: eelf32epiphany.c:155 eelf32epiphany_4x4.c:157 eelf32frvfd.c:155
-#: eelf32ip2k.c:155 eelf32l4300.c:381 eelf32lm32.c:155 eelf32lm32fd.c:155
-#: eelf32lmip.c:381 eelf32lppc.c:358 eelf32lppclinux.c:358 eelf32lppcnto.c:358
-#: eelf32lppcsim.c:358 eelf32lr5900.c:381 eelf32lr5900n32.c:381
+#: eelf32ip2k.c:155 eelf32l4300.c:382 eelf32lm32.c:155 eelf32lm32fd.c:155
+#: eelf32lmip.c:382 eelf32lppc.c:371 eelf32lppclinux.c:371 eelf32lppcnto.c:371
+#: eelf32lppcsim.c:371 eelf32lr5900.c:382 eelf32lr5900n32.c:382
 #: eelf32lriscv.c:220 eelf32lriscv_ilp32.c:220 eelf32lriscv_ilp32f.c:220
-#: eelf32lsmip.c:381 eelf32ltsmip.c:381 eelf32ltsmip_fbsd.c:381
-#: eelf32ltsmipn32.c:381 eelf32ltsmipn32_fbsd.c:381 eelf32m32c.c:166
+#: eelf32lsmip.c:382 eelf32ltsmip.c:382 eelf32ltsmip_fbsd.c:382
+#: eelf32ltsmipn32.c:382 eelf32ltsmipn32_fbsd.c:382 eelf32m32c.c:166
 #: eelf32mb_linux.c:155 eelf32mbel_linux.c:155 eelf32mcore.c:155
 #: eelf32mep.c:155 eelf32metag.c:430 eelf32microblaze.c:155
-#: eelf32microblazeel.c:155 eelf32mipswindiss.c:381 eelf32or1k.c:155
-#: eelf32or1k_linux.c:155 eelf32ppc.c:358 eelf32ppc_fbsd.c:358
-#: eelf32ppclinux.c:358 eelf32ppcnto.c:358 eelf32ppcsim.c:358
-#: eelf32ppcvxworks.c:332 eelf32ppcwindiss.c:358 eelf32rl78.c:155
+#: eelf32microblazeel.c:155 eelf32mipswindiss.c:382 eelf32or1k.c:155
+#: eelf32or1k_linux.c:155 eelf32ppc.c:371 eelf32ppc_fbsd.c:371
+#: eelf32ppclinux.c:371 eelf32ppcnto.c:371 eelf32ppcsim.c:371
+#: eelf32ppcvxworks.c:345 eelf32ppcwindiss.c:371 eelf32rl78.c:155
 #: eelf32rx.c:171 eelf32tilegx.c:155 eelf32tilegx_be.c:155 eelf32tilepro.c:155
 #: eelf32vax.c:155 eelf32visium.c:155 eelf32xc16x.c:155 eelf32xc16xl.c:155
 #: eelf32xc16xs.c:155 eelf32xstormy16.c:166 eelf32xtensa.c:2042
 #: eelf64_aix.c:155 eelf64_ia64.c:179 eelf64_ia64_fbsd.c:179 eelf64_s390.c:170
 #: eelf64_sparc.c:155 eelf64_sparc_fbsd.c:155 eelf64_sparc_sol2.c:286
 #: eelf64alpha.c:238 eelf64alpha_fbsd.c:238 eelf64alpha_nbsd.c:238
-#: eelf64bmip.c:399 eelf64btsmip.c:381 eelf64btsmip_fbsd.c:381
-#: eelf64hppa.c:155 eelf64lppc.c:805 eelf64lriscv.c:220
-#: eelf64lriscv_lp64.c:220 eelf64lriscv_lp64f.c:220 eelf64ltsmip.c:381
-#: eelf64ltsmip_fbsd.c:381 eelf64mmix.c:266 eelf64ppc.c:805
-#: eelf64ppc_fbsd.c:805 eelf64rdos.c:155 eelf64tilegx.c:155
+#: eelf64bmip.c:400 eelf64btsmip.c:382 eelf64btsmip_fbsd.c:382
+#: eelf64hppa.c:155 eelf64lppc.c:817 eelf64lriscv.c:220
+#: eelf64lriscv_lp64.c:220 eelf64lriscv_lp64f.c:220 eelf64ltsmip.c:382
+#: eelf64ltsmip_fbsd.c:382 eelf64mmix.c:266 eelf64ppc.c:817
+#: eelf64ppc_fbsd.c:817 eelf64rdos.c:155 eelf64tilegx.c:155
 #: eelf64tilegx_be.c:155 eelf_i386.c:158 eelf_i386_be.c:155
 #: eelf_i386_chaos.c:155 eelf_i386_fbsd.c:155 eelf_i386_ldso.c:155
 #: eelf_i386_nacl.c:155 eelf_i386_sol2.c:286 eelf_i386_vxworks.c:184
@@ -3007,13 +3027,13 @@ msgstr "%P : avertissement : -z dynamic-undefined-weak ignoré\n"
 #: em32relf_linux.c:155 em32rlelf.c:155 em32rlelf_linux.c:155
 #: em68hc11elf.c:455 em68hc11elfb.c:455 em68hc12elf.c:455 em68hc12elfb.c:455
 #: em68kelf.c:305 em68kelfnbsd.c:305 em9s12zelf.c:155 emn10300.c:155
-#: ends32belf.c:332 ends32belf16m.c:332 ends32belf_linux.c:332 ends32elf.c:332
-#: ends32elf16m.c:332 ends32elf_linux.c:332 enios2elf.c:448 enios2linux.c:448
-#: eppclynx.c:358 epruelf.c:175 escore3_elf.c:175 escore7_elf.c:175
+#: ends32belf.c:262 ends32belf16m.c:262 ends32belf_linux.c:262 ends32elf.c:262
+#: ends32elf16m.c:262 ends32elf_linux.c:262 enios2elf.c:448 enios2linux.c:448
+#: eppclynx.c:371 epruelf.c:175 escore3_elf.c:175 escore7_elf.c:175
 #: eshelf.c:155 eshelf_fd.c:155 eshelf_linux.c:155 eshelf_nbsd.c:155
 #: eshelf_nto.c:155 eshelf_uclinux.c:155 eshelf_vxworks.c:184 eshlelf.c:155
 #: eshlelf_fd.c:155 eshlelf_linux.c:155 eshlelf_nbsd.c:155 eshlelf_nto.c:155
-#: eshlelf_vxworks.c:184 ev850.c:201 ev850_rh850.c:201 exgateelf.c:155
+#: eshlelf_vxworks.c:184 ev850.c:201 ev850_rh850.c:201
 msgid "%F%P: %pB: --just-symbols may not be used on DSO\n"
 msgstr "%F%P : %pB : --just-symbols ne peut être utilisé sur un DSO\n"
 
@@ -3033,40 +3053,41 @@ msgstr "%F%P : %pB : --just-symbols ne peut être utilisé sur un DSO\n"
 #: eavr3.c:477 eavr31.c:477 eavr35.c:477 eavr4.c:477 eavr5.c:477 eavr51.c:477
 #: eavr6.c:477 eavrtiny.c:477 eavrxmega1.c:477 eavrxmega2.c:477
 #: eavrxmega3.c:477 eavrxmega4.c:477 eavrxmega5.c:477 eavrxmega6.c:477
-#: eavrxmega7.c:477 ecriself.c:274 ecrislinux.c:274 ed10velf.c:274
-#: eelf32_sparc.c:274 eelf32_sparc_sol2.c:405 eelf32_sparc_vxworks.c:303
-#: eelf32_spu.c:808 eelf32_tic6x_be.c:412 eelf32_tic6x_elf_be.c:412
-#: eelf32_tic6x_elf_le.c:412 eelf32_tic6x_le.c:412 eelf32_tic6x_linux_be.c:412
+#: eavrxmega7.c:477 ecriself.c:274 ecrislinux.c:274 ecskyelf.c:531
+#: ecskyelf_linux.c:531 ed10velf.c:274 eelf32_sparc.c:274
+#: eelf32_sparc_sol2.c:405 eelf32_sparc_vxworks.c:303 eelf32_spu.c:944
+#: eelf32_tic6x_be.c:412 eelf32_tic6x_elf_be.c:412 eelf32_tic6x_elf_le.c:412
+#: eelf32_tic6x_le.c:412 eelf32_tic6x_linux_be.c:412
 #: eelf32_tic6x_linux_le.c:412 eelf32_x86_64.c:277 eelf32_x86_64_nacl.c:274
-#: eelf32am33lin.c:274 eelf32b4300.c:500 eelf32bfin.c:283 eelf32bfinfd.c:283
-#: eelf32bmip.c:500 eelf32bmipn32.c:518 eelf32bsmip.c:518 eelf32btsmip.c:500
-#: eelf32btsmip_fbsd.c:500 eelf32btsmipn32.c:500 eelf32btsmipn32_fbsd.c:500
-#: eelf32cr16.c:425 eelf32cr16c.c:274 eelf32crx.c:313 eelf32ebmip.c:500
-#: eelf32ebmipvxworks.c:529 eelf32elmip.c:500 eelf32elmipvxworks.c:529
+#: eelf32am33lin.c:274 eelf32b4300.c:501 eelf32bfin.c:283 eelf32bfinfd.c:283
+#: eelf32bmip.c:501 eelf32bmipn32.c:519 eelf32bsmip.c:519 eelf32btsmip.c:501
+#: eelf32btsmip_fbsd.c:501 eelf32btsmipn32.c:501 eelf32btsmipn32_fbsd.c:501
+#: eelf32cr16.c:425 eelf32cr16c.c:274 eelf32crx.c:313 eelf32ebmip.c:501
+#: eelf32ebmipvxworks.c:530 eelf32elmip.c:501 eelf32elmipvxworks.c:530
 #: eelf32epiphany.c:274 eelf32epiphany_4x4.c:276 eelf32frvfd.c:274
-#: eelf32ip2k.c:274 eelf32l4300.c:500 eelf32lm32.c:274 eelf32lm32fd.c:274
-#: eelf32lmip.c:500 eelf32lppc.c:477 eelf32lppclinux.c:477 eelf32lppcnto.c:477
-#: eelf32lppcsim.c:477 eelf32lr5900.c:500 eelf32lr5900n32.c:500
+#: eelf32ip2k.c:274 eelf32l4300.c:501 eelf32lm32.c:274 eelf32lm32fd.c:274
+#: eelf32lmip.c:501 eelf32lppc.c:490 eelf32lppclinux.c:490 eelf32lppcnto.c:490
+#: eelf32lppcsim.c:490 eelf32lr5900.c:501 eelf32lr5900n32.c:501
 #: eelf32lriscv.c:339 eelf32lriscv_ilp32.c:339 eelf32lriscv_ilp32f.c:339
-#: eelf32lsmip.c:500 eelf32ltsmip.c:500 eelf32ltsmip_fbsd.c:500
-#: eelf32ltsmipn32.c:500 eelf32ltsmipn32_fbsd.c:500 eelf32m32c.c:285
+#: eelf32lsmip.c:501 eelf32ltsmip.c:501 eelf32ltsmip_fbsd.c:501
+#: eelf32ltsmipn32.c:501 eelf32ltsmipn32_fbsd.c:501 eelf32m32c.c:285
 #: eelf32mb_linux.c:274 eelf32mbel_linux.c:274 eelf32mcore.c:274
 #: eelf32mep.c:274 eelf32metag.c:549 eelf32microblaze.c:274
-#: eelf32microblazeel.c:274 eelf32mipswindiss.c:500 eelf32or1k.c:274
-#: eelf32or1k_linux.c:274 eelf32ppc.c:477 eelf32ppc_fbsd.c:477
-#: eelf32ppclinux.c:477 eelf32ppcnto.c:477 eelf32ppcsim.c:477
-#: eelf32ppcvxworks.c:451 eelf32ppcwindiss.c:477 eelf32rl78.c:274
+#: eelf32microblazeel.c:274 eelf32mipswindiss.c:501 eelf32or1k.c:274
+#: eelf32or1k_linux.c:274 eelf32ppc.c:490 eelf32ppc_fbsd.c:490
+#: eelf32ppclinux.c:490 eelf32ppcnto.c:490 eelf32ppcsim.c:490
+#: eelf32ppcvxworks.c:464 eelf32ppcwindiss.c:490 eelf32rl78.c:274
 #: eelf32rx.c:290 eelf32tilegx.c:274 eelf32tilegx_be.c:274 eelf32tilepro.c:274
 #: eelf32vax.c:274 eelf32visium.c:274 eelf32xc16x.c:274 eelf32xc16xl.c:274
 #: eelf32xc16xs.c:274 eelf32xstormy16.c:285 eelf32xtensa.c:2161
 #: eelf64_aix.c:274 eelf64_ia64.c:298 eelf64_ia64_fbsd.c:298 eelf64_s390.c:289
 #: eelf64_sparc.c:274 eelf64_sparc_fbsd.c:274 eelf64_sparc_sol2.c:405
 #: eelf64alpha.c:357 eelf64alpha_fbsd.c:357 eelf64alpha_nbsd.c:357
-#: eelf64bmip.c:518 eelf64btsmip.c:500 eelf64btsmip_fbsd.c:500
-#: eelf64hppa.c:274 eelf64lppc.c:924 eelf64lriscv.c:339
-#: eelf64lriscv_lp64.c:339 eelf64lriscv_lp64f.c:339 eelf64ltsmip.c:500
-#: eelf64ltsmip_fbsd.c:500 eelf64mmix.c:385 eelf64ppc.c:924
-#: eelf64ppc_fbsd.c:924 eelf64rdos.c:274 eelf64tilegx.c:274
+#: eelf64bmip.c:519 eelf64btsmip.c:501 eelf64btsmip_fbsd.c:501
+#: eelf64hppa.c:274 eelf64lppc.c:936 eelf64lriscv.c:339
+#: eelf64lriscv_lp64.c:339 eelf64lriscv_lp64f.c:339 eelf64ltsmip.c:501
+#: eelf64ltsmip_fbsd.c:501 eelf64mmix.c:385 eelf64ppc.c:936
+#: eelf64ppc_fbsd.c:936 eelf64rdos.c:274 eelf64tilegx.c:274
 #: eelf64tilegx_be.c:274 eelf_i386.c:277 eelf_i386_be.c:274
 #: eelf_i386_chaos.c:274 eelf_i386_fbsd.c:274 eelf_i386_ldso.c:274
 #: eelf_i386_nacl.c:274 eelf_i386_sol2.c:405 eelf_i386_vxworks.c:303
@@ -3082,13 +3103,13 @@ msgstr "%F%P : %pB : --just-symbols ne peut être utilisé sur un DSO\n"
 #: em32relf_linux.c:274 em32rlelf.c:274 em32rlelf_linux.c:274
 #: em68hc11elf.c:574 em68hc11elfb.c:574 em68hc12elf.c:574 em68hc12elfb.c:574
 #: em68kelf.c:424 em68kelfnbsd.c:424 em9s12zelf.c:274 emn10300.c:274
-#: ends32belf.c:451 ends32belf16m.c:451 ends32belf_linux.c:451 ends32elf.c:451
-#: ends32elf16m.c:451 ends32elf_linux.c:451 enios2elf.c:567 enios2linux.c:567
-#: eppclynx.c:477 epruelf.c:294 escore3_elf.c:294 escore7_elf.c:294
+#: ends32belf.c:381 ends32belf16m.c:381 ends32belf_linux.c:381 ends32elf.c:381
+#: ends32elf16m.c:381 ends32elf_linux.c:381 enios2elf.c:567 enios2linux.c:567
+#: eppclynx.c:490 epruelf.c:294 escore3_elf.c:294 escore7_elf.c:294
 #: eshelf.c:274 eshelf_fd.c:274 eshelf_linux.c:274 eshelf_nbsd.c:274
 #: eshelf_nto.c:274 eshelf_uclinux.c:274 eshelf_vxworks.c:303 eshlelf.c:274
 #: eshlelf_fd.c:274 eshlelf_linux.c:274 eshlelf_nbsd.c:274 eshlelf_nto.c:274
-#: eshlelf_vxworks.c:303 ev850.c:320 ev850_rh850.c:320 exgateelf.c:274
+#: eshlelf_vxworks.c:303 ev850.c:320 ev850_rh850.c:320
 msgid "%P: %pB: bfd_stat failed: %E\n"
 msgstr "%P : %pB : bfd_stat en échec : %E\n"
 
@@ -3108,40 +3129,41 @@ msgstr "%P : %pB : bfd_stat en échec : %E\n"
 #: eavr3.c:517 eavr31.c:517 eavr35.c:517 eavr4.c:517 eavr5.c:517 eavr51.c:517
 #: eavr6.c:517 eavrtiny.c:517 eavrxmega1.c:517 eavrxmega2.c:517
 #: eavrxmega3.c:517 eavrxmega4.c:517 eavrxmega5.c:517 eavrxmega6.c:517
-#: eavrxmega7.c:517 ecriself.c:314 ecrislinux.c:314 ed10velf.c:314
-#: eelf32_sparc.c:314 eelf32_sparc_sol2.c:445 eelf32_sparc_vxworks.c:343
-#: eelf32_spu.c:848 eelf32_tic6x_be.c:452 eelf32_tic6x_elf_be.c:452
-#: eelf32_tic6x_elf_le.c:452 eelf32_tic6x_le.c:452 eelf32_tic6x_linux_be.c:452
+#: eavrxmega7.c:517 ecriself.c:314 ecrislinux.c:314 ecskyelf.c:571
+#: ecskyelf_linux.c:571 ed10velf.c:314 eelf32_sparc.c:314
+#: eelf32_sparc_sol2.c:445 eelf32_sparc_vxworks.c:343 eelf32_spu.c:984
+#: eelf32_tic6x_be.c:452 eelf32_tic6x_elf_be.c:452 eelf32_tic6x_elf_le.c:452
+#: eelf32_tic6x_le.c:452 eelf32_tic6x_linux_be.c:452
 #: eelf32_tic6x_linux_le.c:452 eelf32_x86_64.c:317 eelf32_x86_64_nacl.c:314
-#: eelf32am33lin.c:314 eelf32b4300.c:540 eelf32bfin.c:323 eelf32bfinfd.c:323
-#: eelf32bmip.c:540 eelf32bmipn32.c:558 eelf32bsmip.c:558 eelf32btsmip.c:540
-#: eelf32btsmip_fbsd.c:540 eelf32btsmipn32.c:540 eelf32btsmipn32_fbsd.c:540
-#: eelf32cr16.c:465 eelf32cr16c.c:314 eelf32crx.c:353 eelf32ebmip.c:540
-#: eelf32ebmipvxworks.c:569 eelf32elmip.c:540 eelf32elmipvxworks.c:569
+#: eelf32am33lin.c:314 eelf32b4300.c:541 eelf32bfin.c:323 eelf32bfinfd.c:323
+#: eelf32bmip.c:541 eelf32bmipn32.c:559 eelf32bsmip.c:559 eelf32btsmip.c:541
+#: eelf32btsmip_fbsd.c:541 eelf32btsmipn32.c:541 eelf32btsmipn32_fbsd.c:541
+#: eelf32cr16.c:465 eelf32cr16c.c:314 eelf32crx.c:353 eelf32ebmip.c:541
+#: eelf32ebmipvxworks.c:570 eelf32elmip.c:541 eelf32elmipvxworks.c:570
 #: eelf32epiphany.c:314 eelf32epiphany_4x4.c:316 eelf32frvfd.c:314
-#: eelf32ip2k.c:314 eelf32l4300.c:540 eelf32lm32.c:314 eelf32lm32fd.c:314
-#: eelf32lmip.c:540 eelf32lppc.c:517 eelf32lppclinux.c:517 eelf32lppcnto.c:517
-#: eelf32lppcsim.c:517 eelf32lr5900.c:540 eelf32lr5900n32.c:540
+#: eelf32ip2k.c:314 eelf32l4300.c:541 eelf32lm32.c:314 eelf32lm32fd.c:314
+#: eelf32lmip.c:541 eelf32lppc.c:530 eelf32lppclinux.c:530 eelf32lppcnto.c:530
+#: eelf32lppcsim.c:530 eelf32lr5900.c:541 eelf32lr5900n32.c:541
 #: eelf32lriscv.c:379 eelf32lriscv_ilp32.c:379 eelf32lriscv_ilp32f.c:379
-#: eelf32lsmip.c:540 eelf32ltsmip.c:540 eelf32ltsmip_fbsd.c:540
-#: eelf32ltsmipn32.c:540 eelf32ltsmipn32_fbsd.c:540 eelf32m32c.c:325
+#: eelf32lsmip.c:541 eelf32ltsmip.c:541 eelf32ltsmip_fbsd.c:541
+#: eelf32ltsmipn32.c:541 eelf32ltsmipn32_fbsd.c:541 eelf32m32c.c:325
 #: eelf32mb_linux.c:314 eelf32mbel_linux.c:314 eelf32mcore.c:314
 #: eelf32mep.c:314 eelf32metag.c:589 eelf32microblaze.c:314
-#: eelf32microblazeel.c:314 eelf32mipswindiss.c:540 eelf32or1k.c:314
-#: eelf32or1k_linux.c:314 eelf32ppc.c:517 eelf32ppc_fbsd.c:517
-#: eelf32ppclinux.c:517 eelf32ppcnto.c:517 eelf32ppcsim.c:517
-#: eelf32ppcvxworks.c:491 eelf32ppcwindiss.c:517 eelf32rl78.c:314
+#: eelf32microblazeel.c:314 eelf32mipswindiss.c:541 eelf32or1k.c:314
+#: eelf32or1k_linux.c:314 eelf32ppc.c:530 eelf32ppc_fbsd.c:530
+#: eelf32ppclinux.c:530 eelf32ppcnto.c:530 eelf32ppcsim.c:530
+#: eelf32ppcvxworks.c:504 eelf32ppcwindiss.c:530 eelf32rl78.c:314
 #: eelf32rx.c:330 eelf32tilegx.c:314 eelf32tilegx_be.c:314 eelf32tilepro.c:314
 #: eelf32vax.c:314 eelf32visium.c:314 eelf32xc16x.c:314 eelf32xc16xl.c:314
 #: eelf32xc16xs.c:314 eelf32xstormy16.c:325 eelf32xtensa.c:2201
 #: eelf64_aix.c:314 eelf64_ia64.c:338 eelf64_ia64_fbsd.c:338 eelf64_s390.c:329
 #: eelf64_sparc.c:314 eelf64_sparc_fbsd.c:314 eelf64_sparc_sol2.c:445
 #: eelf64alpha.c:397 eelf64alpha_fbsd.c:397 eelf64alpha_nbsd.c:397
-#: eelf64bmip.c:558 eelf64btsmip.c:540 eelf64btsmip_fbsd.c:540
-#: eelf64hppa.c:314 eelf64lppc.c:964 eelf64lriscv.c:379
-#: eelf64lriscv_lp64.c:379 eelf64lriscv_lp64f.c:379 eelf64ltsmip.c:540
-#: eelf64ltsmip_fbsd.c:540 eelf64mmix.c:425 eelf64ppc.c:964
-#: eelf64ppc_fbsd.c:964 eelf64rdos.c:314 eelf64tilegx.c:314
+#: eelf64bmip.c:559 eelf64btsmip.c:541 eelf64btsmip_fbsd.c:541
+#: eelf64hppa.c:314 eelf64lppc.c:976 eelf64lriscv.c:379
+#: eelf64lriscv_lp64.c:379 eelf64lriscv_lp64f.c:379 eelf64ltsmip.c:541
+#: eelf64ltsmip_fbsd.c:541 eelf64mmix.c:425 eelf64ppc.c:976
+#: eelf64ppc_fbsd.c:976 eelf64rdos.c:314 eelf64tilegx.c:314
 #: eelf64tilegx_be.c:314 eelf_i386.c:317 eelf_i386_be.c:314
 #: eelf_i386_chaos.c:314 eelf_i386_fbsd.c:314 eelf_i386_ldso.c:314
 #: eelf_i386_nacl.c:314 eelf_i386_sol2.c:445 eelf_i386_vxworks.c:343
@@ -3157,13 +3179,13 @@ msgstr "%P : %pB : bfd_stat en échec : %E\n"
 #: em32relf_linux.c:314 em32rlelf.c:314 em32rlelf_linux.c:314
 #: em68hc11elf.c:614 em68hc11elfb.c:614 em68hc12elf.c:614 em68hc12elfb.c:614
 #: em68kelf.c:464 em68kelfnbsd.c:464 em9s12zelf.c:314 emn10300.c:314
-#: ends32belf.c:491 ends32belf16m.c:491 ends32belf_linux.c:491 ends32elf.c:491
-#: ends32elf16m.c:491 ends32elf_linux.c:491 enios2elf.c:607 enios2linux.c:607
-#: eppclynx.c:517 epruelf.c:334 escore3_elf.c:334 escore7_elf.c:334
+#: ends32belf.c:421 ends32belf16m.c:421 ends32belf_linux.c:421 ends32elf.c:421
+#: ends32elf16m.c:421 ends32elf_linux.c:421 enios2elf.c:607 enios2linux.c:607
+#: eppclynx.c:530 epruelf.c:334 escore3_elf.c:334 escore7_elf.c:334
 #: eshelf.c:314 eshelf_fd.c:314 eshelf_linux.c:314 eshelf_nbsd.c:314
 #: eshelf_nto.c:314 eshelf_uclinux.c:314 eshelf_vxworks.c:343 eshlelf.c:314
 #: eshlelf_fd.c:314 eshlelf_linux.c:314 eshlelf_nbsd.c:314 eshlelf_nto.c:314
-#: eshlelf_vxworks.c:343 ev850.c:360 ev850_rh850.c:360 exgateelf.c:314
+#: eshlelf_vxworks.c:343 ev850.c:360 ev850_rh850.c:360
 msgid "%P: warning: %s, needed by %pB, may conflict with %s\n"
 msgstr "%P : warning : %s, requis par %pB, peut être en conflit avec %s\n"
 
@@ -3183,40 +3205,41 @@ msgstr "%P : warning : %s, requis par %pB, peut être en conflit avec %s\n"
 #: eavr3.c:579 eavr31.c:579 eavr35.c:579 eavr4.c:579 eavr5.c:579 eavr51.c:579
 #: eavr6.c:579 eavrtiny.c:579 eavrxmega1.c:579 eavrxmega2.c:579
 #: eavrxmega3.c:579 eavrxmega4.c:579 eavrxmega5.c:579 eavrxmega6.c:579
-#: eavrxmega7.c:579 ecriself.c:376 ecrislinux.c:376 ed10velf.c:376
-#: eelf32_sparc.c:376 eelf32_sparc_sol2.c:507 eelf32_sparc_vxworks.c:405
-#: eelf32_spu.c:910 eelf32_tic6x_be.c:514 eelf32_tic6x_elf_be.c:514
-#: eelf32_tic6x_elf_le.c:514 eelf32_tic6x_le.c:514 eelf32_tic6x_linux_be.c:514
+#: eavrxmega7.c:579 ecriself.c:376 ecrislinux.c:376 ecskyelf.c:633
+#: ecskyelf_linux.c:633 ed10velf.c:376 eelf32_sparc.c:376
+#: eelf32_sparc_sol2.c:507 eelf32_sparc_vxworks.c:405 eelf32_spu.c:1046
+#: eelf32_tic6x_be.c:514 eelf32_tic6x_elf_be.c:514 eelf32_tic6x_elf_le.c:514
+#: eelf32_tic6x_le.c:514 eelf32_tic6x_linux_be.c:514
 #: eelf32_tic6x_linux_le.c:514 eelf32_x86_64.c:379 eelf32_x86_64_nacl.c:376
-#: eelf32am33lin.c:376 eelf32b4300.c:602 eelf32bfin.c:385 eelf32bfinfd.c:385
-#: eelf32bmip.c:602 eelf32bmipn32.c:620 eelf32bsmip.c:620 eelf32btsmip.c:602
-#: eelf32btsmip_fbsd.c:602 eelf32btsmipn32.c:602 eelf32btsmipn32_fbsd.c:602
-#: eelf32cr16.c:527 eelf32cr16c.c:376 eelf32crx.c:415 eelf32ebmip.c:602
-#: eelf32ebmipvxworks.c:631 eelf32elmip.c:602 eelf32elmipvxworks.c:631
+#: eelf32am33lin.c:376 eelf32b4300.c:603 eelf32bfin.c:385 eelf32bfinfd.c:385
+#: eelf32bmip.c:603 eelf32bmipn32.c:621 eelf32bsmip.c:621 eelf32btsmip.c:603
+#: eelf32btsmip_fbsd.c:603 eelf32btsmipn32.c:603 eelf32btsmipn32_fbsd.c:603
+#: eelf32cr16.c:527 eelf32cr16c.c:376 eelf32crx.c:415 eelf32ebmip.c:603
+#: eelf32ebmipvxworks.c:632 eelf32elmip.c:603 eelf32elmipvxworks.c:632
 #: eelf32epiphany.c:376 eelf32epiphany_4x4.c:378 eelf32frvfd.c:376
-#: eelf32ip2k.c:376 eelf32l4300.c:602 eelf32lm32.c:376 eelf32lm32fd.c:376
-#: eelf32lmip.c:602 eelf32lppc.c:579 eelf32lppclinux.c:579 eelf32lppcnto.c:579
-#: eelf32lppcsim.c:579 eelf32lr5900.c:602 eelf32lr5900n32.c:602
+#: eelf32ip2k.c:376 eelf32l4300.c:603 eelf32lm32.c:376 eelf32lm32fd.c:376
+#: eelf32lmip.c:603 eelf32lppc.c:592 eelf32lppclinux.c:592 eelf32lppcnto.c:592
+#: eelf32lppcsim.c:592 eelf32lr5900.c:603 eelf32lr5900n32.c:603
 #: eelf32lriscv.c:441 eelf32lriscv_ilp32.c:441 eelf32lriscv_ilp32f.c:441
-#: eelf32lsmip.c:602 eelf32ltsmip.c:602 eelf32ltsmip_fbsd.c:602
-#: eelf32ltsmipn32.c:602 eelf32ltsmipn32_fbsd.c:602 eelf32m32c.c:387
+#: eelf32lsmip.c:603 eelf32ltsmip.c:603 eelf32ltsmip_fbsd.c:603
+#: eelf32ltsmipn32.c:603 eelf32ltsmipn32_fbsd.c:603 eelf32m32c.c:387
 #: eelf32mb_linux.c:376 eelf32mbel_linux.c:376 eelf32mcore.c:376
 #: eelf32mep.c:376 eelf32metag.c:651 eelf32microblaze.c:376
-#: eelf32microblazeel.c:376 eelf32mipswindiss.c:602 eelf32or1k.c:376
-#: eelf32or1k_linux.c:376 eelf32ppc.c:579 eelf32ppc_fbsd.c:579
-#: eelf32ppclinux.c:579 eelf32ppcnto.c:579 eelf32ppcsim.c:579
-#: eelf32ppcvxworks.c:553 eelf32ppcwindiss.c:579 eelf32rl78.c:376
+#: eelf32microblazeel.c:376 eelf32mipswindiss.c:603 eelf32or1k.c:376
+#: eelf32or1k_linux.c:376 eelf32ppc.c:592 eelf32ppc_fbsd.c:592
+#: eelf32ppclinux.c:592 eelf32ppcnto.c:592 eelf32ppcsim.c:592
+#: eelf32ppcvxworks.c:566 eelf32ppcwindiss.c:592 eelf32rl78.c:376
 #: eelf32rx.c:392 eelf32tilegx.c:376 eelf32tilegx_be.c:376 eelf32tilepro.c:376
 #: eelf32vax.c:376 eelf32visium.c:376 eelf32xc16x.c:376 eelf32xc16xl.c:376
 #: eelf32xc16xs.c:376 eelf32xstormy16.c:387 eelf32xtensa.c:2263
 #: eelf64_aix.c:376 eelf64_ia64.c:400 eelf64_ia64_fbsd.c:400 eelf64_s390.c:391
 #: eelf64_sparc.c:376 eelf64_sparc_fbsd.c:376 eelf64_sparc_sol2.c:507
 #: eelf64alpha.c:459 eelf64alpha_fbsd.c:459 eelf64alpha_nbsd.c:459
-#: eelf64bmip.c:620 eelf64btsmip.c:602 eelf64btsmip_fbsd.c:602
-#: eelf64hppa.c:376 eelf64lppc.c:1026 eelf64lriscv.c:441
-#: eelf64lriscv_lp64.c:441 eelf64lriscv_lp64f.c:441 eelf64ltsmip.c:602
-#: eelf64ltsmip_fbsd.c:602 eelf64mmix.c:487 eelf64ppc.c:1026
-#: eelf64ppc_fbsd.c:1026 eelf64rdos.c:376 eelf64tilegx.c:376
+#: eelf64bmip.c:621 eelf64btsmip.c:603 eelf64btsmip_fbsd.c:603
+#: eelf64hppa.c:376 eelf64lppc.c:1038 eelf64lriscv.c:441
+#: eelf64lriscv_lp64.c:441 eelf64lriscv_lp64f.c:441 eelf64ltsmip.c:603
+#: eelf64ltsmip_fbsd.c:603 eelf64mmix.c:487 eelf64ppc.c:1038
+#: eelf64ppc_fbsd.c:1038 eelf64rdos.c:376 eelf64tilegx.c:376
 #: eelf64tilegx_be.c:376 eelf_i386.c:379 eelf_i386_be.c:376
 #: eelf_i386_chaos.c:376 eelf_i386_fbsd.c:376 eelf_i386_ldso.c:376
 #: eelf_i386_nacl.c:376 eelf_i386_sol2.c:507 eelf_i386_vxworks.c:405
@@ -3232,13 +3255,13 @@ msgstr "%P : warning : %s, requis par %pB, peut être en conflit avec %s\n"
 #: em32relf_linux.c:376 em32rlelf.c:376 em32rlelf_linux.c:376
 #: em68hc11elf.c:676 em68hc11elfb.c:676 em68hc12elf.c:676 em68hc12elfb.c:676
 #: em68kelf.c:526 em68kelfnbsd.c:526 em9s12zelf.c:376 emn10300.c:376
-#: ends32belf.c:553 ends32belf16m.c:553 ends32belf_linux.c:553 ends32elf.c:553
-#: ends32elf16m.c:553 ends32elf_linux.c:553 enios2elf.c:669 enios2linux.c:669
-#: eppclynx.c:579 epruelf.c:396 escore3_elf.c:396 escore7_elf.c:396
+#: ends32belf.c:483 ends32belf16m.c:483 ends32belf_linux.c:483 ends32elf.c:483
+#: ends32elf16m.c:483 ends32elf_linux.c:483 enios2elf.c:669 enios2linux.c:669
+#: eppclynx.c:592 epruelf.c:396 escore3_elf.c:396 escore7_elf.c:396
 #: eshelf.c:376 eshelf_fd.c:376 eshelf_linux.c:376 eshelf_nbsd.c:376
 #: eshelf_nto.c:376 eshelf_uclinux.c:376 eshelf_vxworks.c:405 eshlelf.c:376
 #: eshlelf_fd.c:376 eshlelf_linux.c:376 eshlelf_nbsd.c:376 eshlelf_nto.c:376
-#: eshlelf_vxworks.c:405 ev850.c:422 ev850_rh850.c:422 exgateelf.c:376
+#: eshlelf_vxworks.c:405 ev850.c:422 ev850_rh850.c:422
 msgid "%F%P: %pB: bfd_elf_get_bfd_needed_list failed: %E\n"
 msgstr "%F%P : %pB : bfd_elf_get_bfd_needed_list en échec : %E\n"
 
@@ -3258,40 +3281,41 @@ msgstr "%F%P : %pB : bfd_elf_get_bfd_needed_list en échec : %E\n"
 #: eavr3.c:628 eavr31.c:628 eavr35.c:628 eavr4.c:628 eavr5.c:628 eavr51.c:628
 #: eavr6.c:628 eavrtiny.c:628 eavrxmega1.c:628 eavrxmega2.c:628
 #: eavrxmega3.c:628 eavrxmega4.c:628 eavrxmega5.c:628 eavrxmega6.c:628
-#: eavrxmega7.c:628 ecriself.c:425 ecrislinux.c:425 ed10velf.c:425
-#: eelf32_sparc.c:425 eelf32_sparc_sol2.c:556 eelf32_sparc_vxworks.c:454
-#: eelf32_spu.c:959 eelf32_tic6x_be.c:563 eelf32_tic6x_elf_be.c:563
-#: eelf32_tic6x_elf_le.c:563 eelf32_tic6x_le.c:563 eelf32_tic6x_linux_be.c:563
+#: eavrxmega7.c:628 ecriself.c:425 ecrislinux.c:425 ecskyelf.c:682
+#: ecskyelf_linux.c:682 ed10velf.c:425 eelf32_sparc.c:425
+#: eelf32_sparc_sol2.c:556 eelf32_sparc_vxworks.c:454 eelf32_spu.c:1095
+#: eelf32_tic6x_be.c:563 eelf32_tic6x_elf_be.c:563 eelf32_tic6x_elf_le.c:563
+#: eelf32_tic6x_le.c:563 eelf32_tic6x_linux_be.c:563
 #: eelf32_tic6x_linux_le.c:563 eelf32_x86_64.c:428 eelf32_x86_64_nacl.c:425
-#: eelf32am33lin.c:425 eelf32b4300.c:651 eelf32bfin.c:434 eelf32bfinfd.c:434
-#: eelf32bmip.c:651 eelf32bmipn32.c:669 eelf32bsmip.c:669 eelf32btsmip.c:651
-#: eelf32btsmip_fbsd.c:651 eelf32btsmipn32.c:651 eelf32btsmipn32_fbsd.c:651
-#: eelf32cr16.c:576 eelf32cr16c.c:425 eelf32crx.c:464 eelf32ebmip.c:651
-#: eelf32ebmipvxworks.c:680 eelf32elmip.c:651 eelf32elmipvxworks.c:680
+#: eelf32am33lin.c:425 eelf32b4300.c:652 eelf32bfin.c:434 eelf32bfinfd.c:434
+#: eelf32bmip.c:652 eelf32bmipn32.c:670 eelf32bsmip.c:670 eelf32btsmip.c:652
+#: eelf32btsmip_fbsd.c:652 eelf32btsmipn32.c:652 eelf32btsmipn32_fbsd.c:652
+#: eelf32cr16.c:576 eelf32cr16c.c:425 eelf32crx.c:464 eelf32ebmip.c:652
+#: eelf32ebmipvxworks.c:681 eelf32elmip.c:652 eelf32elmipvxworks.c:681
 #: eelf32epiphany.c:425 eelf32epiphany_4x4.c:427 eelf32frvfd.c:425
-#: eelf32ip2k.c:425 eelf32l4300.c:651 eelf32lm32.c:425 eelf32lm32fd.c:425
-#: eelf32lmip.c:651 eelf32lppc.c:628 eelf32lppclinux.c:628 eelf32lppcnto.c:628
-#: eelf32lppcsim.c:628 eelf32lr5900.c:651 eelf32lr5900n32.c:651
+#: eelf32ip2k.c:425 eelf32l4300.c:652 eelf32lm32.c:425 eelf32lm32fd.c:425
+#: eelf32lmip.c:652 eelf32lppc.c:641 eelf32lppclinux.c:641 eelf32lppcnto.c:641
+#: eelf32lppcsim.c:641 eelf32lr5900.c:652 eelf32lr5900n32.c:652
 #: eelf32lriscv.c:490 eelf32lriscv_ilp32.c:490 eelf32lriscv_ilp32f.c:490
-#: eelf32lsmip.c:651 eelf32ltsmip.c:651 eelf32ltsmip_fbsd.c:651
-#: eelf32ltsmipn32.c:651 eelf32ltsmipn32_fbsd.c:651 eelf32m32c.c:436
+#: eelf32lsmip.c:652 eelf32ltsmip.c:652 eelf32ltsmip_fbsd.c:652
+#: eelf32ltsmipn32.c:652 eelf32ltsmipn32_fbsd.c:652 eelf32m32c.c:436
 #: eelf32mb_linux.c:425 eelf32mbel_linux.c:425 eelf32mcore.c:425
 #: eelf32mep.c:425 eelf32metag.c:700 eelf32microblaze.c:425
-#: eelf32microblazeel.c:425 eelf32mipswindiss.c:651 eelf32or1k.c:425
-#: eelf32or1k_linux.c:425 eelf32ppc.c:628 eelf32ppc_fbsd.c:628
-#: eelf32ppclinux.c:628 eelf32ppcnto.c:628 eelf32ppcsim.c:628
-#: eelf32ppcvxworks.c:602 eelf32ppcwindiss.c:628 eelf32rl78.c:425
+#: eelf32microblazeel.c:425 eelf32mipswindiss.c:652 eelf32or1k.c:425
+#: eelf32or1k_linux.c:425 eelf32ppc.c:641 eelf32ppc_fbsd.c:641
+#: eelf32ppclinux.c:641 eelf32ppcnto.c:641 eelf32ppcsim.c:641
+#: eelf32ppcvxworks.c:615 eelf32ppcwindiss.c:641 eelf32rl78.c:425
 #: eelf32rx.c:441 eelf32tilegx.c:425 eelf32tilegx_be.c:425 eelf32tilepro.c:425
 #: eelf32vax.c:425 eelf32visium.c:425 eelf32xc16x.c:425 eelf32xc16xl.c:425
 #: eelf32xc16xs.c:425 eelf32xstormy16.c:436 eelf32xtensa.c:2312
 #: eelf64_aix.c:425 eelf64_ia64.c:449 eelf64_ia64_fbsd.c:449 eelf64_s390.c:440
 #: eelf64_sparc.c:425 eelf64_sparc_fbsd.c:425 eelf64_sparc_sol2.c:556
 #: eelf64alpha.c:508 eelf64alpha_fbsd.c:508 eelf64alpha_nbsd.c:508
-#: eelf64bmip.c:669 eelf64btsmip.c:651 eelf64btsmip_fbsd.c:651
-#: eelf64hppa.c:425 eelf64lppc.c:1075 eelf64lriscv.c:490
-#: eelf64lriscv_lp64.c:490 eelf64lriscv_lp64f.c:490 eelf64ltsmip.c:651
-#: eelf64ltsmip_fbsd.c:651 eelf64mmix.c:536 eelf64ppc.c:1075
-#: eelf64ppc_fbsd.c:1075 eelf64rdos.c:425 eelf64tilegx.c:425
+#: eelf64bmip.c:670 eelf64btsmip.c:652 eelf64btsmip_fbsd.c:652
+#: eelf64hppa.c:425 eelf64lppc.c:1087 eelf64lriscv.c:490
+#: eelf64lriscv_lp64.c:490 eelf64lriscv_lp64f.c:490 eelf64ltsmip.c:652
+#: eelf64ltsmip_fbsd.c:652 eelf64mmix.c:536 eelf64ppc.c:1087
+#: eelf64ppc_fbsd.c:1087 eelf64rdos.c:425 eelf64tilegx.c:425
 #: eelf64tilegx_be.c:425 eelf_i386.c:428 eelf_i386_be.c:425
 #: eelf_i386_chaos.c:425 eelf_i386_fbsd.c:425 eelf_i386_ldso.c:425
 #: eelf_i386_nacl.c:425 eelf_i386_sol2.c:556 eelf_i386_vxworks.c:454
@@ -3307,13 +3331,13 @@ msgstr "%F%P : %pB : bfd_elf_get_bfd_needed_list en échec : %E\n"
 #: em32relf_linux.c:425 em32rlelf.c:425 em32rlelf_linux.c:425
 #: em68hc11elf.c:725 em68hc11elfb.c:725 em68hc12elf.c:725 em68hc12elfb.c:725
 #: em68kelf.c:575 em68kelfnbsd.c:575 em9s12zelf.c:425 emn10300.c:425
-#: ends32belf.c:602 ends32belf16m.c:602 ends32belf_linux.c:602 ends32elf.c:602
-#: ends32elf16m.c:602 ends32elf_linux.c:602 enios2elf.c:718 enios2linux.c:718
-#: eppclynx.c:628 epruelf.c:445 escore3_elf.c:445 escore7_elf.c:445
+#: ends32belf.c:532 ends32belf16m.c:532 ends32belf_linux.c:532 ends32elf.c:532
+#: ends32elf16m.c:532 ends32elf_linux.c:532 enios2elf.c:718 enios2linux.c:718
+#: eppclynx.c:641 epruelf.c:445 escore3_elf.c:445 escore7_elf.c:445
 #: eshelf.c:425 eshelf_fd.c:425 eshelf_linux.c:425 eshelf_nbsd.c:425
 #: eshelf_nto.c:425 eshelf_uclinux.c:425 eshelf_vxworks.c:454 eshlelf.c:425
 #: eshlelf_fd.c:425 eshlelf_linux.c:425 eshlelf_nbsd.c:425 eshlelf_nto.c:425
-#: eshlelf_vxworks.c:454 ev850.c:471 ev850_rh850.c:471 exgateelf.c:425
+#: eshlelf_vxworks.c:454 ev850.c:471 ev850_rh850.c:471
 msgid "%F%P: %pB: bfd_stat failed: %E\n"
 msgstr "%F%P : %pB : bfd_stat en échec: %E\n"
 
@@ -3333,40 +3357,41 @@ msgstr "%F%P : %pB : bfd_stat en échec: %E\n"
 #: eavr3.c:634 eavr31.c:634 eavr35.c:634 eavr4.c:634 eavr5.c:634 eavr51.c:634
 #: eavr6.c:634 eavrtiny.c:634 eavrxmega1.c:634 eavrxmega2.c:634
 #: eavrxmega3.c:634 eavrxmega4.c:634 eavrxmega5.c:634 eavrxmega6.c:634
-#: eavrxmega7.c:634 ecriself.c:431 ecrislinux.c:431 ed10velf.c:431
-#: eelf32_sparc.c:431 eelf32_sparc_sol2.c:562 eelf32_sparc_vxworks.c:460
-#: eelf32_spu.c:965 eelf32_tic6x_be.c:569 eelf32_tic6x_elf_be.c:569
-#: eelf32_tic6x_elf_le.c:569 eelf32_tic6x_le.c:569 eelf32_tic6x_linux_be.c:569
+#: eavrxmega7.c:634 ecriself.c:431 ecrislinux.c:431 ecskyelf.c:688
+#: ecskyelf_linux.c:688 ed10velf.c:431 eelf32_sparc.c:431
+#: eelf32_sparc_sol2.c:562 eelf32_sparc_vxworks.c:460 eelf32_spu.c:1101
+#: eelf32_tic6x_be.c:569 eelf32_tic6x_elf_be.c:569 eelf32_tic6x_elf_le.c:569
+#: eelf32_tic6x_le.c:569 eelf32_tic6x_linux_be.c:569
 #: eelf32_tic6x_linux_le.c:569 eelf32_x86_64.c:434 eelf32_x86_64_nacl.c:431
-#: eelf32am33lin.c:431 eelf32b4300.c:657 eelf32bfin.c:440 eelf32bfinfd.c:440
-#: eelf32bmip.c:657 eelf32bmipn32.c:675 eelf32bsmip.c:675 eelf32btsmip.c:657
-#: eelf32btsmip_fbsd.c:657 eelf32btsmipn32.c:657 eelf32btsmipn32_fbsd.c:657
-#: eelf32cr16.c:582 eelf32cr16c.c:431 eelf32crx.c:470 eelf32ebmip.c:657
-#: eelf32ebmipvxworks.c:686 eelf32elmip.c:657 eelf32elmipvxworks.c:686
+#: eelf32am33lin.c:431 eelf32b4300.c:658 eelf32bfin.c:440 eelf32bfinfd.c:440
+#: eelf32bmip.c:658 eelf32bmipn32.c:676 eelf32bsmip.c:676 eelf32btsmip.c:658
+#: eelf32btsmip_fbsd.c:658 eelf32btsmipn32.c:658 eelf32btsmipn32_fbsd.c:658
+#: eelf32cr16.c:582 eelf32cr16c.c:431 eelf32crx.c:470 eelf32ebmip.c:658
+#: eelf32ebmipvxworks.c:687 eelf32elmip.c:658 eelf32elmipvxworks.c:687
 #: eelf32epiphany.c:431 eelf32epiphany_4x4.c:433 eelf32frvfd.c:431
-#: eelf32ip2k.c:431 eelf32l4300.c:657 eelf32lm32.c:431 eelf32lm32fd.c:431
-#: eelf32lmip.c:657 eelf32lppc.c:634 eelf32lppclinux.c:634 eelf32lppcnto.c:634
-#: eelf32lppcsim.c:634 eelf32lr5900.c:657 eelf32lr5900n32.c:657
+#: eelf32ip2k.c:431 eelf32l4300.c:658 eelf32lm32.c:431 eelf32lm32fd.c:431
+#: eelf32lmip.c:658 eelf32lppc.c:647 eelf32lppclinux.c:647 eelf32lppcnto.c:647
+#: eelf32lppcsim.c:647 eelf32lr5900.c:658 eelf32lr5900n32.c:658
 #: eelf32lriscv.c:496 eelf32lriscv_ilp32.c:496 eelf32lriscv_ilp32f.c:496
-#: eelf32lsmip.c:657 eelf32ltsmip.c:657 eelf32ltsmip_fbsd.c:657
-#: eelf32ltsmipn32.c:657 eelf32ltsmipn32_fbsd.c:657 eelf32m32c.c:442
+#: eelf32lsmip.c:658 eelf32ltsmip.c:658 eelf32ltsmip_fbsd.c:658
+#: eelf32ltsmipn32.c:658 eelf32ltsmipn32_fbsd.c:658 eelf32m32c.c:442
 #: eelf32mb_linux.c:431 eelf32mbel_linux.c:431 eelf32mcore.c:431
 #: eelf32mep.c:431 eelf32metag.c:706 eelf32microblaze.c:431
-#: eelf32microblazeel.c:431 eelf32mipswindiss.c:657 eelf32or1k.c:431
-#: eelf32or1k_linux.c:431 eelf32ppc.c:634 eelf32ppc_fbsd.c:634
-#: eelf32ppclinux.c:634 eelf32ppcnto.c:634 eelf32ppcsim.c:634
-#: eelf32ppcvxworks.c:608 eelf32ppcwindiss.c:634 eelf32rl78.c:431
+#: eelf32microblazeel.c:431 eelf32mipswindiss.c:658 eelf32or1k.c:431
+#: eelf32or1k_linux.c:431 eelf32ppc.c:647 eelf32ppc_fbsd.c:647
+#: eelf32ppclinux.c:647 eelf32ppcnto.c:647 eelf32ppcsim.c:647
+#: eelf32ppcvxworks.c:621 eelf32ppcwindiss.c:647 eelf32rl78.c:431
 #: eelf32rx.c:447 eelf32tilegx.c:431 eelf32tilegx_be.c:431 eelf32tilepro.c:431
 #: eelf32vax.c:431 eelf32visium.c:431 eelf32xc16x.c:431 eelf32xc16xl.c:431
 #: eelf32xc16xs.c:431 eelf32xstormy16.c:442 eelf32xtensa.c:2318
 #: eelf64_aix.c:431 eelf64_ia64.c:455 eelf64_ia64_fbsd.c:455 eelf64_s390.c:446
 #: eelf64_sparc.c:431 eelf64_sparc_fbsd.c:431 eelf64_sparc_sol2.c:562
 #: eelf64alpha.c:514 eelf64alpha_fbsd.c:514 eelf64alpha_nbsd.c:514
-#: eelf64bmip.c:675 eelf64btsmip.c:657 eelf64btsmip_fbsd.c:657
-#: eelf64hppa.c:431 eelf64lppc.c:1081 eelf64lriscv.c:496
-#: eelf64lriscv_lp64.c:496 eelf64lriscv_lp64f.c:496 eelf64ltsmip.c:657
-#: eelf64ltsmip_fbsd.c:657 eelf64mmix.c:542 eelf64ppc.c:1081
-#: eelf64ppc_fbsd.c:1081 eelf64rdos.c:431 eelf64tilegx.c:431
+#: eelf64bmip.c:676 eelf64btsmip.c:658 eelf64btsmip_fbsd.c:658
+#: eelf64hppa.c:431 eelf64lppc.c:1093 eelf64lriscv.c:496
+#: eelf64lriscv_lp64.c:496 eelf64lriscv_lp64f.c:496 eelf64ltsmip.c:658
+#: eelf64ltsmip_fbsd.c:658 eelf64mmix.c:542 eelf64ppc.c:1093
+#: eelf64ppc_fbsd.c:1093 eelf64rdos.c:431 eelf64tilegx.c:431
 #: eelf64tilegx_be.c:431 eelf_i386.c:434 eelf_i386_be.c:431
 #: eelf_i386_chaos.c:431 eelf_i386_fbsd.c:431 eelf_i386_ldso.c:431
 #: eelf_i386_nacl.c:431 eelf_i386_sol2.c:562 eelf_i386_vxworks.c:460
@@ -3382,13 +3407,13 @@ msgstr "%F%P : %pB : bfd_stat en échec: %E\n"
 #: em32relf_linux.c:431 em32rlelf.c:431 em32rlelf_linux.c:431
 #: em68hc11elf.c:731 em68hc11elfb.c:731 em68hc12elf.c:731 em68hc12elfb.c:731
 #: em68kelf.c:581 em68kelfnbsd.c:581 em9s12zelf.c:431 emn10300.c:431
-#: ends32belf.c:608 ends32belf16m.c:608 ends32belf_linux.c:608 ends32elf.c:608
-#: ends32elf16m.c:608 ends32elf_linux.c:608 enios2elf.c:724 enios2linux.c:724
-#: eppclynx.c:634 epruelf.c:451 escore3_elf.c:451 escore7_elf.c:451
+#: ends32belf.c:538 ends32belf16m.c:538 ends32belf_linux.c:538 ends32elf.c:538
+#: ends32elf16m.c:538 ends32elf_linux.c:538 enios2elf.c:724 enios2linux.c:724
+#: eppclynx.c:647 epruelf.c:451 escore3_elf.c:451 escore7_elf.c:451
 #: eshelf.c:431 eshelf_fd.c:431 eshelf_linux.c:431 eshelf_nbsd.c:431
 #: eshelf_nto.c:431 eshelf_uclinux.c:431 eshelf_vxworks.c:460 eshlelf.c:431
 #: eshlelf_fd.c:431 eshlelf_linux.c:431 eshlelf_nbsd.c:431 eshlelf_nto.c:431
-#: eshlelf_vxworks.c:460 ev850.c:477 ev850_rh850.c:477 exgateelf.c:431
+#: eshlelf_vxworks.c:460 ev850.c:477 ev850_rh850.c:477
 #, c-format
 msgid "found %s at %s\n"
 msgstr "%s trouvé à %s\n"
@@ -3412,40 +3437,41 @@ msgstr "%s trouvé à %s\n"
 #: eavr3.c:855 eavr31.c:855 eavr35.c:855 eavr4.c:855 eavr5.c:855 eavr51.c:855
 #: eavr6.c:855 eavrtiny.c:855 eavrxmega1.c:855 eavrxmega2.c:855
 #: eavrxmega3.c:855 eavrxmega4.c:855 eavrxmega5.c:855 eavrxmega6.c:855
-#: eavrxmega7.c:855 ecriself.c:652 ecrislinux.c:652 ed10velf.c:652
-#: eelf32_sparc.c:652 eelf32_sparc_sol2.c:783 eelf32_sparc_vxworks.c:681
-#: eelf32_spu.c:1186 eelf32_tic6x_be.c:790 eelf32_tic6x_elf_be.c:790
-#: eelf32_tic6x_elf_le.c:790 eelf32_tic6x_le.c:790 eelf32_tic6x_linux_be.c:790
+#: eavrxmega7.c:855 ecriself.c:652 ecrislinux.c:652 ecskyelf.c:909
+#: ecskyelf_linux.c:909 ed10velf.c:652 eelf32_sparc.c:652
+#: eelf32_sparc_sol2.c:783 eelf32_sparc_vxworks.c:681 eelf32_spu.c:1322
+#: eelf32_tic6x_be.c:790 eelf32_tic6x_elf_be.c:790 eelf32_tic6x_elf_le.c:790
+#: eelf32_tic6x_le.c:790 eelf32_tic6x_linux_be.c:790
 #: eelf32_tic6x_linux_le.c:790 eelf32_x86_64.c:655 eelf32_x86_64_nacl.c:652
-#: eelf32am33lin.c:652 eelf32b4300.c:878 eelf32bfin.c:661 eelf32bfinfd.c:661
-#: eelf32bmip.c:878 eelf32bmipn32.c:896 eelf32bsmip.c:896 eelf32btsmip.c:878
-#: eelf32btsmip_fbsd.c:878 eelf32btsmipn32.c:878 eelf32btsmipn32_fbsd.c:878
-#: eelf32cr16.c:803 eelf32cr16c.c:652 eelf32crx.c:691 eelf32ebmip.c:878
-#: eelf32ebmipvxworks.c:907 eelf32elmip.c:878 eelf32elmipvxworks.c:907
+#: eelf32am33lin.c:652 eelf32b4300.c:879 eelf32bfin.c:661 eelf32bfinfd.c:661
+#: eelf32bmip.c:879 eelf32bmipn32.c:897 eelf32bsmip.c:897 eelf32btsmip.c:879
+#: eelf32btsmip_fbsd.c:879 eelf32btsmipn32.c:879 eelf32btsmipn32_fbsd.c:879
+#: eelf32cr16.c:803 eelf32cr16c.c:652 eelf32crx.c:691 eelf32ebmip.c:879
+#: eelf32ebmipvxworks.c:908 eelf32elmip.c:879 eelf32elmipvxworks.c:908
 #: eelf32epiphany.c:652 eelf32epiphany_4x4.c:654 eelf32frvfd.c:652
-#: eelf32ip2k.c:652 eelf32l4300.c:878 eelf32lm32.c:652 eelf32lm32fd.c:652
-#: eelf32lmip.c:878 eelf32lppc.c:855 eelf32lppclinux.c:855 eelf32lppcnto.c:855
-#: eelf32lppcsim.c:855 eelf32lr5900.c:878 eelf32lr5900n32.c:878
+#: eelf32ip2k.c:652 eelf32l4300.c:879 eelf32lm32.c:652 eelf32lm32fd.c:652
+#: eelf32lmip.c:879 eelf32lppc.c:868 eelf32lppclinux.c:868 eelf32lppcnto.c:868
+#: eelf32lppcsim.c:868 eelf32lr5900.c:879 eelf32lr5900n32.c:879
 #: eelf32lriscv.c:717 eelf32lriscv_ilp32.c:717 eelf32lriscv_ilp32f.c:717
-#: eelf32lsmip.c:878 eelf32ltsmip.c:878 eelf32ltsmip_fbsd.c:878
-#: eelf32ltsmipn32.c:878 eelf32ltsmipn32_fbsd.c:878 eelf32m32c.c:663
+#: eelf32lsmip.c:879 eelf32ltsmip.c:879 eelf32ltsmip_fbsd.c:879
+#: eelf32ltsmipn32.c:879 eelf32ltsmipn32_fbsd.c:879 eelf32m32c.c:663
 #: eelf32mb_linux.c:652 eelf32mbel_linux.c:652 eelf32mcore.c:652
 #: eelf32mep.c:652 eelf32metag.c:927 eelf32microblaze.c:652
-#: eelf32microblazeel.c:652 eelf32mipswindiss.c:878 eelf32or1k.c:652
-#: eelf32or1k_linux.c:652 eelf32ppc.c:855 eelf32ppc_fbsd.c:855
-#: eelf32ppclinux.c:855 eelf32ppcnto.c:855 eelf32ppcsim.c:855
-#: eelf32ppcvxworks.c:829 eelf32ppcwindiss.c:855 eelf32rl78.c:652
+#: eelf32microblazeel.c:652 eelf32mipswindiss.c:879 eelf32or1k.c:652
+#: eelf32or1k_linux.c:652 eelf32ppc.c:868 eelf32ppc_fbsd.c:868
+#: eelf32ppclinux.c:868 eelf32ppcnto.c:868 eelf32ppcsim.c:868
+#: eelf32ppcvxworks.c:842 eelf32ppcwindiss.c:868 eelf32rl78.c:652
 #: eelf32rx.c:668 eelf32tilegx.c:652 eelf32tilegx_be.c:652 eelf32tilepro.c:652
 #: eelf32vax.c:652 eelf32visium.c:652 eelf32xc16x.c:652 eelf32xc16xl.c:652
 #: eelf32xc16xs.c:652 eelf32xstormy16.c:663 eelf32xtensa.c:2539
 #: eelf64_aix.c:652 eelf64_ia64.c:676 eelf64_ia64_fbsd.c:676 eelf64_s390.c:667
 #: eelf64_sparc.c:652 eelf64_sparc_fbsd.c:652 eelf64_sparc_sol2.c:783
 #: eelf64alpha.c:735 eelf64alpha_fbsd.c:735 eelf64alpha_nbsd.c:735
-#: eelf64bmip.c:896 eelf64btsmip.c:878 eelf64btsmip_fbsd.c:878
-#: eelf64hppa.c:652 eelf64lppc.c:1302 eelf64lriscv.c:717
-#: eelf64lriscv_lp64.c:717 eelf64lriscv_lp64f.c:717 eelf64ltsmip.c:878
-#: eelf64ltsmip_fbsd.c:878 eelf64mmix.c:763 eelf64ppc.c:1302
-#: eelf64ppc_fbsd.c:1302 eelf64rdos.c:652 eelf64tilegx.c:652
+#: eelf64bmip.c:897 eelf64btsmip.c:879 eelf64btsmip_fbsd.c:879
+#: eelf64hppa.c:652 eelf64lppc.c:1314 eelf64lriscv.c:717
+#: eelf64lriscv_lp64.c:717 eelf64lriscv_lp64f.c:717 eelf64ltsmip.c:879
+#: eelf64ltsmip_fbsd.c:879 eelf64mmix.c:763 eelf64ppc.c:1314
+#: eelf64ppc_fbsd.c:1314 eelf64rdos.c:652 eelf64tilegx.c:652
 #: eelf64tilegx_be.c:652 eelf_i386.c:655 eelf_i386_be.c:652
 #: eelf_i386_chaos.c:652 eelf_i386_fbsd.c:652 eelf_i386_ldso.c:652
 #: eelf_i386_nacl.c:652 eelf_i386_sol2.c:783 eelf_i386_vxworks.c:681
@@ -3461,13 +3487,13 @@ msgstr "%s trouvé à %s\n"
 #: em32relf_linux.c:652 em32rlelf.c:652 em32rlelf_linux.c:652
 #: em68hc11elf.c:952 em68hc11elfb.c:952 em68hc12elf.c:952 em68hc12elfb.c:952
 #: em68kelf.c:802 em68kelfnbsd.c:802 em9s12zelf.c:652 emn10300.c:652
-#: ends32belf.c:829 ends32belf16m.c:829 ends32belf_linux.c:829 ends32elf.c:829
-#: ends32elf16m.c:829 ends32elf_linux.c:829 enios2elf.c:945 enios2linux.c:945
-#: eppclynx.c:855 epruelf.c:672 escore3_elf.c:672 escore7_elf.c:672
+#: ends32belf.c:759 ends32belf16m.c:759 ends32belf_linux.c:759 ends32elf.c:759
+#: ends32elf16m.c:759 ends32elf_linux.c:759 enios2elf.c:945 enios2linux.c:945
+#: eppclynx.c:868 epruelf.c:672 escore3_elf.c:672 escore7_elf.c:672
 #: eshelf.c:652 eshelf_fd.c:652 eshelf_linux.c:652 eshelf_nbsd.c:652
 #: eshelf_nto.c:652 eshelf_uclinux.c:652 eshelf_vxworks.c:681 eshlelf.c:652
 #: eshlelf_fd.c:652 eshlelf_linux.c:652 eshlelf_nbsd.c:652 eshlelf_nto.c:652
-#: eshlelf_vxworks.c:681 ev850.c:698 ev850_rh850.c:698 exgateelf.c:652
+#: eshlelf_vxworks.c:681 ev850.c:698 ev850_rh850.c:698
 #, c-format
 msgid "unrecognised or unsupported token '%s' in search path\n"
 msgstr "élément lexical « %s » non reconnu ou non pris en charge dans le chemin de recherche\n"
@@ -3488,40 +3514,41 @@ msgstr "élément lexical « %s » non reconnu ou non pris en charge dans le c
 #: eavr3.c:969 eavr31.c:969 eavr35.c:969 eavr4.c:969 eavr5.c:969 eavr51.c:969
 #: eavr6.c:969 eavrtiny.c:969 eavrxmega1.c:969 eavrxmega2.c:969
 #: eavrxmega3.c:969 eavrxmega4.c:969 eavrxmega5.c:969 eavrxmega6.c:969
-#: eavrxmega7.c:969 ecriself.c:766 ecrislinux.c:766 ed10velf.c:766
-#: eelf32_sparc.c:766 eelf32_sparc_sol2.c:897 eelf32_sparc_vxworks.c:795
-#: eelf32_spu.c:1300 eelf32_tic6x_be.c:904 eelf32_tic6x_elf_be.c:904
-#: eelf32_tic6x_elf_le.c:904 eelf32_tic6x_le.c:904 eelf32_tic6x_linux_be.c:904
+#: eavrxmega7.c:969 ecriself.c:766 ecrislinux.c:766 ecskyelf.c:1023
+#: ecskyelf_linux.c:1023 ed10velf.c:766 eelf32_sparc.c:766
+#: eelf32_sparc_sol2.c:897 eelf32_sparc_vxworks.c:795 eelf32_spu.c:1436
+#: eelf32_tic6x_be.c:904 eelf32_tic6x_elf_be.c:904 eelf32_tic6x_elf_le.c:904
+#: eelf32_tic6x_le.c:904 eelf32_tic6x_linux_be.c:904
 #: eelf32_tic6x_linux_le.c:904 eelf32_x86_64.c:1058 eelf32_x86_64_nacl.c:766
-#: eelf32am33lin.c:766 eelf32b4300.c:992 eelf32bfin.c:775 eelf32bfinfd.c:775
-#: eelf32bmip.c:992 eelf32bmipn32.c:1010 eelf32bsmip.c:1010 eelf32btsmip.c:992
-#: eelf32btsmip_fbsd.c:992 eelf32btsmipn32.c:992 eelf32btsmipn32_fbsd.c:992
-#: eelf32cr16.c:917 eelf32cr16c.c:766 eelf32crx.c:805 eelf32ebmip.c:992
-#: eelf32ebmipvxworks.c:1021 eelf32elmip.c:992 eelf32elmipvxworks.c:1021
+#: eelf32am33lin.c:766 eelf32b4300.c:993 eelf32bfin.c:775 eelf32bfinfd.c:775
+#: eelf32bmip.c:993 eelf32bmipn32.c:1011 eelf32bsmip.c:1011 eelf32btsmip.c:993
+#: eelf32btsmip_fbsd.c:993 eelf32btsmipn32.c:993 eelf32btsmipn32_fbsd.c:993
+#: eelf32cr16.c:917 eelf32cr16c.c:766 eelf32crx.c:805 eelf32ebmip.c:993
+#: eelf32ebmipvxworks.c:1022 eelf32elmip.c:993 eelf32elmipvxworks.c:1022
 #: eelf32epiphany.c:766 eelf32epiphany_4x4.c:768 eelf32frvfd.c:766
-#: eelf32ip2k.c:766 eelf32l4300.c:992 eelf32lm32.c:766 eelf32lm32fd.c:766
-#: eelf32lmip.c:992 eelf32lppc.c:969 eelf32lppclinux.c:969 eelf32lppcnto.c:969
-#: eelf32lppcsim.c:969 eelf32lr5900.c:992 eelf32lr5900n32.c:992
+#: eelf32ip2k.c:766 eelf32l4300.c:993 eelf32lm32.c:766 eelf32lm32fd.c:766
+#: eelf32lmip.c:993 eelf32lppc.c:982 eelf32lppclinux.c:982 eelf32lppcnto.c:982
+#: eelf32lppcsim.c:982 eelf32lr5900.c:993 eelf32lr5900n32.c:993
 #: eelf32lriscv.c:831 eelf32lriscv_ilp32.c:831 eelf32lriscv_ilp32f.c:831
-#: eelf32lsmip.c:992 eelf32ltsmip.c:992 eelf32ltsmip_fbsd.c:992
-#: eelf32ltsmipn32.c:992 eelf32ltsmipn32_fbsd.c:992 eelf32m32c.c:777
+#: eelf32lsmip.c:993 eelf32ltsmip.c:993 eelf32ltsmip_fbsd.c:993
+#: eelf32ltsmipn32.c:993 eelf32ltsmipn32_fbsd.c:993 eelf32m32c.c:777
 #: eelf32mb_linux.c:766 eelf32mbel_linux.c:766 eelf32mcore.c:766
 #: eelf32mep.c:766 eelf32metag.c:1041 eelf32microblaze.c:766
-#: eelf32microblazeel.c:766 eelf32mipswindiss.c:992 eelf32or1k.c:766
-#: eelf32or1k_linux.c:766 eelf32ppc.c:969 eelf32ppc_fbsd.c:969
-#: eelf32ppclinux.c:969 eelf32ppcnto.c:969 eelf32ppcsim.c:969
-#: eelf32ppcvxworks.c:943 eelf32ppcwindiss.c:969 eelf32rl78.c:766
+#: eelf32microblazeel.c:766 eelf32mipswindiss.c:993 eelf32or1k.c:766
+#: eelf32or1k_linux.c:766 eelf32ppc.c:982 eelf32ppc_fbsd.c:982
+#: eelf32ppclinux.c:982 eelf32ppcnto.c:982 eelf32ppcsim.c:982
+#: eelf32ppcvxworks.c:956 eelf32ppcwindiss.c:982 eelf32rl78.c:766
 #: eelf32rx.c:782 eelf32tilegx.c:766 eelf32tilegx_be.c:766 eelf32tilepro.c:766
 #: eelf32vax.c:766 eelf32visium.c:766 eelf32xc16x.c:766 eelf32xc16xl.c:766
 #: eelf32xc16xs.c:766 eelf32xstormy16.c:777 eelf32xtensa.c:2653
 #: eelf64_aix.c:766 eelf64_ia64.c:790 eelf64_ia64_fbsd.c:790 eelf64_s390.c:781
 #: eelf64_sparc.c:766 eelf64_sparc_fbsd.c:766 eelf64_sparc_sol2.c:897
 #: eelf64alpha.c:849 eelf64alpha_fbsd.c:849 eelf64alpha_nbsd.c:849
-#: eelf64bmip.c:1010 eelf64btsmip.c:992 eelf64btsmip_fbsd.c:992
-#: eelf64hppa.c:766 eelf64lppc.c:1416 eelf64lriscv.c:831
-#: eelf64lriscv_lp64.c:831 eelf64lriscv_lp64f.c:831 eelf64ltsmip.c:992
-#: eelf64ltsmip_fbsd.c:992 eelf64mmix.c:877 eelf64ppc.c:1416
-#: eelf64ppc_fbsd.c:1416 eelf64rdos.c:766 eelf64tilegx.c:766
+#: eelf64bmip.c:1011 eelf64btsmip.c:993 eelf64btsmip_fbsd.c:993
+#: eelf64hppa.c:766 eelf64lppc.c:1428 eelf64lriscv.c:831
+#: eelf64lriscv_lp64.c:831 eelf64lriscv_lp64f.c:831 eelf64ltsmip.c:993
+#: eelf64ltsmip_fbsd.c:993 eelf64mmix.c:877 eelf64ppc.c:1428
+#: eelf64ppc_fbsd.c:1428 eelf64rdos.c:766 eelf64tilegx.c:766
 #: eelf64tilegx_be.c:766 eelf_i386.c:1058 eelf_i386_be.c:766
 #: eelf_i386_chaos.c:766 eelf_i386_fbsd.c:766 eelf_i386_ldso.c:766
 #: eelf_i386_nacl.c:766 eelf_i386_sol2.c:897 eelf_i386_vxworks.c:795
@@ -3537,14 +3564,14 @@ msgstr "élément lexical « %s » non reconnu ou non pris en charge dans le c
 #: em32relf_linux.c:766 em32rlelf.c:766 em32rlelf_linux.c:766
 #: em68hc11elf.c:1066 em68hc11elfb.c:1066 em68hc12elf.c:1066
 #: em68hc12elfb.c:1066 em68kelf.c:916 em68kelfnbsd.c:916 em9s12zelf.c:766
-#: emn10300.c:766 ends32belf.c:943 ends32belf16m.c:943 ends32belf_linux.c:943
-#: ends32elf.c:943 ends32elf16m.c:943 ends32elf_linux.c:943 enios2elf.c:1059
-#: enios2linux.c:1059 eppclynx.c:969 epruelf.c:786 escore3_elf.c:786
+#: emn10300.c:766 ends32belf.c:873 ends32belf16m.c:873 ends32belf_linux.c:873
+#: ends32elf.c:873 ends32elf16m.c:873 ends32elf_linux.c:873 enios2elf.c:1059
+#: enios2linux.c:1059 eppclynx.c:982 epruelf.c:786 escore3_elf.c:786
 #: escore7_elf.c:786 eshelf.c:766 eshelf_fd.c:766 eshelf_linux.c:766
 #: eshelf_nbsd.c:766 eshelf_nto.c:766 eshelf_uclinux.c:766
 #: eshelf_vxworks.c:795 eshlelf.c:766 eshlelf_fd.c:766 eshlelf_linux.c:766
 #: eshlelf_nbsd.c:766 eshlelf_nto.c:766 eshlelf_vxworks.c:795 ev850.c:812
-#: ev850_rh850.c:812 exgateelf.c:766
+#: ev850_rh850.c:812
 msgid "%P: warning: .note.gnu.build-id section discarded, --build-id ignored\n"
 msgstr "%P : avertissement : section .note.gnu.build-id rejetée, --build-id ignoré\n"
 
@@ -3565,41 +3592,42 @@ msgstr "%P : avertissement : section .note.gnu.build-id rejetée, --build-id i
 #: eavr31.c:1015 eavr35.c:1015 eavr4.c:1015 eavr5.c:1015 eavr51.c:1015
 #: eavr6.c:1015 eavrtiny.c:1015 eavrxmega1.c:1015 eavrxmega2.c:1015
 #: eavrxmega3.c:1015 eavrxmega4.c:1015 eavrxmega5.c:1015 eavrxmega6.c:1015
-#: eavrxmega7.c:1015 ecriself.c:812 ecrislinux.c:812 ed10velf.c:812
-#: eelf32_sparc.c:812 eelf32_sparc_sol2.c:943 eelf32_sparc_vxworks.c:841
-#: eelf32_spu.c:1346 eelf32_tic6x_be.c:950 eelf32_tic6x_elf_be.c:950
-#: eelf32_tic6x_elf_le.c:950 eelf32_tic6x_le.c:950 eelf32_tic6x_linux_be.c:950
+#: eavrxmega7.c:1015 ecriself.c:812 ecrislinux.c:812 ecskyelf.c:1069
+#: ecskyelf_linux.c:1069 ed10velf.c:812 eelf32_sparc.c:812
+#: eelf32_sparc_sol2.c:943 eelf32_sparc_vxworks.c:841 eelf32_spu.c:1482
+#: eelf32_tic6x_be.c:950 eelf32_tic6x_elf_be.c:950 eelf32_tic6x_elf_le.c:950
+#: eelf32_tic6x_le.c:950 eelf32_tic6x_linux_be.c:950
 #: eelf32_tic6x_linux_le.c:950 eelf32_x86_64.c:1104 eelf32_x86_64_nacl.c:812
-#: eelf32am33lin.c:812 eelf32b4300.c:1038 eelf32bfin.c:821 eelf32bfinfd.c:821
-#: eelf32bmip.c:1038 eelf32bmipn32.c:1056 eelf32bsmip.c:1056
-#: eelf32btsmip.c:1038 eelf32btsmip_fbsd.c:1038 eelf32btsmipn32.c:1038
-#: eelf32btsmipn32_fbsd.c:1038 eelf32cr16.c:963 eelf32cr16c.c:812
-#: eelf32crx.c:851 eelf32ebmip.c:1038 eelf32ebmipvxworks.c:1067
-#: eelf32elmip.c:1038 eelf32elmipvxworks.c:1067 eelf32epiphany.c:812
+#: eelf32am33lin.c:812 eelf32b4300.c:1039 eelf32bfin.c:821 eelf32bfinfd.c:821
+#: eelf32bmip.c:1039 eelf32bmipn32.c:1057 eelf32bsmip.c:1057
+#: eelf32btsmip.c:1039 eelf32btsmip_fbsd.c:1039 eelf32btsmipn32.c:1039
+#: eelf32btsmipn32_fbsd.c:1039 eelf32cr16.c:963 eelf32cr16c.c:812
+#: eelf32crx.c:851 eelf32ebmip.c:1039 eelf32ebmipvxworks.c:1068
+#: eelf32elmip.c:1039 eelf32elmipvxworks.c:1068 eelf32epiphany.c:812
 #: eelf32epiphany_4x4.c:814 eelf32frvfd.c:812 eelf32ip2k.c:812
-#: eelf32l4300.c:1038 eelf32lm32.c:812 eelf32lm32fd.c:812 eelf32lmip.c:1038
-#: eelf32lppc.c:1015 eelf32lppclinux.c:1015 eelf32lppcnto.c:1015
-#: eelf32lppcsim.c:1015 eelf32lr5900.c:1038 eelf32lr5900n32.c:1038
+#: eelf32l4300.c:1039 eelf32lm32.c:812 eelf32lm32fd.c:812 eelf32lmip.c:1039
+#: eelf32lppc.c:1028 eelf32lppclinux.c:1028 eelf32lppcnto.c:1028
+#: eelf32lppcsim.c:1028 eelf32lr5900.c:1039 eelf32lr5900n32.c:1039
 #: eelf32lriscv.c:877 eelf32lriscv_ilp32.c:877 eelf32lriscv_ilp32f.c:877
-#: eelf32lsmip.c:1038 eelf32ltsmip.c:1038 eelf32ltsmip_fbsd.c:1038
-#: eelf32ltsmipn32.c:1038 eelf32ltsmipn32_fbsd.c:1038 eelf32m32c.c:823
+#: eelf32lsmip.c:1039 eelf32ltsmip.c:1039 eelf32ltsmip_fbsd.c:1039
+#: eelf32ltsmipn32.c:1039 eelf32ltsmipn32_fbsd.c:1039 eelf32m32c.c:823
 #: eelf32mb_linux.c:812 eelf32mbel_linux.c:812 eelf32mcore.c:812
 #: eelf32mep.c:812 eelf32metag.c:1087 eelf32microblaze.c:812
-#: eelf32microblazeel.c:812 eelf32mipswindiss.c:1038 eelf32or1k.c:812
-#: eelf32or1k_linux.c:812 eelf32ppc.c:1015 eelf32ppc_fbsd.c:1015
-#: eelf32ppclinux.c:1015 eelf32ppcnto.c:1015 eelf32ppcsim.c:1015
-#: eelf32ppcvxworks.c:989 eelf32ppcwindiss.c:1015 eelf32rl78.c:812
+#: eelf32microblazeel.c:812 eelf32mipswindiss.c:1039 eelf32or1k.c:812
+#: eelf32or1k_linux.c:812 eelf32ppc.c:1028 eelf32ppc_fbsd.c:1028
+#: eelf32ppclinux.c:1028 eelf32ppcnto.c:1028 eelf32ppcsim.c:1028
+#: eelf32ppcvxworks.c:1002 eelf32ppcwindiss.c:1028 eelf32rl78.c:812
 #: eelf32rx.c:828 eelf32tilegx.c:812 eelf32tilegx_be.c:812 eelf32tilepro.c:812
 #: eelf32vax.c:812 eelf32visium.c:812 eelf32xc16x.c:812 eelf32xc16xl.c:812
 #: eelf32xc16xs.c:812 eelf32xstormy16.c:823 eelf32xtensa.c:2699
 #: eelf64_aix.c:812 eelf64_ia64.c:836 eelf64_ia64_fbsd.c:836 eelf64_s390.c:827
 #: eelf64_sparc.c:812 eelf64_sparc_fbsd.c:812 eelf64_sparc_sol2.c:943
 #: eelf64alpha.c:895 eelf64alpha_fbsd.c:895 eelf64alpha_nbsd.c:895
-#: eelf64bmip.c:1056 eelf64btsmip.c:1038 eelf64btsmip_fbsd.c:1038
-#: eelf64hppa.c:812 eelf64lppc.c:1462 eelf64lriscv.c:877
-#: eelf64lriscv_lp64.c:877 eelf64lriscv_lp64f.c:877 eelf64ltsmip.c:1038
-#: eelf64ltsmip_fbsd.c:1038 eelf64mmix.c:923 eelf64ppc.c:1462
-#: eelf64ppc_fbsd.c:1462 eelf64rdos.c:812 eelf64tilegx.c:812
+#: eelf64bmip.c:1057 eelf64btsmip.c:1039 eelf64btsmip_fbsd.c:1039
+#: eelf64hppa.c:812 eelf64lppc.c:1474 eelf64lriscv.c:877
+#: eelf64lriscv_lp64.c:877 eelf64lriscv_lp64f.c:877 eelf64ltsmip.c:1039
+#: eelf64ltsmip_fbsd.c:1039 eelf64mmix.c:923 eelf64ppc.c:1474
+#: eelf64ppc_fbsd.c:1474 eelf64rdos.c:812 eelf64tilegx.c:812
 #: eelf64tilegx_be.c:812 eelf_i386.c:1104 eelf_i386_be.c:812
 #: eelf_i386_chaos.c:812 eelf_i386_fbsd.c:812 eelf_i386_ldso.c:812
 #: eelf_i386_nacl.c:812 eelf_i386_sol2.c:943 eelf_i386_vxworks.c:841
@@ -3616,14 +3644,14 @@ msgstr "%P : avertissement : section .note.gnu.build-id rejetée, --build-id i
 #: em32rlelf.c:812 em32rlelf_linux.c:812 em68hc11elf.c:1112
 #: em68hc11elfb.c:1112 em68hc12elf.c:1112 em68hc12elfb.c:1112 em68kelf.c:962
 #: em68kelfnbsd.c:962 em9s12zelf.c:812 emcorepe.c:1225 emn10300.c:812
-#: ends32belf.c:989 ends32belf16m.c:989 ends32belf_linux.c:989 ends32elf.c:989
-#: ends32elf16m.c:989 ends32elf_linux.c:989 enios2elf.c:1105
-#: enios2linux.c:1105 eppclynx.c:1015 eppcpe.c:1225 epruelf.c:832
+#: ends32belf.c:919 ends32belf16m.c:919 ends32belf_linux.c:919 ends32elf.c:919
+#: ends32elf16m.c:919 ends32elf_linux.c:919 enios2elf.c:1105
+#: enios2linux.c:1105 eppclynx.c:1028 eppcpe.c:1225 epruelf.c:832
 #: escore3_elf.c:832 escore7_elf.c:832 eshelf.c:812 eshelf_fd.c:812
 #: eshelf_linux.c:812 eshelf_nbsd.c:812 eshelf_nto.c:812 eshelf_uclinux.c:812
 #: eshelf_vxworks.c:841 eshlelf.c:812 eshlelf_fd.c:812 eshlelf_linux.c:812
 #: eshlelf_nbsd.c:812 eshlelf_nto.c:812 eshlelf_vxworks.c:841 eshpe.c:1225
-#: ev850.c:858 ev850_rh850.c:858 exgateelf.c:812
+#: ev850.c:858 ev850_rh850.c:858
 msgid "%P: warning: unrecognized --build-id style ignored\n"
 msgstr "%P : avertissement : style --build-id non reconnu, ignoré\n"
 
@@ -3644,40 +3672,41 @@ msgstr "%P : avertissement : style --build-id non reconnu, ignoré\n"
 #: eavr51.c:1033 eavr6.c:1033 eavrtiny.c:1033 eavrxmega1.c:1033
 #: eavrxmega2.c:1033 eavrxmega3.c:1033 eavrxmega4.c:1033 eavrxmega5.c:1033
 #: eavrxmega6.c:1033 eavrxmega7.c:1033 ecriself.c:830 ecrislinux.c:830
-#: ed10velf.c:830 eelf32_sparc.c:830 eelf32_sparc_sol2.c:961
-#: eelf32_sparc_vxworks.c:859 eelf32_spu.c:1364 eelf32_tic6x_be.c:968
-#: eelf32_tic6x_elf_be.c:968 eelf32_tic6x_elf_le.c:968 eelf32_tic6x_le.c:968
-#: eelf32_tic6x_linux_be.c:968 eelf32_tic6x_linux_le.c:968
-#: eelf32_x86_64.c:1122 eelf32_x86_64_nacl.c:830 eelf32am33lin.c:830
-#: eelf32b4300.c:1056 eelf32bfin.c:839 eelf32bfinfd.c:839 eelf32bmip.c:1056
-#: eelf32bmipn32.c:1074 eelf32bsmip.c:1074 eelf32btsmip.c:1056
-#: eelf32btsmip_fbsd.c:1056 eelf32btsmipn32.c:1056 eelf32btsmipn32_fbsd.c:1056
-#: eelf32cr16.c:981 eelf32cr16c.c:830 eelf32crx.c:869 eelf32ebmip.c:1056
-#: eelf32ebmipvxworks.c:1085 eelf32elmip.c:1056 eelf32elmipvxworks.c:1085
-#: eelf32epiphany.c:830 eelf32epiphany_4x4.c:832 eelf32frvfd.c:830
-#: eelf32ip2k.c:830 eelf32l4300.c:1056 eelf32lm32.c:830 eelf32lm32fd.c:830
-#: eelf32lmip.c:1056 eelf32lppc.c:1033 eelf32lppclinux.c:1033
-#: eelf32lppcnto.c:1033 eelf32lppcsim.c:1033 eelf32lr5900.c:1056
-#: eelf32lr5900n32.c:1056 eelf32lriscv.c:895 eelf32lriscv_ilp32.c:895
-#: eelf32lriscv_ilp32f.c:895 eelf32lsmip.c:1056 eelf32ltsmip.c:1056
-#: eelf32ltsmip_fbsd.c:1056 eelf32ltsmipn32.c:1056 eelf32ltsmipn32_fbsd.c:1056
-#: eelf32m32c.c:841 eelf32mb_linux.c:830 eelf32mbel_linux.c:830
-#: eelf32mcore.c:830 eelf32mep.c:830 eelf32metag.c:1105 eelf32microblaze.c:830
-#: eelf32microblazeel.c:830 eelf32mipswindiss.c:1056 eelf32or1k.c:830
-#: eelf32or1k_linux.c:830 eelf32ppc.c:1033 eelf32ppc_fbsd.c:1033
-#: eelf32ppclinux.c:1033 eelf32ppcnto.c:1033 eelf32ppcsim.c:1033
-#: eelf32ppcvxworks.c:1007 eelf32ppcwindiss.c:1033 eelf32rl78.c:830
+#: ecskyelf.c:1087 ecskyelf_linux.c:1087 ed10velf.c:830 eelf32_sparc.c:830
+#: eelf32_sparc_sol2.c:961 eelf32_sparc_vxworks.c:859 eelf32_spu.c:1500
+#: eelf32_tic6x_be.c:968 eelf32_tic6x_elf_be.c:968 eelf32_tic6x_elf_le.c:968
+#: eelf32_tic6x_le.c:968 eelf32_tic6x_linux_be.c:968
+#: eelf32_tic6x_linux_le.c:968 eelf32_x86_64.c:1122 eelf32_x86_64_nacl.c:830
+#: eelf32am33lin.c:830 eelf32b4300.c:1057 eelf32bfin.c:839 eelf32bfinfd.c:839
+#: eelf32bmip.c:1057 eelf32bmipn32.c:1075 eelf32bsmip.c:1075
+#: eelf32btsmip.c:1057 eelf32btsmip_fbsd.c:1057 eelf32btsmipn32.c:1057
+#: eelf32btsmipn32_fbsd.c:1057 eelf32cr16.c:981 eelf32cr16c.c:830
+#: eelf32crx.c:869 eelf32ebmip.c:1057 eelf32ebmipvxworks.c:1086
+#: eelf32elmip.c:1057 eelf32elmipvxworks.c:1086 eelf32epiphany.c:830
+#: eelf32epiphany_4x4.c:832 eelf32frvfd.c:830 eelf32ip2k.c:830
+#: eelf32l4300.c:1057 eelf32lm32.c:830 eelf32lm32fd.c:830 eelf32lmip.c:1057
+#: eelf32lppc.c:1046 eelf32lppclinux.c:1046 eelf32lppcnto.c:1046
+#: eelf32lppcsim.c:1046 eelf32lr5900.c:1057 eelf32lr5900n32.c:1057
+#: eelf32lriscv.c:895 eelf32lriscv_ilp32.c:895 eelf32lriscv_ilp32f.c:895
+#: eelf32lsmip.c:1057 eelf32ltsmip.c:1057 eelf32ltsmip_fbsd.c:1057
+#: eelf32ltsmipn32.c:1057 eelf32ltsmipn32_fbsd.c:1057 eelf32m32c.c:841
+#: eelf32mb_linux.c:830 eelf32mbel_linux.c:830 eelf32mcore.c:830
+#: eelf32mep.c:830 eelf32metag.c:1105 eelf32microblaze.c:830
+#: eelf32microblazeel.c:830 eelf32mipswindiss.c:1057 eelf32or1k.c:830
+#: eelf32or1k_linux.c:830 eelf32ppc.c:1046 eelf32ppc_fbsd.c:1046
+#: eelf32ppclinux.c:1046 eelf32ppcnto.c:1046 eelf32ppcsim.c:1046
+#: eelf32ppcvxworks.c:1020 eelf32ppcwindiss.c:1046 eelf32rl78.c:830
 #: eelf32rx.c:846 eelf32tilegx.c:830 eelf32tilegx_be.c:830 eelf32tilepro.c:830
 #: eelf32vax.c:830 eelf32visium.c:830 eelf32xc16x.c:830 eelf32xc16xl.c:830
 #: eelf32xc16xs.c:830 eelf32xstormy16.c:841 eelf32xtensa.c:2717
 #: eelf64_aix.c:830 eelf64_ia64.c:854 eelf64_ia64_fbsd.c:854 eelf64_s390.c:845
 #: eelf64_sparc.c:830 eelf64_sparc_fbsd.c:830 eelf64_sparc_sol2.c:961
 #: eelf64alpha.c:913 eelf64alpha_fbsd.c:913 eelf64alpha_nbsd.c:913
-#: eelf64bmip.c:1074 eelf64btsmip.c:1056 eelf64btsmip_fbsd.c:1056
-#: eelf64hppa.c:830 eelf64lppc.c:1480 eelf64lriscv.c:895
-#: eelf64lriscv_lp64.c:895 eelf64lriscv_lp64f.c:895 eelf64ltsmip.c:1056
-#: eelf64ltsmip_fbsd.c:1056 eelf64mmix.c:941 eelf64ppc.c:1480
-#: eelf64ppc_fbsd.c:1480 eelf64rdos.c:830 eelf64tilegx.c:830
+#: eelf64bmip.c:1075 eelf64btsmip.c:1057 eelf64btsmip_fbsd.c:1057
+#: eelf64hppa.c:830 eelf64lppc.c:1492 eelf64lriscv.c:895
+#: eelf64lriscv_lp64.c:895 eelf64lriscv_lp64f.c:895 eelf64ltsmip.c:1057
+#: eelf64ltsmip_fbsd.c:1057 eelf64mmix.c:941 eelf64ppc.c:1492
+#: eelf64ppc_fbsd.c:1492 eelf64rdos.c:830 eelf64tilegx.c:830
 #: eelf64tilegx_be.c:830 eelf_i386.c:1122 eelf_i386_be.c:830
 #: eelf_i386_chaos.c:830 eelf_i386_fbsd.c:830 eelf_i386_ldso.c:830
 #: eelf_i386_nacl.c:830 eelf_i386_sol2.c:961 eelf_i386_vxworks.c:859
@@ -3693,14 +3722,14 @@ msgstr "%P : avertissement : style --build-id non reconnu, ignoré\n"
 #: em32relf_linux.c:830 em32rlelf.c:830 em32rlelf_linux.c:830
 #: em68hc11elf.c:1130 em68hc11elfb.c:1130 em68hc12elf.c:1130
 #: em68hc12elfb.c:1130 em68kelf.c:980 em68kelfnbsd.c:980 em9s12zelf.c:830
-#: emn10300.c:830 ends32belf.c:1007 ends32belf16m.c:1007
-#: ends32belf_linux.c:1007 ends32elf.c:1007 ends32elf16m.c:1007
-#: ends32elf_linux.c:1007 enios2elf.c:1123 enios2linux.c:1123 eppclynx.c:1033
-#: epruelf.c:850 escore3_elf.c:850 escore7_elf.c:850 eshelf.c:830
-#: eshelf_fd.c:830 eshelf_linux.c:830 eshelf_nbsd.c:830 eshelf_nto.c:830
-#: eshelf_uclinux.c:830 eshelf_vxworks.c:859 eshlelf.c:830 eshlelf_fd.c:830
-#: eshlelf_linux.c:830 eshlelf_nbsd.c:830 eshlelf_nto.c:830
-#: eshlelf_vxworks.c:859 ev850.c:876 ev850_rh850.c:876 exgateelf.c:830
+#: emn10300.c:830 ends32belf.c:937 ends32belf16m.c:937 ends32belf_linux.c:937
+#: ends32elf.c:937 ends32elf16m.c:937 ends32elf_linux.c:937 enios2elf.c:1123
+#: enios2linux.c:1123 eppclynx.c:1046 epruelf.c:850 escore3_elf.c:850
+#: escore7_elf.c:850 eshelf.c:830 eshelf_fd.c:830 eshelf_linux.c:830
+#: eshelf_nbsd.c:830 eshelf_nto.c:830 eshelf_uclinux.c:830
+#: eshelf_vxworks.c:859 eshlelf.c:830 eshlelf_fd.c:830 eshlelf_linux.c:830
+#: eshlelf_nbsd.c:830 eshlelf_nto.c:830 eshlelf_vxworks.c:859 ev850.c:876
+#: ev850_rh850.c:876
 msgid "%P: warning: cannot create .note.gnu.build-id section, --build-id ignored\n"
 msgstr "%P : avertissement : impossible de créer la section .note.gnu.build-id, --build-id ignoré\n"
 
@@ -3721,40 +3750,41 @@ msgstr "%P : avertissement : impossible de créer la section .note.gnu.build-i
 #: eavr51.c:1063 eavr6.c:1063 eavrtiny.c:1063 eavrxmega1.c:1063
 #: eavrxmega2.c:1063 eavrxmega3.c:1063 eavrxmega4.c:1063 eavrxmega5.c:1063
 #: eavrxmega6.c:1063 eavrxmega7.c:1063 ecriself.c:860 ecrislinux.c:860
-#: ed10velf.c:860 eelf32_sparc.c:860 eelf32_sparc_sol2.c:991
-#: eelf32_sparc_vxworks.c:889 eelf32_spu.c:1394 eelf32_tic6x_be.c:998
-#: eelf32_tic6x_elf_be.c:998 eelf32_tic6x_elf_le.c:998 eelf32_tic6x_le.c:998
-#: eelf32_tic6x_linux_be.c:998 eelf32_tic6x_linux_le.c:998
-#: eelf32_x86_64.c:1152 eelf32_x86_64_nacl.c:860 eelf32am33lin.c:860
-#: eelf32b4300.c:1086 eelf32bfin.c:869 eelf32bfinfd.c:869 eelf32bmip.c:1086
-#: eelf32bmipn32.c:1104 eelf32bsmip.c:1104 eelf32btsmip.c:1086
-#: eelf32btsmip_fbsd.c:1086 eelf32btsmipn32.c:1086 eelf32btsmipn32_fbsd.c:1086
-#: eelf32cr16.c:1011 eelf32cr16c.c:860 eelf32crx.c:899 eelf32ebmip.c:1086
-#: eelf32ebmipvxworks.c:1115 eelf32elmip.c:1086 eelf32elmipvxworks.c:1115
-#: eelf32epiphany.c:860 eelf32epiphany_4x4.c:862 eelf32frvfd.c:860
-#: eelf32ip2k.c:860 eelf32l4300.c:1086 eelf32lm32.c:860 eelf32lm32fd.c:860
-#: eelf32lmip.c:1086 eelf32lppc.c:1063 eelf32lppclinux.c:1063
-#: eelf32lppcnto.c:1063 eelf32lppcsim.c:1063 eelf32lr5900.c:1086
-#: eelf32lr5900n32.c:1086 eelf32lriscv.c:925 eelf32lriscv_ilp32.c:925
-#: eelf32lriscv_ilp32f.c:925 eelf32lsmip.c:1086 eelf32ltsmip.c:1086
-#: eelf32ltsmip_fbsd.c:1086 eelf32ltsmipn32.c:1086 eelf32ltsmipn32_fbsd.c:1086
-#: eelf32m32c.c:871 eelf32mb_linux.c:860 eelf32mbel_linux.c:860
-#: eelf32mcore.c:860 eelf32mep.c:860 eelf32metag.c:1135 eelf32microblaze.c:860
-#: eelf32microblazeel.c:860 eelf32mipswindiss.c:1086 eelf32or1k.c:860
-#: eelf32or1k_linux.c:860 eelf32ppc.c:1063 eelf32ppc_fbsd.c:1063
-#: eelf32ppclinux.c:1063 eelf32ppcnto.c:1063 eelf32ppcsim.c:1063
-#: eelf32ppcvxworks.c:1037 eelf32ppcwindiss.c:1063 eelf32rl78.c:860
+#: ecskyelf.c:1117 ecskyelf_linux.c:1117 ed10velf.c:860 eelf32_sparc.c:860
+#: eelf32_sparc_sol2.c:991 eelf32_sparc_vxworks.c:889 eelf32_spu.c:1530
+#: eelf32_tic6x_be.c:998 eelf32_tic6x_elf_be.c:998 eelf32_tic6x_elf_le.c:998
+#: eelf32_tic6x_le.c:998 eelf32_tic6x_linux_be.c:998
+#: eelf32_tic6x_linux_le.c:998 eelf32_x86_64.c:1152 eelf32_x86_64_nacl.c:860
+#: eelf32am33lin.c:860 eelf32b4300.c:1087 eelf32bfin.c:869 eelf32bfinfd.c:869
+#: eelf32bmip.c:1087 eelf32bmipn32.c:1105 eelf32bsmip.c:1105
+#: eelf32btsmip.c:1087 eelf32btsmip_fbsd.c:1087 eelf32btsmipn32.c:1087
+#: eelf32btsmipn32_fbsd.c:1087 eelf32cr16.c:1011 eelf32cr16c.c:860
+#: eelf32crx.c:899 eelf32ebmip.c:1087 eelf32ebmipvxworks.c:1116
+#: eelf32elmip.c:1087 eelf32elmipvxworks.c:1116 eelf32epiphany.c:860
+#: eelf32epiphany_4x4.c:862 eelf32frvfd.c:860 eelf32ip2k.c:860
+#: eelf32l4300.c:1087 eelf32lm32.c:860 eelf32lm32fd.c:860 eelf32lmip.c:1087
+#: eelf32lppc.c:1076 eelf32lppclinux.c:1076 eelf32lppcnto.c:1076
+#: eelf32lppcsim.c:1076 eelf32lr5900.c:1087 eelf32lr5900n32.c:1087
+#: eelf32lriscv.c:925 eelf32lriscv_ilp32.c:925 eelf32lriscv_ilp32f.c:925
+#: eelf32lsmip.c:1087 eelf32ltsmip.c:1087 eelf32ltsmip_fbsd.c:1087
+#: eelf32ltsmipn32.c:1087 eelf32ltsmipn32_fbsd.c:1087 eelf32m32c.c:871
+#: eelf32mb_linux.c:860 eelf32mbel_linux.c:860 eelf32mcore.c:860
+#: eelf32mep.c:860 eelf32metag.c:1135 eelf32microblaze.c:860
+#: eelf32microblazeel.c:860 eelf32mipswindiss.c:1087 eelf32or1k.c:860
+#: eelf32or1k_linux.c:860 eelf32ppc.c:1076 eelf32ppc_fbsd.c:1076
+#: eelf32ppclinux.c:1076 eelf32ppcnto.c:1076 eelf32ppcsim.c:1076
+#: eelf32ppcvxworks.c:1050 eelf32ppcwindiss.c:1076 eelf32rl78.c:860
 #: eelf32rx.c:876 eelf32tilegx.c:860 eelf32tilegx_be.c:860 eelf32tilepro.c:860
 #: eelf32vax.c:860 eelf32visium.c:860 eelf32xc16x.c:860 eelf32xc16xl.c:860
 #: eelf32xc16xs.c:860 eelf32xstormy16.c:871 eelf32xtensa.c:2747
 #: eelf64_aix.c:860 eelf64_ia64.c:884 eelf64_ia64_fbsd.c:884 eelf64_s390.c:875
 #: eelf64_sparc.c:860 eelf64_sparc_fbsd.c:860 eelf64_sparc_sol2.c:991
 #: eelf64alpha.c:943 eelf64alpha_fbsd.c:943 eelf64alpha_nbsd.c:943
-#: eelf64bmip.c:1104 eelf64btsmip.c:1086 eelf64btsmip_fbsd.c:1086
-#: eelf64hppa.c:860 eelf64lppc.c:1510 eelf64lriscv.c:925
-#: eelf64lriscv_lp64.c:925 eelf64lriscv_lp64f.c:925 eelf64ltsmip.c:1086
-#: eelf64ltsmip_fbsd.c:1086 eelf64mmix.c:971 eelf64ppc.c:1510
-#: eelf64ppc_fbsd.c:1510 eelf64rdos.c:860 eelf64tilegx.c:860
+#: eelf64bmip.c:1105 eelf64btsmip.c:1087 eelf64btsmip_fbsd.c:1087
+#: eelf64hppa.c:860 eelf64lppc.c:1522 eelf64lriscv.c:925
+#: eelf64lriscv_lp64.c:925 eelf64lriscv_lp64f.c:925 eelf64ltsmip.c:1087
+#: eelf64ltsmip_fbsd.c:1087 eelf64mmix.c:971 eelf64ppc.c:1522
+#: eelf64ppc_fbsd.c:1522 eelf64rdos.c:860 eelf64tilegx.c:860
 #: eelf64tilegx_be.c:860 eelf_i386.c:1152 eelf_i386_be.c:860
 #: eelf_i386_chaos.c:860 eelf_i386_fbsd.c:860 eelf_i386_ldso.c:860
 #: eelf_i386_nacl.c:860 eelf_i386_sol2.c:991 eelf_i386_vxworks.c:889
@@ -3770,14 +3800,14 @@ msgstr "%P : avertissement : impossible de créer la section .note.gnu.build-i
 #: em32relf_linux.c:860 em32rlelf.c:860 em32rlelf_linux.c:860
 #: em68hc11elf.c:1160 em68hc11elfb.c:1160 em68hc12elf.c:1160
 #: em68hc12elfb.c:1160 em68kelf.c:1010 em68kelfnbsd.c:1010 em9s12zelf.c:860
-#: emn10300.c:860 ends32belf.c:1037 ends32belf16m.c:1037
-#: ends32belf_linux.c:1037 ends32elf.c:1037 ends32elf16m.c:1037
-#: ends32elf_linux.c:1037 enios2elf.c:1153 enios2linux.c:1153 eppclynx.c:1063
-#: epruelf.c:880 escore3_elf.c:880 escore7_elf.c:880 eshelf.c:860
-#: eshelf_fd.c:860 eshelf_linux.c:860 eshelf_nbsd.c:860 eshelf_nto.c:860
-#: eshelf_uclinux.c:860 eshelf_vxworks.c:889 eshlelf.c:860 eshlelf_fd.c:860
-#: eshlelf_linux.c:860 eshlelf_nbsd.c:860 eshlelf_nto.c:860
-#: eshlelf_vxworks.c:889 ev850.c:906 ev850_rh850.c:906 exgateelf.c:860
+#: emn10300.c:860 ends32belf.c:967 ends32belf16m.c:967 ends32belf_linux.c:967
+#: ends32elf.c:967 ends32elf16m.c:967 ends32elf_linux.c:967 enios2elf.c:1153
+#: enios2linux.c:1153 eppclynx.c:1076 epruelf.c:880 escore3_elf.c:880
+#: escore7_elf.c:880 eshelf.c:860 eshelf_fd.c:860 eshelf_linux.c:860
+#: eshelf_nbsd.c:860 eshelf_nto.c:860 eshelf_uclinux.c:860
+#: eshelf_vxworks.c:889 eshlelf.c:860 eshlelf_fd.c:860 eshlelf_linux.c:860
+#: eshlelf_nbsd.c:860 eshlelf_nto.c:860 eshlelf_vxworks.c:889 ev850.c:906
+#: ev850_rh850.c:906
 msgid "%F%P: %s: can't open for writing: %E\n"
 msgstr "%F%P : %s : impossible d'ouvrir en écriture : %E\n"
 
@@ -3798,41 +3828,41 @@ msgstr "%F%P : %s : impossible d'ouvrir en écriture : %E\n"
 #: eavr51.c:1139 eavr6.c:1139 eavrtiny.c:1139 eavrxmega1.c:1139
 #: eavrxmega2.c:1139 eavrxmega3.c:1139 eavrxmega4.c:1139 eavrxmega5.c:1139
 #: eavrxmega6.c:1139 eavrxmega7.c:1139 ecriself.c:936 ecrislinux.c:936
-#: ed10velf.c:936 eelf32_sparc.c:936 eelf32_sparc_sol2.c:1067
-#: eelf32_sparc_vxworks.c:965 eelf32_spu.c:1470 eelf32_tic6x_be.c:1074
-#: eelf32_tic6x_elf_be.c:1074 eelf32_tic6x_elf_le.c:1074
-#: eelf32_tic6x_le.c:1074 eelf32_tic6x_linux_be.c:1074
-#: eelf32_tic6x_linux_le.c:1074 eelf32_x86_64.c:1228 eelf32_x86_64_nacl.c:936
-#: eelf32am33lin.c:936 eelf32b4300.c:1162 eelf32bfin.c:945 eelf32bfinfd.c:945
-#: eelf32bmip.c:1162 eelf32bmipn32.c:1180 eelf32bsmip.c:1180
-#: eelf32btsmip.c:1162 eelf32btsmip_fbsd.c:1162 eelf32btsmipn32.c:1162
-#: eelf32btsmipn32_fbsd.c:1162 eelf32cr16.c:1087 eelf32cr16c.c:936
-#: eelf32crx.c:975 eelf32ebmip.c:1162 eelf32ebmipvxworks.c:1191
-#: eelf32elmip.c:1162 eelf32elmipvxworks.c:1191 eelf32epiphany.c:936
-#: eelf32epiphany_4x4.c:938 eelf32frvfd.c:936 eelf32ip2k.c:936
-#: eelf32l4300.c:1162 eelf32lm32.c:936 eelf32lm32fd.c:936 eelf32lmip.c:1162
-#: eelf32lppc.c:1139 eelf32lppclinux.c:1139 eelf32lppcnto.c:1139
-#: eelf32lppcsim.c:1139 eelf32lr5900.c:1162 eelf32lr5900n32.c:1162
-#: eelf32lriscv.c:1001 eelf32lriscv_ilp32.c:1001 eelf32lriscv_ilp32f.c:1001
-#: eelf32lsmip.c:1162 eelf32ltsmip.c:1162 eelf32ltsmip_fbsd.c:1162
-#: eelf32ltsmipn32.c:1162 eelf32ltsmipn32_fbsd.c:1162 eelf32m32c.c:947
-#: eelf32mb_linux.c:936 eelf32mbel_linux.c:936 eelf32mcore.c:936
-#: eelf32mep.c:936 eelf32metag.c:1211 eelf32microblaze.c:936
-#: eelf32microblazeel.c:936 eelf32mipswindiss.c:1162 eelf32or1k.c:936
-#: eelf32or1k_linux.c:936 eelf32ppc.c:1139 eelf32ppc_fbsd.c:1139
-#: eelf32ppclinux.c:1139 eelf32ppcnto.c:1139 eelf32ppcsim.c:1139
-#: eelf32ppcvxworks.c:1113 eelf32ppcwindiss.c:1139 eelf32rl78.c:936
+#: ecskyelf.c:1193 ecskyelf_linux.c:1193 ed10velf.c:936 eelf32_sparc.c:936
+#: eelf32_sparc_sol2.c:1067 eelf32_sparc_vxworks.c:965 eelf32_spu.c:1606
+#: eelf32_tic6x_be.c:1074 eelf32_tic6x_elf_be.c:1074
+#: eelf32_tic6x_elf_le.c:1074 eelf32_tic6x_le.c:1074
+#: eelf32_tic6x_linux_be.c:1074 eelf32_tic6x_linux_le.c:1074
+#: eelf32_x86_64.c:1228 eelf32_x86_64_nacl.c:936 eelf32am33lin.c:936
+#: eelf32b4300.c:1163 eelf32bfin.c:945 eelf32bfinfd.c:945 eelf32bmip.c:1163
+#: eelf32bmipn32.c:1181 eelf32bsmip.c:1181 eelf32btsmip.c:1163
+#: eelf32btsmip_fbsd.c:1163 eelf32btsmipn32.c:1163 eelf32btsmipn32_fbsd.c:1163
+#: eelf32cr16.c:1087 eelf32cr16c.c:936 eelf32crx.c:975 eelf32ebmip.c:1163
+#: eelf32ebmipvxworks.c:1192 eelf32elmip.c:1163 eelf32elmipvxworks.c:1192
+#: eelf32epiphany.c:936 eelf32epiphany_4x4.c:938 eelf32frvfd.c:936
+#: eelf32ip2k.c:936 eelf32l4300.c:1163 eelf32lm32.c:936 eelf32lm32fd.c:936
+#: eelf32lmip.c:1163 eelf32lppc.c:1152 eelf32lppclinux.c:1152
+#: eelf32lppcnto.c:1152 eelf32lppcsim.c:1152 eelf32lr5900.c:1163
+#: eelf32lr5900n32.c:1163 eelf32lriscv.c:1001 eelf32lriscv_ilp32.c:1001
+#: eelf32lriscv_ilp32f.c:1001 eelf32lsmip.c:1163 eelf32ltsmip.c:1163
+#: eelf32ltsmip_fbsd.c:1163 eelf32ltsmipn32.c:1163 eelf32ltsmipn32_fbsd.c:1163
+#: eelf32m32c.c:947 eelf32mb_linux.c:936 eelf32mbel_linux.c:936
+#: eelf32mcore.c:936 eelf32mep.c:936 eelf32metag.c:1211 eelf32microblaze.c:936
+#: eelf32microblazeel.c:936 eelf32mipswindiss.c:1163 eelf32or1k.c:936
+#: eelf32or1k_linux.c:936 eelf32ppc.c:1152 eelf32ppc_fbsd.c:1152
+#: eelf32ppclinux.c:1152 eelf32ppcnto.c:1152 eelf32ppcsim.c:1152
+#: eelf32ppcvxworks.c:1126 eelf32ppcwindiss.c:1152 eelf32rl78.c:936
 #: eelf32rx.c:952 eelf32tilegx.c:936 eelf32tilegx_be.c:936 eelf32tilepro.c:936
 #: eelf32vax.c:936 eelf32visium.c:936 eelf32xc16x.c:936 eelf32xc16xl.c:936
 #: eelf32xc16xs.c:936 eelf32xstormy16.c:947 eelf32xtensa.c:2823
 #: eelf64_aix.c:936 eelf64_ia64.c:960 eelf64_ia64_fbsd.c:960 eelf64_s390.c:951
 #: eelf64_sparc.c:936 eelf64_sparc_fbsd.c:936 eelf64_sparc_sol2.c:1067
 #: eelf64alpha.c:1019 eelf64alpha_fbsd.c:1019 eelf64alpha_nbsd.c:1019
-#: eelf64bmip.c:1180 eelf64btsmip.c:1162 eelf64btsmip_fbsd.c:1162
-#: eelf64hppa.c:936 eelf64lppc.c:1586 eelf64lriscv.c:1001
-#: eelf64lriscv_lp64.c:1001 eelf64lriscv_lp64f.c:1001 eelf64ltsmip.c:1162
-#: eelf64ltsmip_fbsd.c:1162 eelf64mmix.c:1047 eelf64ppc.c:1586
-#: eelf64ppc_fbsd.c:1586 eelf64rdos.c:936 eelf64tilegx.c:936
+#: eelf64bmip.c:1181 eelf64btsmip.c:1163 eelf64btsmip_fbsd.c:1163
+#: eelf64hppa.c:936 eelf64lppc.c:1598 eelf64lriscv.c:1001
+#: eelf64lriscv_lp64.c:1001 eelf64lriscv_lp64f.c:1001 eelf64ltsmip.c:1163
+#: eelf64ltsmip_fbsd.c:1163 eelf64mmix.c:1047 eelf64ppc.c:1598
+#: eelf64ppc_fbsd.c:1598 eelf64rdos.c:936 eelf64tilegx.c:936
 #: eelf64tilegx_be.c:936 eelf_i386.c:1228 eelf_i386_be.c:936
 #: eelf_i386_chaos.c:936 eelf_i386_fbsd.c:936 eelf_i386_ldso.c:936
 #: eelf_i386_nacl.c:936 eelf_i386_sol2.c:1067 eelf_i386_vxworks.c:965
@@ -3848,14 +3878,14 @@ msgstr "%F%P : %s : impossible d'ouvrir en écriture : %E\n"
 #: em32relf_linux.c:936 em32rlelf.c:936 em32rlelf_linux.c:936
 #: em68hc11elf.c:1236 em68hc11elfb.c:1236 em68hc12elf.c:1236
 #: em68hc12elfb.c:1236 em68kelf.c:1086 em68kelfnbsd.c:1086 em9s12zelf.c:936
-#: emn10300.c:936 ends32belf.c:1113 ends32belf16m.c:1113
-#: ends32belf_linux.c:1113 ends32elf.c:1113 ends32elf16m.c:1113
-#: ends32elf_linux.c:1113 enios2elf.c:1229 enios2linux.c:1229 eppclynx.c:1139
+#: emn10300.c:936 ends32belf.c:1043 ends32belf16m.c:1043
+#: ends32belf_linux.c:1043 ends32elf.c:1043 ends32elf16m.c:1043
+#: ends32elf_linux.c:1043 enios2elf.c:1229 enios2linux.c:1229 eppclynx.c:1152
 #: epruelf.c:956 escore3_elf.c:956 escore7_elf.c:956 eshelf.c:936
 #: eshelf_fd.c:936 eshelf_linux.c:936 eshelf_nbsd.c:936 eshelf_nto.c:936
 #: eshelf_uclinux.c:936 eshelf_vxworks.c:965 eshlelf.c:936 eshlelf_fd.c:936
 #: eshlelf_linux.c:936 eshlelf_nbsd.c:936 eshlelf_nto.c:936
-#: eshlelf_vxworks.c:965 ev850.c:982 ev850_rh850.c:982 exgateelf.c:936
+#: eshlelf_vxworks.c:965 ev850.c:982 ev850_rh850.c:982
 msgid "%F%P: compact frame descriptions incompatible with DWARF2 .eh_frame from %pB\n"
 msgstr "%F%P : descriptions des cadres compacts incompatible avec DWARF2 .eh_frame depuis %pB\n"
 
@@ -3876,41 +3906,41 @@ msgstr "%F%P : descriptions des cadres compacts incompatible avec DWARF2 .eh_fr
 #: eavr51.c:1174 eavr6.c:1174 eavrtiny.c:1174 eavrxmega1.c:1174
 #: eavrxmega2.c:1174 eavrxmega3.c:1174 eavrxmega4.c:1174 eavrxmega5.c:1174
 #: eavrxmega6.c:1174 eavrxmega7.c:1174 ecriself.c:971 ecrislinux.c:971
-#: ed10velf.c:971 eelf32_sparc.c:971 eelf32_sparc_sol2.c:1102
-#: eelf32_sparc_vxworks.c:1000 eelf32_spu.c:1505 eelf32_tic6x_be.c:1109
-#: eelf32_tic6x_elf_be.c:1109 eelf32_tic6x_elf_le.c:1109
-#: eelf32_tic6x_le.c:1109 eelf32_tic6x_linux_be.c:1109
-#: eelf32_tic6x_linux_le.c:1109 eelf32_x86_64.c:1263 eelf32_x86_64_nacl.c:971
-#: eelf32am33lin.c:971 eelf32b4300.c:1197 eelf32bfin.c:980 eelf32bfinfd.c:980
-#: eelf32bmip.c:1197 eelf32bmipn32.c:1215 eelf32bsmip.c:1215
-#: eelf32btsmip.c:1197 eelf32btsmip_fbsd.c:1197 eelf32btsmipn32.c:1197
-#: eelf32btsmipn32_fbsd.c:1197 eelf32cr16.c:1122 eelf32cr16c.c:971
-#: eelf32crx.c:1010 eelf32ebmip.c:1197 eelf32ebmipvxworks.c:1226
-#: eelf32elmip.c:1197 eelf32elmipvxworks.c:1226 eelf32epiphany.c:971
-#: eelf32epiphany_4x4.c:973 eelf32frvfd.c:971 eelf32ip2k.c:971
-#: eelf32l4300.c:1197 eelf32lm32.c:971 eelf32lm32fd.c:971 eelf32lmip.c:1197
-#: eelf32lppc.c:1174 eelf32lppclinux.c:1174 eelf32lppcnto.c:1174
-#: eelf32lppcsim.c:1174 eelf32lr5900.c:1197 eelf32lr5900n32.c:1197
-#: eelf32lriscv.c:1036 eelf32lriscv_ilp32.c:1036 eelf32lriscv_ilp32f.c:1036
-#: eelf32lsmip.c:1197 eelf32ltsmip.c:1197 eelf32ltsmip_fbsd.c:1197
-#: eelf32ltsmipn32.c:1197 eelf32ltsmipn32_fbsd.c:1197 eelf32m32c.c:982
-#: eelf32mb_linux.c:971 eelf32mbel_linux.c:971 eelf32mcore.c:971
-#: eelf32mep.c:971 eelf32metag.c:1246 eelf32microblaze.c:971
-#: eelf32microblazeel.c:971 eelf32mipswindiss.c:1197 eelf32or1k.c:971
-#: eelf32or1k_linux.c:971 eelf32ppc.c:1174 eelf32ppc_fbsd.c:1174
-#: eelf32ppclinux.c:1174 eelf32ppcnto.c:1174 eelf32ppcsim.c:1174
-#: eelf32ppcvxworks.c:1148 eelf32ppcwindiss.c:1174 eelf32rl78.c:971
+#: ecskyelf.c:1228 ecskyelf_linux.c:1228 ed10velf.c:971 eelf32_sparc.c:971
+#: eelf32_sparc_sol2.c:1102 eelf32_sparc_vxworks.c:1000 eelf32_spu.c:1641
+#: eelf32_tic6x_be.c:1109 eelf32_tic6x_elf_be.c:1109
+#: eelf32_tic6x_elf_le.c:1109 eelf32_tic6x_le.c:1109
+#: eelf32_tic6x_linux_be.c:1109 eelf32_tic6x_linux_le.c:1109
+#: eelf32_x86_64.c:1263 eelf32_x86_64_nacl.c:971 eelf32am33lin.c:971
+#: eelf32b4300.c:1198 eelf32bfin.c:980 eelf32bfinfd.c:980 eelf32bmip.c:1198
+#: eelf32bmipn32.c:1216 eelf32bsmip.c:1216 eelf32btsmip.c:1198
+#: eelf32btsmip_fbsd.c:1198 eelf32btsmipn32.c:1198 eelf32btsmipn32_fbsd.c:1198
+#: eelf32cr16.c:1122 eelf32cr16c.c:971 eelf32crx.c:1010 eelf32ebmip.c:1198
+#: eelf32ebmipvxworks.c:1227 eelf32elmip.c:1198 eelf32elmipvxworks.c:1227
+#: eelf32epiphany.c:971 eelf32epiphany_4x4.c:973 eelf32frvfd.c:971
+#: eelf32ip2k.c:971 eelf32l4300.c:1198 eelf32lm32.c:971 eelf32lm32fd.c:971
+#: eelf32lmip.c:1198 eelf32lppc.c:1187 eelf32lppclinux.c:1187
+#: eelf32lppcnto.c:1187 eelf32lppcsim.c:1187 eelf32lr5900.c:1198
+#: eelf32lr5900n32.c:1198 eelf32lriscv.c:1036 eelf32lriscv_ilp32.c:1036
+#: eelf32lriscv_ilp32f.c:1036 eelf32lsmip.c:1198 eelf32ltsmip.c:1198
+#: eelf32ltsmip_fbsd.c:1198 eelf32ltsmipn32.c:1198 eelf32ltsmipn32_fbsd.c:1198
+#: eelf32m32c.c:982 eelf32mb_linux.c:971 eelf32mbel_linux.c:971
+#: eelf32mcore.c:971 eelf32mep.c:971 eelf32metag.c:1246 eelf32microblaze.c:971
+#: eelf32microblazeel.c:971 eelf32mipswindiss.c:1198 eelf32or1k.c:971
+#: eelf32or1k_linux.c:971 eelf32ppc.c:1187 eelf32ppc_fbsd.c:1187
+#: eelf32ppclinux.c:1187 eelf32ppcnto.c:1187 eelf32ppcsim.c:1187
+#: eelf32ppcvxworks.c:1161 eelf32ppcwindiss.c:1187 eelf32rl78.c:971
 #: eelf32rx.c:987 eelf32tilegx.c:971 eelf32tilegx_be.c:971 eelf32tilepro.c:971
 #: eelf32vax.c:971 eelf32visium.c:971 eelf32xc16x.c:971 eelf32xc16xl.c:971
 #: eelf32xc16xs.c:971 eelf32xstormy16.c:982 eelf32xtensa.c:2858
 #: eelf64_aix.c:971 eelf64_ia64.c:995 eelf64_ia64_fbsd.c:995 eelf64_s390.c:986
 #: eelf64_sparc.c:971 eelf64_sparc_fbsd.c:971 eelf64_sparc_sol2.c:1102
 #: eelf64alpha.c:1054 eelf64alpha_fbsd.c:1054 eelf64alpha_nbsd.c:1054
-#: eelf64bmip.c:1215 eelf64btsmip.c:1197 eelf64btsmip_fbsd.c:1197
-#: eelf64hppa.c:971 eelf64lppc.c:1621 eelf64lriscv.c:1036
-#: eelf64lriscv_lp64.c:1036 eelf64lriscv_lp64f.c:1036 eelf64ltsmip.c:1197
-#: eelf64ltsmip_fbsd.c:1197 eelf64mmix.c:1082 eelf64ppc.c:1621
-#: eelf64ppc_fbsd.c:1621 eelf64rdos.c:971 eelf64tilegx.c:971
+#: eelf64bmip.c:1216 eelf64btsmip.c:1198 eelf64btsmip_fbsd.c:1198
+#: eelf64hppa.c:971 eelf64lppc.c:1633 eelf64lriscv.c:1036
+#: eelf64lriscv_lp64.c:1036 eelf64lriscv_lp64f.c:1036 eelf64ltsmip.c:1198
+#: eelf64ltsmip_fbsd.c:1198 eelf64mmix.c:1082 eelf64ppc.c:1633
+#: eelf64ppc_fbsd.c:1633 eelf64rdos.c:971 eelf64tilegx.c:971
 #: eelf64tilegx_be.c:971 eelf_i386.c:1263 eelf_i386_be.c:971
 #: eelf_i386_chaos.c:971 eelf_i386_fbsd.c:971 eelf_i386_ldso.c:971
 #: eelf_i386_nacl.c:971 eelf_i386_sol2.c:1102 eelf_i386_vxworks.c:1000
@@ -3926,14 +3956,14 @@ msgstr "%F%P : descriptions des cadres compacts incompatible avec DWARF2 .eh_fr
 #: em32relf_linux.c:971 em32rlelf.c:971 em32rlelf_linux.c:971
 #: em68hc11elf.c:1271 em68hc11elfb.c:1271 em68hc12elf.c:1271
 #: em68hc12elfb.c:1271 em68kelf.c:1121 em68kelfnbsd.c:1121 em9s12zelf.c:971
-#: emn10300.c:971 ends32belf.c:1148 ends32belf16m.c:1148
-#: ends32belf_linux.c:1148 ends32elf.c:1148 ends32elf16m.c:1148
-#: ends32elf_linux.c:1148 enios2elf.c:1264 enios2linux.c:1264 eppclynx.c:1174
+#: emn10300.c:971 ends32belf.c:1078 ends32belf16m.c:1078
+#: ends32belf_linux.c:1078 ends32elf.c:1078 ends32elf16m.c:1078
+#: ends32elf_linux.c:1078 enios2elf.c:1264 enios2linux.c:1264 eppclynx.c:1187
 #: epruelf.c:991 escore3_elf.c:991 escore7_elf.c:991 eshelf.c:971
 #: eshelf_fd.c:971 eshelf_linux.c:971 eshelf_nbsd.c:971 eshelf_nto.c:971
 #: eshelf_uclinux.c:971 eshelf_vxworks.c:1000 eshlelf.c:971 eshlelf_fd.c:971
 #: eshlelf_linux.c:971 eshlelf_nbsd.c:971 eshlelf_nto.c:971
-#: eshlelf_vxworks.c:1000 ev850.c:1017 ev850_rh850.c:1017 exgateelf.c:971
+#: eshlelf_vxworks.c:1000 ev850.c:1017 ev850_rh850.c:1017
 msgid "%P: warning: cannot create .eh_frame_hdr section, --eh-frame-hdr ignored\n"
 msgstr "%P : avertissement : impossible de créer la section .eh_frame_hdr, --eh-frame-hdr ignoré\n"
 
@@ -3954,30 +3984,30 @@ msgstr "%P : avertissement : impossible de créer la section .eh_frame_hdr, --
 #: eavr51.c:1229 eavr6.c:1229 eavrtiny.c:1229 eavrxmega1.c:1229
 #: eavrxmega2.c:1229 eavrxmega3.c:1229 eavrxmega4.c:1229 eavrxmega5.c:1229
 #: eavrxmega6.c:1229 eavrxmega7.c:1229 ecriself.c:1026 ecrislinux.c:1026
-#: ed10velf.c:1026 eelf32_sparc.c:1026 eelf32_sparc_sol2.c:1157
-#: eelf32_sparc_vxworks.c:1055 eelf32_spu.c:1560 eelf32_tic6x_be.c:1164
-#: eelf32_tic6x_elf_be.c:1164 eelf32_tic6x_elf_le.c:1164
-#: eelf32_tic6x_le.c:1164 eelf32_tic6x_linux_be.c:1164
-#: eelf32_tic6x_linux_le.c:1164 eelf32_x86_64.c:1318 eelf32_x86_64_nacl.c:1026
-#: eelf32am33lin.c:1026 eelf32b4300.c:1252 eelf32bfin.c:1035
-#: eelf32bfinfd.c:1035 eelf32bmip.c:1252 eelf32bmipn32.c:1270
-#: eelf32bsmip.c:1270 eelf32btsmip.c:1252 eelf32btsmip_fbsd.c:1252
-#: eelf32btsmipn32.c:1252 eelf32btsmipn32_fbsd.c:1252 eelf32cr16.c:1177
-#: eelf32cr16c.c:1026 eelf32crx.c:1065 eelf32ebmip.c:1252
-#: eelf32ebmipvxworks.c:1281 eelf32elmip.c:1252 eelf32elmipvxworks.c:1281
+#: ecskyelf.c:1283 ecskyelf_linux.c:1283 ed10velf.c:1026 eelf32_sparc.c:1026
+#: eelf32_sparc_sol2.c:1157 eelf32_sparc_vxworks.c:1055 eelf32_spu.c:1696
+#: eelf32_tic6x_be.c:1164 eelf32_tic6x_elf_be.c:1164
+#: eelf32_tic6x_elf_le.c:1164 eelf32_tic6x_le.c:1164
+#: eelf32_tic6x_linux_be.c:1164 eelf32_tic6x_linux_le.c:1164
+#: eelf32_x86_64.c:1318 eelf32_x86_64_nacl.c:1026 eelf32am33lin.c:1026
+#: eelf32b4300.c:1253 eelf32bfin.c:1035 eelf32bfinfd.c:1035 eelf32bmip.c:1253
+#: eelf32bmipn32.c:1271 eelf32bsmip.c:1271 eelf32btsmip.c:1253
+#: eelf32btsmip_fbsd.c:1253 eelf32btsmipn32.c:1253 eelf32btsmipn32_fbsd.c:1253
+#: eelf32cr16.c:1177 eelf32cr16c.c:1026 eelf32crx.c:1065 eelf32ebmip.c:1253
+#: eelf32ebmipvxworks.c:1282 eelf32elmip.c:1253 eelf32elmipvxworks.c:1282
 #: eelf32epiphany.c:1026 eelf32epiphany_4x4.c:1028 eelf32frvfd.c:1026
-#: eelf32ip2k.c:1026 eelf32l4300.c:1252 eelf32lm32.c:1026 eelf32lm32fd.c:1026
-#: eelf32lmip.c:1252 eelf32lppc.c:1229 eelf32lppclinux.c:1229
-#: eelf32lppcnto.c:1229 eelf32lppcsim.c:1229 eelf32lr5900.c:1252
-#: eelf32lr5900n32.c:1252 eelf32lriscv.c:1091 eelf32lriscv_ilp32.c:1091
-#: eelf32lriscv_ilp32f.c:1091 eelf32lsmip.c:1252 eelf32ltsmip.c:1252
-#: eelf32ltsmip_fbsd.c:1252 eelf32ltsmipn32.c:1252 eelf32ltsmipn32_fbsd.c:1252
+#: eelf32ip2k.c:1026 eelf32l4300.c:1253 eelf32lm32.c:1026 eelf32lm32fd.c:1026
+#: eelf32lmip.c:1253 eelf32lppc.c:1242 eelf32lppclinux.c:1242
+#: eelf32lppcnto.c:1242 eelf32lppcsim.c:1242 eelf32lr5900.c:1253
+#: eelf32lr5900n32.c:1253 eelf32lriscv.c:1091 eelf32lriscv_ilp32.c:1091
+#: eelf32lriscv_ilp32f.c:1091 eelf32lsmip.c:1253 eelf32ltsmip.c:1253
+#: eelf32ltsmip_fbsd.c:1253 eelf32ltsmipn32.c:1253 eelf32ltsmipn32_fbsd.c:1253
 #: eelf32m32c.c:1037 eelf32mb_linux.c:1026 eelf32mbel_linux.c:1026
 #: eelf32mcore.c:1026 eelf32mep.c:1026 eelf32metag.c:1301
-#: eelf32microblaze.c:1026 eelf32microblazeel.c:1026 eelf32mipswindiss.c:1252
-#: eelf32or1k.c:1026 eelf32or1k_linux.c:1026 eelf32ppc.c:1229
-#: eelf32ppc_fbsd.c:1229 eelf32ppclinux.c:1229 eelf32ppcnto.c:1229
-#: eelf32ppcsim.c:1229 eelf32ppcvxworks.c:1203 eelf32ppcwindiss.c:1229
+#: eelf32microblaze.c:1026 eelf32microblazeel.c:1026 eelf32mipswindiss.c:1253
+#: eelf32or1k.c:1026 eelf32or1k_linux.c:1026 eelf32ppc.c:1242
+#: eelf32ppc_fbsd.c:1242 eelf32ppclinux.c:1242 eelf32ppcnto.c:1242
+#: eelf32ppcsim.c:1242 eelf32ppcvxworks.c:1216 eelf32ppcwindiss.c:1242
 #: eelf32rl78.c:1026 eelf32rx.c:1042 eelf32tilegx.c:1026
 #: eelf32tilegx_be.c:1026 eelf32tilepro.c:1026 eelf32vax.c:1026
 #: eelf32visium.c:1026 eelf32xc16x.c:1026 eelf32xc16xl.c:1026
@@ -3985,11 +4015,11 @@ msgstr "%P : avertissement : impossible de créer la section .eh_frame_hdr, --
 #: eelf64_aix.c:1026 eelf64_ia64.c:1050 eelf64_ia64_fbsd.c:1050
 #: eelf64_s390.c:1041 eelf64_sparc.c:1026 eelf64_sparc_fbsd.c:1026
 #: eelf64_sparc_sol2.c:1157 eelf64alpha.c:1109 eelf64alpha_fbsd.c:1109
-#: eelf64alpha_nbsd.c:1109 eelf64bmip.c:1270 eelf64btsmip.c:1252
-#: eelf64btsmip_fbsd.c:1252 eelf64hppa.c:1026 eelf64lppc.c:1676
+#: eelf64alpha_nbsd.c:1109 eelf64bmip.c:1271 eelf64btsmip.c:1253
+#: eelf64btsmip_fbsd.c:1253 eelf64hppa.c:1026 eelf64lppc.c:1688
 #: eelf64lriscv.c:1091 eelf64lriscv_lp64.c:1091 eelf64lriscv_lp64f.c:1091
-#: eelf64ltsmip.c:1252 eelf64ltsmip_fbsd.c:1252 eelf64mmix.c:1137
-#: eelf64ppc.c:1676 eelf64ppc_fbsd.c:1676 eelf64rdos.c:1026
+#: eelf64ltsmip.c:1253 eelf64ltsmip_fbsd.c:1253 eelf64mmix.c:1137
+#: eelf64ppc.c:1688 eelf64ppc_fbsd.c:1688 eelf64rdos.c:1026
 #: eelf64tilegx.c:1026 eelf64tilegx_be.c:1026 eelf_i386.c:1318
 #: eelf_i386_be.c:1026 eelf_i386_chaos.c:1026 eelf_i386_fbsd.c:1026
 #: eelf_i386_ldso.c:1026 eelf_i386_nacl.c:1026 eelf_i386_sol2.c:1157
@@ -4006,15 +4036,14 @@ msgstr "%P : avertissement : impossible de créer la section .eh_frame_hdr, --
 #: em32relf_linux.c:1026 em32rlelf.c:1026 em32rlelf_linux.c:1026
 #: em68hc11elf.c:1326 em68hc11elfb.c:1326 em68hc12elf.c:1326
 #: em68hc12elfb.c:1326 em68kelf.c:1176 em68kelfnbsd.c:1176 em9s12zelf.c:1026
-#: emn10300.c:1026 ends32belf.c:1203 ends32belf16m.c:1203
-#: ends32belf_linux.c:1203 ends32elf.c:1203 ends32elf16m.c:1203
-#: ends32elf_linux.c:1203 enios2elf.c:1319 enios2linux.c:1319 eppclynx.c:1229
+#: emn10300.c:1026 ends32belf.c:1133 ends32belf16m.c:1133
+#: ends32belf_linux.c:1133 ends32elf.c:1133 ends32elf16m.c:1133
+#: ends32elf_linux.c:1133 enios2elf.c:1319 enios2linux.c:1319 eppclynx.c:1242
 #: epruelf.c:1046 escore3_elf.c:1046 escore7_elf.c:1046 eshelf.c:1026
 #: eshelf_fd.c:1026 eshelf_linux.c:1026 eshelf_nbsd.c:1026 eshelf_nto.c:1026
 #: eshelf_uclinux.c:1026 eshelf_vxworks.c:1055 eshlelf.c:1026
 #: eshlelf_fd.c:1026 eshlelf_linux.c:1026 eshlelf_nbsd.c:1026
 #: eshlelf_nto.c:1026 eshlelf_vxworks.c:1055 ev850.c:1072 ev850_rh850.c:1072
-#: exgateelf.c:1026
 #, c-format
 msgid "%s needed by %pB\n"
 msgstr "%s requis par %pB\n"
@@ -4036,30 +4065,30 @@ msgstr "%s requis par %pB\n"
 #: eavr51.c:1280 eavr6.c:1280 eavrtiny.c:1280 eavrxmega1.c:1280
 #: eavrxmega2.c:1280 eavrxmega3.c:1280 eavrxmega4.c:1280 eavrxmega5.c:1280
 #: eavrxmega6.c:1280 eavrxmega7.c:1280 ecriself.c:1077 ecrislinux.c:1077
-#: ed10velf.c:1077 eelf32_sparc.c:1077 eelf32_sparc_sol2.c:1208
-#: eelf32_sparc_vxworks.c:1106 eelf32_spu.c:1611 eelf32_tic6x_be.c:1215
-#: eelf32_tic6x_elf_be.c:1215 eelf32_tic6x_elf_le.c:1215
-#: eelf32_tic6x_le.c:1215 eelf32_tic6x_linux_be.c:1215
-#: eelf32_tic6x_linux_le.c:1215 eelf32_x86_64.c:1409 eelf32_x86_64_nacl.c:1077
-#: eelf32am33lin.c:1077 eelf32b4300.c:1303 eelf32bfin.c:1086
-#: eelf32bfinfd.c:1086 eelf32bmip.c:1303 eelf32bmipn32.c:1321
-#: eelf32bsmip.c:1321 eelf32btsmip.c:1303 eelf32btsmip_fbsd.c:1303
-#: eelf32btsmipn32.c:1303 eelf32btsmipn32_fbsd.c:1303 eelf32cr16.c:1228
-#: eelf32cr16c.c:1077 eelf32crx.c:1116 eelf32ebmip.c:1303
-#: eelf32ebmipvxworks.c:1332 eelf32elmip.c:1303 eelf32elmipvxworks.c:1332
+#: ecskyelf.c:1334 ecskyelf_linux.c:1334 ed10velf.c:1077 eelf32_sparc.c:1077
+#: eelf32_sparc_sol2.c:1208 eelf32_sparc_vxworks.c:1106 eelf32_spu.c:1747
+#: eelf32_tic6x_be.c:1215 eelf32_tic6x_elf_be.c:1215
+#: eelf32_tic6x_elf_le.c:1215 eelf32_tic6x_le.c:1215
+#: eelf32_tic6x_linux_be.c:1215 eelf32_tic6x_linux_le.c:1215
+#: eelf32_x86_64.c:1409 eelf32_x86_64_nacl.c:1077 eelf32am33lin.c:1077
+#: eelf32b4300.c:1304 eelf32bfin.c:1086 eelf32bfinfd.c:1086 eelf32bmip.c:1304
+#: eelf32bmipn32.c:1322 eelf32bsmip.c:1322 eelf32btsmip.c:1304
+#: eelf32btsmip_fbsd.c:1304 eelf32btsmipn32.c:1304 eelf32btsmipn32_fbsd.c:1304
+#: eelf32cr16.c:1228 eelf32cr16c.c:1077 eelf32crx.c:1116 eelf32ebmip.c:1304
+#: eelf32ebmipvxworks.c:1333 eelf32elmip.c:1304 eelf32elmipvxworks.c:1333
 #: eelf32epiphany.c:1077 eelf32epiphany_4x4.c:1079 eelf32frvfd.c:1077
-#: eelf32ip2k.c:1077 eelf32l4300.c:1303 eelf32lm32.c:1077 eelf32lm32fd.c:1077
-#: eelf32lmip.c:1303 eelf32lppc.c:1280 eelf32lppclinux.c:1280
-#: eelf32lppcnto.c:1280 eelf32lppcsim.c:1280 eelf32lr5900.c:1303
-#: eelf32lr5900n32.c:1303 eelf32lriscv.c:1142 eelf32lriscv_ilp32.c:1142
-#: eelf32lriscv_ilp32f.c:1142 eelf32lsmip.c:1303 eelf32ltsmip.c:1303
-#: eelf32ltsmip_fbsd.c:1303 eelf32ltsmipn32.c:1303 eelf32ltsmipn32_fbsd.c:1303
+#: eelf32ip2k.c:1077 eelf32l4300.c:1304 eelf32lm32.c:1077 eelf32lm32fd.c:1077
+#: eelf32lmip.c:1304 eelf32lppc.c:1293 eelf32lppclinux.c:1293
+#: eelf32lppcnto.c:1293 eelf32lppcsim.c:1293 eelf32lr5900.c:1304
+#: eelf32lr5900n32.c:1304 eelf32lriscv.c:1142 eelf32lriscv_ilp32.c:1142
+#: eelf32lriscv_ilp32f.c:1142 eelf32lsmip.c:1304 eelf32ltsmip.c:1304
+#: eelf32ltsmip_fbsd.c:1304 eelf32ltsmipn32.c:1304 eelf32ltsmipn32_fbsd.c:1304
 #: eelf32m32c.c:1088 eelf32mb_linux.c:1077 eelf32mbel_linux.c:1077
 #: eelf32mcore.c:1077 eelf32mep.c:1077 eelf32metag.c:1352
-#: eelf32microblaze.c:1077 eelf32microblazeel.c:1077 eelf32mipswindiss.c:1303
-#: eelf32or1k.c:1077 eelf32or1k_linux.c:1077 eelf32ppc.c:1280
-#: eelf32ppc_fbsd.c:1280 eelf32ppclinux.c:1280 eelf32ppcnto.c:1280
-#: eelf32ppcsim.c:1280 eelf32ppcvxworks.c:1254 eelf32ppcwindiss.c:1280
+#: eelf32microblaze.c:1077 eelf32microblazeel.c:1077 eelf32mipswindiss.c:1304
+#: eelf32or1k.c:1077 eelf32or1k_linux.c:1077 eelf32ppc.c:1293
+#: eelf32ppc_fbsd.c:1293 eelf32ppclinux.c:1293 eelf32ppcnto.c:1293
+#: eelf32ppcsim.c:1293 eelf32ppcvxworks.c:1267 eelf32ppcwindiss.c:1293
 #: eelf32rl78.c:1077 eelf32rx.c:1093 eelf32tilegx.c:1077
 #: eelf32tilegx_be.c:1077 eelf32tilepro.c:1077 eelf32vax.c:1077
 #: eelf32visium.c:1077 eelf32xc16x.c:1077 eelf32xc16xl.c:1077
@@ -4067,11 +4096,11 @@ msgstr "%s requis par %pB\n"
 #: eelf64_aix.c:1077 eelf64_ia64.c:1101 eelf64_ia64_fbsd.c:1101
 #: eelf64_s390.c:1092 eelf64_sparc.c:1077 eelf64_sparc_fbsd.c:1077
 #: eelf64_sparc_sol2.c:1208 eelf64alpha.c:1160 eelf64alpha_fbsd.c:1160
-#: eelf64alpha_nbsd.c:1160 eelf64bmip.c:1321 eelf64btsmip.c:1303
-#: eelf64btsmip_fbsd.c:1303 eelf64hppa.c:1077 eelf64lppc.c:1727
+#: eelf64alpha_nbsd.c:1160 eelf64bmip.c:1322 eelf64btsmip.c:1304
+#: eelf64btsmip_fbsd.c:1304 eelf64hppa.c:1077 eelf64lppc.c:1739
 #: eelf64lriscv.c:1142 eelf64lriscv_lp64.c:1142 eelf64lriscv_lp64f.c:1142
-#: eelf64ltsmip.c:1303 eelf64ltsmip_fbsd.c:1303 eelf64mmix.c:1188
-#: eelf64ppc.c:1727 eelf64ppc_fbsd.c:1727 eelf64rdos.c:1077
+#: eelf64ltsmip.c:1304 eelf64ltsmip_fbsd.c:1304 eelf64mmix.c:1188
+#: eelf64ppc.c:1739 eelf64ppc_fbsd.c:1739 eelf64rdos.c:1077
 #: eelf64tilegx.c:1077 eelf64tilegx_be.c:1077 eelf_i386.c:1409
 #: eelf_i386_be.c:1077 eelf_i386_chaos.c:1077 eelf_i386_fbsd.c:1077
 #: eelf_i386_ldso.c:1077 eelf_i386_nacl.c:1077 eelf_i386_sol2.c:1208
@@ -4088,15 +4117,14 @@ msgstr "%s requis par %pB\n"
 #: em32relf_linux.c:1077 em32rlelf.c:1077 em32rlelf_linux.c:1077
 #: em68hc11elf.c:1377 em68hc11elfb.c:1377 em68hc12elf.c:1377
 #: em68hc12elfb.c:1377 em68kelf.c:1227 em68kelfnbsd.c:1227 em9s12zelf.c:1077
-#: emn10300.c:1077 ends32belf.c:1254 ends32belf16m.c:1254
-#: ends32belf_linux.c:1254 ends32elf.c:1254 ends32elf16m.c:1254
-#: ends32elf_linux.c:1254 enios2elf.c:1370 enios2linux.c:1370 eppclynx.c:1280
+#: emn10300.c:1077 ends32belf.c:1184 ends32belf16m.c:1184
+#: ends32belf_linux.c:1184 ends32elf.c:1184 ends32elf16m.c:1184
+#: ends32elf_linux.c:1184 enios2elf.c:1370 enios2linux.c:1370 eppclynx.c:1293
 #: epruelf.c:1097 escore3_elf.c:1097 escore7_elf.c:1097 eshelf.c:1077
 #: eshelf_fd.c:1077 eshelf_linux.c:1077 eshelf_nbsd.c:1077 eshelf_nto.c:1077
 #: eshelf_uclinux.c:1077 eshelf_vxworks.c:1106 eshlelf.c:1077
 #: eshlelf_fd.c:1077 eshlelf_linux.c:1077 eshlelf_nbsd.c:1077
 #: eshlelf_nto.c:1077 eshlelf_vxworks.c:1106 ev850.c:1123 ev850_rh850.c:1123
-#: exgateelf.c:1077
 msgid "%P: warning: %s, needed by %pB, not found (try using -rpath or -rpath-link)\n"
 msgstr "%P : avertissement : %s, requis par %pB, non trouvé (essayez avec -rpath ou -rpath-link)\n"
 
@@ -4117,30 +4145,30 @@ msgstr "%P : avertissement : %s, requis par %pB, non trouvé (essayez avec -rp
 #: eavr51.c:1287 eavr6.c:1287 eavrtiny.c:1287 eavrxmega1.c:1287
 #: eavrxmega2.c:1287 eavrxmega3.c:1287 eavrxmega4.c:1287 eavrxmega5.c:1287
 #: eavrxmega6.c:1287 eavrxmega7.c:1287 ecriself.c:1084 ecrislinux.c:1084
-#: ed10velf.c:1084 eelf32_sparc.c:1084 eelf32_sparc_sol2.c:1215
-#: eelf32_sparc_vxworks.c:1113 eelf32_spu.c:1618 eelf32_tic6x_be.c:1222
-#: eelf32_tic6x_elf_be.c:1222 eelf32_tic6x_elf_le.c:1222
-#: eelf32_tic6x_le.c:1222 eelf32_tic6x_linux_be.c:1222
-#: eelf32_tic6x_linux_le.c:1222 eelf32_x86_64.c:1416 eelf32_x86_64_nacl.c:1084
-#: eelf32am33lin.c:1084 eelf32b4300.c:1310 eelf32bfin.c:1093
-#: eelf32bfinfd.c:1093 eelf32bmip.c:1310 eelf32bmipn32.c:1328
-#: eelf32bsmip.c:1328 eelf32btsmip.c:1310 eelf32btsmip_fbsd.c:1310
-#: eelf32btsmipn32.c:1310 eelf32btsmipn32_fbsd.c:1310 eelf32cr16.c:1235
-#: eelf32cr16c.c:1084 eelf32crx.c:1123 eelf32ebmip.c:1310
-#: eelf32ebmipvxworks.c:1339 eelf32elmip.c:1310 eelf32elmipvxworks.c:1339
+#: ecskyelf.c:1341 ecskyelf_linux.c:1341 ed10velf.c:1084 eelf32_sparc.c:1084
+#: eelf32_sparc_sol2.c:1215 eelf32_sparc_vxworks.c:1113 eelf32_spu.c:1754
+#: eelf32_tic6x_be.c:1222 eelf32_tic6x_elf_be.c:1222
+#: eelf32_tic6x_elf_le.c:1222 eelf32_tic6x_le.c:1222
+#: eelf32_tic6x_linux_be.c:1222 eelf32_tic6x_linux_le.c:1222
+#: eelf32_x86_64.c:1416 eelf32_x86_64_nacl.c:1084 eelf32am33lin.c:1084
+#: eelf32b4300.c:1311 eelf32bfin.c:1093 eelf32bfinfd.c:1093 eelf32bmip.c:1311
+#: eelf32bmipn32.c:1329 eelf32bsmip.c:1329 eelf32btsmip.c:1311
+#: eelf32btsmip_fbsd.c:1311 eelf32btsmipn32.c:1311 eelf32btsmipn32_fbsd.c:1311
+#: eelf32cr16.c:1235 eelf32cr16c.c:1084 eelf32crx.c:1123 eelf32ebmip.c:1311
+#: eelf32ebmipvxworks.c:1340 eelf32elmip.c:1311 eelf32elmipvxworks.c:1340
 #: eelf32epiphany.c:1084 eelf32epiphany_4x4.c:1086 eelf32frvfd.c:1084
-#: eelf32ip2k.c:1084 eelf32l4300.c:1310 eelf32lm32.c:1084 eelf32lm32fd.c:1084
-#: eelf32lmip.c:1310 eelf32lppc.c:1287 eelf32lppclinux.c:1287
-#: eelf32lppcnto.c:1287 eelf32lppcsim.c:1287 eelf32lr5900.c:1310
-#: eelf32lr5900n32.c:1310 eelf32lriscv.c:1149 eelf32lriscv_ilp32.c:1149
-#: eelf32lriscv_ilp32f.c:1149 eelf32lsmip.c:1310 eelf32ltsmip.c:1310
-#: eelf32ltsmip_fbsd.c:1310 eelf32ltsmipn32.c:1310 eelf32ltsmipn32_fbsd.c:1310
+#: eelf32ip2k.c:1084 eelf32l4300.c:1311 eelf32lm32.c:1084 eelf32lm32fd.c:1084
+#: eelf32lmip.c:1311 eelf32lppc.c:1300 eelf32lppclinux.c:1300
+#: eelf32lppcnto.c:1300 eelf32lppcsim.c:1300 eelf32lr5900.c:1311
+#: eelf32lr5900n32.c:1311 eelf32lriscv.c:1149 eelf32lriscv_ilp32.c:1149
+#: eelf32lriscv_ilp32f.c:1149 eelf32lsmip.c:1311 eelf32ltsmip.c:1311
+#: eelf32ltsmip_fbsd.c:1311 eelf32ltsmipn32.c:1311 eelf32ltsmipn32_fbsd.c:1311
 #: eelf32m32c.c:1095 eelf32mb_linux.c:1084 eelf32mbel_linux.c:1084
 #: eelf32mcore.c:1084 eelf32mep.c:1084 eelf32metag.c:1359
-#: eelf32microblaze.c:1084 eelf32microblazeel.c:1084 eelf32mipswindiss.c:1310
-#: eelf32or1k.c:1084 eelf32or1k_linux.c:1084 eelf32ppc.c:1287
-#: eelf32ppc_fbsd.c:1287 eelf32ppclinux.c:1287 eelf32ppcnto.c:1287
-#: eelf32ppcsim.c:1287 eelf32ppcvxworks.c:1261 eelf32ppcwindiss.c:1287
+#: eelf32microblaze.c:1084 eelf32microblazeel.c:1084 eelf32mipswindiss.c:1311
+#: eelf32or1k.c:1084 eelf32or1k_linux.c:1084 eelf32ppc.c:1300
+#: eelf32ppc_fbsd.c:1300 eelf32ppclinux.c:1300 eelf32ppcnto.c:1300
+#: eelf32ppcsim.c:1300 eelf32ppcvxworks.c:1274 eelf32ppcwindiss.c:1300
 #: eelf32rl78.c:1084 eelf32rx.c:1100 eelf32tilegx.c:1084
 #: eelf32tilegx_be.c:1084 eelf32tilepro.c:1084 eelf32vax.c:1084
 #: eelf32visium.c:1084 eelf32xc16x.c:1084 eelf32xc16xl.c:1084
@@ -4148,11 +4176,11 @@ msgstr "%P : avertissement : %s, requis par %pB, non trouvé (essayez avec -rp
 #: eelf64_aix.c:1084 eelf64_ia64.c:1108 eelf64_ia64_fbsd.c:1108
 #: eelf64_s390.c:1099 eelf64_sparc.c:1084 eelf64_sparc_fbsd.c:1084
 #: eelf64_sparc_sol2.c:1215 eelf64alpha.c:1167 eelf64alpha_fbsd.c:1167
-#: eelf64alpha_nbsd.c:1167 eelf64bmip.c:1328 eelf64btsmip.c:1310
-#: eelf64btsmip_fbsd.c:1310 eelf64hppa.c:1084 eelf64lppc.c:1734
+#: eelf64alpha_nbsd.c:1167 eelf64bmip.c:1329 eelf64btsmip.c:1311
+#: eelf64btsmip_fbsd.c:1311 eelf64hppa.c:1084 eelf64lppc.c:1746
 #: eelf64lriscv.c:1149 eelf64lriscv_lp64.c:1149 eelf64lriscv_lp64f.c:1149
-#: eelf64ltsmip.c:1310 eelf64ltsmip_fbsd.c:1310 eelf64mmix.c:1195
-#: eelf64ppc.c:1734 eelf64ppc_fbsd.c:1734 eelf64rdos.c:1084
+#: eelf64ltsmip.c:1311 eelf64ltsmip_fbsd.c:1311 eelf64mmix.c:1195
+#: eelf64ppc.c:1746 eelf64ppc_fbsd.c:1746 eelf64rdos.c:1084
 #: eelf64tilegx.c:1084 eelf64tilegx_be.c:1084 eelf_i386.c:1416
 #: eelf_i386_be.c:1084 eelf_i386_chaos.c:1084 eelf_i386_fbsd.c:1084
 #: eelf_i386_ldso.c:1084 eelf_i386_nacl.c:1084 eelf_i386_sol2.c:1215
@@ -4169,15 +4197,14 @@ msgstr "%P : avertissement : %s, requis par %pB, non trouvé (essayez avec -rp
 #: em32relf_linux.c:1084 em32rlelf.c:1084 em32rlelf_linux.c:1084
 #: em68hc11elf.c:1384 em68hc11elfb.c:1384 em68hc12elf.c:1384
 #: em68hc12elfb.c:1384 em68kelf.c:1234 em68kelfnbsd.c:1234 em9s12zelf.c:1084
-#: emn10300.c:1084 ends32belf.c:1261 ends32belf16m.c:1261
-#: ends32belf_linux.c:1261 ends32elf.c:1261 ends32elf16m.c:1261
-#: ends32elf_linux.c:1261 enios2elf.c:1377 enios2linux.c:1377 eppclynx.c:1287
+#: emn10300.c:1084 ends32belf.c:1191 ends32belf16m.c:1191
+#: ends32belf_linux.c:1191 ends32elf.c:1191 ends32elf16m.c:1191
+#: ends32elf_linux.c:1191 enios2elf.c:1377 enios2linux.c:1377 eppclynx.c:1300
 #: epruelf.c:1104 escore3_elf.c:1104 escore7_elf.c:1104 eshelf.c:1084
 #: eshelf_fd.c:1084 eshelf_linux.c:1084 eshelf_nbsd.c:1084 eshelf_nto.c:1084
 #: eshelf_uclinux.c:1084 eshelf_vxworks.c:1113 eshlelf.c:1084
 #: eshlelf_fd.c:1084 eshlelf_linux.c:1084 eshlelf_nbsd.c:1084
 #: eshlelf_nto.c:1084 eshlelf_vxworks.c:1113 ev850.c:1130 ev850_rh850.c:1130
-#: exgateelf.c:1084
 msgid "%F%P: failed to parse EH frame entries\n"
 msgstr "%F%P : échec de l'analyse des entrées du cadre EH\n"
 
@@ -4199,30 +4226,30 @@ msgstr "%F%P : échec de l'analyse des entrées du cadre EH\n"
 #: eavr51.c:1318 eavr6.c:1318 eavrtiny.c:1318 eavrxmega1.c:1318
 #: eavrxmega2.c:1318 eavrxmega3.c:1318 eavrxmega4.c:1318 eavrxmega5.c:1318
 #: eavrxmega6.c:1318 eavrxmega7.c:1318 ecriself.c:1115 ecrislinux.c:1115
-#: ed10velf.c:1115 eelf32_sparc.c:1115 eelf32_sparc_sol2.c:1246
-#: eelf32_sparc_vxworks.c:1144 eelf32_spu.c:1649 eelf32_tic6x_be.c:1253
-#: eelf32_tic6x_elf_be.c:1253 eelf32_tic6x_elf_le.c:1253
-#: eelf32_tic6x_le.c:1253 eelf32_tic6x_linux_be.c:1253
-#: eelf32_tic6x_linux_le.c:1253 eelf32_x86_64.c:1447 eelf32_x86_64_nacl.c:1115
-#: eelf32am33lin.c:1115 eelf32b4300.c:1341 eelf32bfin.c:1124
-#: eelf32bfinfd.c:1124 eelf32bmip.c:1341 eelf32bmipn32.c:1359
-#: eelf32bsmip.c:1359 eelf32btsmip.c:1341 eelf32btsmip_fbsd.c:1341
-#: eelf32btsmipn32.c:1341 eelf32btsmipn32_fbsd.c:1341 eelf32cr16.c:1266
-#: eelf32cr16c.c:1115 eelf32crx.c:1154 eelf32ebmip.c:1341
-#: eelf32ebmipvxworks.c:1370 eelf32elmip.c:1341 eelf32elmipvxworks.c:1370
+#: ecskyelf.c:1372 ecskyelf_linux.c:1372 ed10velf.c:1115 eelf32_sparc.c:1115
+#: eelf32_sparc_sol2.c:1246 eelf32_sparc_vxworks.c:1144 eelf32_spu.c:1785
+#: eelf32_tic6x_be.c:1253 eelf32_tic6x_elf_be.c:1253
+#: eelf32_tic6x_elf_le.c:1253 eelf32_tic6x_le.c:1253
+#: eelf32_tic6x_linux_be.c:1253 eelf32_tic6x_linux_le.c:1253
+#: eelf32_x86_64.c:1447 eelf32_x86_64_nacl.c:1115 eelf32am33lin.c:1115
+#: eelf32b4300.c:1342 eelf32bfin.c:1124 eelf32bfinfd.c:1124 eelf32bmip.c:1342
+#: eelf32bmipn32.c:1360 eelf32bsmip.c:1360 eelf32btsmip.c:1342
+#: eelf32btsmip_fbsd.c:1342 eelf32btsmipn32.c:1342 eelf32btsmipn32_fbsd.c:1342
+#: eelf32cr16.c:1266 eelf32cr16c.c:1115 eelf32crx.c:1154 eelf32ebmip.c:1342
+#: eelf32ebmipvxworks.c:1371 eelf32elmip.c:1342 eelf32elmipvxworks.c:1371
 #: eelf32epiphany.c:1115 eelf32epiphany_4x4.c:1117 eelf32frvfd.c:1115
-#: eelf32ip2k.c:1115 eelf32l4300.c:1341 eelf32lm32.c:1115 eelf32lm32fd.c:1115
-#: eelf32lmip.c:1341 eelf32lppc.c:1318 eelf32lppclinux.c:1318
-#: eelf32lppcnto.c:1318 eelf32lppcsim.c:1318 eelf32lr5900.c:1341
-#: eelf32lr5900n32.c:1341 eelf32lriscv.c:1180 eelf32lriscv_ilp32.c:1180
-#: eelf32lriscv_ilp32f.c:1180 eelf32lsmip.c:1341 eelf32ltsmip.c:1341
-#: eelf32ltsmip_fbsd.c:1341 eelf32ltsmipn32.c:1341 eelf32ltsmipn32_fbsd.c:1341
+#: eelf32ip2k.c:1115 eelf32l4300.c:1342 eelf32lm32.c:1115 eelf32lm32fd.c:1115
+#: eelf32lmip.c:1342 eelf32lppc.c:1331 eelf32lppclinux.c:1331
+#: eelf32lppcnto.c:1331 eelf32lppcsim.c:1331 eelf32lr5900.c:1342
+#: eelf32lr5900n32.c:1342 eelf32lriscv.c:1180 eelf32lriscv_ilp32.c:1180
+#: eelf32lriscv_ilp32f.c:1180 eelf32lsmip.c:1342 eelf32ltsmip.c:1342
+#: eelf32ltsmip_fbsd.c:1342 eelf32ltsmipn32.c:1342 eelf32ltsmipn32_fbsd.c:1342
 #: eelf32m32c.c:1126 eelf32mb_linux.c:1115 eelf32mbel_linux.c:1115
 #: eelf32mcore.c:1115 eelf32mep.c:1115 eelf32metag.c:1390
-#: eelf32microblaze.c:1115 eelf32microblazeel.c:1115 eelf32mipswindiss.c:1341
-#: eelf32or1k.c:1115 eelf32or1k_linux.c:1115 eelf32ppc.c:1318
-#: eelf32ppc_fbsd.c:1318 eelf32ppclinux.c:1318 eelf32ppcnto.c:1318
-#: eelf32ppcsim.c:1318 eelf32ppcvxworks.c:1292 eelf32ppcwindiss.c:1318
+#: eelf32microblaze.c:1115 eelf32microblazeel.c:1115 eelf32mipswindiss.c:1342
+#: eelf32or1k.c:1115 eelf32or1k_linux.c:1115 eelf32ppc.c:1331
+#: eelf32ppc_fbsd.c:1331 eelf32ppclinux.c:1331 eelf32ppcnto.c:1331
+#: eelf32ppcsim.c:1331 eelf32ppcvxworks.c:1305 eelf32ppcwindiss.c:1331
 #: eelf32rl78.c:1115 eelf32rx.c:1131 eelf32tilegx.c:1115
 #: eelf32tilegx_be.c:1115 eelf32tilepro.c:1115 eelf32vax.c:1115
 #: eelf32visium.c:1115 eelf32xc16x.c:1115 eelf32xc16xl.c:1115
@@ -4230,11 +4257,11 @@ msgstr "%F%P : échec de l'analyse des entrées du cadre EH\n"
 #: eelf64_aix.c:1115 eelf64_ia64.c:1139 eelf64_ia64_fbsd.c:1139
 #: eelf64_s390.c:1130 eelf64_sparc.c:1115 eelf64_sparc_fbsd.c:1115
 #: eelf64_sparc_sol2.c:1246 eelf64alpha.c:1198 eelf64alpha_fbsd.c:1198
-#: eelf64alpha_nbsd.c:1198 eelf64bmip.c:1359 eelf64btsmip.c:1341
-#: eelf64btsmip_fbsd.c:1341 eelf64hppa.c:1115 eelf64lppc.c:1765
+#: eelf64alpha_nbsd.c:1198 eelf64bmip.c:1360 eelf64btsmip.c:1342
+#: eelf64btsmip_fbsd.c:1342 eelf64hppa.c:1115 eelf64lppc.c:1777
 #: eelf64lriscv.c:1180 eelf64lriscv_lp64.c:1180 eelf64lriscv_lp64f.c:1180
-#: eelf64ltsmip.c:1341 eelf64ltsmip_fbsd.c:1341 eelf64mmix.c:1226
-#: eelf64ppc.c:1765 eelf64ppc_fbsd.c:1765 eelf64rdos.c:1115
+#: eelf64ltsmip.c:1342 eelf64ltsmip_fbsd.c:1342 eelf64mmix.c:1226
+#: eelf64ppc.c:1777 eelf64ppc_fbsd.c:1777 eelf64rdos.c:1115
 #: eelf64tilegx.c:1115 eelf64tilegx_be.c:1115 eelf_i386.c:1447
 #: eelf_i386_be.c:1115 eelf_i386_chaos.c:1115 eelf_i386_fbsd.c:1115
 #: eelf_i386_ldso.c:1115 eelf_i386_nacl.c:1115 eelf_i386_sol2.c:1246
@@ -4251,730 +4278,723 @@ msgstr "%F%P : échec de l'analyse des entrées du cadre EH\n"
 #: em32relf_linux.c:1115 em32rlelf.c:1115 em32rlelf_linux.c:1115
 #: em68hc11elf.c:1415 em68hc11elfb.c:1415 em68hc12elf.c:1415
 #: em68hc12elfb.c:1415 em68kelf.c:1265 em68kelfnbsd.c:1265 em9s12zelf.c:1115
-#: emn10300.c:1115 ends32belf.c:1292 ends32belf16m.c:1292
-#: ends32belf_linux.c:1292 ends32elf.c:1292 ends32elf16m.c:1292
-#: ends32elf_linux.c:1292 enios2elf.c:1408 enios2linux.c:1408 eppclynx.c:1318
+#: emn10300.c:1115 ends32belf.c:1222 ends32belf16m.c:1222
+#: ends32belf_linux.c:1222 ends32elf.c:1222 ends32elf16m.c:1222
+#: ends32elf_linux.c:1222 enios2elf.c:1408 enios2linux.c:1408 eppclynx.c:1331
 #: eppcmacos.c:1369 epruelf.c:1135 escore3_elf.c:1135 escore7_elf.c:1135
 #: eshelf.c:1115 eshelf_fd.c:1115 eshelf_linux.c:1115 eshelf_nbsd.c:1115
 #: eshelf_nto.c:1115 eshelf_uclinux.c:1115 eshelf_vxworks.c:1144
 #: eshlelf.c:1115 eshlelf_fd.c:1115 eshlelf_linux.c:1115 eshlelf_nbsd.c:1115
 #: eshlelf_nto.c:1115 eshlelf_vxworks.c:1144 ev850.c:1161 ev850_rh850.c:1161
-#: exgateelf.c:1115
 msgid "%F%P: failed to record assignment to %s: %E\n"
 msgstr "%F%P : échec de l'enregistrement de l'affectation vers %s : %E\n"
 
-#: eaarch64cloudabi.c:1617 eaarch64cloudabi.c:1679 eaarch64cloudabib.c:1617
-#: eaarch64cloudabib.c:1679 eaarch64elf.c:1617 eaarch64elf.c:1679
-#: eaarch64elf32.c:1617 eaarch64elf32.c:1679 eaarch64elf32b.c:1617
-#: eaarch64elf32b.c:1679 eaarch64elfb.c:1617 eaarch64elfb.c:1679
-#: eaarch64fbsd.c:1617 eaarch64fbsd.c:1679 eaarch64fbsdb.c:1617
-#: eaarch64fbsdb.c:1679 eaarch64linux.c:1617 eaarch64linux.c:1686
-#: eaarch64linux32.c:1617 eaarch64linux32.c:1686 eaarch64linux32b.c:1617
-#: eaarch64linux32b.c:1686 eaarch64linuxb.c:1617 eaarch64linuxb.c:1686
-#: eaix5ppc.c:830 eaix5rs6.c:830 eaixppc.c:830 eaixrs6.c:830 earcelf.c:1302
-#: earcelf.c:1364 earcelf_prof.c:1302 earcelf_prof.c:1364 earclinux.c:1304
-#: earclinux.c:1366 earclinux_nps.c:1304 earclinux_nps.c:1366
-#: earclinux_prof.c:1304 earclinux_prof.c:1366 earcv2elf.c:1302
-#: earcv2elf.c:1364 earcv2elfx.c:1302 earcv2elfx.c:1364 earmelf.c:1837
-#: earmelf.c:1899 earmelf_fbsd.c:1837 earmelf_fbsd.c:1906
-#: earmelf_fuchsia.c:1837 earmelf_fuchsia.c:1899 earmelf_linux.c:1837
-#: earmelf_linux.c:1899 earmelf_linux_eabi.c:1837 earmelf_linux_eabi.c:1899
-#: earmelf_linux_fdpiceabi.c:1837 earmelf_linux_fdpiceabi.c:1899
-#: earmelf_nacl.c:1837 earmelf_nacl.c:1899 earmelf_nbsd.c:1837
-#: earmelf_nbsd.c:1899 earmelf_phoenix.c:1837 earmelf_phoenix.c:1899
-#: earmelf_vxworks.c:1867 earmelf_vxworks.c:1929 earmelfb.c:1837
-#: earmelfb.c:1899 earmelfb_fbsd.c:1837 earmelfb_fbsd.c:1906
-#: earmelfb_fuchsia.c:1837 earmelfb_fuchsia.c:1899 earmelfb_linux.c:1837
-#: earmelfb_linux.c:1899 earmelfb_linux_eabi.c:1837 earmelfb_linux_eabi.c:1899
-#: earmelfb_linux_fdpiceabi.c:1837 earmelfb_linux_fdpiceabi.c:1899
-#: earmelfb_nacl.c:1837 earmelfb_nacl.c:1899 earmelfb_nbsd.c:1837
-#: earmelfb_nbsd.c:1899 earmnto.c:1837 earmnto.c:1899 earmsymbian.c:1837
-#: earmsymbian.c:1899 eavr1.c:1505 eavr1.c:1567 eavr2.c:1505 eavr2.c:1567
-#: eavr25.c:1505 eavr25.c:1567 eavr3.c:1505 eavr3.c:1567 eavr31.c:1505
-#: eavr31.c:1567 eavr35.c:1505 eavr35.c:1567 eavr4.c:1505 eavr4.c:1567
-#: eavr5.c:1505 eavr5.c:1567 eavr51.c:1505 eavr51.c:1567 eavr6.c:1505
-#: eavr6.c:1567 eavrtiny.c:1505 eavrtiny.c:1567 eavrxmega1.c:1505
-#: eavrxmega1.c:1567 eavrxmega2.c:1505 eavrxmega2.c:1567 eavrxmega3.c:1505
-#: eavrxmega3.c:1567 eavrxmega4.c:1505 eavrxmega4.c:1567 eavrxmega5.c:1505
-#: eavrxmega5.c:1567 eavrxmega6.c:1505 eavrxmega6.c:1567 eavrxmega7.c:1505
-#: eavrxmega7.c:1567 ecriself.c:1302 ecriself.c:1364 ecrislinux.c:1302
-#: ecrislinux.c:1364 ed10velf.c:1302 ed10velf.c:1364 eelf32_sparc.c:1302
-#: eelf32_sparc.c:1364 eelf32_sparc_sol2.c:1433 eelf32_sparc_sol2.c:1495
-#: eelf32_sparc_vxworks.c:1331 eelf32_sparc_vxworks.c:1393 eelf32_spu.c:1836
-#: eelf32_spu.c:1898 eelf32_tic6x_be.c:1440 eelf32_tic6x_be.c:1502
-#: eelf32_tic6x_elf_be.c:1440 eelf32_tic6x_elf_be.c:1502
-#: eelf32_tic6x_elf_le.c:1440 eelf32_tic6x_elf_le.c:1502
-#: eelf32_tic6x_le.c:1440 eelf32_tic6x_le.c:1502 eelf32_tic6x_linux_be.c:1440
-#: eelf32_tic6x_linux_be.c:1502 eelf32_tic6x_linux_le.c:1440
-#: eelf32_tic6x_linux_le.c:1502 eelf32_x86_64.c:1634 eelf32_x86_64.c:1696
-#: eelf32_x86_64_nacl.c:1302 eelf32_x86_64_nacl.c:1364 eelf32am33lin.c:1302
-#: eelf32am33lin.c:1364 eelf32b4300.c:1528 eelf32b4300.c:1590
-#: eelf32bfin.c:1311 eelf32bfin.c:1373 eelf32bfinfd.c:1311 eelf32bfinfd.c:1373
-#: eelf32bmip.c:1528 eelf32bmip.c:1590 eelf32bmipn32.c:1546
-#: eelf32bmipn32.c:1608 eelf32bsmip.c:1546 eelf32bsmip.c:1608
-#: eelf32btsmip.c:1528 eelf32btsmip.c:1590 eelf32btsmip_fbsd.c:1528
-#: eelf32btsmip_fbsd.c:1597 eelf32btsmipn32.c:1528 eelf32btsmipn32.c:1590
-#: eelf32btsmipn32_fbsd.c:1528 eelf32btsmipn32_fbsd.c:1597 eelf32cr16.c:1453
-#: eelf32cr16.c:1515 eelf32cr16c.c:1302 eelf32cr16c.c:1364 eelf32crx.c:1341
-#: eelf32crx.c:1403 eelf32ebmip.c:1528 eelf32ebmip.c:1590
-#: eelf32ebmipvxworks.c:1557 eelf32ebmipvxworks.c:1619 eelf32elmip.c:1528
-#: eelf32elmip.c:1590 eelf32elmipvxworks.c:1557 eelf32elmipvxworks.c:1619
-#: eelf32epiphany.c:1302 eelf32epiphany.c:1364 eelf32epiphany_4x4.c:1304
-#: eelf32epiphany_4x4.c:1366 eelf32frvfd.c:1302 eelf32frvfd.c:1364
-#: eelf32ip2k.c:1302 eelf32ip2k.c:1364 eelf32l4300.c:1528 eelf32l4300.c:1590
-#: eelf32lm32.c:1302 eelf32lm32.c:1364 eelf32lm32fd.c:1302 eelf32lm32fd.c:1364
-#: eelf32lmip.c:1528 eelf32lmip.c:1590 eelf32lppc.c:1505 eelf32lppc.c:1567
-#: eelf32lppclinux.c:1505 eelf32lppclinux.c:1567 eelf32lppcnto.c:1505
-#: eelf32lppcnto.c:1567 eelf32lppcsim.c:1505 eelf32lppcsim.c:1567
-#: eelf32lr5900.c:1528 eelf32lr5900.c:1590 eelf32lr5900n32.c:1528
-#: eelf32lr5900n32.c:1590 eelf32lriscv.c:1367 eelf32lriscv.c:1429
-#: eelf32lriscv_ilp32.c:1367 eelf32lriscv_ilp32.c:1429
-#: eelf32lriscv_ilp32f.c:1367 eelf32lriscv_ilp32f.c:1429 eelf32lsmip.c:1528
-#: eelf32lsmip.c:1590 eelf32ltsmip.c:1528 eelf32ltsmip.c:1590
-#: eelf32ltsmip_fbsd.c:1528 eelf32ltsmip_fbsd.c:1597 eelf32ltsmipn32.c:1528
-#: eelf32ltsmipn32.c:1590 eelf32ltsmipn32_fbsd.c:1528
-#: eelf32ltsmipn32_fbsd.c:1597 eelf32m32c.c:1313 eelf32m32c.c:1375
-#: eelf32mb_linux.c:1302 eelf32mb_linux.c:1364 eelf32mbel_linux.c:1302
-#: eelf32mbel_linux.c:1364 eelf32mcore.c:1302 eelf32mcore.c:1364
-#: eelf32mep.c:1302 eelf32mep.c:1364 eelf32metag.c:1577 eelf32metag.c:1639
-#: eelf32microblaze.c:1302 eelf32microblaze.c:1364 eelf32microblazeel.c:1302
-#: eelf32microblazeel.c:1364 eelf32mipswindiss.c:1528 eelf32mipswindiss.c:1590
-#: eelf32or1k.c:1302 eelf32or1k.c:1364 eelf32or1k_linux.c:1302
-#: eelf32or1k_linux.c:1364 eelf32ppc.c:1505 eelf32ppc.c:1567
-#: eelf32ppc_fbsd.c:1505 eelf32ppc_fbsd.c:1574 eelf32ppclinux.c:1505
-#: eelf32ppclinux.c:1567 eelf32ppcnto.c:1505 eelf32ppcnto.c:1567
-#: eelf32ppcsim.c:1505 eelf32ppcsim.c:1567 eelf32ppcvxworks.c:1479
-#: eelf32ppcvxworks.c:1541 eelf32ppcwindiss.c:1505 eelf32ppcwindiss.c:1567
-#: eelf32rl78.c:1302 eelf32rl78.c:1364 eelf32rx.c:1318 eelf32rx.c:1380
-#: eelf32tilegx.c:1302 eelf32tilegx.c:1364 eelf32tilegx_be.c:1302
-#: eelf32tilegx_be.c:1364 eelf32tilepro.c:1302 eelf32tilepro.c:1364
-#: eelf32vax.c:1302 eelf32vax.c:1364 eelf32visium.c:1302 eelf32visium.c:1364
-#: eelf32xc16x.c:1302 eelf32xc16x.c:1364 eelf32xc16xl.c:1302
-#: eelf32xc16xl.c:1364 eelf32xc16xs.c:1302 eelf32xc16xs.c:1364
-#: eelf32xstormy16.c:1313 eelf32xstormy16.c:1375 eelf32xtensa.c:3189
-#: eelf32xtensa.c:3251 eelf64_aix.c:1302 eelf64_aix.c:1364 eelf64_ia64.c:1326
-#: eelf64_ia64.c:1388 eelf64_ia64_fbsd.c:1326 eelf64_ia64_fbsd.c:1395
-#: eelf64_ia64_vms.c:251 eelf64_s390.c:1317 eelf64_s390.c:1379
-#: eelf64_sparc.c:1302 eelf64_sparc.c:1364 eelf64_sparc_fbsd.c:1302
-#: eelf64_sparc_fbsd.c:1371 eelf64_sparc_sol2.c:1433 eelf64_sparc_sol2.c:1495
-#: eelf64alpha.c:1385 eelf64alpha.c:1447 eelf64alpha_fbsd.c:1385
-#: eelf64alpha_fbsd.c:1454 eelf64alpha_nbsd.c:1385 eelf64alpha_nbsd.c:1447
-#: eelf64bmip.c:1546 eelf64bmip.c:1608 eelf64btsmip.c:1528 eelf64btsmip.c:1590
-#: eelf64btsmip_fbsd.c:1528 eelf64btsmip_fbsd.c:1597 eelf64hppa.c:1302
-#: eelf64hppa.c:1364 eelf64lppc.c:1952 eelf64lppc.c:2014 eelf64lriscv.c:1367
-#: eelf64lriscv.c:1429 eelf64lriscv_lp64.c:1367 eelf64lriscv_lp64.c:1429
-#: eelf64lriscv_lp64f.c:1367 eelf64lriscv_lp64f.c:1429 eelf64ltsmip.c:1528
-#: eelf64ltsmip.c:1590 eelf64ltsmip_fbsd.c:1528 eelf64ltsmip_fbsd.c:1597
-#: eelf64mmix.c:1413 eelf64mmix.c:1475 eelf64ppc.c:1952 eelf64ppc.c:2014
-#: eelf64ppc_fbsd.c:1952 eelf64ppc_fbsd.c:2021 eelf64rdos.c:1302
-#: eelf64rdos.c:1364 eelf64tilegx.c:1302 eelf64tilegx.c:1364
-#: eelf64tilegx_be.c:1302 eelf64tilegx_be.c:1364 eelf_i386.c:1634
-#: eelf_i386.c:1696 eelf_i386_be.c:1302 eelf_i386_be.c:1364
-#: eelf_i386_chaos.c:1302 eelf_i386_chaos.c:1364 eelf_i386_fbsd.c:1302
-#: eelf_i386_fbsd.c:1371 eelf_i386_ldso.c:1302 eelf_i386_ldso.c:1371
-#: eelf_i386_nacl.c:1302 eelf_i386_nacl.c:1364 eelf_i386_sol2.c:1433
-#: eelf_i386_sol2.c:1502 eelf_i386_vxworks.c:1331 eelf_i386_vxworks.c:1393
-#: eelf_iamcu.c:1302 eelf_iamcu.c:1364 eelf_k1om.c:1634 eelf_k1om.c:1696
-#: eelf_k1om_fbsd.c:1302 eelf_k1om_fbsd.c:1371 eelf_l1om.c:1634
-#: eelf_l1om.c:1696 eelf_l1om_fbsd.c:1302 eelf_l1om_fbsd.c:1371
-#: eelf_s390.c:1302 eelf_s390.c:1364 eelf_x86_64.c:1634 eelf_x86_64.c:1696
-#: eelf_x86_64_cloudabi.c:1302 eelf_x86_64_cloudabi.c:1364
-#: eelf_x86_64_fbsd.c:1302 eelf_x86_64_fbsd.c:1371 eelf_x86_64_nacl.c:1302
-#: eelf_x86_64_nacl.c:1364 eelf_x86_64_sol2.c:1433 eelf_x86_64_sol2.c:1495
-#: eh8300elf.c:1302 eh8300elf.c:1364 eh8300elf_linux.c:1302
-#: eh8300elf_linux.c:1364 eh8300helf.c:1302 eh8300helf.c:1364
-#: eh8300helf_linux.c:1302 eh8300helf_linux.c:1364 eh8300hnelf.c:1302
-#: eh8300hnelf.c:1364 eh8300self.c:1302 eh8300self.c:1364
-#: eh8300self_linux.c:1302 eh8300self_linux.c:1364 eh8300snelf.c:1302
-#: eh8300snelf.c:1364 eh8300sxelf.c:1302 eh8300sxelf.c:1364
-#: eh8300sxelf_linux.c:1302 eh8300sxelf_linux.c:1364 eh8300sxnelf.c:1302
-#: eh8300sxnelf.c:1364 ehppa64linux.c:1302 ehppa64linux.c:1364 ehppaelf.c:1609
-#: ehppaelf.c:1671 ehppalinux.c:1609 ehppalinux.c:1671 ehppanbsd.c:1609
-#: ehppanbsd.c:1671 ehppaobsd.c:1609 ehppaobsd.c:1671 ei386lynx.c:1302
-#: ei386lynx.c:1371 ei386moss.c:1302 ei386moss.c:1364 ei386nto.c:1302
-#: ei386nto.c:1364 em32relf.c:1302 em32relf.c:1364 em32relf_linux.c:1302
-#: em32relf_linux.c:1364 em32rlelf.c:1302 em32rlelf.c:1364
-#: em32rlelf_linux.c:1302 em32rlelf_linux.c:1364 em68hc11elf.c:1602
-#: em68hc11elf.c:1664 em68hc11elfb.c:1602 em68hc11elfb.c:1664
-#: em68hc12elf.c:1602 em68hc12elf.c:1664 em68hc12elfb.c:1602
-#: em68hc12elfb.c:1664 em68kelf.c:1452 em68kelf.c:1514 em68kelfnbsd.c:1452
-#: em68kelfnbsd.c:1514 em9s12zelf.c:1302 em9s12zelf.c:1364 emn10300.c:1302
-#: emn10300.c:1364 ends32belf.c:1479 ends32belf.c:1541 ends32belf16m.c:1479
-#: ends32belf16m.c:1541 ends32belf_linux.c:1479 ends32belf_linux.c:1541
-#: ends32elf.c:1479 ends32elf.c:1541 ends32elf16m.c:1479 ends32elf16m.c:1541
-#: ends32elf_linux.c:1479 ends32elf_linux.c:1541 enios2elf.c:1595
-#: enios2elf.c:1657 enios2linux.c:1595 enios2linux.c:1657 eppclynx.c:1505
-#: eppclynx.c:1574 eppcmacos.c:830 epruelf.c:1322 epruelf.c:1384
-#: escore3_elf.c:1322 escore3_elf.c:1384 escore7_elf.c:1322 escore7_elf.c:1384
-#: eshelf.c:1302 eshelf.c:1364 eshelf_fd.c:1302 eshelf_fd.c:1364
-#: eshelf_linux.c:1302 eshelf_linux.c:1364 eshelf_nbsd.c:1302
-#: eshelf_nbsd.c:1364 eshelf_nto.c:1302 eshelf_nto.c:1364
-#: eshelf_uclinux.c:1302 eshelf_uclinux.c:1364 eshelf_vxworks.c:1331
-#: eshelf_vxworks.c:1393 eshlelf.c:1302 eshlelf.c:1364 eshlelf_fd.c:1302
-#: eshlelf_fd.c:1364 eshlelf_linux.c:1302 eshlelf_linux.c:1364
-#: eshlelf_nbsd.c:1302 eshlelf_nbsd.c:1364 eshlelf_nto.c:1302
-#: eshlelf_nto.c:1364 eshlelf_vxworks.c:1331 eshlelf_vxworks.c:1393
-#: ev850.c:1348 ev850.c:1410 ev850_rh850.c:1348 ev850_rh850.c:1410
-#: exgateelf.c:1302 exgateelf.c:1364
+#: eaarch64cloudabi.c:1612 eaarch64cloudabi.c:1674 eaarch64cloudabib.c:1612
+#: eaarch64cloudabib.c:1674 eaarch64elf.c:1612 eaarch64elf.c:1674
+#: eaarch64elf32.c:1612 eaarch64elf32.c:1674 eaarch64elf32b.c:1612
+#: eaarch64elf32b.c:1674 eaarch64elfb.c:1612 eaarch64elfb.c:1674
+#: eaarch64fbsd.c:1612 eaarch64fbsd.c:1674 eaarch64fbsdb.c:1612
+#: eaarch64fbsdb.c:1674 eaarch64linux.c:1612 eaarch64linux.c:1681
+#: eaarch64linux32.c:1612 eaarch64linux32.c:1681 eaarch64linux32b.c:1612
+#: eaarch64linux32b.c:1681 eaarch64linuxb.c:1612 eaarch64linuxb.c:1681
+#: eaix5ppc.c:830 eaix5rs6.c:830 eaixppc.c:830 eaixrs6.c:830 earcelf.c:1297
+#: earcelf.c:1359 earcelf_prof.c:1297 earcelf_prof.c:1359 earclinux.c:1299
+#: earclinux.c:1361 earclinux_nps.c:1299 earclinux_nps.c:1361
+#: earclinux_prof.c:1299 earclinux_prof.c:1361 earcv2elf.c:1297
+#: earcv2elf.c:1359 earcv2elfx.c:1297 earcv2elfx.c:1359 earmelf.c:1832
+#: earmelf.c:1894 earmelf_fbsd.c:1832 earmelf_fbsd.c:1901
+#: earmelf_fuchsia.c:1832 earmelf_fuchsia.c:1894 earmelf_linux.c:1832
+#: earmelf_linux.c:1894 earmelf_linux_eabi.c:1832 earmelf_linux_eabi.c:1894
+#: earmelf_linux_fdpiceabi.c:1832 earmelf_linux_fdpiceabi.c:1894
+#: earmelf_nacl.c:1832 earmelf_nacl.c:1894 earmelf_nbsd.c:1832
+#: earmelf_nbsd.c:1894 earmelf_phoenix.c:1832 earmelf_phoenix.c:1894
+#: earmelf_vxworks.c:1862 earmelf_vxworks.c:1924 earmelfb.c:1832
+#: earmelfb.c:1894 earmelfb_fbsd.c:1832 earmelfb_fbsd.c:1901
+#: earmelfb_fuchsia.c:1832 earmelfb_fuchsia.c:1894 earmelfb_linux.c:1832
+#: earmelfb_linux.c:1894 earmelfb_linux_eabi.c:1832 earmelfb_linux_eabi.c:1894
+#: earmelfb_linux_fdpiceabi.c:1832 earmelfb_linux_fdpiceabi.c:1894
+#: earmelfb_nacl.c:1832 earmelfb_nacl.c:1894 earmelfb_nbsd.c:1832
+#: earmelfb_nbsd.c:1894 earmnto.c:1832 earmnto.c:1894 earmsymbian.c:1832
+#: earmsymbian.c:1894 eavr1.c:1500 eavr1.c:1562 eavr2.c:1500 eavr2.c:1562
+#: eavr25.c:1500 eavr25.c:1562 eavr3.c:1500 eavr3.c:1562 eavr31.c:1500
+#: eavr31.c:1562 eavr35.c:1500 eavr35.c:1562 eavr4.c:1500 eavr4.c:1562
+#: eavr5.c:1500 eavr5.c:1562 eavr51.c:1500 eavr51.c:1562 eavr6.c:1500
+#: eavr6.c:1562 eavrtiny.c:1500 eavrtiny.c:1562 eavrxmega1.c:1500
+#: eavrxmega1.c:1562 eavrxmega2.c:1500 eavrxmega2.c:1562 eavrxmega3.c:1500
+#: eavrxmega3.c:1562 eavrxmega4.c:1500 eavrxmega4.c:1562 eavrxmega5.c:1500
+#: eavrxmega5.c:1562 eavrxmega6.c:1500 eavrxmega6.c:1562 eavrxmega7.c:1500
+#: eavrxmega7.c:1562 ecriself.c:1297 ecriself.c:1359 ecrislinux.c:1297
+#: ecrislinux.c:1359 ecskyelf.c:1554 ecskyelf.c:1616 ecskyelf_linux.c:1554
+#: ecskyelf_linux.c:1616 ed10velf.c:1297 ed10velf.c:1359 eelf32_sparc.c:1297
+#: eelf32_sparc.c:1359 eelf32_sparc_sol2.c:1428 eelf32_sparc_sol2.c:1490
+#: eelf32_sparc_vxworks.c:1326 eelf32_sparc_vxworks.c:1388 eelf32_spu.c:1967
+#: eelf32_spu.c:2029 eelf32_tic6x_be.c:1435 eelf32_tic6x_be.c:1497
+#: eelf32_tic6x_elf_be.c:1435 eelf32_tic6x_elf_be.c:1497
+#: eelf32_tic6x_elf_le.c:1435 eelf32_tic6x_elf_le.c:1497
+#: eelf32_tic6x_le.c:1435 eelf32_tic6x_le.c:1497 eelf32_tic6x_linux_be.c:1435
+#: eelf32_tic6x_linux_be.c:1497 eelf32_tic6x_linux_le.c:1435
+#: eelf32_tic6x_linux_le.c:1497 eelf32_x86_64.c:1629 eelf32_x86_64.c:1691
+#: eelf32_x86_64_nacl.c:1297 eelf32_x86_64_nacl.c:1359 eelf32am33lin.c:1297
+#: eelf32am33lin.c:1359 eelf32b4300.c:1524 eelf32b4300.c:1586
+#: eelf32bfin.c:1306 eelf32bfin.c:1368 eelf32bfinfd.c:1306 eelf32bfinfd.c:1368
+#: eelf32bmip.c:1524 eelf32bmip.c:1586 eelf32bmipn32.c:1542
+#: eelf32bmipn32.c:1604 eelf32bsmip.c:1542 eelf32bsmip.c:1604
+#: eelf32btsmip.c:1524 eelf32btsmip.c:1586 eelf32btsmip_fbsd.c:1524
+#: eelf32btsmip_fbsd.c:1593 eelf32btsmipn32.c:1524 eelf32btsmipn32.c:1586
+#: eelf32btsmipn32_fbsd.c:1524 eelf32btsmipn32_fbsd.c:1593 eelf32cr16.c:1448
+#: eelf32cr16.c:1510 eelf32cr16c.c:1297 eelf32cr16c.c:1359 eelf32crx.c:1336
+#: eelf32crx.c:1398 eelf32ebmip.c:1524 eelf32ebmip.c:1586
+#: eelf32ebmipvxworks.c:1553 eelf32ebmipvxworks.c:1615 eelf32elmip.c:1524
+#: eelf32elmip.c:1586 eelf32elmipvxworks.c:1553 eelf32elmipvxworks.c:1615
+#: eelf32epiphany.c:1297 eelf32epiphany.c:1359 eelf32epiphany_4x4.c:1299
+#: eelf32epiphany_4x4.c:1361 eelf32frvfd.c:1297 eelf32frvfd.c:1359
+#: eelf32ip2k.c:1297 eelf32ip2k.c:1359 eelf32l4300.c:1524 eelf32l4300.c:1586
+#: eelf32lm32.c:1297 eelf32lm32.c:1359 eelf32lm32fd.c:1297 eelf32lm32fd.c:1359
+#: eelf32lmip.c:1524 eelf32lmip.c:1586 eelf32lppc.c:1513 eelf32lppc.c:1575
+#: eelf32lppclinux.c:1513 eelf32lppclinux.c:1575 eelf32lppcnto.c:1513
+#: eelf32lppcnto.c:1575 eelf32lppcsim.c:1513 eelf32lppcsim.c:1575
+#: eelf32lr5900.c:1524 eelf32lr5900.c:1586 eelf32lr5900n32.c:1524
+#: eelf32lr5900n32.c:1586 eelf32lriscv.c:1362 eelf32lriscv.c:1424
+#: eelf32lriscv_ilp32.c:1362 eelf32lriscv_ilp32.c:1424
+#: eelf32lriscv_ilp32f.c:1362 eelf32lriscv_ilp32f.c:1424 eelf32lsmip.c:1524
+#: eelf32lsmip.c:1586 eelf32ltsmip.c:1524 eelf32ltsmip.c:1586
+#: eelf32ltsmip_fbsd.c:1524 eelf32ltsmip_fbsd.c:1593 eelf32ltsmipn32.c:1524
+#: eelf32ltsmipn32.c:1586 eelf32ltsmipn32_fbsd.c:1524
+#: eelf32ltsmipn32_fbsd.c:1593 eelf32m32c.c:1308 eelf32m32c.c:1370
+#: eelf32mb_linux.c:1297 eelf32mb_linux.c:1359 eelf32mbel_linux.c:1297
+#: eelf32mbel_linux.c:1359 eelf32mcore.c:1297 eelf32mcore.c:1359
+#: eelf32mep.c:1297 eelf32mep.c:1359 eelf32metag.c:1572 eelf32metag.c:1634
+#: eelf32microblaze.c:1297 eelf32microblaze.c:1359 eelf32microblazeel.c:1297
+#: eelf32microblazeel.c:1359 eelf32mipswindiss.c:1524 eelf32mipswindiss.c:1586
+#: eelf32or1k.c:1297 eelf32or1k.c:1359 eelf32or1k_linux.c:1297
+#: eelf32or1k_linux.c:1359 eelf32ppc.c:1513 eelf32ppc.c:1575
+#: eelf32ppc_fbsd.c:1513 eelf32ppc_fbsd.c:1582 eelf32ppclinux.c:1513
+#: eelf32ppclinux.c:1575 eelf32ppcnto.c:1513 eelf32ppcnto.c:1575
+#: eelf32ppcsim.c:1513 eelf32ppcsim.c:1575 eelf32ppcvxworks.c:1487
+#: eelf32ppcvxworks.c:1549 eelf32ppcwindiss.c:1513 eelf32ppcwindiss.c:1575
+#: eelf32rl78.c:1297 eelf32rl78.c:1359 eelf32rx.c:1313 eelf32rx.c:1375
+#: eelf32tilegx.c:1297 eelf32tilegx.c:1359 eelf32tilegx_be.c:1297
+#: eelf32tilegx_be.c:1359 eelf32tilepro.c:1297 eelf32tilepro.c:1359
+#: eelf32vax.c:1297 eelf32vax.c:1359 eelf32visium.c:1297 eelf32visium.c:1359
+#: eelf32xc16x.c:1297 eelf32xc16x.c:1359 eelf32xc16xl.c:1297
+#: eelf32xc16xl.c:1359 eelf32xc16xs.c:1297 eelf32xc16xs.c:1359
+#: eelf32xstormy16.c:1308 eelf32xstormy16.c:1370 eelf32xtensa.c:3184
+#: eelf32xtensa.c:3246 eelf64_aix.c:1297 eelf64_aix.c:1359 eelf64_ia64.c:1321
+#: eelf64_ia64.c:1383 eelf64_ia64_fbsd.c:1321 eelf64_ia64_fbsd.c:1390
+#: eelf64_ia64_vms.c:251 eelf64_s390.c:1312 eelf64_s390.c:1374
+#: eelf64_sparc.c:1297 eelf64_sparc.c:1359 eelf64_sparc_fbsd.c:1297
+#: eelf64_sparc_fbsd.c:1366 eelf64_sparc_sol2.c:1428 eelf64_sparc_sol2.c:1490
+#: eelf64alpha.c:1380 eelf64alpha.c:1442 eelf64alpha_fbsd.c:1380
+#: eelf64alpha_fbsd.c:1449 eelf64alpha_nbsd.c:1380 eelf64alpha_nbsd.c:1442
+#: eelf64bmip.c:1542 eelf64bmip.c:1604 eelf64btsmip.c:1524 eelf64btsmip.c:1586
+#: eelf64btsmip_fbsd.c:1524 eelf64btsmip_fbsd.c:1593 eelf64hppa.c:1297
+#: eelf64hppa.c:1359 eelf64lppc.c:1959 eelf64lppc.c:2021 eelf64lriscv.c:1362
+#: eelf64lriscv.c:1424 eelf64lriscv_lp64.c:1362 eelf64lriscv_lp64.c:1424
+#: eelf64lriscv_lp64f.c:1362 eelf64lriscv_lp64f.c:1424 eelf64ltsmip.c:1524
+#: eelf64ltsmip.c:1586 eelf64ltsmip_fbsd.c:1524 eelf64ltsmip_fbsd.c:1593
+#: eelf64mmix.c:1408 eelf64mmix.c:1470 eelf64ppc.c:1959 eelf64ppc.c:2021
+#: eelf64ppc_fbsd.c:1959 eelf64ppc_fbsd.c:2028 eelf64rdos.c:1297
+#: eelf64rdos.c:1359 eelf64tilegx.c:1297 eelf64tilegx.c:1359
+#: eelf64tilegx_be.c:1297 eelf64tilegx_be.c:1359 eelf_i386.c:1629
+#: eelf_i386.c:1691 eelf_i386_be.c:1297 eelf_i386_be.c:1359
+#: eelf_i386_chaos.c:1297 eelf_i386_chaos.c:1359 eelf_i386_fbsd.c:1297
+#: eelf_i386_fbsd.c:1366 eelf_i386_ldso.c:1297 eelf_i386_ldso.c:1366
+#: eelf_i386_nacl.c:1297 eelf_i386_nacl.c:1359 eelf_i386_sol2.c:1428
+#: eelf_i386_sol2.c:1497 eelf_i386_vxworks.c:1326 eelf_i386_vxworks.c:1388
+#: eelf_iamcu.c:1297 eelf_iamcu.c:1359 eelf_k1om.c:1629 eelf_k1om.c:1691
+#: eelf_k1om_fbsd.c:1297 eelf_k1om_fbsd.c:1366 eelf_l1om.c:1629
+#: eelf_l1om.c:1691 eelf_l1om_fbsd.c:1297 eelf_l1om_fbsd.c:1366
+#: eelf_s390.c:1297 eelf_s390.c:1359 eelf_x86_64.c:1629 eelf_x86_64.c:1691
+#: eelf_x86_64_cloudabi.c:1297 eelf_x86_64_cloudabi.c:1359
+#: eelf_x86_64_fbsd.c:1297 eelf_x86_64_fbsd.c:1366 eelf_x86_64_nacl.c:1297
+#: eelf_x86_64_nacl.c:1359 eelf_x86_64_sol2.c:1428 eelf_x86_64_sol2.c:1490
+#: eh8300elf.c:1297 eh8300elf.c:1359 eh8300elf_linux.c:1297
+#: eh8300elf_linux.c:1359 eh8300helf.c:1297 eh8300helf.c:1359
+#: eh8300helf_linux.c:1297 eh8300helf_linux.c:1359 eh8300hnelf.c:1297
+#: eh8300hnelf.c:1359 eh8300self.c:1297 eh8300self.c:1359
+#: eh8300self_linux.c:1297 eh8300self_linux.c:1359 eh8300snelf.c:1297
+#: eh8300snelf.c:1359 eh8300sxelf.c:1297 eh8300sxelf.c:1359
+#: eh8300sxelf_linux.c:1297 eh8300sxelf_linux.c:1359 eh8300sxnelf.c:1297
+#: eh8300sxnelf.c:1359 ehppa64linux.c:1297 ehppa64linux.c:1359 ehppaelf.c:1604
+#: ehppaelf.c:1666 ehppalinux.c:1604 ehppalinux.c:1666 ehppanbsd.c:1604
+#: ehppanbsd.c:1666 ehppaobsd.c:1604 ehppaobsd.c:1666 ei386lynx.c:1297
+#: ei386lynx.c:1366 ei386moss.c:1297 ei386moss.c:1359 ei386nto.c:1297
+#: ei386nto.c:1359 em32relf.c:1297 em32relf.c:1359 em32relf_linux.c:1297
+#: em32relf_linux.c:1359 em32rlelf.c:1297 em32rlelf.c:1359
+#: em32rlelf_linux.c:1297 em32rlelf_linux.c:1359 em68hc11elf.c:1597
+#: em68hc11elf.c:1659 em68hc11elfb.c:1597 em68hc11elfb.c:1659
+#: em68hc12elf.c:1597 em68hc12elf.c:1659 em68hc12elfb.c:1597
+#: em68hc12elfb.c:1659 em68kelf.c:1447 em68kelf.c:1509 em68kelfnbsd.c:1447
+#: em68kelfnbsd.c:1509 em9s12zelf.c:1297 em9s12zelf.c:1359 emn10300.c:1297
+#: emn10300.c:1359 ends32belf.c:1404 ends32belf.c:1466 ends32belf16m.c:1404
+#: ends32belf16m.c:1466 ends32belf_linux.c:1404 ends32belf_linux.c:1466
+#: ends32elf.c:1404 ends32elf.c:1466 ends32elf16m.c:1404 ends32elf16m.c:1466
+#: ends32elf_linux.c:1404 ends32elf_linux.c:1466 enios2elf.c:1590
+#: enios2elf.c:1652 enios2linux.c:1590 enios2linux.c:1652 eppclynx.c:1513
+#: eppclynx.c:1582 eppcmacos.c:830 epruelf.c:1317 epruelf.c:1379
+#: escore3_elf.c:1317 escore3_elf.c:1379 escore7_elf.c:1317 escore7_elf.c:1379
+#: eshelf.c:1297 eshelf.c:1359 eshelf_fd.c:1297 eshelf_fd.c:1359
+#: eshelf_linux.c:1297 eshelf_linux.c:1359 eshelf_nbsd.c:1297
+#: eshelf_nbsd.c:1359 eshelf_nto.c:1297 eshelf_nto.c:1359
+#: eshelf_uclinux.c:1297 eshelf_uclinux.c:1359 eshelf_vxworks.c:1326
+#: eshelf_vxworks.c:1388 eshlelf.c:1297 eshlelf.c:1359 eshlelf_fd.c:1297
+#: eshlelf_fd.c:1359 eshlelf_linux.c:1297 eshlelf_linux.c:1359
+#: eshlelf_nbsd.c:1297 eshlelf_nbsd.c:1359 eshlelf_nto.c:1297
+#: eshlelf_nto.c:1359 eshlelf_vxworks.c:1326 eshlelf_vxworks.c:1388
+#: ev850.c:1343 ev850.c:1405 ev850_rh850.c:1343 ev850_rh850.c:1405
 msgid "%F%P: failed to set dynamic section sizes: %E\n"
 msgstr "%F%P : impossible de fixer les tailles des sections dynamiques : %E\n"
 
-#: eaarch64cloudabi.c:1651 eaarch64cloudabib.c:1651 eaarch64elf.c:1651
-#: eaarch64elf32.c:1651 eaarch64elf32b.c:1651 eaarch64elfb.c:1651
-#: eaarch64fbsd.c:1651 eaarch64fbsdb.c:1651 eaarch64linux.c:1658
-#: eaarch64linux32.c:1658 eaarch64linux32b.c:1658 eaarch64linuxb.c:1658
-#: earcelf.c:1336 earcelf_prof.c:1336 earclinux.c:1338 earclinux_nps.c:1338
-#: earclinux_prof.c:1338 earcv2elf.c:1336 earcv2elfx.c:1336 earmelf.c:1871
-#: earmelf_fbsd.c:1878 earmelf_fuchsia.c:1871 earmelf_linux.c:1871
-#: earmelf_linux_eabi.c:1871 earmelf_linux_fdpiceabi.c:1871
-#: earmelf_nacl.c:1871 earmelf_nbsd.c:1871 earmelf_phoenix.c:1871
-#: earmelf_vxworks.c:1901 earmelfb.c:1871 earmelfb_fbsd.c:1878
-#: earmelfb_fuchsia.c:1871 earmelfb_linux.c:1871 earmelfb_linux_eabi.c:1871
-#: earmelfb_linux_fdpiceabi.c:1871 earmelfb_nacl.c:1871 earmelfb_nbsd.c:1871
-#: earmnto.c:1871 earmsymbian.c:1871 eavr1.c:1539 eavr2.c:1539 eavr25.c:1539
-#: eavr3.c:1539 eavr31.c:1539 eavr35.c:1539 eavr4.c:1539 eavr5.c:1539
-#: eavr51.c:1539 eavr6.c:1539 eavrtiny.c:1539 eavrxmega1.c:1539
-#: eavrxmega2.c:1539 eavrxmega3.c:1539 eavrxmega4.c:1539 eavrxmega5.c:1539
-#: eavrxmega6.c:1539 eavrxmega7.c:1539 ecriself.c:1336 ecrislinux.c:1336
-#: ed10velf.c:1336 eelf32_sparc.c:1336 eelf32_sparc_sol2.c:1467
-#: eelf32_sparc_vxworks.c:1365 eelf32_spu.c:1870 eelf32_tic6x_be.c:1474
-#: eelf32_tic6x_elf_be.c:1474 eelf32_tic6x_elf_le.c:1474
-#: eelf32_tic6x_le.c:1474 eelf32_tic6x_linux_be.c:1474
-#: eelf32_tic6x_linux_le.c:1474 eelf32_x86_64.c:1668 eelf32_x86_64_nacl.c:1336
-#: eelf32am33lin.c:1336 eelf32b4300.c:1562 eelf32bfin.c:1345
-#: eelf32bfinfd.c:1345 eelf32bmip.c:1562 eelf32bmipn32.c:1580
-#: eelf32bsmip.c:1580 eelf32btsmip.c:1562 eelf32btsmip_fbsd.c:1569
-#: eelf32btsmipn32.c:1562 eelf32btsmipn32_fbsd.c:1569 eelf32cr16.c:1487
-#: eelf32cr16c.c:1336 eelf32crx.c:1375 eelf32ebmip.c:1562
-#: eelf32ebmipvxworks.c:1591 eelf32elmip.c:1562 eelf32elmipvxworks.c:1591
-#: eelf32epiphany.c:1336 eelf32epiphany_4x4.c:1338 eelf32frvfd.c:1336
-#: eelf32ip2k.c:1336 eelf32l4300.c:1562 eelf32lm32.c:1336 eelf32lm32fd.c:1336
-#: eelf32lmip.c:1562 eelf32lppc.c:1539 eelf32lppclinux.c:1539
-#: eelf32lppcnto.c:1539 eelf32lppcsim.c:1539 eelf32lr5900.c:1562
-#: eelf32lr5900n32.c:1562 eelf32lriscv.c:1401 eelf32lriscv_ilp32.c:1401
-#: eelf32lriscv_ilp32f.c:1401 eelf32lsmip.c:1562 eelf32ltsmip.c:1562
-#: eelf32ltsmip_fbsd.c:1569 eelf32ltsmipn32.c:1562 eelf32ltsmipn32_fbsd.c:1569
-#: eelf32m32c.c:1347 eelf32mb_linux.c:1336 eelf32mbel_linux.c:1336
-#: eelf32mcore.c:1336 eelf32mep.c:1336 eelf32metag.c:1611
-#: eelf32microblaze.c:1336 eelf32microblazeel.c:1336 eelf32mipswindiss.c:1562
-#: eelf32or1k.c:1336 eelf32or1k_linux.c:1336 eelf32ppc.c:1539
-#: eelf32ppc_fbsd.c:1546 eelf32ppclinux.c:1539 eelf32ppcnto.c:1539
-#: eelf32ppcsim.c:1539 eelf32ppcvxworks.c:1513 eelf32ppcwindiss.c:1539
-#: eelf32rl78.c:1336 eelf32rx.c:1352 eelf32tilegx.c:1336
-#: eelf32tilegx_be.c:1336 eelf32tilepro.c:1336 eelf32vax.c:1336
-#: eelf32visium.c:1336 eelf32xc16x.c:1336 eelf32xc16xl.c:1336
-#: eelf32xc16xs.c:1336 eelf32xstormy16.c:1347 eelf32xtensa.c:3223
-#: eelf64_aix.c:1336 eelf64_ia64.c:1360 eelf64_ia64_fbsd.c:1367
-#: eelf64_s390.c:1351 eelf64_sparc.c:1336 eelf64_sparc_fbsd.c:1343
-#: eelf64_sparc_sol2.c:1467 eelf64alpha.c:1419 eelf64alpha_fbsd.c:1426
-#: eelf64alpha_nbsd.c:1419 eelf64bmip.c:1580 eelf64btsmip.c:1562
-#: eelf64btsmip_fbsd.c:1569 eelf64hppa.c:1336 eelf64lppc.c:1986
-#: eelf64lriscv.c:1401 eelf64lriscv_lp64.c:1401 eelf64lriscv_lp64f.c:1401
-#: eelf64ltsmip.c:1562 eelf64ltsmip_fbsd.c:1569 eelf64mmix.c:1447
-#: eelf64ppc.c:1986 eelf64ppc_fbsd.c:1993 eelf64rdos.c:1336
-#: eelf64tilegx.c:1336 eelf64tilegx_be.c:1336 eelf_i386.c:1668
-#: eelf_i386_be.c:1336 eelf_i386_chaos.c:1336 eelf_i386_fbsd.c:1343
-#: eelf_i386_ldso.c:1343 eelf_i386_nacl.c:1336 eelf_i386_sol2.c:1474
-#: eelf_i386_vxworks.c:1365 eelf_iamcu.c:1336 eelf_k1om.c:1668
-#: eelf_k1om_fbsd.c:1343 eelf_l1om.c:1668 eelf_l1om_fbsd.c:1343
-#: eelf_s390.c:1336 eelf_x86_64.c:1668 eelf_x86_64_cloudabi.c:1336
-#: eelf_x86_64_fbsd.c:1343 eelf_x86_64_nacl.c:1336 eelf_x86_64_sol2.c:1467
-#: eh8300elf.c:1336 eh8300elf_linux.c:1336 eh8300helf.c:1336
-#: eh8300helf_linux.c:1336 eh8300hnelf.c:1336 eh8300self.c:1336
-#: eh8300self_linux.c:1336 eh8300snelf.c:1336 eh8300sxelf.c:1336
-#: eh8300sxelf_linux.c:1336 eh8300sxnelf.c:1336 ehppa64linux.c:1336
-#: ehppaelf.c:1643 ehppalinux.c:1643 ehppanbsd.c:1643 ehppaobsd.c:1643
-#: ei386lynx.c:1343 ei386moss.c:1336 ei386nto.c:1336 em32relf.c:1336
-#: em32relf_linux.c:1336 em32rlelf.c:1336 em32rlelf_linux.c:1336
-#: em68hc11elf.c:1636 em68hc11elfb.c:1636 em68hc12elf.c:1636
-#: em68hc12elfb.c:1636 em68kelf.c:1486 em68kelfnbsd.c:1486 em9s12zelf.c:1336
-#: emn10300.c:1336 ends32belf.c:1513 ends32belf16m.c:1513
-#: ends32belf_linux.c:1513 ends32elf.c:1513 ends32elf16m.c:1513
-#: ends32elf_linux.c:1513 enios2elf.c:1629 enios2linux.c:1629 eppclynx.c:1546
-#: epruelf.c:1356 escore3_elf.c:1356 escore7_elf.c:1356 eshelf.c:1336
-#: eshelf_fd.c:1336 eshelf_linux.c:1336 eshelf_nbsd.c:1336 eshelf_nto.c:1336
-#: eshelf_uclinux.c:1336 eshelf_vxworks.c:1365 eshlelf.c:1336
-#: eshlelf_fd.c:1336 eshlelf_linux.c:1336 eshlelf_nbsd.c:1336
-#: eshlelf_nto.c:1336 eshlelf_vxworks.c:1365 ev850.c:1382 ev850_rh850.c:1382
-#: exgateelf.c:1336
+#: eaarch64cloudabi.c:1646 eaarch64cloudabib.c:1646 eaarch64elf.c:1646
+#: eaarch64elf32.c:1646 eaarch64elf32b.c:1646 eaarch64elfb.c:1646
+#: eaarch64fbsd.c:1646 eaarch64fbsdb.c:1646 eaarch64linux.c:1653
+#: eaarch64linux32.c:1653 eaarch64linux32b.c:1653 eaarch64linuxb.c:1653
+#: earcelf.c:1331 earcelf_prof.c:1331 earclinux.c:1333 earclinux_nps.c:1333
+#: earclinux_prof.c:1333 earcv2elf.c:1331 earcv2elfx.c:1331 earmelf.c:1866
+#: earmelf_fbsd.c:1873 earmelf_fuchsia.c:1866 earmelf_linux.c:1866
+#: earmelf_linux_eabi.c:1866 earmelf_linux_fdpiceabi.c:1866
+#: earmelf_nacl.c:1866 earmelf_nbsd.c:1866 earmelf_phoenix.c:1866
+#: earmelf_vxworks.c:1896 earmelfb.c:1866 earmelfb_fbsd.c:1873
+#: earmelfb_fuchsia.c:1866 earmelfb_linux.c:1866 earmelfb_linux_eabi.c:1866
+#: earmelfb_linux_fdpiceabi.c:1866 earmelfb_nacl.c:1866 earmelfb_nbsd.c:1866
+#: earmnto.c:1866 earmsymbian.c:1866 eavr1.c:1534 eavr2.c:1534 eavr25.c:1534
+#: eavr3.c:1534 eavr31.c:1534 eavr35.c:1534 eavr4.c:1534 eavr5.c:1534
+#: eavr51.c:1534 eavr6.c:1534 eavrtiny.c:1534 eavrxmega1.c:1534
+#: eavrxmega2.c:1534 eavrxmega3.c:1534 eavrxmega4.c:1534 eavrxmega5.c:1534
+#: eavrxmega6.c:1534 eavrxmega7.c:1534 ecriself.c:1331 ecrislinux.c:1331
+#: ecskyelf.c:1588 ecskyelf_linux.c:1588 ed10velf.c:1331 eelf32_sparc.c:1331
+#: eelf32_sparc_sol2.c:1462 eelf32_sparc_vxworks.c:1360 eelf32_spu.c:2001
+#: eelf32_tic6x_be.c:1469 eelf32_tic6x_elf_be.c:1469
+#: eelf32_tic6x_elf_le.c:1469 eelf32_tic6x_le.c:1469
+#: eelf32_tic6x_linux_be.c:1469 eelf32_tic6x_linux_le.c:1469
+#: eelf32_x86_64.c:1663 eelf32_x86_64_nacl.c:1331 eelf32am33lin.c:1331
+#: eelf32b4300.c:1558 eelf32bfin.c:1340 eelf32bfinfd.c:1340 eelf32bmip.c:1558
+#: eelf32bmipn32.c:1576 eelf32bsmip.c:1576 eelf32btsmip.c:1558
+#: eelf32btsmip_fbsd.c:1565 eelf32btsmipn32.c:1558 eelf32btsmipn32_fbsd.c:1565
+#: eelf32cr16.c:1482 eelf32cr16c.c:1331 eelf32crx.c:1370 eelf32ebmip.c:1558
+#: eelf32ebmipvxworks.c:1587 eelf32elmip.c:1558 eelf32elmipvxworks.c:1587
+#: eelf32epiphany.c:1331 eelf32epiphany_4x4.c:1333 eelf32frvfd.c:1331
+#: eelf32ip2k.c:1331 eelf32l4300.c:1558 eelf32lm32.c:1331 eelf32lm32fd.c:1331
+#: eelf32lmip.c:1558 eelf32lppc.c:1547 eelf32lppclinux.c:1547
+#: eelf32lppcnto.c:1547 eelf32lppcsim.c:1547 eelf32lr5900.c:1558
+#: eelf32lr5900n32.c:1558 eelf32lriscv.c:1396 eelf32lriscv_ilp32.c:1396
+#: eelf32lriscv_ilp32f.c:1396 eelf32lsmip.c:1558 eelf32ltsmip.c:1558
+#: eelf32ltsmip_fbsd.c:1565 eelf32ltsmipn32.c:1558 eelf32ltsmipn32_fbsd.c:1565
+#: eelf32m32c.c:1342 eelf32mb_linux.c:1331 eelf32mbel_linux.c:1331
+#: eelf32mcore.c:1331 eelf32mep.c:1331 eelf32metag.c:1606
+#: eelf32microblaze.c:1331 eelf32microblazeel.c:1331 eelf32mipswindiss.c:1558
+#: eelf32or1k.c:1331 eelf32or1k_linux.c:1331 eelf32ppc.c:1547
+#: eelf32ppc_fbsd.c:1554 eelf32ppclinux.c:1547 eelf32ppcnto.c:1547
+#: eelf32ppcsim.c:1547 eelf32ppcvxworks.c:1521 eelf32ppcwindiss.c:1547
+#: eelf32rl78.c:1331 eelf32rx.c:1347 eelf32tilegx.c:1331
+#: eelf32tilegx_be.c:1331 eelf32tilepro.c:1331 eelf32vax.c:1331
+#: eelf32visium.c:1331 eelf32xc16x.c:1331 eelf32xc16xl.c:1331
+#: eelf32xc16xs.c:1331 eelf32xstormy16.c:1342 eelf32xtensa.c:3218
+#: eelf64_aix.c:1331 eelf64_ia64.c:1355 eelf64_ia64_fbsd.c:1362
+#: eelf64_s390.c:1346 eelf64_sparc.c:1331 eelf64_sparc_fbsd.c:1338
+#: eelf64_sparc_sol2.c:1462 eelf64alpha.c:1414 eelf64alpha_fbsd.c:1421
+#: eelf64alpha_nbsd.c:1414 eelf64bmip.c:1576 eelf64btsmip.c:1558
+#: eelf64btsmip_fbsd.c:1565 eelf64hppa.c:1331 eelf64lppc.c:1993
+#: eelf64lriscv.c:1396 eelf64lriscv_lp64.c:1396 eelf64lriscv_lp64f.c:1396
+#: eelf64ltsmip.c:1558 eelf64ltsmip_fbsd.c:1565 eelf64mmix.c:1442
+#: eelf64ppc.c:1993 eelf64ppc_fbsd.c:2000 eelf64rdos.c:1331
+#: eelf64tilegx.c:1331 eelf64tilegx_be.c:1331 eelf_i386.c:1663
+#: eelf_i386_be.c:1331 eelf_i386_chaos.c:1331 eelf_i386_fbsd.c:1338
+#: eelf_i386_ldso.c:1338 eelf_i386_nacl.c:1331 eelf_i386_sol2.c:1469
+#: eelf_i386_vxworks.c:1360 eelf_iamcu.c:1331 eelf_k1om.c:1663
+#: eelf_k1om_fbsd.c:1338 eelf_l1om.c:1663 eelf_l1om_fbsd.c:1338
+#: eelf_s390.c:1331 eelf_x86_64.c:1663 eelf_x86_64_cloudabi.c:1331
+#: eelf_x86_64_fbsd.c:1338 eelf_x86_64_nacl.c:1331 eelf_x86_64_sol2.c:1462
+#: eh8300elf.c:1331 eh8300elf_linux.c:1331 eh8300helf.c:1331
+#: eh8300helf_linux.c:1331 eh8300hnelf.c:1331 eh8300self.c:1331
+#: eh8300self_linux.c:1331 eh8300snelf.c:1331 eh8300sxelf.c:1331
+#: eh8300sxelf_linux.c:1331 eh8300sxnelf.c:1331 ehppa64linux.c:1331
+#: ehppaelf.c:1638 ehppalinux.c:1638 ehppanbsd.c:1638 ehppaobsd.c:1638
+#: ei386lynx.c:1338 ei386moss.c:1331 ei386nto.c:1331 em32relf.c:1331
+#: em32relf_linux.c:1331 em32rlelf.c:1331 em32rlelf_linux.c:1331
+#: em68hc11elf.c:1631 em68hc11elfb.c:1631 em68hc12elf.c:1631
+#: em68hc12elfb.c:1631 em68kelf.c:1481 em68kelfnbsd.c:1481 em9s12zelf.c:1331
+#: emn10300.c:1331 ends32belf.c:1438 ends32belf16m.c:1438
+#: ends32belf_linux.c:1438 ends32elf.c:1438 ends32elf16m.c:1438
+#: ends32elf_linux.c:1438 enios2elf.c:1624 enios2linux.c:1624 eppclynx.c:1554
+#: epruelf.c:1351 escore3_elf.c:1351 escore7_elf.c:1351 eshelf.c:1331
+#: eshelf_fd.c:1331 eshelf_linux.c:1331 eshelf_nbsd.c:1331 eshelf_nto.c:1331
+#: eshelf_uclinux.c:1331 eshelf_vxworks.c:1360 eshlelf.c:1331
+#: eshlelf_fd.c:1331 eshlelf_linux.c:1331 eshlelf_nbsd.c:1331
+#: eshlelf_nto.c:1331 eshlelf_vxworks.c:1360 ev850.c:1377 ev850_rh850.c:1377
 msgid "%F%P: %pB: can't read contents of section .gnu.warning: %E\n"
 msgstr "%F%P : %pB : impossible de lire les contenus de la section .gnu.warning : %E\n"
 
-#: eaarch64cloudabi.c:2314 eaarch64cloudabib.c:2314 eaarch64elf.c:2314
-#: eaarch64elf32.c:2314 eaarch64elf32b.c:2314 eaarch64elfb.c:2314
-#: eaarch64fbsd.c:2314 eaarch64fbsdb.c:2314 eaarch64linux.c:2321
-#: eaarch64linux32.c:2321 eaarch64linux32b.c:2321 eaarch64linuxb.c:2321
-#: earcelf.c:1936 earcelf_prof.c:1920 earclinux.c:2002 earclinux_nps.c:2002
-#: earclinux_prof.c:1947 earcv2elf.c:1920 earcv2elfx.c:1920 earmelf.c:2564
-#: earmelf_fbsd.c:2571 earmelf_fuchsia.c:2564 earmelf_linux.c:2564
-#: earmelf_linux_eabi.c:2564 earmelf_linux_fdpiceabi.c:2564
-#: earmelf_nacl.c:2564 earmelf_nbsd.c:2564 earmelf_phoenix.c:2564
-#: earmelf_vxworks.c:2600 earmelfb.c:2564 earmelfb_fbsd.c:2571
-#: earmelfb_fuchsia.c:2564 earmelfb_linux.c:2564 earmelfb_linux_eabi.c:2564
-#: earmelfb_linux_fdpiceabi.c:2564 earmelfb_nacl.c:2564 earmelfb_nbsd.c:2564
-#: earmnto.c:2539 earmsymbian.c:2564 eavr1.c:2143 eavr2.c:2143 eavr25.c:2143
-#: eavr3.c:2143 eavr31.c:2143 eavr35.c:2143 eavr4.c:2143 eavr5.c:2143
-#: eavr51.c:2143 eavr6.c:2143 eavrtiny.c:2143 eavrxmega1.c:2143
-#: eavrxmega2.c:2143 eavrxmega3.c:2143 eavrxmega4.c:2143 eavrxmega5.c:2143
-#: eavrxmega6.c:2143 eavrxmega7.c:2143 ecriself.c:1935 ecrislinux.c:1966
-#: ed10velf.c:1920 eelf32_sparc.c:1991 eelf32_sparc_sol2.c:2122
-#: eelf32_sparc_vxworks.c:2028 eelf32_spu.c:2517 eelf32_tic6x_be.c:2103
-#: eelf32_tic6x_elf_be.c:2103 eelf32_tic6x_elf_le.c:2103
-#: eelf32_tic6x_le.c:2103 eelf32_tic6x_linux_be.c:2103
-#: eelf32_tic6x_linux_le.c:2103 eelf32_x86_64.c:7281 eelf32_x86_64_nacl.c:2001
-#: eelf32am33lin.c:1966 eelf32b4300.c:2232 eelf32bfin.c:1983
-#: eelf32bfinfd.c:2008 eelf32bmip.c:2232 eelf32bmipn32.c:2250
-#: eelf32bsmip.c:2250 eelf32btsmip.c:2232 eelf32btsmip_fbsd.c:2239
-#: eelf32btsmipn32.c:2232 eelf32btsmipn32_fbsd.c:2239 eelf32cr16.c:2071
-#: eelf32cr16c.c:1920 eelf32crx.c:1959 eelf32ebmip.c:2232
-#: eelf32ebmipvxworks.c:2267 eelf32elmip.c:2232 eelf32elmipvxworks.c:2267
-#: eelf32epiphany.c:1935 eelf32epiphany_4x4.c:1922 eelf32frvfd.c:1991
-#: eelf32ip2k.c:1935 eelf32l4300.c:2232 eelf32lm32.c:1935 eelf32lm32fd.c:1991
-#: eelf32lmip.c:2232 eelf32lppc.c:2237 eelf32lppclinux.c:2237
-#: eelf32lppcnto.c:2237 eelf32lppcsim.c:2237 eelf32lr5900.c:2201
-#: eelf32lr5900n32.c:2201 eelf32lriscv.c:2045 eelf32lriscv_ilp32.c:2045
-#: eelf32lriscv_ilp32f.c:2045 eelf32lsmip.c:2232 eelf32ltsmip.c:2232
-#: eelf32ltsmip_fbsd.c:2239 eelf32ltsmipn32.c:2232 eelf32ltsmipn32_fbsd.c:2239
-#: eelf32m32c.c:1946 eelf32mb_linux.c:1991 eelf32mbel_linux.c:1991
-#: eelf32mcore.c:1941 eelf32mep.c:1920 eelf32metag.c:2261
-#: eelf32microblaze.c:1920 eelf32microblazeel.c:1920 eelf32mipswindiss.c:2176
-#: eelf32or1k.c:1935 eelf32or1k_linux.c:1991 eelf32ppc.c:2237
-#: eelf32ppc_fbsd.c:2244 eelf32ppclinux.c:2237 eelf32ppcnto.c:2237
-#: eelf32ppcsim.c:2237 eelf32ppcvxworks.c:2211 eelf32ppcwindiss.c:2237
-#: eelf32rl78.c:1935 eelf32rx.c:1963 eelf32tilegx.c:1991
-#: eelf32tilegx_be.c:1991 eelf32tilepro.c:1991 eelf32vax.c:1966
-#: eelf32visium.c:1920 eelf32xc16x.c:1920 eelf32xc16xl.c:1920
-#: eelf32xc16xs.c:1920 eelf32xstormy16.c:1931 eelf32xtensa.c:3890
-#: eelf64_aix.c:1966 eelf64_ia64.c:2021 eelf64_ia64_fbsd.c:2028
-#: eelf64_s390.c:2012 eelf64_sparc.c:1991 eelf64_sparc_fbsd.c:1998
-#: eelf64_sparc_sol2.c:2122 eelf64alpha.c:2084 eelf64alpha_fbsd.c:2091
-#: eelf64alpha_nbsd.c:2084 eelf64bmip.c:2250 eelf64btsmip.c:2232
-#: eelf64btsmip_fbsd.c:2239 eelf64hppa.c:1936 eelf64lppc.c:2693
-#: eelf64lriscv.c:2045 eelf64lriscv_lp64.c:2045 eelf64lriscv_lp64f.c:2045
-#: eelf64ltsmip.c:2232 eelf64ltsmip_fbsd.c:2239 eelf64mmix.c:5773
-#: eelf64ppc.c:2693 eelf64ppc_fbsd.c:2700 eelf64rdos.c:2001
-#: eelf64tilegx.c:1991 eelf64tilegx_be.c:1991 eelf_i386.c:6899
-#: eelf_i386_be.c:1966 eelf_i386_chaos.c:1946 eelf_i386_fbsd.c:2008
-#: eelf_i386_ldso.c:1983 eelf_i386_nacl.c:2001 eelf_i386_sol2.c:2139
-#: eelf_i386_vxworks.c:2028 eelf_iamcu.c:6545 eelf_k1om.c:7237
-#: eelf_k1om_fbsd.c:6892 eelf_l1om.c:7237 eelf_l1om_fbsd.c:6892
-#: eelf_s390.c:1991 eelf_x86_64.c:7281 eelf_x86_64_cloudabi.c:2001
-#: eelf_x86_64_fbsd.c:2008 eelf_x86_64_nacl.c:2001 eelf_x86_64_sol2.c:2132
-#: eh8300elf.c:1935 eh8300elf_linux.c:1935 eh8300helf.c:1935
-#: eh8300helf_linux.c:1935 eh8300hnelf.c:1935 eh8300self.c:1935
-#: eh8300self_linux.c:1935 eh8300snelf.c:1935 eh8300sxelf.c:1935
-#: eh8300sxelf_linux.c:1935 eh8300sxnelf.c:1935 ehppa64linux.c:1966
-#: ehppaelf.c:2224 ehppalinux.c:2295 ehppanbsd.c:2295 ehppaobsd.c:2295
-#: ei386lynx.c:1973 ei386moss.c:1966 ei386nto.c:1966 em32relf.c:1935
-#: em32relf_linux.c:1991 em32rlelf.c:1935 em32rlelf_linux.c:1991
-#: em68hc11elf.c:2228 em68hc11elfb.c:2228 em68hc12elf.c:2228
-#: em68hc12elfb.c:2228 em68kelf.c:2147 em68kelfnbsd.c:2147 em9s12zelf.c:1920
-#: emn10300.c:1966 ends32belf.c:2155 ends32belf16m.c:2155
-#: ends32belf_linux.c:2178 ends32elf.c:2155 ends32elf16m.c:2155
-#: ends32elf_linux.c:2178 enios2elf.c:2242 enios2linux.c:2273 eppclynx.c:2244
-#: epruelf.c:1940 escore3_elf.c:1986 escore7_elf.c:1986 eshelf.c:1966
-#: eshelf_fd.c:1991 eshelf_linux.c:1991 eshelf_nbsd.c:1966 eshelf_nto.c:1966
-#: eshelf_uclinux.c:1966 eshelf_vxworks.c:2003 eshlelf.c:1966
-#: eshlelf_fd.c:1991 eshlelf_linux.c:1991 eshlelf_nbsd.c:1966
-#: eshlelf_nto.c:1966 eshlelf_vxworks.c:2003 ev850.c:1966 ev850_rh850.c:1966
-#: exgateelf.c:1920
+#: eaarch64cloudabi.c:2315 eaarch64cloudabib.c:2315 eaarch64elf.c:2315
+#: eaarch64elf32.c:2315 eaarch64elf32b.c:2315 eaarch64elfb.c:2315
+#: eaarch64fbsd.c:2315 eaarch64fbsdb.c:2315 eaarch64linux.c:2322
+#: eaarch64linux32.c:2322 eaarch64linux32b.c:2322 eaarch64linuxb.c:2322
+#: earcelf.c:1937 earcelf_prof.c:1921 earclinux.c:2003 earclinux_nps.c:2003
+#: earclinux_prof.c:1948 earcv2elf.c:1921 earcv2elfx.c:1921 earmelf.c:2565
+#: earmelf_fbsd.c:2572 earmelf_fuchsia.c:2565 earmelf_linux.c:2565
+#: earmelf_linux_eabi.c:2565 earmelf_linux_fdpiceabi.c:2565
+#: earmelf_nacl.c:2565 earmelf_nbsd.c:2565 earmelf_phoenix.c:2565
+#: earmelf_vxworks.c:2601 earmelfb.c:2565 earmelfb_fbsd.c:2572
+#: earmelfb_fuchsia.c:2565 earmelfb_linux.c:2565 earmelfb_linux_eabi.c:2565
+#: earmelfb_linux_fdpiceabi.c:2565 earmelfb_nacl.c:2565 earmelfb_nbsd.c:2565
+#: earmnto.c:2540 earmsymbian.c:2565 eavr1.c:2144 eavr2.c:2144 eavr25.c:2144
+#: eavr3.c:2144 eavr31.c:2144 eavr35.c:2144 eavr4.c:2144 eavr5.c:2144
+#: eavr51.c:2144 eavr6.c:2144 eavrtiny.c:2144 eavrxmega1.c:2144
+#: eavrxmega2.c:2144 eavrxmega3.c:2144 eavrxmega4.c:2144 eavrxmega5.c:2144
+#: eavrxmega6.c:2144 eavrxmega7.c:2144 ecriself.c:1936 ecrislinux.c:1967
+#: ecskyelf.c:2192 ecskyelf_linux.c:2248 ed10velf.c:1921 eelf32_sparc.c:1992
+#: eelf32_sparc_sol2.c:2123 eelf32_sparc_vxworks.c:2029 eelf32_spu.c:2654
+#: eelf32_tic6x_be.c:2104 eelf32_tic6x_elf_be.c:2104
+#: eelf32_tic6x_elf_le.c:2104 eelf32_tic6x_le.c:2104
+#: eelf32_tic6x_linux_be.c:2104 eelf32_tic6x_linux_le.c:2104
+#: eelf32_x86_64.c:7229 eelf32_x86_64_nacl.c:2002 eelf32am33lin.c:1967
+#: eelf32b4300.c:2234 eelf32bfin.c:1984 eelf32bfinfd.c:2009 eelf32bmip.c:2234
+#: eelf32bmipn32.c:2252 eelf32bsmip.c:2252 eelf32btsmip.c:2234
+#: eelf32btsmip_fbsd.c:2241 eelf32btsmipn32.c:2234 eelf32btsmipn32_fbsd.c:2241
+#: eelf32cr16.c:2072 eelf32cr16c.c:1921 eelf32crx.c:1960 eelf32ebmip.c:2234
+#: eelf32ebmipvxworks.c:2269 eelf32elmip.c:2234 eelf32elmipvxworks.c:2269
+#: eelf32epiphany.c:1936 eelf32epiphany_4x4.c:1923 eelf32frvfd.c:1992
+#: eelf32ip2k.c:1936 eelf32l4300.c:2234 eelf32lm32.c:1936 eelf32lm32fd.c:1992
+#: eelf32lmip.c:2234 eelf32lppc.c:2251 eelf32lppclinux.c:2251
+#: eelf32lppcnto.c:2251 eelf32lppcsim.c:2251 eelf32lr5900.c:2203
+#: eelf32lr5900n32.c:2203 eelf32lriscv.c:2046 eelf32lriscv_ilp32.c:2046
+#: eelf32lriscv_ilp32f.c:2046 eelf32lsmip.c:2234 eelf32ltsmip.c:2234
+#: eelf32ltsmip_fbsd.c:2241 eelf32ltsmipn32.c:2234 eelf32ltsmipn32_fbsd.c:2241
+#: eelf32m32c.c:1947 eelf32mb_linux.c:1992 eelf32mbel_linux.c:1992
+#: eelf32mcore.c:1942 eelf32mep.c:1921 eelf32metag.c:2262
+#: eelf32microblaze.c:1921 eelf32microblazeel.c:1921 eelf32mipswindiss.c:2178
+#: eelf32or1k.c:1936 eelf32or1k_linux.c:1992 eelf32ppc.c:2251
+#: eelf32ppc_fbsd.c:2258 eelf32ppclinux.c:2251 eelf32ppcnto.c:2251
+#: eelf32ppcsim.c:2251 eelf32ppcvxworks.c:2225 eelf32ppcwindiss.c:2251
+#: eelf32rl78.c:1936 eelf32rx.c:1964 eelf32tilegx.c:1992
+#: eelf32tilegx_be.c:1992 eelf32tilepro.c:1992 eelf32vax.c:1967
+#: eelf32visium.c:1921 eelf32xc16x.c:1921 eelf32xc16xl.c:1921
+#: eelf32xc16xs.c:1921 eelf32xstormy16.c:1932 eelf32xtensa.c:3891
+#: eelf64_aix.c:1967 eelf64_ia64.c:2022 eelf64_ia64_fbsd.c:2029
+#: eelf64_s390.c:2062 eelf64_sparc.c:1992 eelf64_sparc_fbsd.c:1999
+#: eelf64_sparc_sol2.c:2123 eelf64alpha.c:2085 eelf64alpha_fbsd.c:2092
+#: eelf64alpha_nbsd.c:2085 eelf64bmip.c:2252 eelf64btsmip.c:2234
+#: eelf64btsmip_fbsd.c:2241 eelf64hppa.c:1937 eelf64lppc.c:2706
+#: eelf64lriscv.c:2046 eelf64lriscv_lp64.c:2046 eelf64lriscv_lp64f.c:2046
+#: eelf64ltsmip.c:2234 eelf64ltsmip_fbsd.c:2241 eelf64mmix.c:5730
+#: eelf64ppc.c:2706 eelf64ppc_fbsd.c:2713 eelf64rdos.c:2002
+#: eelf64tilegx.c:1992 eelf64tilegx_be.c:1992 eelf_i386.c:6851
+#: eelf_i386_be.c:1967 eelf_i386_chaos.c:1947 eelf_i386_fbsd.c:2009
+#: eelf_i386_ldso.c:1984 eelf_i386_nacl.c:2002 eelf_i386_sol2.c:2140
+#: eelf_i386_vxworks.c:2029 eelf_iamcu.c:6497 eelf_k1om.c:7185
+#: eelf_k1om_fbsd.c:6840 eelf_l1om.c:7185 eelf_l1om_fbsd.c:6840
+#: eelf_s390.c:1992 eelf_x86_64.c:7229 eelf_x86_64_cloudabi.c:2002
+#: eelf_x86_64_fbsd.c:2009 eelf_x86_64_nacl.c:2002 eelf_x86_64_sol2.c:2133
+#: eh8300elf.c:1936 eh8300elf_linux.c:1936 eh8300helf.c:1936
+#: eh8300helf_linux.c:1936 eh8300hnelf.c:1936 eh8300self.c:1936
+#: eh8300self_linux.c:1936 eh8300snelf.c:1936 eh8300sxelf.c:1936
+#: eh8300sxelf_linux.c:1936 eh8300sxnelf.c:1936 ehppa64linux.c:1967
+#: ehppaelf.c:2225 ehppalinux.c:2296 ehppanbsd.c:2296 ehppaobsd.c:2296
+#: ei386lynx.c:1974 ei386moss.c:1967 ei386nto.c:1967 em32relf.c:1936
+#: em32relf_linux.c:1992 em32rlelf.c:1936 em32rlelf_linux.c:1992
+#: em68hc11elf.c:2229 em68hc11elfb.c:2229 em68hc12elf.c:2229
+#: em68hc12elfb.c:2229 em68kelf.c:2148 em68kelfnbsd.c:2148 em9s12zelf.c:1921
+#: emn10300.c:1967 ends32belf.c:2056 ends32belf16m.c:2056
+#: ends32belf_linux.c:2079 ends32elf.c:2056 ends32elf16m.c:2056
+#: ends32elf_linux.c:2079 enios2elf.c:2243 enios2linux.c:2274 eppclynx.c:2258
+#: epruelf.c:1941 escore3_elf.c:1987 escore7_elf.c:1987 eshelf.c:1967
+#: eshelf_fd.c:1992 eshelf_linux.c:1992 eshelf_nbsd.c:1967 eshelf_nto.c:1967
+#: eshelf_uclinux.c:1967 eshelf_vxworks.c:2004 eshlelf.c:1967
+#: eshlelf_fd.c:1992 eshlelf_linux.c:1992 eshlelf_nbsd.c:1967
+#: eshlelf_nto.c:1967 eshlelf_vxworks.c:2004 ev850.c:1967 ev850_rh850.c:1967
 msgid "%F%P: invalid --compress-debug-sections option: `%s'\n"
 msgstr "%F%P : option --compress-debug-sections invalide : « %s »\n"
 
-#: eaarch64cloudabi.c:2365 eaarch64cloudabib.c:2365 eaarch64elf.c:2365
-#: eaarch64elf32.c:2365 eaarch64elf32b.c:2365 eaarch64elfb.c:2365
-#: eaarch64fbsd.c:2365 eaarch64fbsdb.c:2365 eaarch64linux.c:2372
-#: eaarch64linux32.c:2372 eaarch64linux32b.c:2372 eaarch64linuxb.c:2372
-#: earcelf.c:1987 earclinux.c:2053 earclinux_nps.c:2053 earclinux_prof.c:1998
-#: earmelf.c:2615 earmelf_fbsd.c:2622 earmelf_fuchsia.c:2615
-#: earmelf_linux.c:2615 earmelf_linux_eabi.c:2615
-#: earmelf_linux_fdpiceabi.c:2615 earmelf_nacl.c:2615 earmelf_nbsd.c:2615
-#: earmelf_phoenix.c:2615 earmelf_vxworks.c:2651 earmelfb.c:2615
-#: earmelfb_fbsd.c:2622 earmelfb_fuchsia.c:2615 earmelfb_linux.c:2615
-#: earmelfb_linux_eabi.c:2615 earmelfb_linux_fdpiceabi.c:2615
-#: earmelfb_nacl.c:2615 earmelfb_nbsd.c:2615 earmnto.c:2590 earmsymbian.c:2615
-#: ecrislinux.c:2017 eelf32_sparc.c:2042 eelf32_sparc_sol2.c:2173
-#: eelf32_sparc_vxworks.c:2079 eelf32_tic6x_be.c:2154
-#: eelf32_tic6x_elf_be.c:2154 eelf32_tic6x_elf_le.c:2154
-#: eelf32_tic6x_le.c:2154 eelf32_tic6x_linux_be.c:2154
-#: eelf32_tic6x_linux_le.c:2154 eelf32_x86_64.c:7332 eelf32_x86_64_nacl.c:2052
-#: eelf32am33lin.c:2017 eelf32b4300.c:2283 eelf32bfin.c:2034
-#: eelf32bfinfd.c:2059 eelf32bmip.c:2283 eelf32bmipn32.c:2301
-#: eelf32bsmip.c:2301 eelf32btsmip.c:2283 eelf32btsmip_fbsd.c:2290
-#: eelf32btsmipn32.c:2283 eelf32btsmipn32_fbsd.c:2290 eelf32ebmip.c:2283
-#: eelf32ebmipvxworks.c:2318 eelf32elmip.c:2283 eelf32elmipvxworks.c:2318
-#: eelf32frvfd.c:2042 eelf32l4300.c:2283 eelf32lm32fd.c:2042 eelf32lmip.c:2283
-#: eelf32lppc.c:2288 eelf32lppclinux.c:2288 eelf32lppcnto.c:2288
-#: eelf32lppcsim.c:2288 eelf32lriscv.c:2096 eelf32lriscv_ilp32.c:2096
-#: eelf32lriscv_ilp32f.c:2096 eelf32lsmip.c:2283 eelf32ltsmip.c:2283
-#: eelf32ltsmip_fbsd.c:2290 eelf32ltsmipn32.c:2283 eelf32ltsmipn32_fbsd.c:2290
-#: eelf32mb_linux.c:2042 eelf32mbel_linux.c:2042 eelf32metag.c:2312
-#: eelf32or1k_linux.c:2042 eelf32ppc.c:2288 eelf32ppc_fbsd.c:2295
-#: eelf32ppclinux.c:2288 eelf32ppcnto.c:2288 eelf32ppcsim.c:2288
-#: eelf32ppcvxworks.c:2262 eelf32ppcwindiss.c:2288 eelf32tilegx.c:2042
-#: eelf32tilegx_be.c:2042 eelf32tilepro.c:2042 eelf32vax.c:2017
-#: eelf32xtensa.c:3941 eelf64_aix.c:2017 eelf64_ia64.c:2072
-#: eelf64_ia64_fbsd.c:2079 eelf64_s390.c:2063 eelf64_sparc.c:2042
-#: eelf64_sparc_fbsd.c:2049 eelf64_sparc_sol2.c:2173 eelf64alpha.c:2135
-#: eelf64alpha_fbsd.c:2142 eelf64alpha_nbsd.c:2135 eelf64bmip.c:2301
-#: eelf64btsmip.c:2283 eelf64btsmip_fbsd.c:2290 eelf64hppa.c:1987
-#: eelf64lppc.c:2744 eelf64lriscv.c:2096 eelf64lriscv_lp64.c:2096
-#: eelf64lriscv_lp64f.c:2096 eelf64ltsmip.c:2283 eelf64ltsmip_fbsd.c:2290
-#: eelf64mmix.c:5824 eelf64ppc.c:2744 eelf64ppc_fbsd.c:2751 eelf64rdos.c:2052
-#: eelf64tilegx.c:2042 eelf64tilegx_be.c:2042 eelf_i386.c:6950
-#: eelf_i386_be.c:2017 eelf_i386_chaos.c:1997 eelf_i386_fbsd.c:2059
-#: eelf_i386_ldso.c:2034 eelf_i386_nacl.c:2052 eelf_i386_sol2.c:2190
-#: eelf_i386_vxworks.c:2079 eelf_iamcu.c:6596 eelf_k1om.c:7288
-#: eelf_k1om_fbsd.c:6943 eelf_l1om.c:7288 eelf_l1om_fbsd.c:6943
-#: eelf_s390.c:2042 eelf_x86_64.c:7332 eelf_x86_64_cloudabi.c:2052
-#: eelf_x86_64_fbsd.c:2059 eelf_x86_64_nacl.c:2052 eelf_x86_64_sol2.c:2183
-#: ehppa64linux.c:2017 ehppalinux.c:2346 ehppanbsd.c:2346 ehppaobsd.c:2346
-#: ei386lynx.c:2024 ei386moss.c:2017 ei386nto.c:2017 em32relf_linux.c:2042
-#: em32rlelf_linux.c:2042 em68kelf.c:2198 em68kelfnbsd.c:2198 emn10300.c:2017
-#: ends32belf_linux.c:2229 ends32elf_linux.c:2229 enios2linux.c:2324
-#: eppclynx.c:2295 escore3_elf.c:2037 escore7_elf.c:2037 eshelf.c:2017
-#: eshelf_fd.c:2042 eshelf_linux.c:2042 eshelf_nbsd.c:2017 eshelf_nto.c:2017
-#: eshelf_uclinux.c:2017 eshelf_vxworks.c:2054 eshlelf.c:2017
-#: eshlelf_fd.c:2042 eshlelf_linux.c:2042 eshlelf_nbsd.c:2017
-#: eshlelf_nto.c:2017 eshlelf_vxworks.c:2054
+#: eaarch64cloudabi.c:2366 eaarch64cloudabib.c:2366 eaarch64elf.c:2366
+#: eaarch64elf32.c:2366 eaarch64elf32b.c:2366 eaarch64elfb.c:2366
+#: eaarch64fbsd.c:2366 eaarch64fbsdb.c:2366 eaarch64linux.c:2373
+#: eaarch64linux32.c:2373 eaarch64linux32b.c:2373 eaarch64linuxb.c:2373
+#: earcelf.c:1988 earclinux.c:2054 earclinux_nps.c:2054 earclinux_prof.c:1999
+#: earmelf.c:2616 earmelf_fbsd.c:2623 earmelf_fuchsia.c:2616
+#: earmelf_linux.c:2616 earmelf_linux_eabi.c:2616
+#: earmelf_linux_fdpiceabi.c:2616 earmelf_nacl.c:2616 earmelf_nbsd.c:2616
+#: earmelf_phoenix.c:2616 earmelf_vxworks.c:2652 earmelfb.c:2616
+#: earmelfb_fbsd.c:2623 earmelfb_fuchsia.c:2616 earmelfb_linux.c:2616
+#: earmelfb_linux_eabi.c:2616 earmelfb_linux_fdpiceabi.c:2616
+#: earmelfb_nacl.c:2616 earmelfb_nbsd.c:2616 earmnto.c:2591 earmsymbian.c:2616
+#: ecrislinux.c:2018 ecskyelf_linux.c:2299 eelf32_sparc.c:2043
+#: eelf32_sparc_sol2.c:2174 eelf32_sparc_vxworks.c:2080 eelf32_tic6x_be.c:2155
+#: eelf32_tic6x_elf_be.c:2155 eelf32_tic6x_elf_le.c:2155
+#: eelf32_tic6x_le.c:2155 eelf32_tic6x_linux_be.c:2155
+#: eelf32_tic6x_linux_le.c:2155 eelf32_x86_64.c:7280 eelf32_x86_64_nacl.c:2053
+#: eelf32am33lin.c:2018 eelf32b4300.c:2285 eelf32bfin.c:2035
+#: eelf32bfinfd.c:2060 eelf32bmip.c:2285 eelf32bmipn32.c:2303
+#: eelf32bsmip.c:2303 eelf32btsmip.c:2285 eelf32btsmip_fbsd.c:2292
+#: eelf32btsmipn32.c:2285 eelf32btsmipn32_fbsd.c:2292 eelf32ebmip.c:2285
+#: eelf32ebmipvxworks.c:2320 eelf32elmip.c:2285 eelf32elmipvxworks.c:2320
+#: eelf32frvfd.c:2043 eelf32l4300.c:2285 eelf32lm32fd.c:2043 eelf32lmip.c:2285
+#: eelf32lppc.c:2302 eelf32lppclinux.c:2302 eelf32lppcnto.c:2302
+#: eelf32lppcsim.c:2302 eelf32lriscv.c:2097 eelf32lriscv_ilp32.c:2097
+#: eelf32lriscv_ilp32f.c:2097 eelf32lsmip.c:2285 eelf32ltsmip.c:2285
+#: eelf32ltsmip_fbsd.c:2292 eelf32ltsmipn32.c:2285 eelf32ltsmipn32_fbsd.c:2292
+#: eelf32mb_linux.c:2043 eelf32mbel_linux.c:2043 eelf32metag.c:2313
+#: eelf32or1k_linux.c:2043 eelf32ppc.c:2302 eelf32ppc_fbsd.c:2309
+#: eelf32ppclinux.c:2302 eelf32ppcnto.c:2302 eelf32ppcsim.c:2302
+#: eelf32ppcvxworks.c:2276 eelf32ppcwindiss.c:2302 eelf32tilegx.c:2043
+#: eelf32tilegx_be.c:2043 eelf32tilepro.c:2043 eelf32vax.c:2018
+#: eelf32xtensa.c:3942 eelf64_aix.c:2018 eelf64_ia64.c:2073
+#: eelf64_ia64_fbsd.c:2080 eelf64_s390.c:2113 eelf64_sparc.c:2043
+#: eelf64_sparc_fbsd.c:2050 eelf64_sparc_sol2.c:2174 eelf64alpha.c:2136
+#: eelf64alpha_fbsd.c:2143 eelf64alpha_nbsd.c:2136 eelf64bmip.c:2303
+#: eelf64btsmip.c:2285 eelf64btsmip_fbsd.c:2292 eelf64hppa.c:1988
+#: eelf64lppc.c:2757 eelf64lriscv.c:2097 eelf64lriscv_lp64.c:2097
+#: eelf64lriscv_lp64f.c:2097 eelf64ltsmip.c:2285 eelf64ltsmip_fbsd.c:2292
+#: eelf64mmix.c:5781 eelf64ppc.c:2757 eelf64ppc_fbsd.c:2764 eelf64rdos.c:2053
+#: eelf64tilegx.c:2043 eelf64tilegx_be.c:2043 eelf_i386.c:6902
+#: eelf_i386_be.c:2018 eelf_i386_chaos.c:1998 eelf_i386_fbsd.c:2060
+#: eelf_i386_ldso.c:2035 eelf_i386_nacl.c:2053 eelf_i386_sol2.c:2191
+#: eelf_i386_vxworks.c:2080 eelf_iamcu.c:6548 eelf_k1om.c:7236
+#: eelf_k1om_fbsd.c:6891 eelf_l1om.c:7236 eelf_l1om_fbsd.c:6891
+#: eelf_s390.c:2043 eelf_x86_64.c:7280 eelf_x86_64_cloudabi.c:2053
+#: eelf_x86_64_fbsd.c:2060 eelf_x86_64_nacl.c:2053 eelf_x86_64_sol2.c:2184
+#: ehppa64linux.c:2018 ehppalinux.c:2347 ehppanbsd.c:2347 ehppaobsd.c:2347
+#: ei386lynx.c:2025 ei386moss.c:2018 ei386nto.c:2018 em32relf_linux.c:2043
+#: em32rlelf_linux.c:2043 em68kelf.c:2199 em68kelfnbsd.c:2199 emn10300.c:2018
+#: ends32belf_linux.c:2130 ends32elf_linux.c:2130 enios2linux.c:2325
+#: eppclynx.c:2309 escore3_elf.c:2038 escore7_elf.c:2038 eshelf.c:2018
+#: eshelf_fd.c:2043 eshelf_linux.c:2043 eshelf_nbsd.c:2018 eshelf_nto.c:2018
+#: eshelf_uclinux.c:2018 eshelf_vxworks.c:2055 eshlelf.c:2018
+#: eshlelf_fd.c:2043 eshlelf_linux.c:2043 eshlelf_nbsd.c:2018
+#: eshlelf_nto.c:2018 eshlelf_vxworks.c:2055
 msgid "%F%P: invalid hash style `%s'\n"
 msgstr "%F%P : style de hachage « %s » invalide\n"
 
-#: eaarch64cloudabi.c:2381 eaarch64cloudabib.c:2381 eaarch64elf.c:2381
-#: eaarch64elf32.c:2381 eaarch64elf32b.c:2381 eaarch64elfb.c:2381
-#: eaarch64fbsd.c:2381 eaarch64fbsdb.c:2381 eaarch64linux.c:2388
-#: eaarch64linux32.c:2388 eaarch64linux32b.c:2388 eaarch64linuxb.c:2388
-#: earcelf.c:2003 earcelf_prof.c:1936 earclinux.c:2069 earclinux_nps.c:2069
-#: earclinux_prof.c:2014 earcv2elf.c:1936 earcv2elfx.c:1936 earmelf.c:2631
-#: earmelf_fbsd.c:2638 earmelf_fuchsia.c:2631 earmelf_linux.c:2631
-#: earmelf_linux_eabi.c:2631 earmelf_linux_fdpiceabi.c:2631
-#: earmelf_nacl.c:2631 earmelf_nbsd.c:2631 earmelf_phoenix.c:2631
-#: earmelf_vxworks.c:2667 earmelfb.c:2631 earmelfb_fbsd.c:2638
-#: earmelfb_fuchsia.c:2631 earmelfb_linux.c:2631 earmelfb_linux_eabi.c:2631
-#: earmelfb_linux_fdpiceabi.c:2631 earmelfb_nacl.c:2631 earmelfb_nbsd.c:2631
-#: earmnto.c:2606 earmsymbian.c:2631 eavr1.c:2159 eavr2.c:2159 eavr25.c:2159
-#: eavr3.c:2159 eavr31.c:2159 eavr35.c:2159 eavr4.c:2159 eavr5.c:2159
-#: eavr51.c:2159 eavr6.c:2159 eavrtiny.c:2159 eavrxmega1.c:2159
-#: eavrxmega2.c:2159 eavrxmega3.c:2159 eavrxmega4.c:2159 eavrxmega5.c:2159
-#: eavrxmega6.c:2159 eavrxmega7.c:2159 ecriself.c:1951 ecrislinux.c:2033
-#: ed10velf.c:1936 eelf32_sparc.c:2058 eelf32_sparc_sol2.c:2189
-#: eelf32_sparc_vxworks.c:2095 eelf32_spu.c:2533 eelf32_tic6x_be.c:2170
-#: eelf32_tic6x_elf_be.c:2170 eelf32_tic6x_elf_le.c:2170
-#: eelf32_tic6x_le.c:2170 eelf32_tic6x_linux_be.c:2170
-#: eelf32_tic6x_linux_le.c:2170 eelf32_x86_64.c:7348 eelf32_x86_64_nacl.c:2068
-#: eelf32am33lin.c:2033 eelf32b4300.c:2299 eelf32bfin.c:2050
-#: eelf32bfinfd.c:2075 eelf32bmip.c:2299 eelf32bmipn32.c:2317
-#: eelf32bsmip.c:2317 eelf32btsmip.c:2299 eelf32btsmip_fbsd.c:2306
-#: eelf32btsmipn32.c:2299 eelf32btsmipn32_fbsd.c:2306 eelf32cr16.c:2087
-#: eelf32cr16c.c:1936 eelf32crx.c:1975 eelf32ebmip.c:2299
-#: eelf32ebmipvxworks.c:2334 eelf32elmip.c:2299 eelf32elmipvxworks.c:2334
-#: eelf32epiphany.c:1951 eelf32epiphany_4x4.c:1938 eelf32frvfd.c:2058
-#: eelf32ip2k.c:1951 eelf32l4300.c:2299 eelf32lm32.c:1951 eelf32lm32fd.c:2058
-#: eelf32lmip.c:2299 eelf32lppc.c:2304 eelf32lppclinux.c:2304
-#: eelf32lppcnto.c:2304 eelf32lppcsim.c:2304 eelf32lr5900.c:2217
-#: eelf32lr5900n32.c:2217 eelf32lriscv.c:2112 eelf32lriscv_ilp32.c:2112
-#: eelf32lriscv_ilp32f.c:2112 eelf32lsmip.c:2299 eelf32ltsmip.c:2299
-#: eelf32ltsmip_fbsd.c:2306 eelf32ltsmipn32.c:2299 eelf32ltsmipn32_fbsd.c:2306
-#: eelf32m32c.c:1962 eelf32mb_linux.c:2058 eelf32mbel_linux.c:2058
-#: eelf32mcore.c:1957 eelf32mep.c:1936 eelf32metag.c:2328
-#: eelf32microblaze.c:1936 eelf32microblazeel.c:1936 eelf32mipswindiss.c:2192
-#: eelf32or1k.c:1951 eelf32or1k_linux.c:2058 eelf32ppc.c:2304
-#: eelf32ppc_fbsd.c:2311 eelf32ppclinux.c:2304 eelf32ppcnto.c:2304
-#: eelf32ppcsim.c:2304 eelf32ppcvxworks.c:2278 eelf32ppcwindiss.c:2304
-#: eelf32rl78.c:1951 eelf32rx.c:1979 eelf32tilegx.c:2058
-#: eelf32tilegx_be.c:2058 eelf32tilepro.c:2058 eelf32vax.c:2033
-#: eelf32visium.c:1936 eelf32xc16x.c:1936 eelf32xc16xl.c:1936
-#: eelf32xc16xs.c:1936 eelf32xstormy16.c:1947 eelf32xtensa.c:3957
-#: eelf64_aix.c:2033 eelf64_ia64.c:2088 eelf64_ia64_fbsd.c:2095
-#: eelf64_s390.c:2079 eelf64_sparc.c:2058 eelf64_sparc_fbsd.c:2065
-#: eelf64_sparc_sol2.c:2189 eelf64alpha.c:2151 eelf64alpha_fbsd.c:2158
-#: eelf64alpha_nbsd.c:2151 eelf64bmip.c:2317 eelf64btsmip.c:2299
-#: eelf64btsmip_fbsd.c:2306 eelf64hppa.c:2003 eelf64lppc.c:2760
-#: eelf64lriscv.c:2112 eelf64lriscv_lp64.c:2112 eelf64lriscv_lp64f.c:2112
-#: eelf64ltsmip.c:2299 eelf64ltsmip_fbsd.c:2306 eelf64mmix.c:5840
-#: eelf64ppc.c:2760 eelf64ppc_fbsd.c:2767 eelf64rdos.c:2068
-#: eelf64tilegx.c:2058 eelf64tilegx_be.c:2058 eelf_i386.c:6966
-#: eelf_i386_be.c:2033 eelf_i386_chaos.c:2013 eelf_i386_fbsd.c:2075
-#: eelf_i386_ldso.c:2050 eelf_i386_nacl.c:2068 eelf_i386_sol2.c:2206
-#: eelf_i386_vxworks.c:2095 eelf_iamcu.c:6612 eelf_k1om.c:7304
-#: eelf_k1om_fbsd.c:6959 eelf_l1om.c:7304 eelf_l1om_fbsd.c:6959
-#: eelf_s390.c:2058 eelf_x86_64.c:7348 eelf_x86_64_cloudabi.c:2068
-#: eelf_x86_64_fbsd.c:2075 eelf_x86_64_nacl.c:2068 eelf_x86_64_sol2.c:2199
-#: eh8300elf.c:1951 eh8300elf_linux.c:1951 eh8300helf.c:1951
-#: eh8300helf_linux.c:1951 eh8300hnelf.c:1951 eh8300self.c:1951
-#: eh8300self_linux.c:1951 eh8300snelf.c:1951 eh8300sxelf.c:1951
-#: eh8300sxelf_linux.c:1951 eh8300sxnelf.c:1951 ehppa64linux.c:2033
-#: ehppaelf.c:2240 ehppalinux.c:2362 ehppanbsd.c:2362 ehppaobsd.c:2362
-#: ei386lynx.c:2040 ei386moss.c:2033 ei386nto.c:2033 em32relf.c:1951
-#: em32relf_linux.c:2058 em32rlelf.c:1951 em32rlelf_linux.c:2058
-#: em68hc11elf.c:2244 em68hc11elfb.c:2244 em68hc12elf.c:2244
-#: em68hc12elfb.c:2244 em68kelf.c:2214 em68kelfnbsd.c:2214 em9s12zelf.c:1936
-#: emn10300.c:2033 ends32belf.c:2171 ends32belf16m.c:2171
-#: ends32belf_linux.c:2245 ends32elf.c:2171 ends32elf16m.c:2171
-#: ends32elf_linux.c:2245 enios2elf.c:2258 enios2linux.c:2340 eppclynx.c:2311
-#: epruelf.c:1956 escore3_elf.c:2053 escore7_elf.c:2053 eshelf.c:2033
-#: eshelf_fd.c:2058 eshelf_linux.c:2058 eshelf_nbsd.c:2033 eshelf_nto.c:2033
-#: eshelf_uclinux.c:2033 eshelf_vxworks.c:2070 eshlelf.c:2033
-#: eshlelf_fd.c:2058 eshlelf_linux.c:2058 eshlelf_nbsd.c:2033
-#: eshlelf_nto.c:2033 eshlelf_vxworks.c:2070 ev850.c:1982 ev850_rh850.c:1982
-#: exgateelf.c:1936
-msgid "%F%P: invalid maxium page size `%s'\n"
-msgstr "%F%P: taille maximale de page « %s » invalide\n"
-
-#: eaarch64cloudabi.c:2390 eaarch64cloudabib.c:2390 eaarch64elf.c:2390
-#: eaarch64elf32.c:2390 eaarch64elf32b.c:2390 eaarch64elfb.c:2390
-#: eaarch64fbsd.c:2390 eaarch64fbsdb.c:2390 eaarch64linux.c:2397
-#: eaarch64linux32.c:2397 eaarch64linux32b.c:2397 eaarch64linuxb.c:2397
-#: earcelf.c:2012 earcelf_prof.c:1945 earclinux.c:2078 earclinux_nps.c:2078
-#: earclinux_prof.c:2023 earcv2elf.c:1945 earcv2elfx.c:1945 earmelf.c:2640
-#: earmelf_fbsd.c:2647 earmelf_fuchsia.c:2640 earmelf_linux.c:2640
-#: earmelf_linux_eabi.c:2640 earmelf_linux_fdpiceabi.c:2640
-#: earmelf_nacl.c:2640 earmelf_nbsd.c:2640 earmelf_phoenix.c:2640
-#: earmelf_vxworks.c:2676 earmelfb.c:2640 earmelfb_fbsd.c:2647
-#: earmelfb_fuchsia.c:2640 earmelfb_linux.c:2640 earmelfb_linux_eabi.c:2640
-#: earmelfb_linux_fdpiceabi.c:2640 earmelfb_nacl.c:2640 earmelfb_nbsd.c:2640
-#: earmnto.c:2615 earmsymbian.c:2640 eavr1.c:2168 eavr2.c:2168 eavr25.c:2168
-#: eavr3.c:2168 eavr31.c:2168 eavr35.c:2168 eavr4.c:2168 eavr5.c:2168
-#: eavr51.c:2168 eavr6.c:2168 eavrtiny.c:2168 eavrxmega1.c:2168
-#: eavrxmega2.c:2168 eavrxmega3.c:2168 eavrxmega4.c:2168 eavrxmega5.c:2168
-#: eavrxmega6.c:2168 eavrxmega7.c:2168 ecriself.c:1960 ecrislinux.c:2042
-#: ed10velf.c:1945 eelf32_sparc.c:2067 eelf32_sparc_sol2.c:2198
-#: eelf32_sparc_vxworks.c:2104 eelf32_spu.c:2542 eelf32_tic6x_be.c:2179
-#: eelf32_tic6x_elf_be.c:2179 eelf32_tic6x_elf_le.c:2179
-#: eelf32_tic6x_le.c:2179 eelf32_tic6x_linux_be.c:2179
-#: eelf32_tic6x_linux_le.c:2179 eelf32_x86_64.c:7357 eelf32_x86_64_nacl.c:2077
-#: eelf32am33lin.c:2042 eelf32b4300.c:2308 eelf32bfin.c:2059
-#: eelf32bfinfd.c:2084 eelf32bmip.c:2308 eelf32bmipn32.c:2326
-#: eelf32bsmip.c:2326 eelf32btsmip.c:2308 eelf32btsmip_fbsd.c:2315
-#: eelf32btsmipn32.c:2308 eelf32btsmipn32_fbsd.c:2315 eelf32cr16.c:2096
-#: eelf32cr16c.c:1945 eelf32crx.c:1984 eelf32ebmip.c:2308
-#: eelf32ebmipvxworks.c:2343 eelf32elmip.c:2308 eelf32elmipvxworks.c:2343
-#: eelf32epiphany.c:1960 eelf32epiphany_4x4.c:1947 eelf32frvfd.c:2067
-#: eelf32ip2k.c:1960 eelf32l4300.c:2308 eelf32lm32.c:1960 eelf32lm32fd.c:2067
-#: eelf32lmip.c:2308 eelf32lppc.c:2313 eelf32lppclinux.c:2313
-#: eelf32lppcnto.c:2313 eelf32lppcsim.c:2313 eelf32lr5900.c:2226
-#: eelf32lr5900n32.c:2226 eelf32lriscv.c:2121 eelf32lriscv_ilp32.c:2121
-#: eelf32lriscv_ilp32f.c:2121 eelf32lsmip.c:2308 eelf32ltsmip.c:2308
-#: eelf32ltsmip_fbsd.c:2315 eelf32ltsmipn32.c:2308 eelf32ltsmipn32_fbsd.c:2315
-#: eelf32m32c.c:1971 eelf32mb_linux.c:2067 eelf32mbel_linux.c:2067
-#: eelf32mcore.c:1966 eelf32mep.c:1945 eelf32metag.c:2337
-#: eelf32microblaze.c:1945 eelf32microblazeel.c:1945 eelf32mipswindiss.c:2201
-#: eelf32or1k.c:1960 eelf32or1k_linux.c:2067 eelf32ppc.c:2313
-#: eelf32ppc_fbsd.c:2320 eelf32ppclinux.c:2313 eelf32ppcnto.c:2313
-#: eelf32ppcsim.c:2313 eelf32ppcvxworks.c:2287 eelf32ppcwindiss.c:2313
-#: eelf32rl78.c:1960 eelf32rx.c:1988 eelf32tilegx.c:2067
-#: eelf32tilegx_be.c:2067 eelf32tilepro.c:2067 eelf32vax.c:2042
-#: eelf32visium.c:1945 eelf32xc16x.c:1945 eelf32xc16xl.c:1945
-#: eelf32xc16xs.c:1945 eelf32xstormy16.c:1956 eelf32xtensa.c:3966
-#: eelf64_aix.c:2042 eelf64_ia64.c:2097 eelf64_ia64_fbsd.c:2104
-#: eelf64_s390.c:2088 eelf64_sparc.c:2067 eelf64_sparc_fbsd.c:2074
-#: eelf64_sparc_sol2.c:2198 eelf64alpha.c:2160 eelf64alpha_fbsd.c:2167
-#: eelf64alpha_nbsd.c:2160 eelf64bmip.c:2326 eelf64btsmip.c:2308
-#: eelf64btsmip_fbsd.c:2315 eelf64hppa.c:2012 eelf64lppc.c:2769
-#: eelf64lriscv.c:2121 eelf64lriscv_lp64.c:2121 eelf64lriscv_lp64f.c:2121
-#: eelf64ltsmip.c:2308 eelf64ltsmip_fbsd.c:2315 eelf64mmix.c:5849
-#: eelf64ppc.c:2769 eelf64ppc_fbsd.c:2776 eelf64rdos.c:2077
-#: eelf64tilegx.c:2067 eelf64tilegx_be.c:2067 eelf_i386.c:6975
-#: eelf_i386_be.c:2042 eelf_i386_chaos.c:2022 eelf_i386_fbsd.c:2084
-#: eelf_i386_ldso.c:2059 eelf_i386_nacl.c:2077 eelf_i386_sol2.c:2215
-#: eelf_i386_vxworks.c:2104 eelf_iamcu.c:6621 eelf_k1om.c:7313
-#: eelf_k1om_fbsd.c:6968 eelf_l1om.c:7313 eelf_l1om_fbsd.c:6968
-#: eelf_s390.c:2067 eelf_x86_64.c:7357 eelf_x86_64_cloudabi.c:2077
-#: eelf_x86_64_fbsd.c:2084 eelf_x86_64_nacl.c:2077 eelf_x86_64_sol2.c:2208
-#: eh8300elf.c:1960 eh8300elf_linux.c:1960 eh8300helf.c:1960
-#: eh8300helf_linux.c:1960 eh8300hnelf.c:1960 eh8300self.c:1960
-#: eh8300self_linux.c:1960 eh8300snelf.c:1960 eh8300sxelf.c:1960
-#: eh8300sxelf_linux.c:1960 eh8300sxnelf.c:1960 ehppa64linux.c:2042
-#: ehppaelf.c:2249 ehppalinux.c:2371 ehppanbsd.c:2371 ehppaobsd.c:2371
-#: ei386lynx.c:2049 ei386moss.c:2042 ei386nto.c:2042 em32relf.c:1960
-#: em32relf_linux.c:2067 em32rlelf.c:1960 em32rlelf_linux.c:2067
-#: em68hc11elf.c:2253 em68hc11elfb.c:2253 em68hc12elf.c:2253
-#: em68hc12elfb.c:2253 em68kelf.c:2223 em68kelfnbsd.c:2223 em9s12zelf.c:1945
-#: emn10300.c:2042 ends32belf.c:2180 ends32belf16m.c:2180
-#: ends32belf_linux.c:2254 ends32elf.c:2180 ends32elf16m.c:2180
-#: ends32elf_linux.c:2254 enios2elf.c:2267 enios2linux.c:2349 eppclynx.c:2320
-#: epruelf.c:1965 escore3_elf.c:2062 escore7_elf.c:2062 eshelf.c:2042
-#: eshelf_fd.c:2067 eshelf_linux.c:2067 eshelf_nbsd.c:2042 eshelf_nto.c:2042
-#: eshelf_uclinux.c:2042 eshelf_vxworks.c:2079 eshlelf.c:2042
-#: eshlelf_fd.c:2067 eshlelf_linux.c:2067 eshlelf_nbsd.c:2042
-#: eshlelf_nto.c:2042 eshlelf_vxworks.c:2079 ev850.c:1991 ev850_rh850.c:1991
-#: exgateelf.c:1945
+#: eaarch64cloudabi.c:2382 eaarch64cloudabib.c:2382 eaarch64elf.c:2382
+#: eaarch64elf32.c:2382 eaarch64elf32b.c:2382 eaarch64elfb.c:2382
+#: eaarch64fbsd.c:2382 eaarch64fbsdb.c:2382 eaarch64linux.c:2389
+#: eaarch64linux32.c:2389 eaarch64linux32b.c:2389 eaarch64linuxb.c:2389
+#: earcelf.c:2004 earcelf_prof.c:1937 earclinux.c:2070 earclinux_nps.c:2070
+#: earclinux_prof.c:2015 earcv2elf.c:1937 earcv2elfx.c:1937 earmelf.c:2632
+#: earmelf_fbsd.c:2639 earmelf_fuchsia.c:2632 earmelf_linux.c:2632
+#: earmelf_linux_eabi.c:2632 earmelf_linux_fdpiceabi.c:2632
+#: earmelf_nacl.c:2632 earmelf_nbsd.c:2632 earmelf_phoenix.c:2632
+#: earmelf_vxworks.c:2668 earmelfb.c:2632 earmelfb_fbsd.c:2639
+#: earmelfb_fuchsia.c:2632 earmelfb_linux.c:2632 earmelfb_linux_eabi.c:2632
+#: earmelfb_linux_fdpiceabi.c:2632 earmelfb_nacl.c:2632 earmelfb_nbsd.c:2632
+#: earmnto.c:2607 earmsymbian.c:2632 eavr1.c:2160 eavr2.c:2160 eavr25.c:2160
+#: eavr3.c:2160 eavr31.c:2160 eavr35.c:2160 eavr4.c:2160 eavr5.c:2160
+#: eavr51.c:2160 eavr6.c:2160 eavrtiny.c:2160 eavrxmega1.c:2160
+#: eavrxmega2.c:2160 eavrxmega3.c:2160 eavrxmega4.c:2160 eavrxmega5.c:2160
+#: eavrxmega6.c:2160 eavrxmega7.c:2160 ecriself.c:1952 ecrislinux.c:2034
+#: ecskyelf.c:2208 ecskyelf_linux.c:2315 ed10velf.c:1937 eelf32_sparc.c:2059
+#: eelf32_sparc_sol2.c:2190 eelf32_sparc_vxworks.c:2096 eelf32_spu.c:2670
+#: eelf32_tic6x_be.c:2171 eelf32_tic6x_elf_be.c:2171
+#: eelf32_tic6x_elf_le.c:2171 eelf32_tic6x_le.c:2171
+#: eelf32_tic6x_linux_be.c:2171 eelf32_tic6x_linux_le.c:2171
+#: eelf32_x86_64.c:7296 eelf32_x86_64_nacl.c:2069 eelf32am33lin.c:2034
+#: eelf32b4300.c:2301 eelf32bfin.c:2051 eelf32bfinfd.c:2076 eelf32bmip.c:2301
+#: eelf32bmipn32.c:2319 eelf32bsmip.c:2319 eelf32btsmip.c:2301
+#: eelf32btsmip_fbsd.c:2308 eelf32btsmipn32.c:2301 eelf32btsmipn32_fbsd.c:2308
+#: eelf32cr16.c:2088 eelf32cr16c.c:1937 eelf32crx.c:1976 eelf32ebmip.c:2301
+#: eelf32ebmipvxworks.c:2336 eelf32elmip.c:2301 eelf32elmipvxworks.c:2336
+#: eelf32epiphany.c:1952 eelf32epiphany_4x4.c:1939 eelf32frvfd.c:2059
+#: eelf32ip2k.c:1952 eelf32l4300.c:2301 eelf32lm32.c:1952 eelf32lm32fd.c:2059
+#: eelf32lmip.c:2301 eelf32lppc.c:2318 eelf32lppclinux.c:2318
+#: eelf32lppcnto.c:2318 eelf32lppcsim.c:2318 eelf32lr5900.c:2219
+#: eelf32lr5900n32.c:2219 eelf32lriscv.c:2113 eelf32lriscv_ilp32.c:2113
+#: eelf32lriscv_ilp32f.c:2113 eelf32lsmip.c:2301 eelf32ltsmip.c:2301
+#: eelf32ltsmip_fbsd.c:2308 eelf32ltsmipn32.c:2301 eelf32ltsmipn32_fbsd.c:2308
+#: eelf32m32c.c:1963 eelf32mb_linux.c:2059 eelf32mbel_linux.c:2059
+#: eelf32mcore.c:1958 eelf32mep.c:1937 eelf32metag.c:2329
+#: eelf32microblaze.c:1937 eelf32microblazeel.c:1937 eelf32mipswindiss.c:2194
+#: eelf32or1k.c:1952 eelf32or1k_linux.c:2059 eelf32ppc.c:2318
+#: eelf32ppc_fbsd.c:2325 eelf32ppclinux.c:2318 eelf32ppcnto.c:2318
+#: eelf32ppcsim.c:2318 eelf32ppcvxworks.c:2292 eelf32ppcwindiss.c:2318
+#: eelf32rl78.c:1952 eelf32rx.c:1980 eelf32tilegx.c:2059
+#: eelf32tilegx_be.c:2059 eelf32tilepro.c:2059 eelf32vax.c:2034
+#: eelf32visium.c:1937 eelf32xc16x.c:1937 eelf32xc16xl.c:1937
+#: eelf32xc16xs.c:1937 eelf32xstormy16.c:1948 eelf32xtensa.c:3958
+#: eelf64_aix.c:2034 eelf64_ia64.c:2089 eelf64_ia64_fbsd.c:2096
+#: eelf64_s390.c:2129 eelf64_sparc.c:2059 eelf64_sparc_fbsd.c:2066
+#: eelf64_sparc_sol2.c:2190 eelf64alpha.c:2152 eelf64alpha_fbsd.c:2159
+#: eelf64alpha_nbsd.c:2152 eelf64bmip.c:2319 eelf64btsmip.c:2301
+#: eelf64btsmip_fbsd.c:2308 eelf64hppa.c:2004 eelf64lppc.c:2773
+#: eelf64lriscv.c:2113 eelf64lriscv_lp64.c:2113 eelf64lriscv_lp64f.c:2113
+#: eelf64ltsmip.c:2301 eelf64ltsmip_fbsd.c:2308 eelf64mmix.c:5797
+#: eelf64ppc.c:2773 eelf64ppc_fbsd.c:2780 eelf64rdos.c:2069
+#: eelf64tilegx.c:2059 eelf64tilegx_be.c:2059 eelf_i386.c:6918
+#: eelf_i386_be.c:2034 eelf_i386_chaos.c:2014 eelf_i386_fbsd.c:2076
+#: eelf_i386_ldso.c:2051 eelf_i386_nacl.c:2069 eelf_i386_sol2.c:2207
+#: eelf_i386_vxworks.c:2096 eelf_iamcu.c:6564 eelf_k1om.c:7252
+#: eelf_k1om_fbsd.c:6907 eelf_l1om.c:7252 eelf_l1om_fbsd.c:6907
+#: eelf_s390.c:2059 eelf_x86_64.c:7296 eelf_x86_64_cloudabi.c:2069
+#: eelf_x86_64_fbsd.c:2076 eelf_x86_64_nacl.c:2069 eelf_x86_64_sol2.c:2200
+#: eh8300elf.c:1952 eh8300elf_linux.c:1952 eh8300helf.c:1952
+#: eh8300helf_linux.c:1952 eh8300hnelf.c:1952 eh8300self.c:1952
+#: eh8300self_linux.c:1952 eh8300snelf.c:1952 eh8300sxelf.c:1952
+#: eh8300sxelf_linux.c:1952 eh8300sxnelf.c:1952 ehppa64linux.c:2034
+#: ehppaelf.c:2241 ehppalinux.c:2363 ehppanbsd.c:2363 ehppaobsd.c:2363
+#: ei386lynx.c:2041 ei386moss.c:2034 ei386nto.c:2034 em32relf.c:1952
+#: em32relf_linux.c:2059 em32rlelf.c:1952 em32rlelf_linux.c:2059
+#: em68hc11elf.c:2245 em68hc11elfb.c:2245 em68hc12elf.c:2245
+#: em68hc12elfb.c:2245 em68kelf.c:2215 em68kelfnbsd.c:2215 em9s12zelf.c:1937
+#: emn10300.c:2034 ends32belf.c:2072 ends32belf16m.c:2072
+#: ends32belf_linux.c:2146 ends32elf.c:2072 ends32elf16m.c:2072
+#: ends32elf_linux.c:2146 enios2elf.c:2259 enios2linux.c:2341 eppclynx.c:2325
+#: epruelf.c:1957 escore3_elf.c:2054 escore7_elf.c:2054 eshelf.c:2034
+#: eshelf_fd.c:2059 eshelf_linux.c:2059 eshelf_nbsd.c:2034 eshelf_nto.c:2034
+#: eshelf_uclinux.c:2034 eshelf_vxworks.c:2071 eshlelf.c:2034
+#: eshlelf_fd.c:2059 eshlelf_linux.c:2059 eshlelf_nbsd.c:2034
+#: eshlelf_nto.c:2034 eshlelf_vxworks.c:2071 ev850.c:1983 ev850_rh850.c:1983
+msgid "%F%P: invalid maximum page size `%s'\n"
+msgstr "%F%P : taille maximale de page « %s » invalide\n"
+
+#: eaarch64cloudabi.c:2391 eaarch64cloudabib.c:2391 eaarch64elf.c:2391
+#: eaarch64elf32.c:2391 eaarch64elf32b.c:2391 eaarch64elfb.c:2391
+#: eaarch64fbsd.c:2391 eaarch64fbsdb.c:2391 eaarch64linux.c:2398
+#: eaarch64linux32.c:2398 eaarch64linux32b.c:2398 eaarch64linuxb.c:2398
+#: earcelf.c:2013 earcelf_prof.c:1946 earclinux.c:2079 earclinux_nps.c:2079
+#: earclinux_prof.c:2024 earcv2elf.c:1946 earcv2elfx.c:1946 earmelf.c:2641
+#: earmelf_fbsd.c:2648 earmelf_fuchsia.c:2641 earmelf_linux.c:2641
+#: earmelf_linux_eabi.c:2641 earmelf_linux_fdpiceabi.c:2641
+#: earmelf_nacl.c:2641 earmelf_nbsd.c:2641 earmelf_phoenix.c:2641
+#: earmelf_vxworks.c:2677 earmelfb.c:2641 earmelfb_fbsd.c:2648
+#: earmelfb_fuchsia.c:2641 earmelfb_linux.c:2641 earmelfb_linux_eabi.c:2641
+#: earmelfb_linux_fdpiceabi.c:2641 earmelfb_nacl.c:2641 earmelfb_nbsd.c:2641
+#: earmnto.c:2616 earmsymbian.c:2641 eavr1.c:2169 eavr2.c:2169 eavr25.c:2169
+#: eavr3.c:2169 eavr31.c:2169 eavr35.c:2169 eavr4.c:2169 eavr5.c:2169
+#: eavr51.c:2169 eavr6.c:2169 eavrtiny.c:2169 eavrxmega1.c:2169
+#: eavrxmega2.c:2169 eavrxmega3.c:2169 eavrxmega4.c:2169 eavrxmega5.c:2169
+#: eavrxmega6.c:2169 eavrxmega7.c:2169 ecriself.c:1961 ecrislinux.c:2043
+#: ecskyelf.c:2217 ecskyelf_linux.c:2324 ed10velf.c:1946 eelf32_sparc.c:2068
+#: eelf32_sparc_sol2.c:2199 eelf32_sparc_vxworks.c:2105 eelf32_spu.c:2679
+#: eelf32_tic6x_be.c:2180 eelf32_tic6x_elf_be.c:2180
+#: eelf32_tic6x_elf_le.c:2180 eelf32_tic6x_le.c:2180
+#: eelf32_tic6x_linux_be.c:2180 eelf32_tic6x_linux_le.c:2180
+#: eelf32_x86_64.c:7305 eelf32_x86_64_nacl.c:2078 eelf32am33lin.c:2043
+#: eelf32b4300.c:2310 eelf32bfin.c:2060 eelf32bfinfd.c:2085 eelf32bmip.c:2310
+#: eelf32bmipn32.c:2328 eelf32bsmip.c:2328 eelf32btsmip.c:2310
+#: eelf32btsmip_fbsd.c:2317 eelf32btsmipn32.c:2310 eelf32btsmipn32_fbsd.c:2317
+#: eelf32cr16.c:2097 eelf32cr16c.c:1946 eelf32crx.c:1985 eelf32ebmip.c:2310
+#: eelf32ebmipvxworks.c:2345 eelf32elmip.c:2310 eelf32elmipvxworks.c:2345
+#: eelf32epiphany.c:1961 eelf32epiphany_4x4.c:1948 eelf32frvfd.c:2068
+#: eelf32ip2k.c:1961 eelf32l4300.c:2310 eelf32lm32.c:1961 eelf32lm32fd.c:2068
+#: eelf32lmip.c:2310 eelf32lppc.c:2327 eelf32lppclinux.c:2327
+#: eelf32lppcnto.c:2327 eelf32lppcsim.c:2327 eelf32lr5900.c:2228
+#: eelf32lr5900n32.c:2228 eelf32lriscv.c:2122 eelf32lriscv_ilp32.c:2122
+#: eelf32lriscv_ilp32f.c:2122 eelf32lsmip.c:2310 eelf32ltsmip.c:2310
+#: eelf32ltsmip_fbsd.c:2317 eelf32ltsmipn32.c:2310 eelf32ltsmipn32_fbsd.c:2317
+#: eelf32m32c.c:1972 eelf32mb_linux.c:2068 eelf32mbel_linux.c:2068
+#: eelf32mcore.c:1967 eelf32mep.c:1946 eelf32metag.c:2338
+#: eelf32microblaze.c:1946 eelf32microblazeel.c:1946 eelf32mipswindiss.c:2203
+#: eelf32or1k.c:1961 eelf32or1k_linux.c:2068 eelf32ppc.c:2327
+#: eelf32ppc_fbsd.c:2334 eelf32ppclinux.c:2327 eelf32ppcnto.c:2327
+#: eelf32ppcsim.c:2327 eelf32ppcvxworks.c:2301 eelf32ppcwindiss.c:2327
+#: eelf32rl78.c:1961 eelf32rx.c:1989 eelf32tilegx.c:2068
+#: eelf32tilegx_be.c:2068 eelf32tilepro.c:2068 eelf32vax.c:2043
+#: eelf32visium.c:1946 eelf32xc16x.c:1946 eelf32xc16xl.c:1946
+#: eelf32xc16xs.c:1946 eelf32xstormy16.c:1957 eelf32xtensa.c:3967
+#: eelf64_aix.c:2043 eelf64_ia64.c:2098 eelf64_ia64_fbsd.c:2105
+#: eelf64_s390.c:2138 eelf64_sparc.c:2068 eelf64_sparc_fbsd.c:2075
+#: eelf64_sparc_sol2.c:2199 eelf64alpha.c:2161 eelf64alpha_fbsd.c:2168
+#: eelf64alpha_nbsd.c:2161 eelf64bmip.c:2328 eelf64btsmip.c:2310
+#: eelf64btsmip_fbsd.c:2317 eelf64hppa.c:2013 eelf64lppc.c:2782
+#: eelf64lriscv.c:2122 eelf64lriscv_lp64.c:2122 eelf64lriscv_lp64f.c:2122
+#: eelf64ltsmip.c:2310 eelf64ltsmip_fbsd.c:2317 eelf64mmix.c:5806
+#: eelf64ppc.c:2782 eelf64ppc_fbsd.c:2789 eelf64rdos.c:2078
+#: eelf64tilegx.c:2068 eelf64tilegx_be.c:2068 eelf_i386.c:6927
+#: eelf_i386_be.c:2043 eelf_i386_chaos.c:2023 eelf_i386_fbsd.c:2085
+#: eelf_i386_ldso.c:2060 eelf_i386_nacl.c:2078 eelf_i386_sol2.c:2216
+#: eelf_i386_vxworks.c:2105 eelf_iamcu.c:6573 eelf_k1om.c:7261
+#: eelf_k1om_fbsd.c:6916 eelf_l1om.c:7261 eelf_l1om_fbsd.c:6916
+#: eelf_s390.c:2068 eelf_x86_64.c:7305 eelf_x86_64_cloudabi.c:2078
+#: eelf_x86_64_fbsd.c:2085 eelf_x86_64_nacl.c:2078 eelf_x86_64_sol2.c:2209
+#: eh8300elf.c:1961 eh8300elf_linux.c:1961 eh8300helf.c:1961
+#: eh8300helf_linux.c:1961 eh8300hnelf.c:1961 eh8300self.c:1961
+#: eh8300self_linux.c:1961 eh8300snelf.c:1961 eh8300sxelf.c:1961
+#: eh8300sxelf_linux.c:1961 eh8300sxnelf.c:1961 ehppa64linux.c:2043
+#: ehppaelf.c:2250 ehppalinux.c:2372 ehppanbsd.c:2372 ehppaobsd.c:2372
+#: ei386lynx.c:2050 ei386moss.c:2043 ei386nto.c:2043 em32relf.c:1961
+#: em32relf_linux.c:2068 em32rlelf.c:1961 em32rlelf_linux.c:2068
+#: em68hc11elf.c:2254 em68hc11elfb.c:2254 em68hc12elf.c:2254
+#: em68hc12elfb.c:2254 em68kelf.c:2224 em68kelfnbsd.c:2224 em9s12zelf.c:1946
+#: emn10300.c:2043 ends32belf.c:2081 ends32belf16m.c:2081
+#: ends32belf_linux.c:2155 ends32elf.c:2081 ends32elf16m.c:2081
+#: ends32elf_linux.c:2155 enios2elf.c:2268 enios2linux.c:2350 eppclynx.c:2334
+#: epruelf.c:1966 escore3_elf.c:2063 escore7_elf.c:2063 eshelf.c:2043
+#: eshelf_fd.c:2068 eshelf_linux.c:2068 eshelf_nbsd.c:2043 eshelf_nto.c:2043
+#: eshelf_uclinux.c:2043 eshelf_vxworks.c:2080 eshlelf.c:2043
+#: eshlelf_fd.c:2068 eshlelf_linux.c:2068 eshlelf_nbsd.c:2043
+#: eshlelf_nto.c:2043 eshlelf_vxworks.c:2080 ev850.c:1992 ev850_rh850.c:1992
 msgid "%F%P: invalid common page size `%s'\n"
 msgstr "%F%P : taille de page commune « %s » invalide\n"
 
-#: eaarch64cloudabi.c:2398 eaarch64cloudabib.c:2398 eaarch64elf.c:2398
-#: eaarch64elf32.c:2398 eaarch64elf32b.c:2398 eaarch64elfb.c:2398
-#: eaarch64fbsd.c:2398 eaarch64fbsdb.c:2398 eaarch64linux.c:2405
-#: eaarch64linux32.c:2405 eaarch64linux32b.c:2405 eaarch64linuxb.c:2405
-#: earcelf.c:2020 earcelf_prof.c:1953 earclinux.c:2086 earclinux_nps.c:2086
-#: earclinux_prof.c:2031 earcv2elf.c:1953 earcv2elfx.c:1953 earmelf.c:2648
-#: earmelf_fbsd.c:2655 earmelf_fuchsia.c:2648 earmelf_linux.c:2648
-#: earmelf_linux_eabi.c:2648 earmelf_linux_fdpiceabi.c:2648
-#: earmelf_nacl.c:2648 earmelf_nbsd.c:2648 earmelf_phoenix.c:2648
-#: earmelf_vxworks.c:2684 earmelfb.c:2648 earmelfb_fbsd.c:2655
-#: earmelfb_fuchsia.c:2648 earmelfb_linux.c:2648 earmelfb_linux_eabi.c:2648
-#: earmelfb_linux_fdpiceabi.c:2648 earmelfb_nacl.c:2648 earmelfb_nbsd.c:2648
-#: earmnto.c:2623 earmsymbian.c:2648 eavr1.c:2176 eavr2.c:2176 eavr25.c:2176
-#: eavr3.c:2176 eavr31.c:2176 eavr35.c:2176 eavr4.c:2176 eavr5.c:2176
-#: eavr51.c:2176 eavr6.c:2176 eavrtiny.c:2176 eavrxmega1.c:2176
-#: eavrxmega2.c:2176 eavrxmega3.c:2176 eavrxmega4.c:2176 eavrxmega5.c:2176
-#: eavrxmega6.c:2176 eavrxmega7.c:2176 ecriself.c:1968 ecrislinux.c:2050
-#: ed10velf.c:1953 eelf32_sparc.c:2075 eelf32_sparc_sol2.c:2206
-#: eelf32_sparc_vxworks.c:2112 eelf32_spu.c:2550 eelf32_tic6x_be.c:2187
-#: eelf32_tic6x_elf_be.c:2187 eelf32_tic6x_elf_le.c:2187
-#: eelf32_tic6x_le.c:2187 eelf32_tic6x_linux_be.c:2187
-#: eelf32_tic6x_linux_le.c:2187 eelf32_x86_64.c:7365 eelf32_x86_64_nacl.c:2085
-#: eelf32am33lin.c:2050 eelf32b4300.c:2316 eelf32bfin.c:2067
-#: eelf32bfinfd.c:2092 eelf32bmip.c:2316 eelf32bmipn32.c:2334
-#: eelf32bsmip.c:2334 eelf32btsmip.c:2316 eelf32btsmip_fbsd.c:2323
-#: eelf32btsmipn32.c:2316 eelf32btsmipn32_fbsd.c:2323 eelf32cr16.c:2104
-#: eelf32cr16c.c:1953 eelf32crx.c:1992 eelf32ebmip.c:2316
-#: eelf32ebmipvxworks.c:2351 eelf32elmip.c:2316 eelf32elmipvxworks.c:2351
-#: eelf32epiphany.c:1968 eelf32epiphany_4x4.c:1955 eelf32frvfd.c:2075
-#: eelf32ip2k.c:1968 eelf32l4300.c:2316 eelf32lm32.c:1968 eelf32lm32fd.c:2075
-#: eelf32lmip.c:2316 eelf32lppc.c:2321 eelf32lppclinux.c:2321
-#: eelf32lppcnto.c:2321 eelf32lppcsim.c:2321 eelf32lr5900.c:2234
-#: eelf32lr5900n32.c:2234 eelf32lriscv.c:2129 eelf32lriscv_ilp32.c:2129
-#: eelf32lriscv_ilp32f.c:2129 eelf32lsmip.c:2316 eelf32ltsmip.c:2316
-#: eelf32ltsmip_fbsd.c:2323 eelf32ltsmipn32.c:2316 eelf32ltsmipn32_fbsd.c:2323
-#: eelf32m32c.c:1979 eelf32mb_linux.c:2075 eelf32mbel_linux.c:2075
-#: eelf32mcore.c:1974 eelf32mep.c:1953 eelf32metag.c:2345
-#: eelf32microblaze.c:1953 eelf32microblazeel.c:1953 eelf32mipswindiss.c:2209
-#: eelf32or1k.c:1968 eelf32or1k_linux.c:2075 eelf32ppc.c:2321
-#: eelf32ppc_fbsd.c:2328 eelf32ppclinux.c:2321 eelf32ppcnto.c:2321
-#: eelf32ppcsim.c:2321 eelf32ppcvxworks.c:2295 eelf32ppcwindiss.c:2321
-#: eelf32rl78.c:1968 eelf32rx.c:1996 eelf32tilegx.c:2075
-#: eelf32tilegx_be.c:2075 eelf32tilepro.c:2075 eelf32vax.c:2050
-#: eelf32visium.c:1953 eelf32xc16x.c:1953 eelf32xc16xl.c:1953
-#: eelf32xc16xs.c:1953 eelf32xstormy16.c:1964 eelf32xtensa.c:3974
-#: eelf64_aix.c:2050 eelf64_ia64.c:2105 eelf64_ia64_fbsd.c:2112
-#: eelf64_s390.c:2096 eelf64_sparc.c:2075 eelf64_sparc_fbsd.c:2082
-#: eelf64_sparc_sol2.c:2206 eelf64alpha.c:2168 eelf64alpha_fbsd.c:2175
-#: eelf64alpha_nbsd.c:2168 eelf64bmip.c:2334 eelf64btsmip.c:2316
-#: eelf64btsmip_fbsd.c:2323 eelf64hppa.c:2020 eelf64lppc.c:2777
-#: eelf64lriscv.c:2129 eelf64lriscv_lp64.c:2129 eelf64lriscv_lp64f.c:2129
-#: eelf64ltsmip.c:2316 eelf64ltsmip_fbsd.c:2323 eelf64mmix.c:5857
-#: eelf64ppc.c:2777 eelf64ppc_fbsd.c:2784 eelf64rdos.c:2085
-#: eelf64tilegx.c:2075 eelf64tilegx_be.c:2075 eelf_i386.c:6983
-#: eelf_i386_be.c:2050 eelf_i386_chaos.c:2030 eelf_i386_fbsd.c:2092
-#: eelf_i386_ldso.c:2067 eelf_i386_nacl.c:2085 eelf_i386_sol2.c:2223
-#: eelf_i386_vxworks.c:2112 eelf_iamcu.c:6629 eelf_k1om.c:7321
-#: eelf_k1om_fbsd.c:6976 eelf_l1om.c:7321 eelf_l1om_fbsd.c:6976
-#: eelf_s390.c:2075 eelf_x86_64.c:7365 eelf_x86_64_cloudabi.c:2085
-#: eelf_x86_64_fbsd.c:2092 eelf_x86_64_nacl.c:2085 eelf_x86_64_sol2.c:2216
-#: eh8300elf.c:1968 eh8300elf_linux.c:1968 eh8300helf.c:1968
-#: eh8300helf_linux.c:1968 eh8300hnelf.c:1968 eh8300self.c:1968
-#: eh8300self_linux.c:1968 eh8300snelf.c:1968 eh8300sxelf.c:1968
-#: eh8300sxelf_linux.c:1968 eh8300sxnelf.c:1968 ehppa64linux.c:2050
-#: ehppaelf.c:2257 ehppalinux.c:2379 ehppanbsd.c:2379 ehppaobsd.c:2379
-#: ei386lynx.c:2057 ei386moss.c:2050 ei386nto.c:2050 em32relf.c:1968
-#: em32relf_linux.c:2075 em32rlelf.c:1968 em32rlelf_linux.c:2075
-#: em68hc11elf.c:2261 em68hc11elfb.c:2261 em68hc12elf.c:2261
-#: em68hc12elfb.c:2261 em68kelf.c:2231 em68kelfnbsd.c:2231 em9s12zelf.c:1953
-#: emn10300.c:2050 ends32belf.c:2188 ends32belf16m.c:2188
-#: ends32belf_linux.c:2262 ends32elf.c:2188 ends32elf16m.c:2188
-#: ends32elf_linux.c:2262 enios2elf.c:2275 enios2linux.c:2357 eppclynx.c:2328
-#: epruelf.c:1973 escore3_elf.c:2070 escore7_elf.c:2070 eshelf.c:2050
-#: eshelf_fd.c:2075 eshelf_linux.c:2075 eshelf_nbsd.c:2050 eshelf_nto.c:2050
-#: eshelf_uclinux.c:2050 eshelf_vxworks.c:2087 eshlelf.c:2050
-#: eshlelf_fd.c:2075 eshlelf_linux.c:2075 eshlelf_nbsd.c:2050
-#: eshlelf_nto.c:2050 eshlelf_vxworks.c:2087 ev850.c:1999 ev850_rh850.c:1999
-#: exgateelf.c:1953
+#: eaarch64cloudabi.c:2399 eaarch64cloudabib.c:2399 eaarch64elf.c:2399
+#: eaarch64elf32.c:2399 eaarch64elf32b.c:2399 eaarch64elfb.c:2399
+#: eaarch64fbsd.c:2399 eaarch64fbsdb.c:2399 eaarch64linux.c:2406
+#: eaarch64linux32.c:2406 eaarch64linux32b.c:2406 eaarch64linuxb.c:2406
+#: earcelf.c:2021 earcelf_prof.c:1954 earclinux.c:2087 earclinux_nps.c:2087
+#: earclinux_prof.c:2032 earcv2elf.c:1954 earcv2elfx.c:1954 earmelf.c:2649
+#: earmelf_fbsd.c:2656 earmelf_fuchsia.c:2649 earmelf_linux.c:2649
+#: earmelf_linux_eabi.c:2649 earmelf_linux_fdpiceabi.c:2649
+#: earmelf_nacl.c:2649 earmelf_nbsd.c:2649 earmelf_phoenix.c:2649
+#: earmelf_vxworks.c:2685 earmelfb.c:2649 earmelfb_fbsd.c:2656
+#: earmelfb_fuchsia.c:2649 earmelfb_linux.c:2649 earmelfb_linux_eabi.c:2649
+#: earmelfb_linux_fdpiceabi.c:2649 earmelfb_nacl.c:2649 earmelfb_nbsd.c:2649
+#: earmnto.c:2624 earmsymbian.c:2649 eavr1.c:2177 eavr2.c:2177 eavr25.c:2177
+#: eavr3.c:2177 eavr31.c:2177 eavr35.c:2177 eavr4.c:2177 eavr5.c:2177
+#: eavr51.c:2177 eavr6.c:2177 eavrtiny.c:2177 eavrxmega1.c:2177
+#: eavrxmega2.c:2177 eavrxmega3.c:2177 eavrxmega4.c:2177 eavrxmega5.c:2177
+#: eavrxmega6.c:2177 eavrxmega7.c:2177 ecriself.c:1969 ecrislinux.c:2051
+#: ecskyelf.c:2225 ecskyelf_linux.c:2332 ed10velf.c:1954 eelf32_sparc.c:2076
+#: eelf32_sparc_sol2.c:2207 eelf32_sparc_vxworks.c:2113 eelf32_spu.c:2687
+#: eelf32_tic6x_be.c:2188 eelf32_tic6x_elf_be.c:2188
+#: eelf32_tic6x_elf_le.c:2188 eelf32_tic6x_le.c:2188
+#: eelf32_tic6x_linux_be.c:2188 eelf32_tic6x_linux_le.c:2188
+#: eelf32_x86_64.c:7313 eelf32_x86_64_nacl.c:2086 eelf32am33lin.c:2051
+#: eelf32b4300.c:2318 eelf32bfin.c:2068 eelf32bfinfd.c:2093 eelf32bmip.c:2318
+#: eelf32bmipn32.c:2336 eelf32bsmip.c:2336 eelf32btsmip.c:2318
+#: eelf32btsmip_fbsd.c:2325 eelf32btsmipn32.c:2318 eelf32btsmipn32_fbsd.c:2325
+#: eelf32cr16.c:2105 eelf32cr16c.c:1954 eelf32crx.c:1993 eelf32ebmip.c:2318
+#: eelf32ebmipvxworks.c:2353 eelf32elmip.c:2318 eelf32elmipvxworks.c:2353
+#: eelf32epiphany.c:1969 eelf32epiphany_4x4.c:1956 eelf32frvfd.c:2076
+#: eelf32ip2k.c:1969 eelf32l4300.c:2318 eelf32lm32.c:1969 eelf32lm32fd.c:2076
+#: eelf32lmip.c:2318 eelf32lppc.c:2335 eelf32lppclinux.c:2335
+#: eelf32lppcnto.c:2335 eelf32lppcsim.c:2335 eelf32lr5900.c:2236
+#: eelf32lr5900n32.c:2236 eelf32lriscv.c:2130 eelf32lriscv_ilp32.c:2130
+#: eelf32lriscv_ilp32f.c:2130 eelf32lsmip.c:2318 eelf32ltsmip.c:2318
+#: eelf32ltsmip_fbsd.c:2325 eelf32ltsmipn32.c:2318 eelf32ltsmipn32_fbsd.c:2325
+#: eelf32m32c.c:1980 eelf32mb_linux.c:2076 eelf32mbel_linux.c:2076
+#: eelf32mcore.c:1975 eelf32mep.c:1954 eelf32metag.c:2346
+#: eelf32microblaze.c:1954 eelf32microblazeel.c:1954 eelf32mipswindiss.c:2211
+#: eelf32or1k.c:1969 eelf32or1k_linux.c:2076 eelf32ppc.c:2335
+#: eelf32ppc_fbsd.c:2342 eelf32ppclinux.c:2335 eelf32ppcnto.c:2335
+#: eelf32ppcsim.c:2335 eelf32ppcvxworks.c:2309 eelf32ppcwindiss.c:2335
+#: eelf32rl78.c:1969 eelf32rx.c:1997 eelf32tilegx.c:2076
+#: eelf32tilegx_be.c:2076 eelf32tilepro.c:2076 eelf32vax.c:2051
+#: eelf32visium.c:1954 eelf32xc16x.c:1954 eelf32xc16xl.c:1954
+#: eelf32xc16xs.c:1954 eelf32xstormy16.c:1965 eelf32xtensa.c:3975
+#: eelf64_aix.c:2051 eelf64_ia64.c:2106 eelf64_ia64_fbsd.c:2113
+#: eelf64_s390.c:2146 eelf64_sparc.c:2076 eelf64_sparc_fbsd.c:2083
+#: eelf64_sparc_sol2.c:2207 eelf64alpha.c:2169 eelf64alpha_fbsd.c:2176
+#: eelf64alpha_nbsd.c:2169 eelf64bmip.c:2336 eelf64btsmip.c:2318
+#: eelf64btsmip_fbsd.c:2325 eelf64hppa.c:2021 eelf64lppc.c:2790
+#: eelf64lriscv.c:2130 eelf64lriscv_lp64.c:2130 eelf64lriscv_lp64f.c:2130
+#: eelf64ltsmip.c:2318 eelf64ltsmip_fbsd.c:2325 eelf64mmix.c:5814
+#: eelf64ppc.c:2790 eelf64ppc_fbsd.c:2797 eelf64rdos.c:2086
+#: eelf64tilegx.c:2076 eelf64tilegx_be.c:2076 eelf_i386.c:6935
+#: eelf_i386_be.c:2051 eelf_i386_chaos.c:2031 eelf_i386_fbsd.c:2093
+#: eelf_i386_ldso.c:2068 eelf_i386_nacl.c:2086 eelf_i386_sol2.c:2224
+#: eelf_i386_vxworks.c:2113 eelf_iamcu.c:6581 eelf_k1om.c:7269
+#: eelf_k1om_fbsd.c:6924 eelf_l1om.c:7269 eelf_l1om_fbsd.c:6924
+#: eelf_s390.c:2076 eelf_x86_64.c:7313 eelf_x86_64_cloudabi.c:2086
+#: eelf_x86_64_fbsd.c:2093 eelf_x86_64_nacl.c:2086 eelf_x86_64_sol2.c:2217
+#: eh8300elf.c:1969 eh8300elf_linux.c:1969 eh8300helf.c:1969
+#: eh8300helf_linux.c:1969 eh8300hnelf.c:1969 eh8300self.c:1969
+#: eh8300self_linux.c:1969 eh8300snelf.c:1969 eh8300sxelf.c:1969
+#: eh8300sxelf_linux.c:1969 eh8300sxnelf.c:1969 ehppa64linux.c:2051
+#: ehppaelf.c:2258 ehppalinux.c:2380 ehppanbsd.c:2380 ehppaobsd.c:2380
+#: ei386lynx.c:2058 ei386moss.c:2051 ei386nto.c:2051 em32relf.c:1969
+#: em32relf_linux.c:2076 em32rlelf.c:1969 em32rlelf_linux.c:2076
+#: em68hc11elf.c:2262 em68hc11elfb.c:2262 em68hc12elf.c:2262
+#: em68hc12elfb.c:2262 em68kelf.c:2232 em68kelfnbsd.c:2232 em9s12zelf.c:1954
+#: emn10300.c:2051 ends32belf.c:2089 ends32belf16m.c:2089
+#: ends32belf_linux.c:2163 ends32elf.c:2089 ends32elf16m.c:2089
+#: ends32elf_linux.c:2163 enios2elf.c:2276 enios2linux.c:2358 eppclynx.c:2342
+#: epruelf.c:1974 escore3_elf.c:2071 escore7_elf.c:2071 eshelf.c:2051
+#: eshelf_fd.c:2076 eshelf_linux.c:2076 eshelf_nbsd.c:2051 eshelf_nto.c:2051
+#: eshelf_uclinux.c:2051 eshelf_vxworks.c:2088 eshlelf.c:2051
+#: eshlelf_fd.c:2076 eshlelf_linux.c:2076 eshlelf_nbsd.c:2051
+#: eshlelf_nto.c:2051 eshlelf_vxworks.c:2088 ev850.c:2000 ev850_rh850.c:2000
 msgid "%F%P: invalid stack size `%s'\n"
 msgstr "%F%P : taille de pile « %s » invalide\n"
 
-#: eaarch64cloudabi.c:2474 eaarch64cloudabib.c:2474 eaarch64elf.c:2474
-#: eaarch64elf32.c:2474 eaarch64elf32b.c:2474 eaarch64elfb.c:2474
-#: eaarch64fbsd.c:2474 eaarch64fbsdb.c:2474 eaarch64linux.c:2481
-#: eaarch64linux32.c:2481 eaarch64linux32b.c:2481 eaarch64linuxb.c:2481
-#: earcelf.c:2096 earcelf_prof.c:1974 earclinux.c:2162 earclinux_nps.c:2162
-#: earclinux_prof.c:2107 earcv2elf.c:1974 earcv2elfx.c:1974 earmelf.c:2724
-#: earmelf_fbsd.c:2731 earmelf_fuchsia.c:2724 earmelf_linux.c:2724
-#: earmelf_linux_eabi.c:2724 earmelf_linux_fdpiceabi.c:2724
-#: earmelf_nacl.c:2724 earmelf_nbsd.c:2724 earmelf_phoenix.c:2724
-#: earmelf_vxworks.c:2760 earmelfb.c:2724 earmelfb_fbsd.c:2731
-#: earmelfb_fuchsia.c:2724 earmelfb_linux.c:2724 earmelfb_linux_eabi.c:2724
-#: earmelfb_linux_fdpiceabi.c:2724 earmelfb_nacl.c:2724 earmelfb_nbsd.c:2724
-#: earmnto.c:2699 earmsymbian.c:2724 eavr1.c:2197 eavr2.c:2197 eavr25.c:2197
-#: eavr3.c:2197 eavr31.c:2197 eavr35.c:2197 eavr4.c:2197 eavr5.c:2197
-#: eavr51.c:2197 eavr6.c:2197 eavrtiny.c:2197 eavrxmega1.c:2197
-#: eavrxmega2.c:2197 eavrxmega3.c:2197 eavrxmega4.c:2197 eavrxmega5.c:2197
-#: eavrxmega6.c:2197 eavrxmega7.c:2197 ecriself.c:1989 ecrislinux.c:2126
-#: ed10velf.c:1974 eelf32_sparc.c:2151 eelf32_sparc_sol2.c:2282
-#: eelf32_sparc_vxworks.c:2188 eelf32_spu.c:2571 eelf32_tic6x_be.c:2263
-#: eelf32_tic6x_elf_be.c:2263 eelf32_tic6x_elf_le.c:2263
-#: eelf32_tic6x_le.c:2263 eelf32_tic6x_linux_be.c:2263
-#: eelf32_tic6x_linux_le.c:2263 eelf32_x86_64.c:7494 eelf32_x86_64_nacl.c:2214
-#: eelf32am33lin.c:2126 eelf32b4300.c:2392 eelf32bfin.c:2143
-#: eelf32bfinfd.c:2168 eelf32bmip.c:2392 eelf32bmipn32.c:2410
-#: eelf32bsmip.c:2410 eelf32btsmip.c:2392 eelf32btsmip_fbsd.c:2399
-#: eelf32btsmipn32.c:2392 eelf32btsmipn32_fbsd.c:2399 eelf32cr16.c:2125
-#: eelf32cr16c.c:1974 eelf32crx.c:2013 eelf32ebmip.c:2392
-#: eelf32ebmipvxworks.c:2427 eelf32elmip.c:2392 eelf32elmipvxworks.c:2427
-#: eelf32epiphany.c:1989 eelf32epiphany_4x4.c:1976 eelf32frvfd.c:2151
-#: eelf32ip2k.c:1989 eelf32l4300.c:2392 eelf32lm32.c:1989 eelf32lm32fd.c:2151
-#: eelf32lmip.c:2392 eelf32lppc.c:2403 eelf32lppclinux.c:2403
-#: eelf32lppcnto.c:2403 eelf32lppcsim.c:2403 eelf32lr5900.c:2255
-#: eelf32lr5900n32.c:2255 eelf32lriscv.c:2205 eelf32lriscv_ilp32.c:2205
-#: eelf32lriscv_ilp32f.c:2205 eelf32lsmip.c:2392 eelf32ltsmip.c:2392
-#: eelf32ltsmip_fbsd.c:2399 eelf32ltsmipn32.c:2392 eelf32ltsmipn32_fbsd.c:2399
-#: eelf32m32c.c:2000 eelf32mb_linux.c:2151 eelf32mbel_linux.c:2151
-#: eelf32mcore.c:1995 eelf32mep.c:1974 eelf32metag.c:2421
-#: eelf32microblaze.c:1974 eelf32microblazeel.c:1974 eelf32mipswindiss.c:2230
-#: eelf32or1k.c:1989 eelf32or1k_linux.c:2151 eelf32ppc.c:2403
-#: eelf32ppc_fbsd.c:2410 eelf32ppclinux.c:2403 eelf32ppcnto.c:2403
-#: eelf32ppcsim.c:2403 eelf32ppcvxworks.c:2377 eelf32ppcwindiss.c:2403
-#: eelf32rl78.c:1989 eelf32rx.c:2017 eelf32tilegx.c:2151
-#: eelf32tilegx_be.c:2151 eelf32tilepro.c:2151 eelf32vax.c:2126
-#: eelf32visium.c:1974 eelf32xc16x.c:1974 eelf32xc16xl.c:1974
-#: eelf32xc16xs.c:1974 eelf32xstormy16.c:1985 eelf32xtensa.c:4050
-#: eelf64_aix.c:2126 eelf64_ia64.c:2181 eelf64_ia64_fbsd.c:2188
-#: eelf64_s390.c:2172 eelf64_sparc.c:2151 eelf64_sparc_fbsd.c:2158
-#: eelf64_sparc_sol2.c:2282 eelf64alpha.c:2244 eelf64alpha_fbsd.c:2251
-#: eelf64alpha_nbsd.c:2244 eelf64bmip.c:2410 eelf64btsmip.c:2392
-#: eelf64btsmip_fbsd.c:2399 eelf64hppa.c:2096 eelf64lppc.c:2859
-#: eelf64lriscv.c:2205 eelf64lriscv_lp64.c:2205 eelf64lriscv_lp64f.c:2205
-#: eelf64ltsmip.c:2392 eelf64ltsmip_fbsd.c:2399 eelf64mmix.c:5933
-#: eelf64ppc.c:2859 eelf64ppc_fbsd.c:2866 eelf64rdos.c:2161
-#: eelf64tilegx.c:2151 eelf64tilegx_be.c:2151 eelf_i386.c:7109
-#: eelf_i386_be.c:2169 eelf_i386_chaos.c:2149 eelf_i386_fbsd.c:2218
-#: eelf_i386_ldso.c:2186 eelf_i386_nacl.c:2211 eelf_i386_sol2.c:2342
-#: eelf_i386_vxworks.c:2231 eelf_iamcu.c:6748 eelf_k1om.c:7440
-#: eelf_k1om_fbsd.c:7095 eelf_l1om.c:7440 eelf_l1om_fbsd.c:7095
-#: eelf_s390.c:2151 eelf_x86_64.c:7497 eelf_x86_64_cloudabi.c:2217
-#: eelf_x86_64_fbsd.c:2224 eelf_x86_64_nacl.c:2217 eelf_x86_64_sol2.c:2348
-#: eh8300elf.c:1989 eh8300elf_linux.c:1989 eh8300helf.c:1989
-#: eh8300helf_linux.c:1989 eh8300hnelf.c:1989 eh8300self.c:1989
-#: eh8300self_linux.c:1989 eh8300snelf.c:1989 eh8300sxelf.c:1989
-#: eh8300sxelf_linux.c:1989 eh8300sxnelf.c:1989 ehppa64linux.c:2126
-#: ehppaelf.c:2278 ehppalinux.c:2455 ehppanbsd.c:2455 ehppaobsd.c:2455
-#: ei386lynx.c:2133 ei386moss.c:2126 ei386nto.c:2126 em32relf.c:1989
-#: em32relf_linux.c:2151 em32rlelf.c:1989 em32rlelf_linux.c:2151
-#: em68hc11elf.c:2282 em68hc11elfb.c:2282 em68hc12elf.c:2282
-#: em68hc12elfb.c:2282 em68kelf.c:2307 em68kelfnbsd.c:2307 em9s12zelf.c:1974
-#: emn10300.c:2126 ends32belf.c:2209 ends32belf16m.c:2209
-#: ends32belf_linux.c:2338 ends32elf.c:2209 ends32elf16m.c:2209
-#: ends32elf_linux.c:2338 enios2elf.c:2296 enios2linux.c:2433 eppclynx.c:2410
-#: epruelf.c:1994 escore3_elf.c:2146 escore7_elf.c:2146 eshelf.c:2126
-#: eshelf_fd.c:2151 eshelf_linux.c:2151 eshelf_nbsd.c:2126 eshelf_nto.c:2126
-#: eshelf_uclinux.c:2126 eshelf_vxworks.c:2163 eshlelf.c:2126
-#: eshlelf_fd.c:2151 eshlelf_linux.c:2151 eshlelf_nbsd.c:2126
-#: eshlelf_nto.c:2126 eshlelf_vxworks.c:2163 ev850.c:2020 ev850_rh850.c:2020
-#: exgateelf.c:1974
+#: eaarch64cloudabi.c:2475 eaarch64cloudabib.c:2475 eaarch64elf.c:2475
+#: eaarch64elf32.c:2475 eaarch64elf32b.c:2475 eaarch64elfb.c:2475
+#: eaarch64fbsd.c:2475 eaarch64fbsdb.c:2475 eaarch64linux.c:2482
+#: eaarch64linux32.c:2482 eaarch64linux32b.c:2482 eaarch64linuxb.c:2482
+#: earcelf.c:2097 earcelf_prof.c:1975 earclinux.c:2163 earclinux_nps.c:2163
+#: earclinux_prof.c:2108 earcv2elf.c:1975 earcv2elfx.c:1975 earmelf.c:2725
+#: earmelf_fbsd.c:2732 earmelf_fuchsia.c:2725 earmelf_linux.c:2725
+#: earmelf_linux_eabi.c:2725 earmelf_linux_fdpiceabi.c:2725
+#: earmelf_nacl.c:2725 earmelf_nbsd.c:2725 earmelf_phoenix.c:2725
+#: earmelf_vxworks.c:2761 earmelfb.c:2725 earmelfb_fbsd.c:2732
+#: earmelfb_fuchsia.c:2725 earmelfb_linux.c:2725 earmelfb_linux_eabi.c:2725
+#: earmelfb_linux_fdpiceabi.c:2725 earmelfb_nacl.c:2725 earmelfb_nbsd.c:2725
+#: earmnto.c:2700 earmsymbian.c:2725 eavr1.c:2198 eavr2.c:2198 eavr25.c:2198
+#: eavr3.c:2198 eavr31.c:2198 eavr35.c:2198 eavr4.c:2198 eavr5.c:2198
+#: eavr51.c:2198 eavr6.c:2198 eavrtiny.c:2198 eavrxmega1.c:2198
+#: eavrxmega2.c:2198 eavrxmega3.c:2198 eavrxmega4.c:2198 eavrxmega5.c:2198
+#: eavrxmega6.c:2198 eavrxmega7.c:2198 ecriself.c:1990 ecrislinux.c:2127
+#: ecskyelf.c:2246 ecskyelf_linux.c:2408 ed10velf.c:1975 eelf32_sparc.c:2152
+#: eelf32_sparc_sol2.c:2283 eelf32_sparc_vxworks.c:2189 eelf32_spu.c:2708
+#: eelf32_tic6x_be.c:2264 eelf32_tic6x_elf_be.c:2264
+#: eelf32_tic6x_elf_le.c:2264 eelf32_tic6x_le.c:2264
+#: eelf32_tic6x_linux_be.c:2264 eelf32_tic6x_linux_le.c:2264
+#: eelf32_x86_64.c:7442 eelf32_x86_64_nacl.c:2215 eelf32am33lin.c:2127
+#: eelf32b4300.c:2394 eelf32bfin.c:2144 eelf32bfinfd.c:2169 eelf32bmip.c:2394
+#: eelf32bmipn32.c:2412 eelf32bsmip.c:2412 eelf32btsmip.c:2394
+#: eelf32btsmip_fbsd.c:2401 eelf32btsmipn32.c:2394 eelf32btsmipn32_fbsd.c:2401
+#: eelf32cr16.c:2126 eelf32cr16c.c:1975 eelf32crx.c:2014 eelf32ebmip.c:2394
+#: eelf32ebmipvxworks.c:2429 eelf32elmip.c:2394 eelf32elmipvxworks.c:2429
+#: eelf32epiphany.c:1990 eelf32epiphany_4x4.c:1977 eelf32frvfd.c:2152
+#: eelf32ip2k.c:1990 eelf32l4300.c:2394 eelf32lm32.c:1990 eelf32lm32fd.c:2152
+#: eelf32lmip.c:2394 eelf32lppc.c:2417 eelf32lppclinux.c:2417
+#: eelf32lppcnto.c:2417 eelf32lppcsim.c:2417 eelf32lr5900.c:2257
+#: eelf32lr5900n32.c:2257 eelf32lriscv.c:2206 eelf32lriscv_ilp32.c:2206
+#: eelf32lriscv_ilp32f.c:2206 eelf32lsmip.c:2394 eelf32ltsmip.c:2394
+#: eelf32ltsmip_fbsd.c:2401 eelf32ltsmipn32.c:2394 eelf32ltsmipn32_fbsd.c:2401
+#: eelf32m32c.c:2001 eelf32mb_linux.c:2152 eelf32mbel_linux.c:2152
+#: eelf32mcore.c:1996 eelf32mep.c:1975 eelf32metag.c:2422
+#: eelf32microblaze.c:1975 eelf32microblazeel.c:1975 eelf32mipswindiss.c:2232
+#: eelf32or1k.c:1990 eelf32or1k_linux.c:2152 eelf32ppc.c:2417
+#: eelf32ppc_fbsd.c:2424 eelf32ppclinux.c:2417 eelf32ppcnto.c:2417
+#: eelf32ppcsim.c:2417 eelf32ppcvxworks.c:2391 eelf32ppcwindiss.c:2417
+#: eelf32rl78.c:1990 eelf32rx.c:2018 eelf32tilegx.c:2152
+#: eelf32tilegx_be.c:2152 eelf32tilepro.c:2152 eelf32vax.c:2127
+#: eelf32visium.c:1975 eelf32xc16x.c:1975 eelf32xc16xl.c:1975
+#: eelf32xc16xs.c:1975 eelf32xstormy16.c:1986 eelf32xtensa.c:4051
+#: eelf64_aix.c:2127 eelf64_ia64.c:2182 eelf64_ia64_fbsd.c:2189
+#: eelf64_s390.c:2222 eelf64_sparc.c:2152 eelf64_sparc_fbsd.c:2159
+#: eelf64_sparc_sol2.c:2283 eelf64alpha.c:2245 eelf64alpha_fbsd.c:2252
+#: eelf64alpha_nbsd.c:2245 eelf64bmip.c:2412 eelf64btsmip.c:2394
+#: eelf64btsmip_fbsd.c:2401 eelf64hppa.c:2097 eelf64lppc.c:2872
+#: eelf64lriscv.c:2206 eelf64lriscv_lp64.c:2206 eelf64lriscv_lp64f.c:2206
+#: eelf64ltsmip.c:2394 eelf64ltsmip_fbsd.c:2401 eelf64mmix.c:5890
+#: eelf64ppc.c:2872 eelf64ppc_fbsd.c:2879 eelf64rdos.c:2162
+#: eelf64tilegx.c:2152 eelf64tilegx_be.c:2152 eelf_i386.c:7061
+#: eelf_i386_be.c:2170 eelf_i386_chaos.c:2150 eelf_i386_fbsd.c:2219
+#: eelf_i386_ldso.c:2187 eelf_i386_nacl.c:2212 eelf_i386_sol2.c:2343
+#: eelf_i386_vxworks.c:2232 eelf_iamcu.c:6700 eelf_k1om.c:7388
+#: eelf_k1om_fbsd.c:7043 eelf_l1om.c:7388 eelf_l1om_fbsd.c:7043
+#: eelf_s390.c:2152 eelf_x86_64.c:7445 eelf_x86_64_cloudabi.c:2218
+#: eelf_x86_64_fbsd.c:2225 eelf_x86_64_nacl.c:2218 eelf_x86_64_sol2.c:2349
+#: eh8300elf.c:1990 eh8300elf_linux.c:1990 eh8300helf.c:1990
+#: eh8300helf_linux.c:1990 eh8300hnelf.c:1990 eh8300self.c:1990
+#: eh8300self_linux.c:1990 eh8300snelf.c:1990 eh8300sxelf.c:1990
+#: eh8300sxelf_linux.c:1990 eh8300sxnelf.c:1990 ehppa64linux.c:2127
+#: ehppaelf.c:2279 ehppalinux.c:2456 ehppanbsd.c:2456 ehppaobsd.c:2456
+#: ei386lynx.c:2134 ei386moss.c:2127 ei386nto.c:2127 em32relf.c:1990
+#: em32relf_linux.c:2152 em32rlelf.c:1990 em32rlelf_linux.c:2152
+#: em68hc11elf.c:2283 em68hc11elfb.c:2283 em68hc12elf.c:2283
+#: em68hc12elfb.c:2283 em68kelf.c:2308 em68kelfnbsd.c:2308 em9s12zelf.c:1975
+#: emn10300.c:2127 ends32belf.c:2110 ends32belf16m.c:2110
+#: ends32belf_linux.c:2239 ends32elf.c:2110 ends32elf16m.c:2110
+#: ends32elf_linux.c:2239 enios2elf.c:2297 enios2linux.c:2434 eppclynx.c:2424
+#: epruelf.c:1995 escore3_elf.c:2147 escore7_elf.c:2147 eshelf.c:2127
+#: eshelf_fd.c:2152 eshelf_linux.c:2152 eshelf_nbsd.c:2127 eshelf_nto.c:2127
+#: eshelf_uclinux.c:2127 eshelf_vxworks.c:2164 eshlelf.c:2127
+#: eshlelf_fd.c:2152 eshlelf_linux.c:2152 eshlelf_nbsd.c:2127
+#: eshlelf_nto.c:2127 eshlelf_vxworks.c:2164 ev850.c:2021 ev850_rh850.c:2021
 msgid "%P: warning: -z %s ignored\n"
 msgstr "%P : avertissement : -z %s ignoré\n"
 
-#: eaarch64cloudabi.c:2525 eaarch64cloudabib.c:2525 eaarch64elf.c:2525
-#: eaarch64elf32.c:2525 eaarch64elf32b.c:2525 eaarch64elfb.c:2525
-#: eaarch64fbsd.c:2525 eaarch64fbsdb.c:2525 eaarch64linux.c:2532
-#: eaarch64linux32.c:2532 eaarch64linux32b.c:2532 eaarch64linuxb.c:2532
-#: earmelf.c:2861 earmelf_fbsd.c:2868 earmelf_fuchsia.c:2861
-#: earmelf_linux.c:2861 earmelf_linux_eabi.c:2861
-#: earmelf_linux_fdpiceabi.c:2861 earmelf_nacl.c:2861 earmelf_nbsd.c:2861
-#: earmelf_phoenix.c:2861 earmelf_vxworks.c:2901 earmelfb.c:2861
-#: earmelfb_fbsd.c:2868 earmelfb_fuchsia.c:2861 earmelfb_linux.c:2861
-#: earmelfb_linux_eabi.c:2861 earmelfb_linux_fdpiceabi.c:2861
-#: earmelfb_nacl.c:2861 earmelfb_nbsd.c:2861 earmnto.c:2836 earmsymbian.c:2861
+#: eaarch64cloudabi.c:2526 eaarch64cloudabib.c:2526 eaarch64elf.c:2526
+#: eaarch64elf32.c:2526 eaarch64elf32b.c:2526 eaarch64elfb.c:2526
+#: eaarch64fbsd.c:2526 eaarch64fbsdb.c:2526 eaarch64linux.c:2533
+#: eaarch64linux32.c:2533 eaarch64linux32b.c:2533 eaarch64linuxb.c:2533
+#: earmelf.c:2862 earmelf_fbsd.c:2869 earmelf_fuchsia.c:2862
+#: earmelf_linux.c:2862 earmelf_linux_eabi.c:2862
+#: earmelf_linux_fdpiceabi.c:2862 earmelf_nacl.c:2862 earmelf_nbsd.c:2862
+#: earmelf_phoenix.c:2862 earmelf_vxworks.c:2902 earmelfb.c:2862
+#: earmelfb_fbsd.c:2869 earmelfb_fuchsia.c:2862 earmelfb_linux.c:2862
+#: earmelfb_linux_eabi.c:2862 earmelfb_linux_fdpiceabi.c:2862
+#: earmelfb_nacl.c:2862 earmelfb_nbsd.c:2862 earmnto.c:2837 earmsymbian.c:2862
 #, c-format
 msgid ""
 "  --no-enum-size-warning      Don't warn about objects with incompatible\n"
@@ -4983,40 +5003,51 @@ msgstr ""
 "  --no-enum-size-warning      Ne pas avertir des objets avec des tailles\n"
 "                                d'enumération non compatibles\n"
 
-#: eaarch64cloudabi.c:2527 eaarch64cloudabib.c:2527 eaarch64elf.c:2527
-#: eaarch64elf32.c:2527 eaarch64elf32b.c:2527 eaarch64elfb.c:2527
-#: eaarch64fbsd.c:2527 eaarch64fbsdb.c:2527 eaarch64linux.c:2534
-#: eaarch64linux32.c:2534 eaarch64linux32b.c:2534 eaarch64linuxb.c:2534
-#, c-format
-msgid "  --no-wchar-size-warning     Don't warn about objects with incompatible                                wchar_t sizes\n"
-msgstr "  --no-wchar-size-warning    Ne pas avertir des objets avec des tailles de wchar_t incompatibles\n"
-
-#: eaarch64cloudabi.c:2529 eaarch64cloudabib.c:2529 eaarch64elf.c:2529
-#: eaarch64elf32.c:2529 eaarch64elf32b.c:2529 eaarch64elfb.c:2529
-#: eaarch64fbsd.c:2529 eaarch64fbsdb.c:2529 eaarch64linux.c:2536
-#: eaarch64linux32.c:2536 eaarch64linux32b.c:2536 eaarch64linuxb.c:2536
-#: earmelf.c:2865 earmelf_fbsd.c:2872 earmelf_fuchsia.c:2865
-#: earmelf_linux.c:2865 earmelf_linux_eabi.c:2865
-#: earmelf_linux_fdpiceabi.c:2865 earmelf_nacl.c:2865 earmelf_nbsd.c:2865
-#: earmelf_phoenix.c:2865 earmelf_vxworks.c:2905 earmelfb.c:2865
-#: earmelfb_fbsd.c:2872 earmelfb_fuchsia.c:2865 earmelfb_linux.c:2865
-#: earmelfb_linux_eabi.c:2865 earmelfb_linux_fdpiceabi.c:2865
-#: earmelfb_nacl.c:2865 earmelfb_nbsd.c:2865 earmnto.c:2840 earmsymbian.c:2865
+#: eaarch64cloudabi.c:2528 eaarch64cloudabib.c:2528 eaarch64elf.c:2528
+#: eaarch64elf32.c:2528 eaarch64elf32b.c:2528 eaarch64elfb.c:2528
+#: eaarch64fbsd.c:2528 eaarch64fbsdb.c:2528 eaarch64linux.c:2535
+#: eaarch64linux32.c:2535 eaarch64linux32b.c:2535 eaarch64linuxb.c:2535
+#: earmelf.c:2864 earmelf_fbsd.c:2871 earmelf_fuchsia.c:2864
+#: earmelf_linux.c:2864 earmelf_linux_eabi.c:2864
+#: earmelf_linux_fdpiceabi.c:2864 earmelf_nacl.c:2864 earmelf_nbsd.c:2864
+#: earmelf_phoenix.c:2864 earmelf_vxworks.c:2904 earmelfb.c:2864
+#: earmelfb_fbsd.c:2871 earmelfb_fuchsia.c:2864 earmelfb_linux.c:2864
+#: earmelfb_linux_eabi.c:2864 earmelfb_linux_fdpiceabi.c:2864
+#: earmelfb_nacl.c:2864 earmelfb_nbsd.c:2864 earmnto.c:2839 earmsymbian.c:2864
 #, c-format
-msgid "  --pic-veneer                Always generate PIC interworking veneers\n"
-msgstr "  --pic-veneer                Toujours générer le vernissage d'inter opérabilité PIC\n"
+msgid ""
+"  --no-wchar-size-warning     Don't warn about objects with incompatible\n"
+"                                wchar_t sizes\n"
+msgstr ""
+"  --no-wchar-size-warning     Ne pas avertir des objets avec des tailles de\n"
+"                                wchar_t incompatibles\n"
 
 #: eaarch64cloudabi.c:2530 eaarch64cloudabib.c:2530 eaarch64elf.c:2530
 #: eaarch64elf32.c:2530 eaarch64elf32b.c:2530 eaarch64elfb.c:2530
 #: eaarch64fbsd.c:2530 eaarch64fbsdb.c:2530 eaarch64linux.c:2537
 #: eaarch64linux32.c:2537 eaarch64linux32b.c:2537 eaarch64linuxb.c:2537
-#: earmelf.c:2872 earmelf_fbsd.c:2879 earmelf_fuchsia.c:2872
-#: earmelf_linux.c:2872 earmelf_linux_eabi.c:2872
-#: earmelf_linux_fdpiceabi.c:2872 earmelf_nacl.c:2872 earmelf_nbsd.c:2872
-#: earmelf_phoenix.c:2872 earmelf_vxworks.c:2912 earmelfb.c:2872
-#: earmelfb_fbsd.c:2879 earmelfb_fuchsia.c:2872 earmelfb_linux.c:2872
-#: earmelfb_linux_eabi.c:2872 earmelfb_linux_fdpiceabi.c:2872
-#: earmelfb_nacl.c:2872 earmelfb_nbsd.c:2872 earmnto.c:2847 earmsymbian.c:2872
+#: earmelf.c:2866 earmelf_fbsd.c:2873 earmelf_fuchsia.c:2866
+#: earmelf_linux.c:2866 earmelf_linux_eabi.c:2866
+#: earmelf_linux_fdpiceabi.c:2866 earmelf_nacl.c:2866 earmelf_nbsd.c:2866
+#: earmelf_phoenix.c:2866 earmelf_vxworks.c:2906 earmelfb.c:2866
+#: earmelfb_fbsd.c:2873 earmelfb_fuchsia.c:2866 earmelfb_linux.c:2866
+#: earmelfb_linux_eabi.c:2866 earmelfb_linux_fdpiceabi.c:2866
+#: earmelfb_nacl.c:2866 earmelfb_nbsd.c:2866 earmnto.c:2841 earmsymbian.c:2866
+#, c-format
+msgid "  --pic-veneer                Always generate PIC interworking veneers\n"
+msgstr "  --pic-veneer                Toujours générer le vernissage d'inter opérabilité PIC\n"
+
+#: eaarch64cloudabi.c:2531 eaarch64cloudabib.c:2531 eaarch64elf.c:2531
+#: eaarch64elf32.c:2531 eaarch64elf32b.c:2531 eaarch64elfb.c:2531
+#: eaarch64fbsd.c:2531 eaarch64fbsdb.c:2531 eaarch64linux.c:2538
+#: eaarch64linux32.c:2538 eaarch64linux32b.c:2538 eaarch64linuxb.c:2538
+#: earmelf.c:2873 earmelf_fbsd.c:2880 earmelf_fuchsia.c:2873
+#: earmelf_linux.c:2873 earmelf_linux_eabi.c:2873
+#: earmelf_linux_fdpiceabi.c:2873 earmelf_nacl.c:2873 earmelf_nbsd.c:2873
+#: earmelf_phoenix.c:2873 earmelf_vxworks.c:2913 earmelfb.c:2873
+#: earmelfb_fbsd.c:2880 earmelfb_fuchsia.c:2873 earmelfb_linux.c:2873
+#: earmelfb_linux_eabi.c:2873 earmelfb_linux_fdpiceabi.c:2873
+#: earmelfb_nacl.c:2873 earmelfb_nbsd.c:2873 earmnto.c:2848 earmsymbian.c:2873
 #, c-format
 msgid ""
 "  --stub-group-size=N         Maximum size of a group of input sections that\n"
@@ -5037,27 +5068,27 @@ msgstr ""
 "                                Les valeurs +/-1 indiquent que l'éditeur de liens doit\n"
 "                                choisir des règlages par défaut appropriés.\n"
 
-#: eaarch64cloudabi.c:2539 eaarch64cloudabib.c:2539 eaarch64elf.c:2539
-#: eaarch64elf32.c:2539 eaarch64elf32b.c:2539 eaarch64elfb.c:2539
-#: eaarch64fbsd.c:2539 eaarch64fbsdb.c:2539 eaarch64linux.c:2546
-#: eaarch64linux32.c:2546 eaarch64linux32b.c:2546 eaarch64linuxb.c:2546
-#, c-format
-msgid "  --fix-cortex-a53-835769      Fix erratum 835769\n"
-msgstr "  --fix-cortex-a53-835769      Corrige l'erratum 835769\n"
-
 #: eaarch64cloudabi.c:2540 eaarch64cloudabib.c:2540 eaarch64elf.c:2540
 #: eaarch64elf32.c:2540 eaarch64elf32b.c:2540 eaarch64elfb.c:2540
 #: eaarch64fbsd.c:2540 eaarch64fbsdb.c:2540 eaarch64linux.c:2547
 #: eaarch64linux32.c:2547 eaarch64linux32b.c:2547 eaarch64linuxb.c:2547
 #, c-format
-msgid "  --fix-cortex-a53-843419      Fix erratum 843419\n"
-msgstr "  --fix-cortex-a53-843419      Corrige l'erratum 843419\n"
+msgid "  --fix-cortex-a53-835769      Fix erratum 835769\n"
+msgstr "  --fix-cortex-a53-835769      Corrige l'erratum 835769\n"
 
 #: eaarch64cloudabi.c:2541 eaarch64cloudabib.c:2541 eaarch64elf.c:2541
 #: eaarch64elf32.c:2541 eaarch64elf32b.c:2541 eaarch64elfb.c:2541
 #: eaarch64fbsd.c:2541 eaarch64fbsdb.c:2541 eaarch64linux.c:2548
 #: eaarch64linux32.c:2548 eaarch64linux32b.c:2548 eaarch64linuxb.c:2548
 #, c-format
+msgid "  --fix-cortex-a53-843419      Fix erratum 843419\n"
+msgstr "  --fix-cortex-a53-843419      Corrige l'erratum 843419\n"
+
+#: eaarch64cloudabi.c:2542 eaarch64cloudabib.c:2542 eaarch64elf.c:2542
+#: eaarch64elf32.c:2542 eaarch64elf32b.c:2542 eaarch64elfb.c:2542
+#: eaarch64fbsd.c:2542 eaarch64fbsdb.c:2542 eaarch64linux.c:2549
+#: eaarch64linux32.c:2549 eaarch64linux32b.c:2549 eaarch64linuxb.c:2549
+#, c-format
 msgid "  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations\n"
 msgstr "  --no-apply-dynamic-relocs    Ne pas appliquer de valeurs à l'édition de liens pour les relocalisations dynamiques\n"
 
@@ -5576,7 +5607,7 @@ msgstr "%F%P : nombre hexadécimal invalide pour un paramètre PE « %s »\n"
 msgid "%F%P: strange hex info for PE parameter '%s'\n"
 msgstr "%F%P : info étrange en hexadécimal pour un paramètre PE « %s »\n"
 
-#: earm_wince_pe.c:638 earmpe.c:638 eelf32mcore.c:2001 ei386beos.c:265
+#: earm_wince_pe.c:638 earmpe.c:638 eelf32mcore.c:2002 ei386beos.c:265
 #: ei386pe.c:638 ei386pe_posix.c:638 ei386pep.c:615 emcorepe.c:638
 #: eppcpe.c:638 eshpe.c:638
 msgid "%F%P: cannot open base file %s\n"
@@ -5693,37 +5724,26 @@ msgstr "%F%P : %s : impossible d'ouvrir : %E\n"
 msgid "%F%P: %s: not a relocatable file: %E\n"
 msgstr "%F%P : %s : n'st pas un fichier relocalisable : %E\n"
 
-#: earmelf.c:2771 earmelf_fbsd.c:2778 earmelf_fuchsia.c:2771
-#: earmelf_linux.c:2771 earmelf_linux_eabi.c:2771
-#: earmelf_linux_fdpiceabi.c:2771 earmelf_nacl.c:2771 earmelf_nbsd.c:2771
-#: earmelf_phoenix.c:2771 earmelf_vxworks.c:2807 earmelfb.c:2771
-#: earmelfb_fbsd.c:2778 earmelfb_fuchsia.c:2771 earmelfb_linux.c:2771
-#: earmelfb_linux_eabi.c:2771 earmelfb_linux_fdpiceabi.c:2771
-#: earmelfb_nacl.c:2771 earmelfb_nbsd.c:2771 earmnto.c:2746 earmsymbian.c:2771
+#: earmelf.c:2772 earmelf_fbsd.c:2779 earmelf_fuchsia.c:2772
+#: earmelf_linux.c:2772 earmelf_linux_eabi.c:2772
+#: earmelf_linux_fdpiceabi.c:2772 earmelf_nacl.c:2772 earmelf_nbsd.c:2772
+#: earmelf_phoenix.c:2772 earmelf_vxworks.c:2808 earmelfb.c:2772
+#: earmelfb_fbsd.c:2779 earmelfb_fuchsia.c:2772 earmelfb_linux.c:2772
+#: earmelfb_linux_eabi.c:2772 earmelfb_linux_fdpiceabi.c:2772
+#: earmelfb_nacl.c:2772 earmelfb_nbsd.c:2772 earmnto.c:2747 earmsymbian.c:2772
 msgid "%P: unrecognized VFP11 fix type '%s'\n"
 msgstr "%P : type VFP11 de réparation '%s' non reconnu\n"
 
-#: earmelf.c:2784 earmelf_fbsd.c:2791 earmelf_fuchsia.c:2784
-#: earmelf_linux.c:2784 earmelf_linux_eabi.c:2784
-#: earmelf_linux_fdpiceabi.c:2784 earmelf_nacl.c:2784 earmelf_nbsd.c:2784
-#: earmelf_phoenix.c:2784 earmelf_vxworks.c:2820 earmelfb.c:2784
-#: earmelfb_fbsd.c:2791 earmelfb_fuchsia.c:2784 earmelfb_linux.c:2784
-#: earmelfb_linux_eabi.c:2784 earmelfb_linux_fdpiceabi.c:2784
-#: earmelfb_nacl.c:2784 earmelfb_nbsd.c:2784 earmnto.c:2759 earmsymbian.c:2784
+#: earmelf.c:2785 earmelf_fbsd.c:2792 earmelf_fuchsia.c:2785
+#: earmelf_linux.c:2785 earmelf_linux_eabi.c:2785
+#: earmelf_linux_fdpiceabi.c:2785 earmelf_nacl.c:2785 earmelf_nbsd.c:2785
+#: earmelf_phoenix.c:2785 earmelf_vxworks.c:2821 earmelfb.c:2785
+#: earmelfb_fbsd.c:2792 earmelfb_fuchsia.c:2785 earmelfb_linux.c:2785
+#: earmelfb_linux_eabi.c:2785 earmelfb_linux_fdpiceabi.c:2785
+#: earmelfb_nacl.c:2785 earmelfb_nbsd.c:2785 earmnto.c:2760 earmsymbian.c:2785
 msgid "%P: unrecognized STM32L4XX fix type '%s'\n"
 msgstr "%P : type de réparation STM32L4XX '%s' non reconnu\n"
 
-#: earmelf.c:2851 earmelf_fbsd.c:2858 earmelf_fuchsia.c:2851
-#: earmelf_linux.c:2851 earmelf_linux_eabi.c:2851
-#: earmelf_linux_fdpiceabi.c:2851 earmelf_nacl.c:2851 earmelf_nbsd.c:2851
-#: earmelf_phoenix.c:2851 earmelf_vxworks.c:2891 earmelfb.c:2851
-#: earmelfb_fbsd.c:2858 earmelfb_fuchsia.c:2851 earmelfb_linux.c:2851
-#: earmelfb_linux_eabi.c:2851 earmelfb_linux_fdpiceabi.c:2851
-#: earmelfb_nacl.c:2851 earmelfb_nbsd.c:2851 earmnto.c:2826 earmsymbian.c:2851
-#, c-format
-msgid "  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>\n"
-msgstr "  --thumb-entry=<sym>         Initialiser le point d'entrée au symbole Thumb <sym>\n"
-
 #: earmelf.c:2852 earmelf_fbsd.c:2859 earmelf_fuchsia.c:2852
 #: earmelf_linux.c:2852 earmelf_linux_eabi.c:2852
 #: earmelf_linux_fdpiceabi.c:2852 earmelf_nacl.c:2852 earmelf_nbsd.c:2852
@@ -5732,8 +5752,8 @@ msgstr "  --thumb-entry=<sym>         Initialiser le point d'entrée au symbole
 #: earmelfb_linux_eabi.c:2852 earmelfb_linux_fdpiceabi.c:2852
 #: earmelfb_nacl.c:2852 earmelfb_nbsd.c:2852 earmnto.c:2827 earmsymbian.c:2852
 #, c-format
-msgid "  --be8                       Output BE8 format image\n"
-msgstr "  --be8                       Retourne une image au format BE8\n"
+msgid "  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>\n"
+msgstr "  --thumb-entry=<sym>         Initialiser le point d'entrée au symbole Thumb <sym>\n"
 
 #: earmelf.c:2853 earmelf_fbsd.c:2860 earmelf_fuchsia.c:2853
 #: earmelf_linux.c:2853 earmelf_linux_eabi.c:2853
@@ -5743,8 +5763,8 @@ msgstr "  --be8                       Retourne une image au format BE8\n"
 #: earmelfb_linux_eabi.c:2853 earmelfb_linux_fdpiceabi.c:2853
 #: earmelfb_nacl.c:2853 earmelfb_nbsd.c:2853 earmnto.c:2828 earmsymbian.c:2853
 #, c-format
-msgid "  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32\n"
-msgstr "  --target1-rel               Interprête R_ARM_TARGET1 comme R_ARM_REL32\n"
+msgid "  --be8                       Output BE8 format image\n"
+msgstr "  --be8                       Retourne une image au format BE8\n"
 
 #: earmelf.c:2854 earmelf_fbsd.c:2861 earmelf_fuchsia.c:2854
 #: earmelf_linux.c:2854 earmelf_linux_eabi.c:2854
@@ -5754,8 +5774,8 @@ msgstr "  --target1-rel               Interprête R_ARM_TARGET1 comme R_ARM_REL3
 #: earmelfb_linux_eabi.c:2854 earmelfb_linux_fdpiceabi.c:2854
 #: earmelfb_nacl.c:2854 earmelfb_nbsd.c:2854 earmnto.c:2829 earmsymbian.c:2854
 #, c-format
-msgid "  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32\n"
-msgstr "  --target1-abs               Interprête R_ARM_TARGET1 comme R_ARM_ABS32\n"
+msgid "  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32\n"
+msgstr "  --target1-rel               Interprête R_ARM_TARGET1 comme R_ARM_REL32\n"
 
 #: earmelf.c:2855 earmelf_fbsd.c:2862 earmelf_fuchsia.c:2855
 #: earmelf_linux.c:2855 earmelf_linux_eabi.c:2855
@@ -5765,8 +5785,8 @@ msgstr "  --target1-abs               Interprête R_ARM_TARGET1 comme R_ARM_ABS3
 #: earmelfb_linux_eabi.c:2855 earmelfb_linux_fdpiceabi.c:2855
 #: earmelfb_nacl.c:2855 earmelfb_nbsd.c:2855 earmnto.c:2830 earmsymbian.c:2855
 #, c-format
-msgid "  --target2=<type>            Specify definition of R_ARM_TARGET2\n"
-msgstr "  --target2=<type>            Specifie la définition de R_ARM_TARGET2\n"
+msgid "  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32\n"
+msgstr "  --target1-abs               Interprête R_ARM_TARGET1 comme R_ARM_ABS32\n"
 
 #: earmelf.c:2856 earmelf_fbsd.c:2863 earmelf_fuchsia.c:2856
 #: earmelf_linux.c:2856 earmelf_linux_eabi.c:2856
@@ -5776,8 +5796,8 @@ msgstr "  --target2=<type>            Specifie la définition de R_ARM_TARGET2\n
 #: earmelfb_linux_eabi.c:2856 earmelfb_linux_fdpiceabi.c:2856
 #: earmelfb_nacl.c:2856 earmelfb_nbsd.c:2856 earmnto.c:2831 earmsymbian.c:2856
 #, c-format
-msgid "  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4\n"
-msgstr "  --fix-v4bx                  Réécrit BX rn en MOV pc, rn pour ARMv4\n"
+msgid "  --target2=<type>            Specify definition of R_ARM_TARGET2\n"
+msgstr "  --target2=<type>            Specifie la définition de R_ARM_TARGET2\n"
 
 #: earmelf.c:2857 earmelf_fbsd.c:2864 earmelf_fuchsia.c:2857
 #: earmelf_linux.c:2857 earmelf_linux_eabi.c:2857
@@ -5787,8 +5807,8 @@ msgstr "  --fix-v4bx                  Réécrit BX rn en MOV pc, rn pour ARMv4\n
 #: earmelfb_linux_eabi.c:2857 earmelfb_linux_fdpiceabi.c:2857
 #: earmelfb_nacl.c:2857 earmelfb_nbsd.c:2857 earmnto.c:2832 earmsymbian.c:2857
 #, c-format
-msgid "  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer\n"
-msgstr "  --fix-v4bx-interworking     Réécrire les branches BX rn en vernis ARMv4 interopérable\n"
+msgid "  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4\n"
+msgstr "  --fix-v4bx                  Réécrit BX rn en MOV pc, rn pour ARMv4\n"
 
 #: earmelf.c:2858 earmelf_fbsd.c:2865 earmelf_fuchsia.c:2858
 #: earmelf_linux.c:2858 earmelf_linux_eabi.c:2858
@@ -5798,8 +5818,8 @@ msgstr "  --fix-v4bx-interworking     Réécrire les branches BX rn en vernis AR
 #: earmelfb_linux_eabi.c:2858 earmelfb_linux_fdpiceabi.c:2858
 #: earmelfb_nacl.c:2858 earmelfb_nbsd.c:2858 earmnto.c:2833 earmsymbian.c:2858
 #, c-format
-msgid "  --use-blx                   Enable use of BLX instructions\n"
-msgstr "  --use-blx                   Activer l'utilisation d'instructions BLX\n"
+msgid "  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer\n"
+msgstr "  --fix-v4bx-interworking     Réécrire les branches BX rn en vernis ARMv4 interopérable\n"
 
 #: earmelf.c:2859 earmelf_fbsd.c:2866 earmelf_fuchsia.c:2859
 #: earmelf_linux.c:2859 earmelf_linux_eabi.c:2859
@@ -5809,8 +5829,8 @@ msgstr "  --use-blx                   Activer l'utilisation d'instructions BLX\n
 #: earmelfb_linux_eabi.c:2859 earmelfb_linux_fdpiceabi.c:2859
 #: earmelfb_nacl.c:2859 earmelfb_nbsd.c:2859 earmnto.c:2834 earmsymbian.c:2859
 #, c-format
-msgid "  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum\n"
-msgstr "  --vfp11-denorm-fix          Specifie comment résoudre l'erratum de dénormalisation VFP11\n"
+msgid "  --use-blx                   Enable use of BLX instructions\n"
+msgstr "  --use-blx                   Activer l'utilisation d'instructions BLX\n"
 
 #: earmelf.c:2860 earmelf_fbsd.c:2867 earmelf_fuchsia.c:2860
 #: earmelf_linux.c:2860 earmelf_linux_eabi.c:2860
@@ -5820,31 +5840,27 @@ msgstr "  --vfp11-denorm-fix          Specifie comment résoudre l'erratum de d
 #: earmelfb_linux_eabi.c:2860 earmelfb_linux_fdpiceabi.c:2860
 #: earmelfb_nacl.c:2860 earmelfb_nbsd.c:2860 earmnto.c:2835 earmsymbian.c:2860
 #, c-format
-msgid "  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum\n"
-msgstr "  --fix-stm32l4xx-629360      Spécifie comment corriger l'erratum STM32L4XX 629360\n"
+msgid "  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum\n"
+msgstr "  --vfp11-denorm-fix          Specifie comment résoudre l'erratum de dénormalisation VFP11\n"
 
-#: earmelf.c:2863 earmelf_fbsd.c:2870 earmelf_fuchsia.c:2863
-#: earmelf_linux.c:2863 earmelf_linux_eabi.c:2863
-#: earmelf_linux_fdpiceabi.c:2863 earmelf_nacl.c:2863 earmelf_nbsd.c:2863
-#: earmelf_phoenix.c:2863 earmelf_vxworks.c:2903 earmelfb.c:2863
-#: earmelfb_fbsd.c:2870 earmelfb_fuchsia.c:2863 earmelfb_linux.c:2863
-#: earmelfb_linux_eabi.c:2863 earmelfb_linux_fdpiceabi.c:2863
-#: earmelfb_nacl.c:2863 earmelfb_nbsd.c:2863 earmnto.c:2838 earmsymbian.c:2863
+#: earmelf.c:2861 earmelf_fbsd.c:2868 earmelf_fuchsia.c:2861
+#: earmelf_linux.c:2861 earmelf_linux_eabi.c:2861
+#: earmelf_linux_fdpiceabi.c:2861 earmelf_nacl.c:2861 earmelf_nbsd.c:2861
+#: earmelf_phoenix.c:2861 earmelf_vxworks.c:2901 earmelfb.c:2861
+#: earmelfb_fbsd.c:2868 earmelfb_fuchsia.c:2861 earmelfb_linux.c:2861
+#: earmelfb_linux_eabi.c:2861 earmelfb_linux_fdpiceabi.c:2861
+#: earmelfb_nacl.c:2861 earmelfb_nbsd.c:2861 earmnto.c:2836 earmsymbian.c:2861
 #, c-format
-msgid ""
-"  --no-wchar-size-warning     Don't warn about objects with incompatible\n"
-"                                wchar_t sizes\n"
-msgstr ""
-"  --no-wchar-size-warning     Ne pas avertir des objets avec des tailles de\n"
-"                                wchar_t incompatibles\n"
+msgid "  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum\n"
+msgstr "  --fix-stm32l4xx-629360      Spécifie comment corriger l'erratum STM32L4XX 629360\n"
 
-#: earmelf.c:2866 earmelf_fbsd.c:2873 earmelf_fuchsia.c:2866
-#: earmelf_linux.c:2866 earmelf_linux_eabi.c:2866
-#: earmelf_linux_fdpiceabi.c:2866 earmelf_nacl.c:2866 earmelf_nbsd.c:2866
-#: earmelf_phoenix.c:2866 earmelf_vxworks.c:2906 earmelfb.c:2866
-#: earmelfb_fbsd.c:2873 earmelfb_fuchsia.c:2866 earmelfb_linux.c:2866
-#: earmelfb_linux_eabi.c:2866 earmelfb_linux_fdpiceabi.c:2866
-#: earmelfb_nacl.c:2866 earmelfb_nbsd.c:2866 earmnto.c:2841 earmsymbian.c:2866
+#: earmelf.c:2867 earmelf_fbsd.c:2874 earmelf_fuchsia.c:2867
+#: earmelf_linux.c:2867 earmelf_linux_eabi.c:2867
+#: earmelf_linux_fdpiceabi.c:2867 earmelf_nacl.c:2867 earmelf_nbsd.c:2867
+#: earmelf_phoenix.c:2867 earmelf_vxworks.c:2907 earmelfb.c:2867
+#: earmelfb_fbsd.c:2874 earmelfb_fuchsia.c:2867 earmelfb_linux.c:2867
+#: earmelfb_linux_eabi.c:2867 earmelfb_linux_fdpiceabi.c:2867
+#: earmelfb_nacl.c:2867 earmelfb_nbsd.c:2867 earmnto.c:2842 earmsymbian.c:2867
 #, c-format
 msgid ""
 "  --long-plt                  Generate long .plt entries\n"
@@ -5853,13 +5869,13 @@ msgstr ""
 "  --long-plt                  Générer de longues entrées .plt\n"
 "                              pour gérer de larges déplacements .plt/.got\n"
 
-#: earmelf.c:2868 earmelf_fbsd.c:2875 earmelf_fuchsia.c:2868
-#: earmelf_linux.c:2868 earmelf_linux_eabi.c:2868
-#: earmelf_linux_fdpiceabi.c:2868 earmelf_nacl.c:2868 earmelf_nbsd.c:2868
-#: earmelf_phoenix.c:2868 earmelf_vxworks.c:2908 earmelfb.c:2868
-#: earmelfb_fbsd.c:2875 earmelfb_fuchsia.c:2868 earmelfb_linux.c:2868
-#: earmelfb_linux_eabi.c:2868 earmelfb_linux_fdpiceabi.c:2868
-#: earmelfb_nacl.c:2868 earmelfb_nbsd.c:2868 earmnto.c:2843 earmsymbian.c:2868
+#: earmelf.c:2869 earmelf_fbsd.c:2876 earmelf_fuchsia.c:2869
+#: earmelf_linux.c:2869 earmelf_linux_eabi.c:2869
+#: earmelf_linux_fdpiceabi.c:2869 earmelf_nacl.c:2869 earmelf_nbsd.c:2869
+#: earmelf_phoenix.c:2869 earmelf_vxworks.c:2909 earmelfb.c:2869
+#: earmelfb_fbsd.c:2876 earmelfb_fuchsia.c:2869 earmelfb_linux.c:2869
+#: earmelfb_linux_eabi.c:2869 earmelfb_linux_fdpiceabi.c:2869
+#: earmelfb_nacl.c:2869 earmelfb_nbsd.c:2869 earmnto.c:2844 earmsymbian.c:2869
 #, c-format
 msgid ""
 "  --cmse-implib               Make import library to be a secure gateway import\n"
@@ -5868,13 +5884,13 @@ msgstr ""
 "  --cmse-implib               Rendre la bibliothèque d'import comme étant une biliothèque passerelle d'import\n"
 "                                sécurisée selon les extensions de sécurité ARMv8-M\n"
 
-#: earmelf.c:2870 earmelf_fbsd.c:2877 earmelf_fuchsia.c:2870
-#: earmelf_linux.c:2870 earmelf_linux_eabi.c:2870
-#: earmelf_linux_fdpiceabi.c:2870 earmelf_nacl.c:2870 earmelf_nbsd.c:2870
-#: earmelf_phoenix.c:2870 earmelf_vxworks.c:2910 earmelfb.c:2870
-#: earmelfb_fbsd.c:2877 earmelfb_fuchsia.c:2870 earmelfb_linux.c:2870
-#: earmelfb_linux_eabi.c:2870 earmelfb_linux_fdpiceabi.c:2870
-#: earmelfb_nacl.c:2870 earmelfb_nbsd.c:2870 earmnto.c:2845 earmsymbian.c:2870
+#: earmelf.c:2871 earmelf_fbsd.c:2878 earmelf_fuchsia.c:2871
+#: earmelf_linux.c:2871 earmelf_linux_eabi.c:2871
+#: earmelf_linux_fdpiceabi.c:2871 earmelf_nacl.c:2871 earmelf_nbsd.c:2871
+#: earmelf_phoenix.c:2871 earmelf_vxworks.c:2911 earmelfb.c:2871
+#: earmelfb_fbsd.c:2878 earmelfb_fuchsia.c:2871 earmelfb_linux.c:2871
+#: earmelfb_linux_eabi.c:2871 earmelfb_linux_fdpiceabi.c:2871
+#: earmelfb_nacl.c:2871 earmelfb_nbsd.c:2871 earmnto.c:2846 earmsymbian.c:2871
 #, c-format
 msgid ""
 "  --in-implib                 Import library whose symbols address must\n"
@@ -5883,17 +5899,6 @@ msgstr ""
 "  --in-implib                 Importer des libraries dont les adresses des symboles doivent\n"
 "                                rester stable\n"
 
-#: earmelf.c:2881 earmelf_fbsd.c:2888 earmelf_fuchsia.c:2881
-#: earmelf_linux.c:2881 earmelf_linux_eabi.c:2881
-#: earmelf_linux_fdpiceabi.c:2881 earmelf_nacl.c:2881 earmelf_nbsd.c:2881
-#: earmelf_phoenix.c:2881 earmelf_vxworks.c:2921 earmelfb.c:2881
-#: earmelfb_fbsd.c:2888 earmelfb_fuchsia.c:2881 earmelfb_linux.c:2881
-#: earmelfb_linux_eabi.c:2881 earmelfb_linux_fdpiceabi.c:2881
-#: earmelfb_nacl.c:2881 earmelfb_nbsd.c:2881 earmnto.c:2856 earmsymbian.c:2881
-#, c-format
-msgid "  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix\n"
-msgstr "  --[no-]fix-cortex-a8        Désactiver/activer la résolution de l'erratum de branches Cortex-A8 Thumb-2\n"
-
 #: earmelf.c:2882 earmelf_fbsd.c:2889 earmelf_fuchsia.c:2882
 #: earmelf_linux.c:2882 earmelf_linux_eabi.c:2882
 #: earmelf_linux_fdpiceabi.c:2882 earmelf_nacl.c:2882 earmelf_nbsd.c:2882
@@ -5902,8 +5907,8 @@ msgstr "  --[no-]fix-cortex-a8        Désactiver/activer la résolution de l'er
 #: earmelfb_linux_eabi.c:2882 earmelfb_linux_fdpiceabi.c:2882
 #: earmelfb_nacl.c:2882 earmelfb_nbsd.c:2882 earmnto.c:2857 earmsymbian.c:2882
 #, c-format
-msgid "  --no-merge-exidx-entries    Disable merging exidx entries\n"
-msgstr "  --no-merge-exidx-entries    Désactive la fusions d'entrées exidx\n"
+msgid "  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix\n"
+msgstr "  --[no-]fix-cortex-a8        Désactiver/activer la résolution de l'erratum de branches Cortex-A8 Thumb-2\n"
 
 #: earmelf.c:2883 earmelf_fbsd.c:2890 earmelf_fuchsia.c:2883
 #: earmelf_linux.c:2883 earmelf_linux_eabi.c:2883
@@ -5913,24 +5918,35 @@ msgstr "  --no-merge-exidx-entries    Désactive la fusions d'entrées exidx\n"
 #: earmelfb_linux_eabi.c:2883 earmelfb_linux_fdpiceabi.c:2883
 #: earmelfb_nacl.c:2883 earmelfb_nbsd.c:2883 earmnto.c:2858 earmsymbian.c:2883
 #, c-format
+msgid "  --no-merge-exidx-entries    Disable merging exidx entries\n"
+msgstr "  --no-merge-exidx-entries    Désactive la fusions d'entrées exidx\n"
+
+#: earmelf.c:2884 earmelf_fbsd.c:2891 earmelf_fuchsia.c:2884
+#: earmelf_linux.c:2884 earmelf_linux_eabi.c:2884
+#: earmelf_linux_fdpiceabi.c:2884 earmelf_nacl.c:2884 earmelf_nbsd.c:2884
+#: earmelf_phoenix.c:2884 earmelf_vxworks.c:2924 earmelfb.c:2884
+#: earmelfb_fbsd.c:2891 earmelfb_fuchsia.c:2884 earmelfb_linux.c:2884
+#: earmelfb_linux_eabi.c:2884 earmelfb_linux_fdpiceabi.c:2884
+#: earmelfb_nacl.c:2884 earmelfb_nbsd.c:2884 earmnto.c:2859 earmsymbian.c:2884
+#, c-format
 msgid "  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix\n"
 msgstr "  --[no-]fix-arm1176          Désactive/active la résolution immédiate de l'erratum ARM1176 BLX\n"
 
-#: earmelf_vxworks.c:672 eelf32_sparc_vxworks.c:123 eelf32ebmipvxworks.c:349
-#: eelf32elmipvxworks.c:349 eelf32ppcvxworks.c:271 eelf_i386_vxworks.c:123
+#: earmelf_vxworks.c:672 eelf32_sparc_vxworks.c:123 eelf32ebmipvxworks.c:350
+#: eelf32elmipvxworks.c:350 eelf32ppcvxworks.c:284 eelf_i386_vxworks.c:123
 #: eshelf_vxworks.c:123 eshlelf_vxworks.c:123
 msgid "%X%P: cannot create dynamic sections %E\n"
 msgstr "%X%P : impossible de créer des sections dynamiques %E\n"
 
-#: earmelf_vxworks.c:678 eelf32_sparc_vxworks.c:129 eelf32ebmipvxworks.c:355
-#: eelf32elmipvxworks.c:355 eelf32ppcvxworks.c:277 eelf_i386_vxworks.c:129
+#: earmelf_vxworks.c:678 eelf32_sparc_vxworks.c:129 eelf32ebmipvxworks.c:356
+#: eelf32elmipvxworks.c:356 eelf32ppcvxworks.c:290 eelf_i386_vxworks.c:129
 #: eshelf_vxworks.c:129 eshlelf_vxworks.c:129
 msgid "%X%P: dynamic sections created in non-dynamic link\n"
 msgstr "%X%P : sections dynamiques créés dans un lien non dynamique\n"
 
-#: earmelf_vxworks.c:2925 eelf32_sparc_vxworks.c:2205
-#: eelf32ebmipvxworks.c:2475 eelf32elmipvxworks.c:2475 eelf32ppcvxworks.c:2511
-#: eelf_i386_vxworks.c:2258 eshelf_vxworks.c:2180 eshlelf_vxworks.c:2180
+#: earmelf_vxworks.c:2926 eelf32_sparc_vxworks.c:2206
+#: eelf32ebmipvxworks.c:2477 eelf32elmipvxworks.c:2477 eelf32ppcvxworks.c:2525
+#: eelf_i386_vxworks.c:2259 eshelf_vxworks.c:2181 eshlelf_vxworks.c:2181
 #, c-format
 msgid "  --force-dynamic             Always create dynamic sections\n"
 msgstr "  --force-dynamic             Toujours créer des sections dynamiques\n"
@@ -5949,24 +5965,24 @@ msgstr "%X%P : impossible d'installer la liste des sections d'entrée : %E\n"
 msgid "%X%P: can not create stub BFD: %E\n"
 msgstr "%X%P : impossible de créer l'espace d'amorçage BFD : %E\n"
 
-#: eavr1.c:2246 eavr2.c:2246 eavr25.c:2246 eavr3.c:2246 eavr31.c:2246
-#: eavr35.c:2246 eavr4.c:2246 eavr5.c:2246 eavr51.c:2246 eavr6.c:2246
-#: eavrtiny.c:2246 eavrxmega1.c:2246 eavrxmega2.c:2246 eavrxmega3.c:2246
-#: eavrxmega4.c:2246 eavrxmega5.c:2246 eavrxmega6.c:2246 eavrxmega7.c:2246
+#: eavr1.c:2247 eavr2.c:2247 eavr25.c:2247 eavr3.c:2247 eavr31.c:2247
+#: eavr35.c:2247 eavr4.c:2247 eavr5.c:2247 eavr51.c:2247 eavr6.c:2247
+#: eavrtiny.c:2247 eavrxmega1.c:2247 eavrxmega2.c:2247 eavrxmega3.c:2247
+#: eavrxmega4.c:2247 eavrxmega5.c:2247 eavrxmega6.c:2247 eavrxmega7.c:2247
 #, c-format
 msgid ""
 "  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a\n"
-"                                program counter wrap-around occures at address\n"
+"                                program counter wrap-around occurs at address\n"
 "                                <val>.  Supported values: 8k, 16k, 32k and 64k.\n"
 msgstr ""
 "  --pmem-wrap-around=<val>    Faire supposer à la machine de relaxation de l'éditeur de lien qu'un\n"
 "                                bouclage du compteur du programme survienne à l'adresse\n"
 "                                <val>. Valeurs supportées: 8k, 16k, 32k et 64k.\n"
 
-#: eavr1.c:2252 eavr2.c:2252 eavr25.c:2252 eavr3.c:2252 eavr31.c:2252
-#: eavr35.c:2252 eavr4.c:2252 eavr5.c:2252 eavr51.c:2252 eavr6.c:2252
-#: eavrtiny.c:2252 eavrxmega1.c:2252 eavrxmega2.c:2252 eavrxmega3.c:2252
-#: eavrxmega4.c:2252 eavrxmega5.c:2252 eavrxmega6.c:2252 eavrxmega7.c:2252
+#: eavr1.c:2253 eavr2.c:2253 eavr25.c:2253 eavr3.c:2253 eavr31.c:2253
+#: eavr35.c:2253 eavr4.c:2253 eavr5.c:2253 eavr51.c:2253 eavr6.c:2253
+#: eavrtiny.c:2253 eavrxmega1.c:2253 eavrxmega2.c:2253 eavrxmega3.c:2253
+#: eavrxmega4.c:2253 eavrxmega5.c:2253 eavrxmega6.c:2253 eavrxmega7.c:2253
 #, c-format
 msgid ""
 "  --no-call-ret-replacement   The relaxation machine normally will\n"
@@ -5979,10 +5995,10 @@ msgstr ""
 "                                consécutives par une seule instruction de saut (jump).\n"
 "                                Cette option désactive cette optimisation.\n"
 
-#: eavr1.c:2260 eavr2.c:2260 eavr25.c:2260 eavr3.c:2260 eavr31.c:2260
-#: eavr35.c:2260 eavr4.c:2260 eavr5.c:2260 eavr51.c:2260 eavr6.c:2260
-#: eavrtiny.c:2260 eavrxmega1.c:2260 eavrxmega2.c:2260 eavrxmega3.c:2260
-#: eavrxmega4.c:2260 eavrxmega5.c:2260 eavrxmega6.c:2260 eavrxmega7.c:2260
+#: eavr1.c:2261 eavr2.c:2261 eavr25.c:2261 eavr3.c:2261 eavr31.c:2261
+#: eavr35.c:2261 eavr4.c:2261 eavr5.c:2261 eavr51.c:2261 eavr6.c:2261
+#: eavrtiny.c:2261 eavrxmega1.c:2261 eavrxmega2.c:2261 eavrxmega3.c:2261
+#: eavrxmega4.c:2261 eavrxmega5.c:2261 eavrxmega6.c:2261 eavrxmega7.c:2261
 #, c-format
 msgid ""
 "  --no-stubs                  If the linker detects to attempt to access\n"
@@ -5995,26 +6011,55 @@ msgstr ""
 "                                est limitée à 128k maximum, il insère un espace d'amorçage\n"
 "                                de saut. Vous pouvez désactiver cela avec cette option.\n"
 
-#: eavr1.c:2268 eavr2.c:2268 eavr25.c:2268 eavr3.c:2268 eavr31.c:2268
-#: eavr35.c:2268 eavr4.c:2268 eavr5.c:2268 eavr51.c:2268 eavr6.c:2268
-#: eavrtiny.c:2268 eavrxmega1.c:2268 eavrxmega2.c:2268 eavrxmega3.c:2268
-#: eavrxmega4.c:2268 eavrxmega5.c:2268 eavrxmega6.c:2268 eavrxmega7.c:2268
+#: eavr1.c:2269 eavr2.c:2269 eavr25.c:2269 eavr3.c:2269 eavr31.c:2269
+#: eavr35.c:2269 eavr4.c:2269 eavr5.c:2269 eavr51.c:2269 eavr6.c:2269
+#: eavrtiny.c:2269 eavrxmega1.c:2269 eavrxmega2.c:2269 eavrxmega3.c:2269
+#: eavrxmega4.c:2269 eavrxmega5.c:2269 eavrxmega6.c:2269 eavrxmega7.c:2269
 #, c-format
 msgid "  --debug-stubs               Used for debugging avr-ld.\n"
 msgstr "  --debug-stubs               Utilisé pour déboguer avr-ld.\n"
 
-#: eavr1.c:2270 eavr2.c:2270 eavr25.c:2270 eavr3.c:2270 eavr31.c:2270
-#: eavr35.c:2270 eavr4.c:2270 eavr5.c:2270 eavr51.c:2270 eavr6.c:2270
-#: eavrtiny.c:2270 eavrxmega1.c:2270 eavrxmega2.c:2270 eavrxmega3.c:2270
-#: eavrxmega4.c:2270 eavrxmega5.c:2270 eavrxmega6.c:2270 eavrxmega7.c:2270
+#: eavr1.c:2271 eavr2.c:2271 eavr25.c:2271 eavr3.c:2271 eavr31.c:2271
+#: eavr35.c:2271 eavr4.c:2271 eavr5.c:2271 eavr51.c:2271 eavr6.c:2271
+#: eavrtiny.c:2271 eavrxmega1.c:2271 eavrxmega2.c:2271 eavrxmega3.c:2271
+#: eavrxmega4.c:2271 eavrxmega5.c:2271 eavrxmega6.c:2271 eavrxmega7.c:2271
 #, c-format
 msgid "  --debug-relax               Used for debugging avr-ld.\n"
 msgstr "  --debug-relax               Utilisé pour déboguer avr-ld.\n"
 
+#: ecskyelf.c:319 ecskyelf_linux.c:319
+msgid "%X%P: cannot size stub section: %E\n"
+msgstr "%X%P : impossible de récupérer la taille de la section d'amorçage : %E\n"
+
+#: ecskyelf.c:336 ecskyelf_linux.c:336
+msgid "%X%P: cannot build stubs: %E\n"
+msgstr "%X%P : impossible de construire les secteurs d'amorçage : %E\n"
+
+#: ecskyelf.c:2276 ecskyelf_linux.c:2438
+#, c-format
+msgid "  --[no-]branch-stub\n"
+msgstr "  --[no-]branch-stub\n"
+
+#: ecskyelf.c:2277 ecskyelf_linux.c:2439
+#, c-format
+msgid "\t\t\tDisable/enable use of stubs to expand branch instructions that cannot reach the target.\n"
+msgstr "\t\t\tDésactiver/activer l'utilisation des espaces d'amorçage pour développer les instructions de branchement qui ne peuvent pas atteindre la cible.\n"
+
+#: ecskyelf.c:2279 ecskyelf_linux.c:2441
+#, c-format
+msgid "  --stub-group-size=N\n"
+msgstr "  --stub-group-size=N\n"
+
+#: ecskyelf.c:2280 ecskyelf_linux.c:2442
+#, c-format
+msgid "\t\t\tMaximum size of a group of input sections handled by one stub section."
+msgstr "\t\t\tTaille maximale d'un groupe de sections d'entrée géré par un espace d'amorçage."
+
 #: ed30v_e.c:113 ed30v_o.c:113 ed30velf.c:113 eelf32_dlx.c:113
 #: eelf32fr30.c:113 eelf32frv.c:113 eelf32ft32.c:113 eelf32iq10.c:113
 #: eelf32iq2000.c:113 eelf32moxie.c:113 eelf32mt.c:113 emn10200.c:113
 #: emoxiebox.c:113 emsp430X.c:138 emsp430elf.c:138 epjelf.c:113 epjlelf.c:113
+#: exgateelf.c:113
 msgid "%X%P: can not size group sections: %E\n"
 msgstr "%X%P : impossible de déterminer la taill des sections de groupe : %E\n"
 
@@ -6058,79 +6103,84 @@ msgstr "%X%P : %pA dépasse la limite de stockage local\n"
 msgid "%P: --auto-overlay ignored with zero local store range\n"
 msgstr "%P : --auto-overlay ignoré avec une limite de stockage local nul\n"
 
-#: eelf32_spu.c:2604
+#: eelf32_spu.c:727
+#, c-format
+msgid "running: %s \"%s\" \"%s\" \"%s\" \"%s\"\n"
+msgstr "exécute : %s \"%s\" \"%s\" \"%s\" \"%s\"\n"
+
+#: eelf32_spu.c:2741
 msgid "%F%P: invalid --local-store address range `%s'\n"
 msgstr "%F%P : plage d'adresses --local-store « %s » invalide\n"
 
-#: eelf32_spu.c:2640
+#: eelf32_spu.c:2777
 msgid "%F%P: invalid --num-lines/--num-regions `%u'\n"
 msgstr "%F%P : --num-lines/--num-regions « %u » invalide\n"
 
-#: eelf32_spu.c:2645
+#: eelf32_spu.c:2782
 msgid "%F%P: invalid --line-size/--region-size `%u'\n"
 msgstr "%F%P : --line-size/--region-size « %u » invalide\n"
 
-#: eelf32_spu.c:2666
+#: eelf32_spu.c:2803
 msgid "%F%P: invalid --num-lines/--num-regions `%s'\n"
 msgstr "%F%P : --num-lines/--num-regions « %s » invalide\n"
 
-#: eelf32_spu.c:2679
+#: eelf32_spu.c:2816
 msgid "%F%P: invalid --line-size/--region-size `%s'\n"
 msgstr "%F%P : --line-size/--region-size « %s » invalide\n"
 
-#: eelf32_spu.c:2688
+#: eelf32_spu.c:2825
 msgid "%F%P: invalid --fixed-space value `%s'\n"
 msgstr "%F%P : valeur de --fixed-space « %s » invalide\n"
 
-#: eelf32_spu.c:2697
+#: eelf32_spu.c:2834
 msgid "%F%P: invalid --reserved-space value `%s'\n"
 msgstr "%F%P : valeur de --reserved-space « %s » invalide\n"
 
-#: eelf32_spu.c:2706
+#: eelf32_spu.c:2843
 msgid "%F%P: invalid --extra-stack-space value `%s'\n"
 msgstr "%F%P : valeur de --extra-stack-space « %s » invalide\n"
 
-#: eelf32_spu.c:2743
+#: eelf32_spu.c:2880
 #, c-format
 msgid "  --plugin                    Make SPU plugin\n"
 msgstr "  --plugin                    Créer un greffon SPU\n"
 
-#: eelf32_spu.c:2745
+#: eelf32_spu.c:2882
 #, c-format
 msgid "  --no-overlays               No overlay handling\n"
 msgstr "  --no-overlays               Pas de gestion des recouvrements\n"
 
-#: eelf32_spu.c:2747
+#: eelf32_spu.c:2884
 #, c-format
 msgid "  --compact-stubs             Use smaller and possibly slower call stubs\n"
 msgstr "  --compact-stubs             utiliser des espaces d'amorçage d'appel plus petits mais possiblement plus lents\n"
 
-#: eelf32_spu.c:2749
+#: eelf32_spu.c:2886
 #, c-format
 msgid "  --emit-stub-syms            Add symbols on overlay call stubs\n"
 msgstr "  --emit-stub-syms            Ajouter les symboles sur les espace d'amorçage d'appel de recouvrement\n"
 
-#: eelf32_spu.c:2751
+#: eelf32_spu.c:2888
 #, c-format
 msgid "  --extra-overlay-stubs       Add stubs on all calls out of overlay regions\n"
 msgstr "  --extra-overlay-stubs       Ajouter des espaces d'amorçage pour tous les appels en dehors des régions de recouvrement\n"
 
-#: eelf32_spu.c:2753
+#: eelf32_spu.c:2890
 #, c-format
 msgid "  --local-store=lo:hi         Valid address range\n"
 msgstr "  --local-store=bas:haut         Plage d'adresses valides\n"
 
-#: eelf32_spu.c:2755
+#: eelf32_spu.c:2892
 #, c-format
 msgid "  --stack-analysis            Estimate maximum stack requirement\n"
 msgstr "  --stack-analysis            Estimer le besoin maximal de la pile\n"
 
-#: eelf32_spu.c:2757
+#: eelf32_spu.c:2894
 #, c-format
 msgid "  --emit-stack-syms           Add sym giving stack needed for each func\n"
 msgstr "  --emit-stack-syms           Ajouter un sym donnant la pile nécessaire à chaque fonction\n"
 
-#: eelf32_spu.c:2759
+#: eelf32_spu.c:2896
 #, c-format
 msgid ""
 "  --auto-overlay [=filename]  Create an overlay script in filename if\n"
@@ -6139,12 +6189,12 @@ msgstr ""
 "  --auto-overlay [=fichier]  Créer un script de recouvrement dans le fichier si\n"
 "                                l'exécutable ne rentre pas dans le stockage local\n"
 
-#: eelf32_spu.c:2762
+#: eelf32_spu.c:2899
 #, c-format
 msgid "  --auto-relink               Rerun linker using auto-overlay script\n"
 msgstr "  --auto-relink               Relancer l'éditeur de liens en utilisant un script de recouvrements automatiques\n"
 
-#: eelf32_spu.c:2764
+#: eelf32_spu.c:2901
 #, c-format
 msgid ""
 "  --overlay-rodata            Place read-only data with associated function\n"
@@ -6153,22 +6203,22 @@ msgstr ""
 "  --overlay-rodata            Placer les données en lecture seule avec le code des fonctions\n"
 "                                associées dans des recouvrements\n"
 
-#: eelf32_spu.c:2767
+#: eelf32_spu.c:2904
 #, c-format
 msgid "  --num-regions               Number of overlay buffers (default 1)\n"
 msgstr "  --num-regions               Nombre de tampons de recouvrements (défaut 1)\n"
 
-#: eelf32_spu.c:2769
+#: eelf32_spu.c:2906
 #, c-format
 msgid "  --region-size               Size of overlay buffers (default 0, auto)\n"
 msgstr "  --region-size               Taille des tampons de recouvrements (défaut 0, auto)\n"
 
-#: eelf32_spu.c:2771
+#: eelf32_spu.c:2908
 #, c-format
 msgid "  --fixed-space=bytes         Local store for non-overlay code and data\n"
 msgstr "  --fixed-space=octets         Stockage local pour du code et des données sans recouvrement\n"
 
-#: eelf32_spu.c:2773
+#: eelf32_spu.c:2910
 #, c-format
 msgid ""
 "  --reserved-space=bytes      Local store for stack and heap.  If not specified\n"
@@ -6177,7 +6227,7 @@ msgstr ""
 "  --reserved-space=octets      Stockage local pour la pile et le tas. Si non spécifié\n"
 "                                ld estimera la taille de la pile et ne supposera aucun tas\n"
 
-#: eelf32_spu.c:2776
+#: eelf32_spu.c:2913
 #, c-format
 msgid ""
 "  --extra-stack-space=bytes   Space for negative sp access (default 2000) if\n"
@@ -6186,27 +6236,27 @@ msgstr ""
 "  --extra-stack-space=octets  Espace pour les accès sp négatifs (défaut 2000) si\n"
 "                                --reserved-space n'est pas donné\n"
 
-#: eelf32_spu.c:2779
+#: eelf32_spu.c:2916
 #, c-format
 msgid "  --soft-icache               Generate software icache overlays\n"
 msgstr "  --soft-icache               Générer des recouvrements icache logiciels\n"
 
-#: eelf32_spu.c:2781
+#: eelf32_spu.c:2918
 #, c-format
 msgid "  --num-lines                 Number of soft-icache lines (default 32)\n"
 msgstr "  --num-lines                 Nombre de lignes de icache logiciel (défaut 32)\n"
 
-#: eelf32_spu.c:2783
+#: eelf32_spu.c:2920
 #, c-format
 msgid "  --line-size                 Size of soft-icache lines (default 1k)\n"
 msgstr "  --line-size                 Taille des lignes icache logiciel (défaut 1k)\n"
 
-#: eelf32_spu.c:2785
+#: eelf32_spu.c:2922
 #, c-format
 msgid "  --non-ia-text               Allow non-icache code in icache lines\n"
 msgstr "  --non-ia-text               Autorise du code non icache dans des lignes icache\n"
 
-#: eelf32_spu.c:2787
+#: eelf32_spu.c:2924
 #, c-format
 msgid "  --lrlive-analysis           Scan function prologue for lr liveness\n"
 msgstr "  --lrlive-analysis           Scanner le prologue des functions pour une exécution lr\n"
@@ -6217,99 +6267,99 @@ msgstr "  --lrlive-analysis           Scanner le prologue des functions pour une
 msgid "%F%P: invalid --dsbt-index %d, outside DSBT size\n"
 msgstr "%F%P : invalide --dsbt-index %d, en dehors de la taille DSBT\n"
 
-#: eelf32_tic6x_be.c:2273 eelf32_tic6x_elf_be.c:2273
-#: eelf32_tic6x_elf_le.c:2273 eelf32_tic6x_le.c:2273
-#: eelf32_tic6x_linux_be.c:2273 eelf32_tic6x_linux_le.c:2273
+#: eelf32_tic6x_be.c:2274 eelf32_tic6x_elf_be.c:2274
+#: eelf32_tic6x_elf_le.c:2274 eelf32_tic6x_le.c:2274
+#: eelf32_tic6x_linux_be.c:2274 eelf32_tic6x_linux_le.c:2274
 msgid "%F%P: invalid --dsbt-index %s\n"
 msgstr "%F%P : --dsbt-index %s invalide\n"
 
-#: eelf32_tic6x_be.c:2283 eelf32_tic6x_elf_be.c:2283
-#: eelf32_tic6x_elf_le.c:2283 eelf32_tic6x_le.c:2283
-#: eelf32_tic6x_linux_be.c:2283 eelf32_tic6x_linux_le.c:2283
+#: eelf32_tic6x_be.c:2284 eelf32_tic6x_elf_be.c:2284
+#: eelf32_tic6x_elf_le.c:2284 eelf32_tic6x_le.c:2284
+#: eelf32_tic6x_linux_be.c:2284 eelf32_tic6x_linux_le.c:2284
 msgid "%F%P: invalid --dsbt-size %s\n"
 msgstr "%F%P : --dsbt-size %s invalide\n"
 
-#: eelf32_tic6x_be.c:2299 eelf32_tic6x_elf_be.c:2299
-#: eelf32_tic6x_elf_le.c:2299 eelf32_tic6x_le.c:2299
-#: eelf32_tic6x_linux_be.c:2299 eelf32_tic6x_linux_le.c:2299
-#, c-format
-msgid "  --dsbt-index <index>    Use this as the DSBT index for the output object\n"
-msgstr "  --dsbt-index <index>    Utilise cela comme index DSBT pour l'object en sortie\n"
-
 #: eelf32_tic6x_be.c:2300 eelf32_tic6x_elf_be.c:2300
 #: eelf32_tic6x_elf_le.c:2300 eelf32_tic6x_le.c:2300
 #: eelf32_tic6x_linux_be.c:2300 eelf32_tic6x_linux_le.c:2300
 #, c-format
-msgid "  --dsbt-size <index>     Use this as the number of entries in the DSBT table\n"
-msgstr "  --dsbt-size <index>     Utilise cela comme le nombre d'entrées dans la table DSBT\n"
+msgid "  --dsbt-index <index>    Use this as the DSBT index for the output object\n"
+msgstr "  --dsbt-index <index>    Utilise cela comme index DSBT pour l'object en sortie\n"
 
 #: eelf32_tic6x_be.c:2301 eelf32_tic6x_elf_be.c:2301
 #: eelf32_tic6x_elf_le.c:2301 eelf32_tic6x_le.c:2301
 #: eelf32_tic6x_linux_be.c:2301 eelf32_tic6x_linux_le.c:2301
 #, c-format
-msgid "  --no-merge-exidx-entries\n"
-msgstr "  --no-merge-exidx-entries\n"
+msgid "  --dsbt-size <index>     Use this as the number of entries in the DSBT table\n"
+msgstr "  --dsbt-size <index>     Utilise cela comme le nombre d'entrées dans la table DSBT\n"
 
 #: eelf32_tic6x_be.c:2302 eelf32_tic6x_elf_be.c:2302
 #: eelf32_tic6x_elf_le.c:2302 eelf32_tic6x_le.c:2302
 #: eelf32_tic6x_linux_be.c:2302 eelf32_tic6x_linux_le.c:2302
 #, c-format
+msgid "  --no-merge-exidx-entries\n"
+msgstr "  --no-merge-exidx-entries\n"
+
+#: eelf32_tic6x_be.c:2303 eelf32_tic6x_elf_be.c:2303
+#: eelf32_tic6x_elf_le.c:2303 eelf32_tic6x_le.c:2303
+#: eelf32_tic6x_linux_be.c:2303 eelf32_tic6x_linux_le.c:2303
+#, c-format
 msgid "                          Disable merging exidx entries\n"
 msgstr "                          Désactive la fusion d'entrées exidx\n"
 
-#: eelf32_x86_64.c:7469 eelf32_x86_64_nacl.c:2189 eelf_i386.c:7084
-#: eelf_i386_be.c:2151 eelf_i386_chaos.c:2131 eelf_i386_fbsd.c:2193
-#: eelf_i386_ldso.c:2168 eelf_i386_nacl.c:2186 eelf_i386_sol2.c:2324
-#: eelf_i386_vxworks.c:2213 eelf_iamcu.c:6730 eelf_k1om.c:7422
-#: eelf_k1om_fbsd.c:7077 eelf_l1om.c:7422 eelf_l1om_fbsd.c:7077
-#: eelf_x86_64.c:7469 eelf_x86_64_cloudabi.c:2189 eelf_x86_64_fbsd.c:2196
-#: eelf_x86_64_nacl.c:2189 eelf_x86_64_sol2.c:2320
+#: eelf32_x86_64.c:7417 eelf32_x86_64_nacl.c:2190 eelf_i386.c:7036
+#: eelf_i386_be.c:2152 eelf_i386_chaos.c:2132 eelf_i386_fbsd.c:2194
+#: eelf_i386_ldso.c:2169 eelf_i386_nacl.c:2187 eelf_i386_sol2.c:2325
+#: eelf_i386_vxworks.c:2214 eelf_iamcu.c:6682 eelf_k1om.c:7370
+#: eelf_k1om_fbsd.c:7025 eelf_l1om.c:7370 eelf_l1om_fbsd.c:7025
+#: eelf_x86_64.c:7417 eelf_x86_64_cloudabi.c:2190 eelf_x86_64_fbsd.c:2197
+#: eelf_x86_64_nacl.c:2190 eelf_x86_64_sol2.c:2321
 msgid "%F%P: invalid number for -z call-nop=prefix-: %s\n"
 msgstr "%F%P : nombre invalide pour -z call-nop=prefix- : %s\n"
 
-#: eelf32_x86_64.c:7478 eelf32_x86_64_nacl.c:2198 eelf_i386.c:7093
-#: eelf_i386_be.c:2160 eelf_i386_chaos.c:2140 eelf_i386_fbsd.c:2202
-#: eelf_i386_ldso.c:2177 eelf_i386_nacl.c:2195 eelf_i386_sol2.c:2333
-#: eelf_i386_vxworks.c:2222 eelf_iamcu.c:6739 eelf_k1om.c:7431
-#: eelf_k1om_fbsd.c:7086 eelf_l1om.c:7431 eelf_l1om_fbsd.c:7086
-#: eelf_x86_64.c:7478 eelf_x86_64_cloudabi.c:2198 eelf_x86_64_fbsd.c:2205
-#: eelf_x86_64_nacl.c:2198 eelf_x86_64_sol2.c:2329
+#: eelf32_x86_64.c:7426 eelf32_x86_64_nacl.c:2199 eelf_i386.c:7045
+#: eelf_i386_be.c:2161 eelf_i386_chaos.c:2141 eelf_i386_fbsd.c:2203
+#: eelf_i386_ldso.c:2178 eelf_i386_nacl.c:2196 eelf_i386_sol2.c:2334
+#: eelf_i386_vxworks.c:2223 eelf_iamcu.c:6691 eelf_k1om.c:7379
+#: eelf_k1om_fbsd.c:7034 eelf_l1om.c:7379 eelf_l1om_fbsd.c:7034
+#: eelf_x86_64.c:7426 eelf_x86_64_cloudabi.c:2199 eelf_x86_64_fbsd.c:2206
+#: eelf_x86_64_nacl.c:2199 eelf_x86_64_sol2.c:2330
 msgid "%F%P: invalid number for -z call-nop=suffix-: %s\n"
 msgstr "%F%P : nombre invalide pour -z call-nop=suffix- : %s\n"
 
-#: eelf32_x86_64.c:7483 eelf32_x86_64_nacl.c:2203 eelf_i386.c:7098
-#: eelf_i386_be.c:2165 eelf_i386_chaos.c:2145 eelf_i386_fbsd.c:2207
-#: eelf_i386_ldso.c:2182 eelf_i386_nacl.c:2200 eelf_i386_sol2.c:2338
-#: eelf_i386_vxworks.c:2227 eelf_iamcu.c:6744 eelf_k1om.c:7436
-#: eelf_k1om_fbsd.c:7091 eelf_l1om.c:7436 eelf_l1om_fbsd.c:7091
-#: eelf_x86_64.c:7483 eelf_x86_64_cloudabi.c:2203 eelf_x86_64_fbsd.c:2210
-#: eelf_x86_64_nacl.c:2203 eelf_x86_64_sol2.c:2334
+#: eelf32_x86_64.c:7431 eelf32_x86_64_nacl.c:2204 eelf_i386.c:7050
+#: eelf_i386_be.c:2166 eelf_i386_chaos.c:2146 eelf_i386_fbsd.c:2208
+#: eelf_i386_ldso.c:2183 eelf_i386_nacl.c:2201 eelf_i386_sol2.c:2339
+#: eelf_i386_vxworks.c:2228 eelf_iamcu.c:6696 eelf_k1om.c:7384
+#: eelf_k1om_fbsd.c:7039 eelf_l1om.c:7384 eelf_l1om_fbsd.c:7039
+#: eelf_x86_64.c:7431 eelf_x86_64_cloudabi.c:2204 eelf_x86_64_fbsd.c:2211
+#: eelf_x86_64_nacl.c:2204 eelf_x86_64_sol2.c:2335
 msgid "%F%P: unsupported option: -z %s\n"
 msgstr "%F%P : option non prise en charge : -z %s\n"
 
-#: eelf32_x86_64.c:7515 eelf32_x86_64_nacl.c:2235 eelf_i386.c:7130
-#: eelf_i386_be.c:2181 eelf_i386_chaos.c:2170 eelf_i386_fbsd.c:2239
-#: eelf_i386_ldso.c:2207 eelf_i386_nacl.c:2232 eelf_i386_sol2.c:2363
-#: eelf_i386_vxworks.c:2248 eelf_iamcu.c:6769 eelf_k1om.c:7461
-#: eelf_k1om_fbsd.c:7116 eelf_l1om.c:7461 eelf_l1om_fbsd.c:7116
-#: eelf_x86_64.c:7518 eelf_x86_64_cloudabi.c:2238 eelf_x86_64_fbsd.c:2245
-#: eelf_x86_64_nacl.c:2238 eelf_x86_64_sol2.c:2369
+#: eelf32_x86_64.c:7463 eelf32_x86_64_nacl.c:2236 eelf_i386.c:7082
+#: eelf_i386_be.c:2182 eelf_i386_chaos.c:2171 eelf_i386_fbsd.c:2240
+#: eelf_i386_ldso.c:2208 eelf_i386_nacl.c:2233 eelf_i386_sol2.c:2364
+#: eelf_i386_vxworks.c:2249 eelf_iamcu.c:6721 eelf_k1om.c:7409
+#: eelf_k1om_fbsd.c:7064 eelf_l1om.c:7409 eelf_l1om_fbsd.c:7064
+#: eelf_x86_64.c:7466 eelf_x86_64_cloudabi.c:2239 eelf_x86_64_fbsd.c:2246
+#: eelf_x86_64_nacl.c:2239 eelf_x86_64_sol2.c:2370
 #, c-format
 msgid "  -z noextern-protected-data  Do not treat protected data symbol as external\n"
 msgstr "  -z noextern-protected-data  Ne pas traiter les symboles de données protégées comme externes\n"
 
-#: eelf32_x86_64.c:7518 eelf32_x86_64_nacl.c:2238 eelf32lppc.c:2503
-#: eelf32lppclinux.c:2503 eelf32lppcnto.c:2503 eelf32lppcsim.c:2503
-#: eelf32ppc.c:2503 eelf32ppc_fbsd.c:2510 eelf32ppclinux.c:2503
-#: eelf32ppcnto.c:2503 eelf32ppcsim.c:2503 eelf32ppcvxworks.c:2481
-#: eelf32ppcwindiss.c:2503 eelf64lppc.c:3000 eelf64ppc.c:3000
-#: eelf64ppc_fbsd.c:3007 eelf_i386.c:7133 eelf_i386_be.c:2184
-#: eelf_i386_chaos.c:2173 eelf_i386_fbsd.c:2242 eelf_i386_ldso.c:2210
-#: eelf_i386_nacl.c:2235 eelf_i386_sol2.c:2366 eelf_i386_vxworks.c:2251
-#: eelf_iamcu.c:6772 eelf_k1om.c:7464 eelf_k1om_fbsd.c:7119 eelf_l1om.c:7464
-#: eelf_l1om_fbsd.c:7119 eelf_x86_64.c:7521 eelf_x86_64_cloudabi.c:2241
-#: eelf_x86_64_fbsd.c:2248 eelf_x86_64_nacl.c:2241 eelf_x86_64_sol2.c:2372
-#: eppclynx.c:2510
+#: eelf32_x86_64.c:7466 eelf32_x86_64_nacl.c:2239 eelf32lppc.c:2517
+#: eelf32lppclinux.c:2517 eelf32lppcnto.c:2517 eelf32lppcsim.c:2517
+#: eelf32ppc.c:2517 eelf32ppc_fbsd.c:2524 eelf32ppclinux.c:2517
+#: eelf32ppcnto.c:2517 eelf32ppcsim.c:2517 eelf32ppcvxworks.c:2495
+#: eelf32ppcwindiss.c:2517 eelf64lppc.c:3013 eelf64ppc.c:3013
+#: eelf64ppc_fbsd.c:3020 eelf_i386.c:7085 eelf_i386_be.c:2185
+#: eelf_i386_chaos.c:2174 eelf_i386_fbsd.c:2243 eelf_i386_ldso.c:2211
+#: eelf_i386_nacl.c:2236 eelf_i386_sol2.c:2367 eelf_i386_vxworks.c:2252
+#: eelf_iamcu.c:6724 eelf_k1om.c:7412 eelf_k1om_fbsd.c:7067 eelf_l1om.c:7412
+#: eelf_l1om_fbsd.c:7067 eelf_x86_64.c:7469 eelf_x86_64_cloudabi.c:2242
+#: eelf_x86_64_fbsd.c:2249 eelf_x86_64_nacl.c:2242 eelf_x86_64_sol2.c:2373
+#: eppclynx.c:2524
 #, c-format
 msgid ""
 "  -z dynamic-undefined-weak   Make undefined weak symbols dynamic\n"
@@ -6318,44 +6368,44 @@ msgstr ""
 "  -z dynamic-undefined-weak   Rendre les symboles faibles non définis dynamiques\n"
 "  -z nodynamic-undefined-weak Ne pas rendre les symboles faibles non définis dynamiques\n"
 
-#: eelf32_x86_64.c:7522 eelf32_x86_64_nacl.c:2242 eelf_x86_64.c:7525
-#: eelf_x86_64_cloudabi.c:2245 eelf_x86_64_fbsd.c:2252 eelf_x86_64_nacl.c:2245
-#: eelf_x86_64_sol2.c:2376
+#: eelf32_x86_64.c:7470 eelf32_x86_64_nacl.c:2243 eelf_x86_64.c:7473
+#: eelf_x86_64_cloudabi.c:2246 eelf_x86_64_fbsd.c:2253 eelf_x86_64_nacl.c:2246
+#: eelf_x86_64_sol2.c:2377
 #, c-format
 msgid "  -z noreloc-overflow         Disable relocation overflow check\n"
 msgstr "  -z noreloc-overflow         Désactiver la vérification de débordement des relocalisations\n"
 
-#: eelf32_x86_64.c:7525 eelf32_x86_64_nacl.c:2245 eelf_i386.c:7137
-#: eelf_i386_be.c:2188 eelf_i386_chaos.c:2177 eelf_i386_fbsd.c:2246
-#: eelf_i386_ldso.c:2214 eelf_i386_nacl.c:2239 eelf_i386_sol2.c:2370
-#: eelf_i386_vxworks.c:2255 eelf_iamcu.c:6776 eelf_k1om.c:7468
-#: eelf_k1om_fbsd.c:7123 eelf_l1om.c:7468 eelf_l1om_fbsd.c:7123
-#: eelf_x86_64.c:7528 eelf_x86_64_cloudabi.c:2248 eelf_x86_64_fbsd.c:2255
-#: eelf_x86_64_nacl.c:2248 eelf_x86_64_sol2.c:2379
+#: eelf32_x86_64.c:7473 eelf32_x86_64_nacl.c:2246 eelf_i386.c:7089
+#: eelf_i386_be.c:2189 eelf_i386_chaos.c:2178 eelf_i386_fbsd.c:2247
+#: eelf_i386_ldso.c:2215 eelf_i386_nacl.c:2240 eelf_i386_sol2.c:2371
+#: eelf_i386_vxworks.c:2256 eelf_iamcu.c:6728 eelf_k1om.c:7416
+#: eelf_k1om_fbsd.c:7071 eelf_l1om.c:7416 eelf_l1om_fbsd.c:7071
+#: eelf_x86_64.c:7476 eelf_x86_64_cloudabi.c:2249 eelf_x86_64_fbsd.c:2256
+#: eelf_x86_64_nacl.c:2249 eelf_x86_64_sol2.c:2380
 #, c-format
 msgid "  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch\n"
 msgstr "  -z call-nop=REMBOURRAGE     Utiliser REMBOURRAGE comme un NOP de 1 octet pour les branches\n"
 
-#: eelf32_x86_64.c:7528 eelf32_x86_64_nacl.c:2248 eelf_i386.c:7140
-#: eelf_i386_fbsd.c:2249 eelf_i386_nacl.c:2242 eelf_x86_64.c:7531
-#: eelf_x86_64_cloudabi.c:2251 eelf_x86_64_fbsd.c:2258 eelf_x86_64_nacl.c:2251
-#: eelf_x86_64_sol2.c:2382
+#: eelf32_x86_64.c:7476 eelf32_x86_64_nacl.c:2249 eelf_i386.c:7092
+#: eelf_i386_fbsd.c:2250 eelf_i386_nacl.c:2243 eelf_x86_64.c:7479
+#: eelf_x86_64_cloudabi.c:2252 eelf_x86_64_fbsd.c:2259 eelf_x86_64_nacl.c:2252
+#: eelf_x86_64_sol2.c:2383
 #, c-format
 msgid "  -z ibtplt                   Generate IBT-enabled PLT entries\n"
 msgstr "  -z ibtplt                   Générer des entrées PLT actives pour l'IBT\n"
 
-#: eelf32_x86_64.c:7530 eelf32_x86_64_nacl.c:2250 eelf_i386.c:7142
-#: eelf_i386_fbsd.c:2251 eelf_i386_nacl.c:2244 eelf_x86_64.c:7533
-#: eelf_x86_64_cloudabi.c:2253 eelf_x86_64_fbsd.c:2260 eelf_x86_64_nacl.c:2253
-#: eelf_x86_64_sol2.c:2384
+#: eelf32_x86_64.c:7478 eelf32_x86_64_nacl.c:2251 eelf_i386.c:7094
+#: eelf_i386_fbsd.c:2252 eelf_i386_nacl.c:2245 eelf_x86_64.c:7481
+#: eelf_x86_64_cloudabi.c:2254 eelf_x86_64_fbsd.c:2261 eelf_x86_64_nacl.c:2254
+#: eelf_x86_64_sol2.c:2385
 #, c-format
 msgid "  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT\n"
 msgstr "  -z ibt                      Générer GNU_PROPERTY_X86_FEATURE_1_IBT\n"
 
-#: eelf32_x86_64.c:7532 eelf32_x86_64_nacl.c:2252 eelf_i386.c:7144
-#: eelf_i386_fbsd.c:2253 eelf_i386_nacl.c:2246 eelf_x86_64.c:7535
-#: eelf_x86_64_cloudabi.c:2255 eelf_x86_64_fbsd.c:2262 eelf_x86_64_nacl.c:2255
-#: eelf_x86_64_sol2.c:2386
+#: eelf32_x86_64.c:7480 eelf32_x86_64_nacl.c:2253 eelf_i386.c:7096
+#: eelf_i386_fbsd.c:2254 eelf_i386_nacl.c:2247 eelf_x86_64.c:7483
+#: eelf_x86_64_cloudabi.c:2256 eelf_x86_64_fbsd.c:2263 eelf_x86_64_nacl.c:2256
+#: eelf_x86_64_sol2.c:2387
 #, c-format
 msgid "  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK\n"
 msgstr "  -z shstk                    Générer GNU_PROPERTY_X86_FEATURE_1_SHSTK\n"
@@ -6372,41 +6422,41 @@ msgstr "  -z shstk                    Générer GNU_PROPERTY_X86_FEATURE_1_SHSTK
 msgid "%X%P: .gnu.hash is incompatible with the MIPS ABI\n"
 msgstr "%X%P : .gnu.hash est incompatible avec l'ABI MIPS\n"
 
-#: eelf32b4300.c:2421 eelf32bmip.c:2421 eelf32bmipn32.c:2439
-#: eelf32bsmip.c:2439 eelf32btsmip.c:2421 eelf32btsmip_fbsd.c:2428
-#: eelf32btsmipn32.c:2421 eelf32btsmipn32_fbsd.c:2428 eelf32ebmip.c:2421
-#: eelf32ebmipvxworks.c:2460 eelf32elmip.c:2421 eelf32elmipvxworks.c:2460
-#: eelf32l4300.c:2421 eelf32lmip.c:2421 eelf32lr5900.c:2284
-#: eelf32lr5900n32.c:2284 eelf32lsmip.c:2421 eelf32ltsmip.c:2421
-#: eelf32ltsmip_fbsd.c:2428 eelf32ltsmipn32.c:2421 eelf32ltsmipn32_fbsd.c:2428
-#: eelf32mipswindiss.c:2259 eelf64bmip.c:2439 eelf64btsmip.c:2421
-#: eelf64btsmip_fbsd.c:2428 eelf64ltsmip.c:2421 eelf64ltsmip_fbsd.c:2428
+#: eelf32b4300.c:2423 eelf32bmip.c:2423 eelf32bmipn32.c:2441
+#: eelf32bsmip.c:2441 eelf32btsmip.c:2423 eelf32btsmip_fbsd.c:2430
+#: eelf32btsmipn32.c:2423 eelf32btsmipn32_fbsd.c:2430 eelf32ebmip.c:2423
+#: eelf32ebmipvxworks.c:2462 eelf32elmip.c:2423 eelf32elmipvxworks.c:2462
+#: eelf32l4300.c:2423 eelf32lmip.c:2423 eelf32lr5900.c:2286
+#: eelf32lr5900n32.c:2286 eelf32lsmip.c:2423 eelf32ltsmip.c:2423
+#: eelf32ltsmip_fbsd.c:2430 eelf32ltsmipn32.c:2423 eelf32ltsmipn32_fbsd.c:2430
+#: eelf32mipswindiss.c:2261 eelf64bmip.c:2441 eelf64btsmip.c:2423
+#: eelf64btsmip_fbsd.c:2430 eelf64ltsmip.c:2423 eelf64ltsmip_fbsd.c:2430
 #, c-format
 msgid "  --insn32                    Only generate 32-bit microMIPS instructions\n"
 msgstr "  --insn32                    Générer uniquement des instructions 32-bit microMIPS\n"
 
-#: eelf32b4300.c:2424 eelf32bmip.c:2424 eelf32bmipn32.c:2442
-#: eelf32bsmip.c:2442 eelf32btsmip.c:2424 eelf32btsmip_fbsd.c:2431
-#: eelf32btsmipn32.c:2424 eelf32btsmipn32_fbsd.c:2431 eelf32ebmip.c:2424
-#: eelf32ebmipvxworks.c:2463 eelf32elmip.c:2424 eelf32elmipvxworks.c:2463
-#: eelf32l4300.c:2424 eelf32lmip.c:2424 eelf32lr5900.c:2287
-#: eelf32lr5900n32.c:2287 eelf32lsmip.c:2424 eelf32ltsmip.c:2424
-#: eelf32ltsmip_fbsd.c:2431 eelf32ltsmipn32.c:2424 eelf32ltsmipn32_fbsd.c:2431
-#: eelf32mipswindiss.c:2262 eelf64bmip.c:2442 eelf64btsmip.c:2424
-#: eelf64btsmip_fbsd.c:2431 eelf64ltsmip.c:2424 eelf64ltsmip_fbsd.c:2431
+#: eelf32b4300.c:2426 eelf32bmip.c:2426 eelf32bmipn32.c:2444
+#: eelf32bsmip.c:2444 eelf32btsmip.c:2426 eelf32btsmip_fbsd.c:2433
+#: eelf32btsmipn32.c:2426 eelf32btsmipn32_fbsd.c:2433 eelf32ebmip.c:2426
+#: eelf32ebmipvxworks.c:2465 eelf32elmip.c:2426 eelf32elmipvxworks.c:2465
+#: eelf32l4300.c:2426 eelf32lmip.c:2426 eelf32lr5900.c:2289
+#: eelf32lr5900n32.c:2289 eelf32lsmip.c:2426 eelf32ltsmip.c:2426
+#: eelf32ltsmip_fbsd.c:2433 eelf32ltsmipn32.c:2426 eelf32ltsmipn32_fbsd.c:2433
+#: eelf32mipswindiss.c:2264 eelf64bmip.c:2444 eelf64btsmip.c:2426
+#: eelf64btsmip_fbsd.c:2433 eelf64ltsmip.c:2426 eelf64ltsmip_fbsd.c:2433
 #, c-format
 msgid "  --no-insn32                 Generate all microMIPS instructions\n"
 msgstr "  --no-insn32                 Générer toutes les instructions microMIPS\n"
 
-#: eelf32b4300.c:2427 eelf32bmip.c:2427 eelf32bmipn32.c:2445
-#: eelf32bsmip.c:2445 eelf32btsmip.c:2427 eelf32btsmip_fbsd.c:2434
-#: eelf32btsmipn32.c:2427 eelf32btsmipn32_fbsd.c:2434 eelf32ebmip.c:2427
-#: eelf32ebmipvxworks.c:2466 eelf32elmip.c:2427 eelf32elmipvxworks.c:2466
-#: eelf32l4300.c:2427 eelf32lmip.c:2427 eelf32lr5900.c:2290
-#: eelf32lr5900n32.c:2290 eelf32lsmip.c:2427 eelf32ltsmip.c:2427
-#: eelf32ltsmip_fbsd.c:2434 eelf32ltsmipn32.c:2427 eelf32ltsmipn32_fbsd.c:2434
-#: eelf32mipswindiss.c:2265 eelf64bmip.c:2445 eelf64btsmip.c:2427
-#: eelf64btsmip_fbsd.c:2434 eelf64ltsmip.c:2427 eelf64ltsmip_fbsd.c:2434
+#: eelf32b4300.c:2429 eelf32bmip.c:2429 eelf32bmipn32.c:2447
+#: eelf32bsmip.c:2447 eelf32btsmip.c:2429 eelf32btsmip_fbsd.c:2436
+#: eelf32btsmipn32.c:2429 eelf32btsmipn32_fbsd.c:2436 eelf32ebmip.c:2429
+#: eelf32ebmipvxworks.c:2468 eelf32elmip.c:2429 eelf32elmipvxworks.c:2468
+#: eelf32l4300.c:2429 eelf32lmip.c:2429 eelf32lr5900.c:2292
+#: eelf32lr5900n32.c:2292 eelf32lsmip.c:2429 eelf32ltsmip.c:2429
+#: eelf32ltsmip_fbsd.c:2436 eelf32ltsmipn32.c:2429 eelf32ltsmipn32_fbsd.c:2436
+#: eelf32mipswindiss.c:2267 eelf64bmip.c:2447 eelf64btsmip.c:2429
+#: eelf64btsmip_fbsd.c:2436 eelf64ltsmip.c:2429 eelf64ltsmip_fbsd.c:2436
 #, c-format
 msgid ""
 "  --ignore-branch-isa         Accept invalid branch relocations requiring\n"
@@ -6415,15 +6465,15 @@ msgstr ""
 "  --ignore-branch-isa         Accepter des relocalisation de branche invalides nécessitant\n"
 "                              une option de mode ISA\n"
 
-#: eelf32b4300.c:2431 eelf32bmip.c:2431 eelf32bmipn32.c:2449
-#: eelf32bsmip.c:2449 eelf32btsmip.c:2431 eelf32btsmip_fbsd.c:2438
-#: eelf32btsmipn32.c:2431 eelf32btsmipn32_fbsd.c:2438 eelf32ebmip.c:2431
-#: eelf32ebmipvxworks.c:2470 eelf32elmip.c:2431 eelf32elmipvxworks.c:2470
-#: eelf32l4300.c:2431 eelf32lmip.c:2431 eelf32lr5900.c:2294
-#: eelf32lr5900n32.c:2294 eelf32lsmip.c:2431 eelf32ltsmip.c:2431
-#: eelf32ltsmip_fbsd.c:2438 eelf32ltsmipn32.c:2431 eelf32ltsmipn32_fbsd.c:2438
-#: eelf32mipswindiss.c:2269 eelf64bmip.c:2449 eelf64btsmip.c:2431
-#: eelf64btsmip_fbsd.c:2438 eelf64ltsmip.c:2431 eelf64ltsmip_fbsd.c:2438
+#: eelf32b4300.c:2433 eelf32bmip.c:2433 eelf32bmipn32.c:2451
+#: eelf32bsmip.c:2451 eelf32btsmip.c:2433 eelf32btsmip_fbsd.c:2440
+#: eelf32btsmipn32.c:2433 eelf32btsmipn32_fbsd.c:2440 eelf32ebmip.c:2433
+#: eelf32ebmipvxworks.c:2472 eelf32elmip.c:2433 eelf32elmipvxworks.c:2472
+#: eelf32l4300.c:2433 eelf32lmip.c:2433 eelf32lr5900.c:2296
+#: eelf32lr5900n32.c:2296 eelf32lsmip.c:2433 eelf32ltsmip.c:2433
+#: eelf32ltsmip_fbsd.c:2440 eelf32ltsmipn32.c:2433 eelf32ltsmipn32_fbsd.c:2440
+#: eelf32mipswindiss.c:2271 eelf64bmip.c:2451 eelf64btsmip.c:2433
+#: eelf64btsmip_fbsd.c:2440 eelf64ltsmip.c:2433 eelf64ltsmip_fbsd.c:2440
 #, c-format
 msgid ""
 "  --no-ignore-branch-isa      Reject invalid branch relocations requiring\n"
@@ -6432,12 +6482,12 @@ msgstr ""
 "  --no-ignore-branch-isa      Rejeter des relocalisations de branche invalides nécessitant\n"
 "                              une option de mode ISA\n"
 
-#: eelf32bfin.c:2163 eelf32bfinfd.c:2188
+#: eelf32bfin.c:2164 eelf32bfinfd.c:2189
 #, c-format
 msgid "  --code-in-l1                Put code in L1\n"
 msgstr "  --code-in-l1                Mettre du code en L1\n"
 
-#: eelf32bfin.c:2165 eelf32bfinfd.c:2190
+#: eelf32bfin.c:2166 eelf32bfinfd.c:2191
 #, c-format
 msgid "  --data-in-l1                Put data in L1\n"
 msgstr "  --data-in-l1                Mettre de la données en L1\n"
@@ -6492,111 +6542,111 @@ msgstr "%X%P : problème TLS %E\n"
 msgid "%X%P: ppc_finish_symbols problem %E\n"
 msgstr "%X%P : problème ppc_finish_symbols %E\n"
 
-#: eelf32lppc.c:2444 eelf32lppclinux.c:2444 eelf32lppcnto.c:2444
-#: eelf32lppcsim.c:2444 eelf32ppc.c:2444 eelf32ppc_fbsd.c:2451
-#: eelf32ppclinux.c:2444 eelf32ppcnto.c:2444 eelf32ppcsim.c:2444
-#: eelf32ppcvxworks.c:2418 eelf32ppcwindiss.c:2444 eelf64lppc.c:2901
-#: eelf64ppc.c:2901 eelf64ppc_fbsd.c:2908 eppclynx.c:2451
+#: eelf32lppc.c:2458 eelf32lppclinux.c:2458 eelf32lppcnto.c:2458
+#: eelf32lppcsim.c:2458 eelf32ppc.c:2458 eelf32ppc_fbsd.c:2465
+#: eelf32ppclinux.c:2458 eelf32ppcnto.c:2458 eelf32ppcsim.c:2458
+#: eelf32ppcvxworks.c:2432 eelf32ppcwindiss.c:2458 eelf64lppc.c:2914
+#: eelf64ppc.c:2914 eelf64ppc_fbsd.c:2921 eppclynx.c:2465
 msgid "%F%P: invalid --plt-align `%s'\n"
 msgstr "%F%P : --plt-align « %s » invalide\n"
 
-#: eelf32lppc.c:2477 eelf32lppclinux.c:2477 eelf32lppcnto.c:2477
-#: eelf32lppcsim.c:2477 eelf32ppc.c:2477 eelf32ppc_fbsd.c:2484
-#: eelf32ppclinux.c:2477 eelf32ppcnto.c:2477 eelf32ppcsim.c:2477
-#: eelf32ppcvxworks.c:2451 eelf32ppcwindiss.c:2477 eppclynx.c:2484
+#: eelf32lppc.c:2491 eelf32lppclinux.c:2491 eelf32lppcnto.c:2491
+#: eelf32lppcsim.c:2491 eelf32ppc.c:2491 eelf32ppc_fbsd.c:2498
+#: eelf32ppclinux.c:2491 eelf32ppcnto.c:2491 eelf32ppcsim.c:2491
+#: eelf32ppcvxworks.c:2465 eelf32ppcwindiss.c:2491 eppclynx.c:2498
 msgid "%F%P: invalid pagesize `%s'\n"
 msgstr "%F%P : taille de page « %s » invalide\n"
 
-#: eelf32lppc.c:2507 eelf32lppclinux.c:2507 eelf32lppcnto.c:2507
-#: eelf32lppcsim.c:2507 eelf32ppc.c:2507 eelf32ppc_fbsd.c:2514
-#: eelf32ppclinux.c:2507 eelf32ppcnto.c:2507 eelf32ppcsim.c:2507
-#: eelf32ppcvxworks.c:2485 eelf32ppcwindiss.c:2507 eelf64lppc.c:3038
-#: eelf64ppc.c:3038 eelf64ppc_fbsd.c:3045 eppclynx.c:2514
+#: eelf32lppc.c:2521 eelf32lppclinux.c:2521 eelf32lppcnto.c:2521
+#: eelf32lppcsim.c:2521 eelf32ppc.c:2521 eelf32ppc_fbsd.c:2528
+#: eelf32ppclinux.c:2521 eelf32ppcnto.c:2521 eelf32ppcsim.c:2521
+#: eelf32ppcvxworks.c:2499 eelf32ppcwindiss.c:2521 eelf64lppc.c:3051
+#: eelf64ppc.c:3051 eelf64ppc_fbsd.c:3058 eppclynx.c:2528
 #, c-format
 msgid "  --emit-stub-syms            Label linker stubs with a symbol\n"
 msgstr "  --emit-stub-syms            Etiqueter les espaces d'amorçage de l'éditeur de liens avec un symbole\n"
 
-#: eelf32lppc.c:2510 eelf32lppclinux.c:2510 eelf32lppcnto.c:2510
-#: eelf32lppcsim.c:2510 eelf32ppc.c:2510 eelf32ppc_fbsd.c:2517
-#: eelf32ppclinux.c:2510 eelf32ppcnto.c:2510 eelf32ppcsim.c:2510
-#: eelf32ppcvxworks.c:2488 eelf32ppcwindiss.c:2510 eelf64lppc.c:3041
-#: eelf64ppc.c:3041 eelf64ppc_fbsd.c:3048 eppclynx.c:2517
+#: eelf32lppc.c:2524 eelf32lppclinux.c:2524 eelf32lppcnto.c:2524
+#: eelf32lppcsim.c:2524 eelf32ppc.c:2524 eelf32ppc_fbsd.c:2531
+#: eelf32ppclinux.c:2524 eelf32ppcnto.c:2524 eelf32ppcsim.c:2524
+#: eelf32ppcvxworks.c:2502 eelf32ppcwindiss.c:2524 eelf64lppc.c:3054
+#: eelf64ppc.c:3054 eelf64ppc_fbsd.c:3061 eppclynx.c:2531
 #, c-format
 msgid "  --no-emit-stub-syms         Don't label linker stubs with a symbol\n"
 msgstr "  --no-emit-stub-syms         Ne pas étiqueter les espaces d'amorçage de l'éditeur de liens avec un symbole\n"
 
-#: eelf32lppc.c:2513 eelf32lppclinux.c:2513 eelf32lppcnto.c:2513
-#: eelf32lppcsim.c:2513 eelf32ppc.c:2513 eelf32ppc_fbsd.c:2520
-#: eelf32ppclinux.c:2513 eelf32ppcnto.c:2513 eelf32ppcsim.c:2513
-#: eelf32ppcvxworks.c:2491 eelf32ppcwindiss.c:2513 eelf64lppc.c:3061
-#: eelf64ppc.c:3061 eelf64ppc_fbsd.c:3068 eppclynx.c:2520
+#: eelf32lppc.c:2527 eelf32lppclinux.c:2527 eelf32lppcnto.c:2527
+#: eelf32lppcsim.c:2527 eelf32ppc.c:2527 eelf32ppc_fbsd.c:2534
+#: eelf32ppclinux.c:2527 eelf32ppcnto.c:2527 eelf32ppcsim.c:2527
+#: eelf32ppcvxworks.c:2505 eelf32ppcwindiss.c:2527 eelf64lppc.c:3074
+#: eelf64ppc.c:3074 eelf64ppc_fbsd.c:3081 eppclynx.c:2534
 #, c-format
 msgid "  --no-tls-optimize           Don't try to optimize TLS accesses\n"
 msgstr "  --no-tls-optimize           Ne pas essayer d'optimiser les accès TLS\n"
 
-#: eelf32lppc.c:2516 eelf32lppclinux.c:2516 eelf32lppcnto.c:2516
-#: eelf32lppcsim.c:2516 eelf32ppc.c:2516 eelf32ppc_fbsd.c:2523
-#: eelf32ppclinux.c:2516 eelf32ppcnto.c:2516 eelf32ppcsim.c:2516
-#: eelf32ppcvxworks.c:2494 eelf32ppcwindiss.c:2516 eelf64lppc.c:3067
-#: eelf64ppc.c:3067 eelf64ppc_fbsd.c:3074 eppclynx.c:2523
+#: eelf32lppc.c:2530 eelf32lppclinux.c:2530 eelf32lppcnto.c:2530
+#: eelf32lppcsim.c:2530 eelf32ppc.c:2530 eelf32ppc_fbsd.c:2537
+#: eelf32ppclinux.c:2530 eelf32ppcnto.c:2530 eelf32ppcsim.c:2530
+#: eelf32ppcvxworks.c:2508 eelf32ppcwindiss.c:2530 eelf64lppc.c:3080
+#: eelf64ppc.c:3080 eelf64ppc_fbsd.c:3087 eppclynx.c:2537
 #, c-format
 msgid "  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call\n"
 msgstr "  --no-tls-get-addr-optimize  Ne pas utiliser d'appel special __tls_get_addr\n"
 
-#: eelf32lppc.c:2519 eelf32lppclinux.c:2519 eelf32lppcnto.c:2519
-#: eelf32lppcsim.c:2519 eelf32ppc.c:2519 eelf32ppc_fbsd.c:2526
-#: eelf32ppclinux.c:2519 eelf32ppcnto.c:2519 eelf32ppcsim.c:2519
-#: eelf32ppcwindiss.c:2519 eppclynx.c:2526
+#: eelf32lppc.c:2533 eelf32lppclinux.c:2533 eelf32lppcnto.c:2533
+#: eelf32lppcsim.c:2533 eelf32ppc.c:2533 eelf32ppc_fbsd.c:2540
+#: eelf32ppclinux.c:2533 eelf32ppcnto.c:2533 eelf32ppcsim.c:2533
+#: eelf32ppcwindiss.c:2533 eppclynx.c:2540
 #, c-format
 msgid "  --secure-plt                Use new-style PLT if possible\n"
 msgstr "  --secure-plt                Utiliser un style de PLT moderne si possible\n"
 
-#: eelf32lppc.c:2522 eelf32lppclinux.c:2522 eelf32lppcnto.c:2522
-#: eelf32lppcsim.c:2522 eelf32ppc.c:2522 eelf32ppc_fbsd.c:2529
-#: eelf32ppclinux.c:2522 eelf32ppcnto.c:2522 eelf32ppcsim.c:2522
-#: eelf32ppcwindiss.c:2522 eppclynx.c:2529
+#: eelf32lppc.c:2536 eelf32lppclinux.c:2536 eelf32lppcnto.c:2536
+#: eelf32lppcsim.c:2536 eelf32ppc.c:2536 eelf32ppc_fbsd.c:2543
+#: eelf32ppclinux.c:2536 eelf32ppcnto.c:2536 eelf32ppcsim.c:2536
+#: eelf32ppcwindiss.c:2536 eppclynx.c:2543
 #, c-format
 msgid "  --bss-plt                   Force old-style BSS PLT\n"
 msgstr "  --bss-plt                   Forcer un style ancien de PLT BSS\n"
 
-#: eelf32lppc.c:2525 eelf32lppclinux.c:2525 eelf32lppcnto.c:2525
-#: eelf32lppcsim.c:2525 eelf32ppc.c:2525 eelf32ppc_fbsd.c:2532
-#: eelf32ppclinux.c:2525 eelf32ppcnto.c:2525 eelf32ppcsim.c:2525
-#: eelf32ppcwindiss.c:2525 eppclynx.c:2532
+#: eelf32lppc.c:2539 eelf32lppclinux.c:2539 eelf32lppcnto.c:2539
+#: eelf32lppcsim.c:2539 eelf32ppc.c:2539 eelf32ppc_fbsd.c:2546
+#: eelf32ppclinux.c:2539 eelf32ppcnto.c:2539 eelf32ppcsim.c:2539
+#: eelf32ppcwindiss.c:2539 eppclynx.c:2546
 #, c-format
 msgid "  --plt-align                 Align PLT call stubs to fit cache lines\n"
 msgstr "  --plt-align                 Aligner les espaces d'amorçage d'appel PLT pour tenir dans les lignes de cache\n"
 
-#: eelf32lppc.c:2528 eelf32lppclinux.c:2528 eelf32lppcnto.c:2528
-#: eelf32lppcsim.c:2528 eelf32ppc.c:2528 eelf32ppc_fbsd.c:2535
-#: eelf32ppclinux.c:2528 eelf32ppcnto.c:2528 eelf32ppcsim.c:2528
-#: eelf32ppcwindiss.c:2528 eelf64lppc.c:3029 eelf64ppc.c:3029
-#: eelf64ppc_fbsd.c:3036 eppclynx.c:2535
+#: eelf32lppc.c:2542 eelf32lppclinux.c:2542 eelf32lppcnto.c:2542
+#: eelf32lppcsim.c:2542 eelf32ppc.c:2542 eelf32ppc_fbsd.c:2549
+#: eelf32ppclinux.c:2542 eelf32ppcnto.c:2542 eelf32ppcsim.c:2542
+#: eelf32ppcwindiss.c:2542 eelf64lppc.c:3042 eelf64ppc.c:3042
+#: eelf64ppc_fbsd.c:3049 eppclynx.c:2549
 #, c-format
 msgid "  --no-plt-align              Dont't align individual PLT call stubs\n"
 msgstr "  --no-plt-align              Ne pas algner les espaces d'amorçage d'appel PLT individuels\n"
 
-#: eelf32lppc.c:2531 eelf32lppclinux.c:2531 eelf32lppcnto.c:2531
-#: eelf32lppcsim.c:2531 eelf32ppc.c:2531 eelf32ppc_fbsd.c:2538
-#: eelf32ppclinux.c:2531 eelf32ppcnto.c:2531 eelf32ppcsim.c:2531
-#: eelf32ppcwindiss.c:2531 eelf64lppc.c:3073 eelf64ppc.c:3073
-#: eelf64ppc_fbsd.c:3080 eppclynx.c:2538
+#: eelf32lppc.c:2545 eelf32lppclinux.c:2545 eelf32lppcnto.c:2545
+#: eelf32lppcsim.c:2545 eelf32ppc.c:2545 eelf32ppc_fbsd.c:2552
+#: eelf32ppclinux.c:2545 eelf32ppcnto.c:2545 eelf32ppcsim.c:2545
+#: eelf32ppcwindiss.c:2545 eelf64lppc.c:3086 eelf64ppc.c:3086
+#: eelf64ppc_fbsd.c:3093 eppclynx.c:2552
 #, c-format
 msgid "  --no-inline-optimize        Don't convert inline PLT to direct calls\n"
 msgstr "  --no-inline-optimize        Ne pas convertir les PLT en ligne en appels directs\n"
 
-#: eelf32lppc.c:2534 eelf32lppclinux.c:2534 eelf32lppcnto.c:2534
-#: eelf32lppcsim.c:2534 eelf32ppc.c:2534 eelf32ppc_fbsd.c:2541
-#: eelf32ppclinux.c:2534 eelf32ppcnto.c:2534 eelf32ppcsim.c:2534
-#: eelf32ppcwindiss.c:2534 eppclynx.c:2541
+#: eelf32lppc.c:2548 eelf32lppclinux.c:2548 eelf32lppcnto.c:2548
+#: eelf32lppcsim.c:2548 eelf32ppc.c:2548 eelf32ppc_fbsd.c:2555
+#: eelf32ppclinux.c:2548 eelf32ppcnto.c:2548 eelf32ppcsim.c:2548
+#: eelf32ppcwindiss.c:2548 eppclynx.c:2555
 #, c-format
 msgid "  --sdata-got                 Force GOT location just before .sdata\n"
 msgstr "  --sdata-got                 Forcer la position GOT juste avant .sdata\n"
 
-#: eelf32lppc.c:2537 eelf32lppclinux.c:2537 eelf32lppcnto.c:2537
-#: eelf32lppcsim.c:2537 eelf32ppc.c:2537 eelf32ppc_fbsd.c:2544
-#: eelf32ppclinux.c:2537 eelf32ppcnto.c:2537 eelf32ppcsim.c:2537
-#: eelf32ppcvxworks.c:2497 eelf32ppcwindiss.c:2537 eppclynx.c:2544
+#: eelf32lppc.c:2551 eelf32lppclinux.c:2551 eelf32lppcnto.c:2551
+#: eelf32lppcsim.c:2551 eelf32ppc.c:2551 eelf32ppc_fbsd.c:2558
+#: eelf32ppclinux.c:2551 eelf32ppcnto.c:2551 eelf32ppcsim.c:2551
+#: eelf32ppcvxworks.c:2511 eelf32ppcwindiss.c:2551 eppclynx.c:2558
 #, c-format
 msgid ""
 "  --ppc476-workaround [=pagesize]\n"
@@ -6605,37 +6655,37 @@ msgstr ""
 "  --ppc476-workaround [=taille-de-page]\n"
 "                              Evite un bogue de cache sur ppc476\n"
 
-#: eelf32lppc.c:2541 eelf32lppclinux.c:2541 eelf32lppcnto.c:2541
-#: eelf32lppcsim.c:2541 eelf32ppc.c:2541 eelf32ppc_fbsd.c:2548
-#: eelf32ppclinux.c:2541 eelf32ppcnto.c:2541 eelf32ppcsim.c:2541
-#: eelf32ppcvxworks.c:2501 eelf32ppcwindiss.c:2541 eppclynx.c:2548
+#: eelf32lppc.c:2555 eelf32lppclinux.c:2555 eelf32lppcnto.c:2555
+#: eelf32lppcsim.c:2555 eelf32ppc.c:2555 eelf32ppc_fbsd.c:2562
+#: eelf32ppclinux.c:2555 eelf32ppcnto.c:2555 eelf32ppcsim.c:2555
+#: eelf32ppcvxworks.c:2515 eelf32ppcwindiss.c:2555 eppclynx.c:2562
 #, c-format
 msgid "  --no-ppc476-workaround      Disable workaround\n"
 msgstr "  --no-ppc476-workaround      Désactiver le contournement\n"
 
-#: eelf32lppc.c:2544 eelf32lppclinux.c:2544 eelf32lppcnto.c:2544
-#: eelf32lppcsim.c:2544 eelf32ppc.c:2544 eelf32ppc_fbsd.c:2551
-#: eelf32ppclinux.c:2544 eelf32ppcnto.c:2544 eelf32ppcsim.c:2544
-#: eelf32ppcvxworks.c:2504 eelf32ppcwindiss.c:2544 eppclynx.c:2551
+#: eelf32lppc.c:2558 eelf32lppclinux.c:2558 eelf32lppcnto.c:2558
+#: eelf32lppcsim.c:2558 eelf32ppc.c:2558 eelf32ppc_fbsd.c:2565
+#: eelf32ppclinux.c:2558 eelf32ppcnto.c:2558 eelf32ppcsim.c:2558
+#: eelf32ppcvxworks.c:2518 eelf32ppcwindiss.c:2558 eppclynx.c:2565
 #, c-format
 msgid "  --no-pic-fixup              Don't edit non-pic to pic\n"
 msgstr "  --no-pic-fixup              Ne pas éditer non-pic en pic\n"
 
-#: eelf32lppc.c:2547 eelf32lppclinux.c:2547 eelf32lppcnto.c:2547
-#: eelf32lppcsim.c:2547 eelf32ppc.c:2547 eelf32ppc_fbsd.c:2554
-#: eelf32ppclinux.c:2547 eelf32ppcnto.c:2547 eelf32ppcsim.c:2547
-#: eelf32ppcvxworks.c:2507 eelf32ppcwindiss.c:2547 eppclynx.c:2554
+#: eelf32lppc.c:2561 eelf32lppclinux.c:2561 eelf32lppcnto.c:2561
+#: eelf32lppcsim.c:2561 eelf32ppc.c:2561 eelf32ppc_fbsd.c:2568
+#: eelf32ppclinux.c:2561 eelf32ppcnto.c:2561 eelf32ppcsim.c:2561
+#: eelf32ppcvxworks.c:2521 eelf32ppcwindiss.c:2561 eppclynx.c:2568
 #, c-format
 msgid "  --vle-reloc-fixup           Correct old object file 16A/16D relocation\n"
 msgstr "  --vle-reloc-fixup           Corrige les relocalisations d'anciens fichiers objet 16A/16D\n"
 
-#: eelf32mcore.c:2014
+#: eelf32mcore.c:2015
 #, c-format
 msgid "  --base_file <basefile>      Generate a base file for relocatable DLLs\n"
 msgstr "  --base_file <fichier_de_base>      Générer un fichier de base pour les DLL relocalisables\n"
 
-#: eelf32metag.c:2443 eelf64lppc.c:3004 eelf64ppc.c:3004 eelf64ppc_fbsd.c:3011
-#: ehppaelf.c:2308 ehppalinux.c:2485 ehppanbsd.c:2485 ehppaobsd.c:2485
+#: eelf32metag.c:2444 eelf64lppc.c:3017 eelf64ppc.c:3017 eelf64ppc_fbsd.c:3024
+#: ehppaelf.c:2309 ehppalinux.c:2486 ehppanbsd.c:2486 ehppaobsd.c:2486
 #, c-format
 msgid ""
 "  --stub-group-size=N         Maximum size of a group of input sections that\n"
@@ -6656,7 +6706,7 @@ msgstr ""
 "                                Les valeurs +/-1 indiquent que l'éditeur de liens doit\n"
 "                                choisir des règlages par défaut appropriés.\n"
 
-#: eelf32rx.c:2046
+#: eelf32rx.c:2047
 #, c-format
 msgid ""
 "  --no-flag-mismatch-warnings Don't warn about objects with incompatible\n"
@@ -6665,7 +6715,7 @@ msgstr ""
 "  --no-flag-mismatch-warnings Ne pas avertir des objets ayant des paramètres\n"
 "                                  de boutisme ou de dsp incompatibles\n"
 
-#: eelf32rx.c:2048
+#: eelf32rx.c:2049
 #, c-format
 msgid ""
 "  --flag-mismatch-warnings    Warn about objects with incompatible\n"
@@ -6674,7 +6724,7 @@ msgstr ""
 "  --flag-mismatch-warnings    Avertir des objets ayant des paramètres\n"
 "                                de boutisme, dsp ou ABI incompatibles\n"
 
-#: eelf32rx.c:2050
+#: eelf32rx.c:2051
 #, c-format
 msgid ""
 "  --ignore-lma                Ignore segment LMAs [default]\n"
@@ -6683,7 +6733,7 @@ msgstr ""
 "  --ignore-lma                Ignorer les LMAs de segment [défaut]\n"
 "                                (par compatibilité avec Renesas Tools)\n"
 
-#: eelf32rx.c:2052
+#: eelf32rx.c:2053
 #, c-format
 msgid "  --no-ignore-lma             Don't ignore segment LMAs\n"
 msgstr "  --no-ignore-lma             Ne pas ignorer les LMAs de segment\n"
@@ -6740,7 +6790,7 @@ msgstr "%F%P : l'édition de liens inter-boutiste pour %pB n'est pas prise en c
 msgid "%F%P: failed to create .xtensa.info section\n"
 msgstr "%F%P : échec de la création de la section .xtensa.info\n"
 
-#: eelf32xtensa.c:4073
+#: eelf32xtensa.c:4074
 #, c-format
 msgid ""
 "  --size-opt                  When relaxing longcalls, prefer size\n"
@@ -6749,7 +6799,7 @@ msgstr ""
 "  --size-opt                  Lors de la relaxation d'appels longs, préfèrer l'optimisation\n"
 "                                de la taille à l'alignement de branche cible\n"
 
-#: eelf64_ia64.c:2198 eelf64_ia64_fbsd.c:2205
+#: eelf64_ia64.c:2199 eelf64_ia64_fbsd.c:2206
 #, c-format
 msgid "  --itanium                   Generate code for Intel Itanium processor\n"
 msgstr "  --itanium                   Générer du code pour les processeurs Itanium d'Intel\n"
@@ -6758,12 +6808,12 @@ msgstr "  --itanium                   Générer du code pour les processeurs Ita
 msgid "%F%P: can not init BFD: %E\n"
 msgstr "%F%P : impossible d'initialiser le BFD : %E\n"
 
-#: eelf64_s390.c:2189
+#: eelf64_s390.c:2239
 #, c-format
 msgid "  --s390-pgste                Tell the kernel to allocate 4k page tables\n"
 msgstr "  --s390-pgste                Dire au noyau d'allouer des tables de page de 4k\n"
 
-#: eelf64alpha.c:2267 eelf64alpha_fbsd.c:2274 eelf64alpha_nbsd.c:2267
+#: eelf64alpha.c:2268 eelf64alpha_fbsd.c:2275 eelf64alpha_nbsd.c:2268
 #, c-format
 msgid ""
 "  --taso                      Load executable in the lower 31-bit addressable\n"
@@ -6772,12 +6822,12 @@ msgstr ""
 "  --taso                      Charger l'exécutable dans les 31-bit bas de la plage\n"
 "                                d'adresses virtuelles addressables\n"
 
-#: eelf64alpha.c:2270 eelf64alpha_fbsd.c:2277 eelf64alpha_nbsd.c:2270
+#: eelf64alpha.c:2271 eelf64alpha_fbsd.c:2278 eelf64alpha_nbsd.c:2271
 #, c-format
 msgid "  --secureplt                 Force PLT in text segment\n"
 msgstr "  --secureplt                 Force le PLT dans le segment texte\n"
 
-#: eelf64alpha.c:2272 eelf64alpha_fbsd.c:2279 eelf64alpha_nbsd.c:2272
+#: eelf64alpha.c:2273 eelf64alpha_fbsd.c:2280 eelf64alpha_nbsd.c:2273
 #, c-format
 msgid "  --no-secureplt              Force PLT in data segment\n"
 msgstr "  --no-secureplt              Force le PLT dans le segment de données\n"
@@ -6795,42 +6845,42 @@ msgstr "%X%P : le script de l'éditeur de liens sépare .got et .toc\n"
 msgid "%P: .init/.fini fragments use differing TOC pointers\n"
 msgstr "%P : les fragments .init/.fini utilisent des pointeurs TOC différents\n"
 
-#: eelf64lppc.c:3014 eelf64ppc.c:3014
+#: eelf64lppc.c:3027 eelf64ppc.c:3027
 #, c-format
 msgid "  --plt-static-chain          PLT call stubs should load r11 (default)\n"
 msgstr "  --plt-static-chain          Les espace d'amorçage d'appel PLT doivent charger r11 (défaut)\n"
 
-#: eelf64lppc.c:3017 eelf64ppc.c:3017
+#: eelf64lppc.c:3030 eelf64ppc.c:3030
 #, c-format
 msgid "  --no-plt-static-chain       PLT call stubs should not load r11\n"
 msgstr "  --no-plt-static-chain       Les espace d'amorçage d'appel PLT ne doivent pas charger r11\n"
 
-#: eelf64lppc.c:3020 eelf64ppc.c:3020 eelf64ppc_fbsd.c:3027
+#: eelf64lppc.c:3033 eelf64ppc.c:3033 eelf64ppc_fbsd.c:3040
 #, c-format
 msgid "  --plt-thread-safe           PLT call stubs with load-load barrier\n"
 msgstr "  --plt-thread-safe           Espace d'amorçage d'appel PLT avec des barrières chargement-chargement\n"
 
-#: eelf64lppc.c:3023 eelf64ppc.c:3023 eelf64ppc_fbsd.c:3030
+#: eelf64lppc.c:3036 eelf64ppc.c:3036 eelf64ppc_fbsd.c:3043
 #, c-format
 msgid "  --no-plt-thread-safe        PLT call stubs without barrier\n"
 msgstr "  --no-plt-thread-safe        Espaces d'amorçage d'appel PLT sans barrières\n"
 
-#: eelf64lppc.c:3026 eelf64ppc.c:3026 eelf64ppc_fbsd.c:3033
+#: eelf64lppc.c:3039 eelf64ppc.c:3039 eelf64ppc_fbsd.c:3046
 #, c-format
 msgid "  --plt-align [=<align>]      Align PLT call stubs to fit cache lines\n"
 msgstr "  --plt-align [=<align>]      Aligner les espaces d'amorçage d'appel PLT pour tenir dans les lignes de cache\n"
 
-#: eelf64lppc.c:3032 eelf64ppc.c:3032 eelf64ppc_fbsd.c:3039
+#: eelf64lppc.c:3045 eelf64ppc.c:3045 eelf64ppc_fbsd.c:3052
 #, c-format
 msgid "  --plt-localentry            Optimize calls to ELFv2 localentry:0 functions\n"
 msgstr "  --plt-localentry            Optimise les appels aux fonctions ELFv2 localentry:0\n"
 
-#: eelf64lppc.c:3035 eelf64ppc.c:3035 eelf64ppc_fbsd.c:3042
+#: eelf64lppc.c:3048 eelf64ppc.c:3048 eelf64ppc_fbsd.c:3055
 #, c-format
 msgid "  --no-plt-localentry         Don't optimize ELFv2 calls\n"
 msgstr "  --no-plt-localentry         Ne pas optimiser les appels ELFv2\n"
 
-#: eelf64lppc.c:3044 eelf64ppc.c:3044 eelf64ppc_fbsd.c:3051
+#: eelf64lppc.c:3057 eelf64ppc.c:3057 eelf64ppc_fbsd.c:3064
 #, c-format
 msgid ""
 "  --dotsyms                   For every version pattern \"foo\" in a version\n"
@@ -6843,12 +6893,12 @@ msgstr ""
 "                                de fonction soient traités identiquement aux symboles de description \n"
 "                                de fonction. Activé pas défauts.\n"
 
-#: eelf64lppc.c:3050 eelf64ppc.c:3050 eelf64ppc_fbsd.c:3057
+#: eelf64lppc.c:3063 eelf64ppc.c:3063 eelf64ppc_fbsd.c:3070
 #, c-format
 msgid "  --no-dotsyms                Don't do anything special in version scripts\n"
 msgstr "  --no-dotsyms                Ne rien faire de spécial dans les scripts de version\n"
 
-#: eelf64lppc.c:3053 eelf64ppc.c:3053 eelf64ppc_fbsd.c:3060
+#: eelf64lppc.c:3066 eelf64ppc.c:3066 eelf64ppc_fbsd.c:3073
 #, c-format
 msgid ""
 "  --save-restore-funcs        Provide register save and restore routines used\n"
@@ -6859,37 +6909,37 @@ msgstr ""
 "                                par le code produit avec gcc -Os. Activé par défault pour les liens\n"
 "                                finaux normaux, désactivé pour ld -r.\n"
 
-#: eelf64lppc.c:3058 eelf64ppc.c:3058 eelf64ppc_fbsd.c:3065
+#: eelf64lppc.c:3071 eelf64ppc.c:3071 eelf64ppc_fbsd.c:3078
 #, c-format
 msgid "  --no-save-restore-funcs     Don't provide these routines\n"
 msgstr "  --no-save-restore-funcs     Ne pas fournir ces routines\n"
 
-#: eelf64lppc.c:3064 eelf64ppc.c:3064 eelf64ppc_fbsd.c:3071
+#: eelf64lppc.c:3077 eelf64ppc.c:3077 eelf64ppc_fbsd.c:3084
 #, c-format
 msgid "  --tls-get-addr-optimize     Force use of special __tls_get_addr call\n"
 msgstr "  --tls-get-addr-optimize     Force l'utilisation d'un appel spécial à __tls_get_addr\n"
 
-#: eelf64lppc.c:3070 eelf64ppc.c:3070 eelf64ppc_fbsd.c:3077
+#: eelf64lppc.c:3083 eelf64ppc.c:3083 eelf64ppc_fbsd.c:3090
 #, c-format
 msgid "  --no-opd-optimize           Don't optimize the OPD section\n"
 msgstr "  --no-opd-optimize           Ne pas optimiser la section OPD\n"
 
-#: eelf64lppc.c:3076 eelf64ppc.c:3076 eelf64ppc_fbsd.c:3083
+#: eelf64lppc.c:3089 eelf64ppc.c:3089 eelf64ppc_fbsd.c:3096
 #, c-format
 msgid "  --no-toc-optimize           Don't optimize the TOC section\n"
 msgstr "  --no-toc-optimize           Ne pas optimiser la section TOC\n"
 
-#: eelf64lppc.c:3079 eelf64ppc.c:3079 eelf64ppc_fbsd.c:3086
+#: eelf64lppc.c:3092 eelf64ppc.c:3092 eelf64ppc_fbsd.c:3099
 #, c-format
 msgid "  --no-multi-toc              Disallow automatic multiple toc sections\n"
 msgstr "  --no-multi-toc              Empêcher de multiples sections toc automatiques\n"
 
-#: eelf64lppc.c:3082 eelf64ppc.c:3082 eelf64ppc_fbsd.c:3089
+#: eelf64lppc.c:3095 eelf64ppc.c:3095 eelf64ppc_fbsd.c:3102
 #, c-format
 msgid "  --no-toc-sort               Don't sort TOC and GOT sections\n"
 msgstr "  --no-toc-sort               Ne pas trier les sections TOC et GOT\n"
 
-#: eelf64lppc.c:3085 eelf64ppc.c:3085 eelf64ppc_fbsd.c:3092
+#: eelf64lppc.c:3098 eelf64ppc.c:3098 eelf64ppc_fbsd.c:3105
 #, c-format
 msgid ""
 "  --non-overlapping-opd       Canonicalize .opd, so that there are no\n"
@@ -6911,18 +6961,18 @@ msgstr "%X%P : trop de registres généraux : %u, maximum 223\n"
 msgid "%F%P: can't finalize linker-allocated global registers\n"
 msgstr "%F%P : impossible de terminer les registres globaux alloués par l'éditeur de liens\n"
 
-#: eelf64ppc_fbsd.c:3021
+#: eelf64ppc_fbsd.c:3034
 #, c-format
 msgid "  --plt-static-chain          PLT call stubs should load r111\n"
 msgstr "  --plt-static-chain          Les espaces d'amorçage d'appel PLT doivent charger r111\n"
 
-#: eelf64ppc_fbsd.c:3024
+#: eelf64ppc_fbsd.c:3037
 #, c-format
 msgid "  --no-plt-static-chain       PLT call stubs should not load r11 (default)\n"
 msgstr "  --no-plt-static-chain       Les espaces d'amorçage d'appel PLT ne doivent pas charger r11 (défaut)\n"
 
-#: eelf_x86_64.c:7538 eelf_x86_64_cloudabi.c:2258 eelf_x86_64_fbsd.c:2265
-#: eelf_x86_64_nacl.c:2258 eelf_x86_64_sol2.c:2389
+#: eelf_x86_64.c:7486 eelf_x86_64_cloudabi.c:2259 eelf_x86_64_fbsd.c:2266
+#: eelf_x86_64_nacl.c:2259 eelf_x86_64_sol2.c:2390
 #, c-format
 msgid "  -z bndplt                   Always generate BND prefix in PLT entries\n"
 msgstr "  -z bndplt                   Toujours générer les préfixes BND dans les entrées PLT\n"
@@ -6931,7 +6981,7 @@ msgstr "  -z bndplt                   Toujours générer les préfixes BND dans
 msgid "%X%P: can not set gp\n"
 msgstr "%X%P : impossible de fixer\n"
 
-#: ehppaelf.c:2304 ehppalinux.c:2481 ehppanbsd.c:2481 ehppaobsd.c:2481
+#: ehppaelf.c:2305 ehppalinux.c:2482 ehppanbsd.c:2482 ehppaobsd.c:2482
 #, c-format
 msgid ""
 "  --multi-subspace            Generate import and export stubs to support\n"
@@ -7054,8 +7104,8 @@ msgstr "%P : avertissement : la taille de la région mémoire 'fenêtre' n'est
 msgid "%X%P: changing output format whilst linking is not supported\n"
 msgstr "%X%P : changer le format de la sortie lors de l'édition de liens n'est pas pris en charge\n"
 
-#: em68hc11elf.c:2303 em68hc11elfb.c:2303 em68hc12elf.c:2303
-#: em68hc12elfb.c:2303
+#: em68hc11elf.c:2304 em68hc11elfb.c:2304 em68hc12elf.c:2304
+#: em68hc12elfb.c:2304
 #, c-format
 msgid ""
 "  --no-trampoline             Do not generate the far trampolines used to call\n"
@@ -7064,8 +7114,8 @@ msgstr ""
 "  --no-trampoline             Ne pas générer les trampolines lointains utilisés pour appeler\n"
 "                                une fonction éloignée utilisant jsr ou bsr\n"
 
-#: em68hc11elf.c:2306 em68hc11elfb.c:2306 em68hc12elf.c:2306
-#: em68hc12elfb.c:2306
+#: em68hc11elf.c:2307 em68hc11elfb.c:2307 em68hc12elf.c:2307
+#: em68hc12elfb.c:2307
 #, c-format
 msgid ""
 "  --bank-window NAME          Specify the name of the memory region describing\n"
@@ -7078,11 +7128,11 @@ msgstr ""
 msgid "%F%P: %pB: all input objects must be ELF for --embedded-relocs\n"
 msgstr "%F%P : %pB : tous les objets d'entrée doivent être ELF pour --embedded-relocs\n"
 
-#: em68kelf.c:2320 em68kelfnbsd.c:2320
+#: em68kelf.c:2321 em68kelfnbsd.c:2321
 msgid "%P: unrecognized --got argument '%s'\n"
 msgstr "%P : argument --got non reconnue\n"
 
-#: em68kelf.c:2333 em68kelfnbsd.c:2333
+#: em68kelf.c:2334 em68kelfnbsd.c:2334
 #, c-format
 msgid "  --got=<type>                Specify GOT handling scheme\n"
 msgstr "  --got=<type>                Specifie le mécanisme de gestion GOT\n"
@@ -7152,116 +7202,56 @@ msgid "%P: error: unrecognized argument to --data-region= option: \"%s\"\n"
 msgstr "%P : erreur : argument non reconnu pour --data-region= option : \"%s\"\n"
 
 #. Incompatible objects.
-#: ends32belf.c:203 ends32belf16m.c:203 ends32belf_linux.c:203 ends32elf.c:203
-#: ends32elf16m.c:203 ends32elf_linux.c:203
+#: ends32belf.c:178 ends32belf16m.c:178 ends32belf_linux.c:178 ends32elf.c:178
+#: ends32elf16m.c:178 ends32elf_linux.c:178
 msgid "%F%P: %pB: ABI version of object files mismatched\n"
 msgstr "%F%P : %pB : versions ABI des fichiers objets non concordantes\n"
 
-#. For PIE or shared object, all input must be PIC.
-#: ends32belf.c:249 ends32belf16m.c:249 ends32belf_linux.c:249 ends32elf.c:249
-#: ends32elf16m.c:249 ends32elf_linux.c:249
-msgid "%P: %pB: must use -fpic to compile this file for shared object or PIE\n"
-msgstr "%P : %pB : -fpic doit être utilisé pour compiler ce fichier pour des objets partagés ou PIE\n"
-
-#: ends32belf.c:2213 ends32belf16m.c:2213 ends32belf_linux.c:2342
-#: ends32elf.c:2213 ends32elf16m.c:2213 ends32elf_linux.c:2342
+#: ends32belf.c:2114 ends32belf16m.c:2114 ends32belf_linux.c:2243
+#: ends32elf.c:2114 ends32elf16m.c:2114 ends32elf_linux.c:2243
 msgid "%P: --mbaseline is not used anymore\n"
 msgstr "%P : --mbaseline n'est désormais plus utilisé\n"
 
-#: ends32belf.c:2224 ends32belf16m.c:2224 ends32belf_linux.c:2353
-#: ends32elf.c:2224 ends32elf16m.c:2224 ends32elf_linux.c:2353
+#: ends32belf.c:2125 ends32belf16m.c:2125 ends32belf_linux.c:2254
+#: ends32elf.c:2125 ends32elf16m.c:2125 ends32elf_linux.c:2254
 msgid "%P: --relax-[no-]reduce-fp-updat is not used anymore\n"
 msgstr "%P : --relax-[no-]reduce-fp-updat n'est désormais plus utilisé\n"
 
-#: ends32belf.c:2228 ends32belf16m.c:2228 ends32belf_linux.c:2357
-#: ends32elf.c:2228 ends32elf16m.c:2228 ends32elf_linux.c:2357
+#: ends32belf.c:2129 ends32belf16m.c:2129 ends32belf_linux.c:2258
+#: ends32elf.c:2129 ends32elf16m.c:2129 ends32elf_linux.c:2258
 msgid "%P: missing file for --mexport-symbols\n"
 msgstr "%P : fichier manquant pour --mexport-symbols\n"
 
-#: ends32belf.c:2248 ends32belf16m.c:2248 ends32belf_linux.c:2377
-#: ends32elf.c:2248 ends32elf16m.c:2248 ends32elf_linux.c:2377
-msgid "%P: missing file for --mexport-ex9=<file>\n"
-msgstr "%P : fichier manquant pour --mexport-ex9=<fichier>\n"
+#: ends32belf.c:2142 ends32belf.c:2151 ends32belf16m.c:2142
+#: ends32belf16m.c:2151 ends32belf_linux.c:2271 ends32belf_linux.c:2280
+#: ends32elf.c:2142 ends32elf.c:2151 ends32elf16m.c:2142 ends32elf16m.c:2151
+#: ends32elf_linux.c:2271 ends32elf_linux.c:2280
+msgid "%P: valid arguments to --mhyper-relax=(low|medium|high)\n"
+msgstr "%P : arguments valides de --mhyper-relax=(low|medium|high)\n"
 
-#: ends32belf.c:2256 ends32belf16m.c:2256 ends32belf_linux.c:2385
-#: ends32elf.c:2256 ends32elf16m.c:2256 ends32elf_linux.c:2385
-msgid "%F%P: cannot open ex9 export file %s\n"
-msgstr "%F%P : impossible d'ouvrier le fichier d'export ex9 %s\n"
-
-#: ends32belf.c:2261 ends32belf16m.c:2261 ends32belf_linux.c:2390
-#: ends32elf.c:2261 ends32elf16m.c:2261 ends32elf_linux.c:2390
-msgid "%P: missing file for --mimport-ex9=<file>\n"
-msgstr "%P : fichier manquant pour --mimport-ex9=<fichier>\n"
-
-#: ends32belf.c:2265 ends32belf16m.c:2265 ends32belf_linux.c:2394
-#: ends32elf.c:2265 ends32elf16m.c:2265 ends32elf_linux.c:2394
-msgid "%F%P: cannot open ex9 import file %s\n"
-msgstr "%F%P : impossible d'ouvrir le ficher d'import ex9 %s\n"
-
-#: ends32belf.c:2275 ends32belf16m.c:2275 ends32belf_linux.c:2404
-#: ends32elf.c:2275 ends32elf16m.c:2275 ends32elf_linux.c:2404
-msgid "%F%P: the range of ex9_limit must between 1 and 511\n"
-msgstr "%F%P : la plage de ex9_limit doit être comprise entre 1 et 511\n"
-
-#: ends32belf.c:2306 ends32belf16m.c:2306 ends32belf_linux.c:2435
-#: ends32elf.c:2306 ends32elf16m.c:2306 ends32elf_linux.c:2435
+#: ends32belf.c:2171 ends32belf16m.c:2171 ends32belf_linux.c:2300
+#: ends32elf.c:2171 ends32elf16m.c:2171 ends32elf_linux.c:2300
 #, c-format
 msgid "  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation\n"
 msgstr "  --m[no-]fp-as-gp            Désactiver/activer la relaxation fp-as-gp\n"
 
-#: ends32belf.c:2308 ends32belf16m.c:2308 ends32belf_linux.c:2437
-#: ends32elf.c:2308 ends32elf16m.c:2308 ends32elf_linux.c:2437
+#: ends32belf.c:2173 ends32belf16m.c:2173 ends32belf_linux.c:2302
+#: ends32elf.c:2173 ends32elf16m.c:2173 ends32elf_linux.c:2302
 #, c-format
 msgid "  --mexport-symbols=FILE      Exporting symbols in linker script\n"
 msgstr "  --mexport-symbols=FILE      Exporter les symboles dans le script de l'éditeur de liens\n"
 
-#: ends32belf.c:2312 ends32belf16m.c:2312 ends32belf_linux.c:2441
-#: ends32elf.c:2312 ends32elf16m.c:2312 ends32elf_linux.c:2441
-#, c-format
-msgid "  --m[no-]ex9                 Disable/enable link-time EX9 relaxation\n"
-msgstr "  --m[no-]ex9                 Désactiver/activer la relaxation EX9 lors de l'édition de liens\n"
-
-#: ends32belf.c:2314 ends32belf16m.c:2314 ends32belf_linux.c:2443
-#: ends32elf.c:2314 ends32elf16m.c:2314 ends32elf_linux.c:2443
+#: ends32belf.c:2175 ends32belf16m.c:2175 ends32belf_linux.c:2304
+#: ends32elf.c:2175 ends32elf16m.c:2175 ends32elf_linux.c:2304
 #, c-format
-msgid "  --mexport-ex9=FILE          Export EX9 table after linking\n"
-msgstr "  --mexport-ex9=FICHIER       Exporter la table EX9 après l'édition de liens\n"
+msgid "  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium\n"
+msgstr "  --mhyper-relax=level        Ajuster le niveau de relaxation (low|medium|high). défaut : medium\n"
 
-#: ends32belf.c:2316 ends32belf16m.c:2316 ends32belf_linux.c:2445
-#: ends32elf.c:2316 ends32elf16m.c:2316 ends32elf_linux.c:2445
+#: ends32belf.c:2177 ends32belf16m.c:2177 ends32belf_linux.c:2306
+#: ends32elf.c:2177 ends32elf16m.c:2177 ends32elf_linux.c:2306
 #, c-format
-msgid "  --mimport-ex9=FILE          Import Ex9 table for EX9 relaxation\n"
-msgstr "  --mimport-ex9=FILE          Importer la table EX9 pour la relaxation EX9\n"
-
-#: ends32belf.c:2318 ends32belf16m.c:2318 ends32belf_linux.c:2447
-#: ends32elf.c:2318 ends32elf16m.c:2318 ends32elf_linux.c:2447
-#, c-format
-msgid "  --mupdate-ex9               Update existing EX9 table\n"
-msgstr "  --mupdate-ex9               Mettre à jour la table EX9 existante\n"
-
-#: ends32belf.c:2320 ends32belf16m.c:2320 ends32belf_linux.c:2449
-#: ends32elf.c:2320 ends32elf16m.c:2320 ends32elf_linux.c:2449
-#, c-format
-msgid "  --mex9-limit=NUM            Maximum number of entries in ex9 table\n"
-msgstr "  --mex9-limit=NOM            Nombre maximal d'entrées dans la table EX9\n"
-
-#: ends32belf.c:2322 ends32belf16m.c:2322 ends32belf_linux.c:2451
-#: ends32elf.c:2322 ends32elf16m.c:2322 ends32elf_linux.c:2451
-#, c-format
-msgid "  --mex9-loop-aware           Avoid generate EX9 instruction inside loop\n"
-msgstr "  --mex9-loop-aware           Eviter la génération d'instructions EX9 à l'intérieur de boucles\n"
-
-#: ends32belf.c:2327 ends32belf16m.c:2327 ends32belf_linux.c:2456
-#: ends32elf.c:2327 ends32elf16m.c:2327 ends32elf_linux.c:2456
-#, c-format
-msgid "  --m[no-]ifc                 Disable/enable link-time IFC optimization\n"
-msgstr "  --m[no-]ifc                 Désactive/activer les optimisations IFC lors de l'édition de liens\n"
-
-#: ends32belf.c:2329 ends32belf16m.c:2329 ends32belf_linux.c:2458
-#: ends32elf.c:2329 ends32elf16m.c:2329 ends32elf_linux.c:2458
-#, c-format
-msgid "  --mifc-loop-aware           Avoid generate IFC instruction inside loop\n"
-msgstr "  --mifc-loop-aware           Evite la génération d'instructions IFC à l'intérieur de boucles\n"
+msgid "  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline\n"
+msgstr "  --m[no-]tlsdesc-trampoline  Désactiver/activer les trampolines TLS DESC\n"
 
 #: etic3xcoff.c:68 etic3xcoff_onchip.c:68 etic4xcoff.c:68 etic54xcoff.c:68
 #, c-format
@@ -7271,3 +7261,48 @@ msgstr "  --format 0|1|2              Précise quelle version de COFF utiliser\n
 #: etic3xcoff.c:90 etic3xcoff_onchip.c:90 etic4xcoff.c:90 etic54xcoff.c:90
 msgid "%F%P: invalid COFF format version %s\n"
 msgstr "%F%P : la version de format %s pour COOF est invalide\n"
+
+#~ msgid "  --no-wchar-size-warning     Don't warn about objects with incompatible                                wchar_t sizes\n"
+#~ msgstr "  --no-wchar-size-warning    Ne pas avertir des objets avec des tailles de wchar_t incompatibles\n"
+
+#~ msgid "%P: %pB: must use -fpic to compile this file for shared object or PIE\n"
+#~ msgstr "%P : %pB : -fpic doit être utilisé pour compiler ce fichier pour des objets partagés ou PIE\n"
+
+#~ msgid "%P: missing file for --mexport-ex9=<file>\n"
+#~ msgstr "%P : fichier manquant pour --mexport-ex9=<fichier>\n"
+
+#~ msgid "%F%P: cannot open ex9 export file %s\n"
+#~ msgstr "%F%P : impossible d'ouvrier le fichier d'export ex9 %s\n"
+
+#~ msgid "%P: missing file for --mimport-ex9=<file>\n"
+#~ msgstr "%P : fichier manquant pour --mimport-ex9=<fichier>\n"
+
+#~ msgid "%F%P: cannot open ex9 import file %s\n"
+#~ msgstr "%F%P : impossible d'ouvrir le ficher d'import ex9 %s\n"
+
+#~ msgid "%F%P: the range of ex9_limit must between 1 and 511\n"
+#~ msgstr "%F%P : la plage de ex9_limit doit être comprise entre 1 et 511\n"
+
+#~ msgid "  --m[no-]ex9                 Disable/enable link-time EX9 relaxation\n"
+#~ msgstr "  --m[no-]ex9                 Désactiver/activer la relaxation EX9 lors de l'édition de liens\n"
+
+#~ msgid "  --mexport-ex9=FILE          Export EX9 table after linking\n"
+#~ msgstr "  --mexport-ex9=FICHIER       Exporter la table EX9 après l'édition de liens\n"
+
+#~ msgid "  --mimport-ex9=FILE          Import Ex9 table for EX9 relaxation\n"
+#~ msgstr "  --mimport-ex9=FILE          Importer la table EX9 pour la relaxation EX9\n"
+
+#~ msgid "  --mupdate-ex9               Update existing EX9 table\n"
+#~ msgstr "  --mupdate-ex9               Mettre à jour la table EX9 existante\n"
+
+#~ msgid "  --mex9-limit=NUM            Maximum number of entries in ex9 table\n"
+#~ msgstr "  --mex9-limit=NOM            Nombre maximal d'entrées dans la table EX9\n"
+
+#~ msgid "  --mex9-loop-aware           Avoid generate EX9 instruction inside loop\n"
+#~ msgstr "  --mex9-loop-aware           Eviter la génération d'instructions EX9 à l'intérieur de boucles\n"
+
+#~ msgid "  --m[no-]ifc                 Disable/enable link-time IFC optimization\n"
+#~ msgstr "  --m[no-]ifc                 Désactive/activer les optimisations IFC lors de l'édition de liens\n"
+
+#~ msgid "  --mifc-loop-aware           Avoid generate IFC instruction inside loop\n"
+#~ msgstr "  --mifc-loop-aware           Evite la génération d'instructions IFC à l'intérieur de boucles\n"
diff --git a/ld/po/ld.pot b/ld/po/ld.pot
index 6ceb974810..c9a1c4bcae 100644
--- a/ld/po/ld.pot
+++ b/ld/po/ld.pot
@@ -8,7 +8,7 @@ msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2019-02-02 15:55+0000\n"
+"POT-Creation-Date: 2019-02-02 17:30+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
diff --git a/ld/testsuite/ld-aarch64/aarch64-elf.exp b/ld/testsuite/ld-aarch64/aarch64-elf.exp
index 2b9fad5604..cac44585c0 100644
--- a/ld/testsuite/ld-aarch64/aarch64-elf.exp
+++ b/ld/testsuite/ld-aarch64/aarch64-elf.exp
@@ -256,6 +256,7 @@ run_dump_test "tls-relax-all-ilp32"
 run_dump_test "tls-relax-gd-le"
 run_dump_test "tls-relax-gd-le-ilp32"
 run_dump_test "tls-relax-gdesc-le"
+run_dump_test "tls-relax-gdesc-le-now"
 run_dump_test "tls-relax-gdesc-le-ilp32"
 run_dump_test "tls-relax-gd-ie"
 run_dump_test "tls-relax-gd-ie-ilp32"
@@ -371,6 +372,10 @@ run_dump_test_lp64 "rela-abs-relative-opt"
 
 run_dump_test_lp64 "pie-bind-locally"
 
+run_dump_test_lp64 "variant_pcs-r"
+run_dump_test_lp64 "variant_pcs-shared"
+run_dump_test_lp64 "variant_pcs-now"
+
 set aarch64elflinktests {
   {"ld-aarch64/so with global symbol" "-shared" "" "" {copy-reloc-so.s}
     {} "copy-reloc-so.so"}
diff --git a/ld/testsuite/ld-aarch64/tls-relax-gdesc-le-now.d b/ld/testsuite/ld-aarch64/tls-relax-gdesc-le-now.d
new file mode 100644
index 0000000000..f1565e9c11
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/tls-relax-gdesc-le-now.d
@@ -0,0 +1,19 @@
+#source: tls-relax-gdesc-le.s
+#ld: -shared -z now
+#readelf: -dr
+#...
+ 0x.+ \(STRTAB\)   \s+0x.+
+ 0x.+ \(SYMTAB\)   \s+0x.+
+ 0x.+ \(STRSZ\)    \s+.+ \(bytes\)
+ 0x.+ \(SYMENT\)   \s+.+ \(bytes\)
+ 0x.+ \(PLTGOT\)   \s+0x.+
+ 0x.+ \(PLTRELSZ\) \s+.+ \(bytes\)
+ 0x.+ \(PLTREL\)   \s+RELA
+ 0x.+ \(JMPREL\)   \s+0x.+
+ 0x.+ \(BIND_NOW\) \s+
+ 0x.+ \(FLAGS_1\)  \s+   Flags: NOW
+ 0x.+ \(NULL\)     \s+   0x0
+
+Relocation section '\.rela\.plt' at offset .+ contains 1 entry:
+  Offset          Info           Type           Sym\. Value    Sym\. Name \+ Addend
+.+  .+ R_AARCH64_TLSDESC                    0
diff --git a/ld/testsuite/ld-aarch64/variant_pcs-1.s b/ld/testsuite/ld-aarch64/variant_pcs-1.s
new file mode 100644
index 0000000000..8461e8ff5e
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs-1.s
@@ -0,0 +1,59 @@
+.text
+
+.variant_pcs f_spec_global_default_def
+.variant_pcs f_spec_global_default_undef
+.variant_pcs f_spec_global_hidden_def
+.variant_pcs f_spec_local
+.variant_pcs f_spec_global_default_ifunc
+.variant_pcs f_spec_global_hidden_ifunc
+.variant_pcs f_spec_local_ifunc
+
+.global f_spec_global_default_def
+.global f_spec_global_default_undef
+.global f_spec_global_hidden_def
+.global f_spec_global_default_ifunc
+.global f_spec_global_hidden_ifunc
+.global f_base_global_default_def
+.global f_base_global_default_undef
+.global f_base_global_hidden_def
+.global f_base_global_default_ifunc
+.global f_base_global_hidden_ifunc
+
+.hidden f_spec_global_hidden_def
+.hidden f_spec_global_hidden_ifunc
+.hidden f_base_global_hidden_def
+.hidden f_base_global_hidden_ifunc
+
+.type f_spec_global_default_ifunc, %gnu_indirect_function
+.type f_spec_global_hidden_ifunc, %gnu_indirect_function
+.type f_spec_local_ifunc, %gnu_indirect_function
+.type f_base_global_default_ifunc, %gnu_indirect_function
+.type f_base_global_hidden_ifunc, %gnu_indirect_function
+.type f_base_local_ifunc, %gnu_indirect_function
+
+f_spec_global_default_def:
+f_spec_global_hidden_def:
+f_spec_local:
+f_base_global_default_def:
+f_base_global_hidden_def:
+f_base_local:
+f_spec_global_default_ifunc:
+f_spec_global_hidden_ifunc:
+f_spec_local_ifunc:
+f_base_global_default_ifunc:
+f_base_global_hidden_ifunc:
+f_base_local_ifunc:
+	bl f_spec_global_default_def
+	bl f_spec_global_default_undef
+	bl f_spec_global_hidden_def
+	bl f_spec_local
+	bl f_base_global_default_def
+	bl f_base_global_default_undef
+	bl f_base_global_hidden_def
+	bl f_base_local
+	bl f_spec_global_default_ifunc
+	bl f_spec_global_hidden_ifunc
+	bl f_spec_local_ifunc
+	bl f_base_global_default_ifunc
+	bl f_base_global_hidden_ifunc
+	bl f_base_local_ifunc
diff --git a/ld/testsuite/ld-aarch64/variant_pcs-2.s b/ld/testsuite/ld-aarch64/variant_pcs-2.s
new file mode 100644
index 0000000000..e8f13ad941
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs-2.s
@@ -0,0 +1,47 @@
+.text
+
+.variant_pcs f_spec_global_default_def
+.variant_pcs f_spec_global_default_undef
+.variant_pcs f_spec_global_hidden_def
+.variant_pcs f_spec_local2
+.variant_pcs f_spec_global_default_ifunc
+.variant_pcs f_spec_global_hidden_ifunc
+.variant_pcs f_spec_local2_ifunc
+
+.global f_spec_global_default_def
+.global f_spec_global_default_undef
+.global f_spec_global_hidden_def
+.global f_spec_global_default_ifunc
+.global f_spec_global_hidden_ifunc
+.global f_base_global_default_def
+.global f_base_global_default_undef
+.global f_base_global_hidden_def
+.global f_base_global_default_ifunc
+.global f_base_global_hidden_ifunc
+
+.hidden f_spec_global_hidden_def
+.hidden f_spec_global_hidden_ifunc
+.hidden f_base_global_hidden_def
+.hidden f_base_global_hidden_ifunc
+
+.type f_spec_local2_ifunc, %gnu_indirect_function
+.type f_base_local2_ifunc, %gnu_indirect_function
+
+f_spec_local2:
+f_base_local2:
+f_spec_local2_ifunc:
+f_base_local2_ifunc:
+	bl f_spec_global_default_def
+	bl f_spec_global_default_undef
+	bl f_spec_global_hidden_def
+	bl f_spec_local2
+	bl f_base_global_default_def
+	bl f_base_global_default_undef
+	bl f_base_global_hidden_def
+	bl f_base_local2
+	bl f_spec_global_default_ifunc
+	bl f_spec_global_hidden_ifunc
+	bl f_spec_local2_ifunc
+	bl f_base_global_default_ifunc
+	bl f_base_global_hidden_ifunc
+	bl f_base_local2_ifunc
diff --git a/ld/testsuite/ld-aarch64/variant_pcs-now.d b/ld/testsuite/ld-aarch64/variant_pcs-now.d
new file mode 100644
index 0000000000..c3f48fe847
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs-now.d
@@ -0,0 +1,67 @@
+#source: variant_pcs-1.s
+#source: variant_pcs-2.s
+#ld: -shared --hash-style=sysv -T variant_pcs.ld -z now
+#readelf: -rsW
+
+Relocation section '\.rela\.plt' at offset 0x11000 contains 12 entries:
+    Offset             Info             Type               Symbol's Value  Symbol's Name \+ Addend
+0000000000009020  0000000100000402 R_AARCH64_JUMP_SLOT    0000000000000000 f_base_global_default_undef \+ 0
+0000000000009028  0000000200000402 R_AARCH64_JUMP_SLOT    0000000000000000 f_spec_global_default_undef \+ 0
+0000000000009030  0000000400000402 R_AARCH64_JUMP_SLOT    0000000000008000 f_base_global_default_def \+ 0
+0000000000009038  0000000500000402 R_AARCH64_JUMP_SLOT    0000000000008000 f_spec_global_default_def \+ 0
+0000000000009040  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009048  0000000300000402 R_AARCH64_JUMP_SLOT    f_spec_global_default_ifunc\(\) f_spec_global_default_ifunc \+ 0
+0000000000009050  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009058  0000000600000402 R_AARCH64_JUMP_SLOT    f_base_global_default_ifunc\(\) f_base_global_default_ifunc \+ 0
+0000000000009060  0000000000000408 R_AARCH64_IRELATIVE                       8038
+0000000000009068  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009070  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009078  0000000000000408 R_AARCH64_IRELATIVE                       8038
+
+Symbol table '\.dynsym' contains 7 entries:
+   Num:    Value          Size Type    Bind   Vis      Ndx Name
+     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
+     1: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_base_global_default_undef
+     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]   UND f_spec_global_default_undef
+     3: 0000000000008000     0 IFUNC   GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_ifunc
+     4: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT    1 f_base_global_default_def
+     5: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_def
+     6: 0000000000008000     0 IFUNC   GLOBAL DEFAULT    1 f_base_global_default_ifunc
+
+Symbol table '\.symtab' contains 35 entries:
+   Num:    Value          Size Type    Bind   Vis      Ndx Name
+     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
+     1: 0000000000008000     0 SECTION LOCAL  DEFAULT    1 
+     2: 0000000000008070     0 SECTION LOCAL  DEFAULT    2 
+     3: 0000000000009000     0 SECTION LOCAL  DEFAULT    3 
+     4: 0000000000009080     0 SECTION LOCAL  DEFAULT    4 
+     5: 0000000000011000     0 SECTION LOCAL  DEFAULT    5 
+     6: 0000000000011120     0 SECTION LOCAL  DEFAULT    6 
+     7: 00000000000111c8     0 SECTION LOCAL  DEFAULT    7 
+     8: 0000000000011270     0 SECTION LOCAL  DEFAULT    8 
+     9: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-1\.o
+    10: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local
+    11: 0000000000008000     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local_ifunc
+    12: 0000000000008000     0 IFUNC   LOCAL  DEFAULT    1 f_base_local_ifunc
+    13: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local
+    14: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-2\.o
+    16: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2
+    17: 0000000000008038     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2_ifunc
+    18: 0000000000008038     0 IFUNC   LOCAL  DEFAULT    1 f_base_local2_ifunc
+    19: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local2
+    20: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    21: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS 
+    22: 0000000000009080     0 OBJECT  LOCAL  DEFAULT  ABS _DYNAMIC
+    23: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_global_hidden_def
+    24: 0000000000008000     0 IFUNC   LOCAL  DEFAULT    1 f_base_global_hidden_ifunc
+    25: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 f_base_global_hidden_def
+    26: 0000000000009000     0 OBJECT  LOCAL  DEFAULT  ABS _GLOBAL_OFFSET_TABLE_
+    27: 0000000000008000     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_global_hidden_ifunc
+    28: 0000000000008070     0 NOTYPE  LOCAL  DEFAULT    2 \$x
+    29: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_base_global_default_undef
+    30: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]   UND f_spec_global_default_undef
+    31: 0000000000008000     0 IFUNC   GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_ifunc
+    32: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT    1 f_base_global_default_def
+    33: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_def
+    34: 0000000000008000     0 IFUNC   GLOBAL DEFAULT    1 f_base_global_default_ifunc
diff --git a/ld/testsuite/ld-aarch64/variant_pcs-r.d b/ld/testsuite/ld-aarch64/variant_pcs-r.d
new file mode 100644
index 0000000000..a534149d9e
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs-r.d
@@ -0,0 +1,60 @@
+#source: variant_pcs-1.s
+#source: variant_pcs-2.s
+#ld: -r
+#readelf: -rsW
+
+Relocation section '\.rela\.text' at offset .* contains 24 entries:
+    Offset             Info             Type               Symbol's Value  Symbol's Name \+ Addend
+0000000000000000  000000180000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_default_def \+ 0
+0000000000000004  000000110000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_default_undef \+ 0
+0000000000000008  000000120000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_hidden_def \+ 0
+0000000000000010  000000170000011b R_AARCH64_CALL26       0000000000000000 f_base_global_default_def \+ 0
+0000000000000014  000000100000011b R_AARCH64_CALL26       0000000000000000 f_base_global_default_undef \+ 0
+0000000000000018  000000150000011b R_AARCH64_CALL26       0000000000000000 f_base_global_hidden_def \+ 0
+0000000000000020  000000140000011b R_AARCH64_CALL26       f_spec_global_default_ifunc\(\) f_spec_global_default_ifunc \+ 0
+0000000000000024  000000160000011b R_AARCH64_CALL26       f_spec_global_hidden_ifunc\(\) f_spec_global_hidden_ifunc \+ 0
+0000000000000028  000000060000011b R_AARCH64_CALL26       f_spec_local_ifunc\(\) f_spec_local_ifunc \+ 0
+000000000000002c  000000190000011b R_AARCH64_CALL26       f_base_global_default_ifunc\(\) f_base_global_default_ifunc \+ 0
+0000000000000030  000000130000011b R_AARCH64_CALL26       f_base_global_hidden_ifunc\(\) f_base_global_hidden_ifunc \+ 0
+0000000000000034  000000070000011b R_AARCH64_CALL26       f_base_local_ifunc\(\) f_base_local_ifunc \+ 0
+0000000000000038  000000180000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_default_def \+ 0
+000000000000003c  000000110000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_default_undef \+ 0
+0000000000000040  000000120000011b R_AARCH64_CALL26       0000000000000000 f_spec_global_hidden_def \+ 0
+0000000000000048  000000170000011b R_AARCH64_CALL26       0000000000000000 f_base_global_default_def \+ 0
+000000000000004c  000000100000011b R_AARCH64_CALL26       0000000000000000 f_base_global_default_undef \+ 0
+0000000000000050  000000150000011b R_AARCH64_CALL26       0000000000000000 f_base_global_hidden_def \+ 0
+0000000000000058  000000140000011b R_AARCH64_CALL26       f_spec_global_default_ifunc\(\) f_spec_global_default_ifunc \+ 0
+000000000000005c  000000160000011b R_AARCH64_CALL26       f_spec_global_hidden_ifunc\(\) f_spec_global_hidden_ifunc \+ 0
+0000000000000060  0000000c0000011b R_AARCH64_CALL26       f_spec_local2_ifunc\(\) f_spec_local2_ifunc \+ 0
+0000000000000064  000000190000011b R_AARCH64_CALL26       f_base_global_default_ifunc\(\) f_base_global_default_ifunc \+ 0
+0000000000000068  000000130000011b R_AARCH64_CALL26       f_base_global_hidden_ifunc\(\) f_base_global_hidden_ifunc \+ 0
+000000000000006c  0000000d0000011b R_AARCH64_CALL26       f_base_local2_ifunc\(\) f_base_local2_ifunc \+ 0
+
+Symbol table '\.symtab' contains 26 entries:
+   Num:    Value          Size Type    Bind   Vis      Ndx Name
+     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
+     1: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 
+     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 
+     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 
+     4: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-1\.o
+     5: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local
+     6: 0000000000000000     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local_ifunc
+     7: 0000000000000000     0 IFUNC   LOCAL  DEFAULT    1 f_base_local_ifunc
+     8: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local
+     9: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    10: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-2\.o
+    11: 0000000000000038     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2
+    12: 0000000000000038     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2_ifunc
+    13: 0000000000000038     0 IFUNC   LOCAL  DEFAULT    1 f_base_local2_ifunc
+    14: 0000000000000038     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local2
+    15: 0000000000000038     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_base_global_default_undef
+    17: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]   UND f_spec_global_default_undef
+    18: 0000000000000000     0 NOTYPE  GLOBAL HIDDEN  \[VARIANT_PCS\]     1 f_spec_global_hidden_def
+    19: 0000000000000000     0 IFUNC   GLOBAL HIDDEN     1 f_base_global_hidden_ifunc
+    20: 0000000000000000     0 IFUNC   GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_ifunc
+    21: 0000000000000000     0 NOTYPE  GLOBAL HIDDEN     1 f_base_global_hidden_def
+    22: 0000000000000000     0 IFUNC   GLOBAL HIDDEN  \[VARIANT_PCS\]     1 f_spec_global_hidden_ifunc
+    23: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT    1 f_base_global_default_def
+    24: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_def
+    25: 0000000000000000     0 IFUNC   GLOBAL DEFAULT    1 f_base_global_default_ifunc
diff --git a/ld/testsuite/ld-aarch64/variant_pcs-shared.d b/ld/testsuite/ld-aarch64/variant_pcs-shared.d
new file mode 100644
index 0000000000..bdcc2c867f
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs-shared.d
@@ -0,0 +1,67 @@
+#source: variant_pcs-1.s
+#source: variant_pcs-2.s
+#ld: -shared --hash-style=sysv -T variant_pcs.ld
+#readelf: -rsW
+
+Relocation section '\.rela\.plt' at offset 0x11000 contains 12 entries:
+    Offset             Info             Type               Symbol's Value  Symbol's Name \+ Addend
+0000000000009020  0000000100000402 R_AARCH64_JUMP_SLOT    0000000000000000 f_base_global_default_undef \+ 0
+0000000000009028  0000000200000402 R_AARCH64_JUMP_SLOT    0000000000000000 f_spec_global_default_undef \+ 0
+0000000000009030  0000000400000402 R_AARCH64_JUMP_SLOT    0000000000008000 f_base_global_default_def \+ 0
+0000000000009038  0000000500000402 R_AARCH64_JUMP_SLOT    0000000000008000 f_spec_global_default_def \+ 0
+0000000000009040  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009048  0000000300000402 R_AARCH64_JUMP_SLOT    f_spec_global_default_ifunc\(\) f_spec_global_default_ifunc \+ 0
+0000000000009050  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009058  0000000600000402 R_AARCH64_JUMP_SLOT    f_base_global_default_ifunc\(\) f_base_global_default_ifunc \+ 0
+0000000000009060  0000000000000408 R_AARCH64_IRELATIVE                       8038
+0000000000009068  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009070  0000000000000408 R_AARCH64_IRELATIVE                       8000
+0000000000009078  0000000000000408 R_AARCH64_IRELATIVE                       8038
+
+Symbol table '\.dynsym' contains 7 entries:
+   Num:    Value          Size Type    Bind   Vis      Ndx Name
+     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
+     1: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_base_global_default_undef
+     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]   UND f_spec_global_default_undef
+     3: 0000000000008000     0 IFUNC   GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_ifunc
+     4: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT    1 f_base_global_default_def
+     5: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_def
+     6: 0000000000008000     0 IFUNC   GLOBAL DEFAULT    1 f_base_global_default_ifunc
+
+Symbol table '\.symtab' contains 35 entries:
+   Num:    Value          Size Type    Bind   Vis      Ndx Name
+     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
+     1: 0000000000008000     0 SECTION LOCAL  DEFAULT    1 
+     2: 0000000000008070     0 SECTION LOCAL  DEFAULT    2 
+     3: 0000000000009000     0 SECTION LOCAL  DEFAULT    3 
+     4: 0000000000009080     0 SECTION LOCAL  DEFAULT    4 
+     5: 0000000000011000     0 SECTION LOCAL  DEFAULT    5 
+     6: 0000000000011120     0 SECTION LOCAL  DEFAULT    6 
+     7: 00000000000111c8     0 SECTION LOCAL  DEFAULT    7 
+     8: 0000000000011270     0 SECTION LOCAL  DEFAULT    8 
+     9: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-1\.o
+    10: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local
+    11: 0000000000008000     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local_ifunc
+    12: 0000000000008000     0 IFUNC   LOCAL  DEFAULT    1 f_base_local_ifunc
+    13: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local
+    14: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    15: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS .*variant_pcs-2\.o
+    16: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2
+    17: 0000000000008038     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_local2_ifunc
+    18: 0000000000008038     0 IFUNC   LOCAL  DEFAULT    1 f_base_local2_ifunc
+    19: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT    1 f_base_local2
+    20: 0000000000008038     0 NOTYPE  LOCAL  DEFAULT    1 \$x
+    21: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS 
+    22: 0000000000009080     0 OBJECT  LOCAL  DEFAULT  ABS _DYNAMIC
+    23: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_global_hidden_def
+    24: 0000000000008000     0 IFUNC   LOCAL  DEFAULT    1 f_base_global_hidden_ifunc
+    25: 0000000000008000     0 NOTYPE  LOCAL  DEFAULT    1 f_base_global_hidden_def
+    26: 0000000000009000     0 OBJECT  LOCAL  DEFAULT  ABS _GLOBAL_OFFSET_TABLE_
+    27: 0000000000008000     0 IFUNC   LOCAL  DEFAULT \[VARIANT_PCS\]     1 f_spec_global_hidden_ifunc
+    28: 0000000000008070     0 NOTYPE  LOCAL  DEFAULT    2 \$x
+    29: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND f_base_global_default_undef
+    30: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]   UND f_spec_global_default_undef
+    31: 0000000000008000     0 IFUNC   GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_ifunc
+    32: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT    1 f_base_global_default_def
+    33: 0000000000008000     0 NOTYPE  GLOBAL DEFAULT \[VARIANT_PCS\]     1 f_spec_global_default_def
+    34: 0000000000008000     0 IFUNC   GLOBAL DEFAULT    1 f_base_global_default_ifunc
diff --git a/ld/testsuite/ld-aarch64/variant_pcs.ld b/ld/testsuite/ld-aarch64/variant_pcs.ld
new file mode 100644
index 0000000000..a66a9343a7
--- /dev/null
+++ b/ld/testsuite/ld-aarch64/variant_pcs.ld
@@ -0,0 +1,23 @@
+/* Script for .variant_pcs symbol tests.  */
+OUTPUT_ARCH(aarch64)
+ENTRY(_start)
+SECTIONS
+{
+  /* Read-only sections, merged into text segment: */
+  PROVIDE (__executable_start = 0x8000); . = 0x8000;
+  .text           :
+  {
+    *(.before)
+    *(.text)
+    *(.after)
+  } =0
+  . = 0x9000;
+  .got            : { *(.got) *(.got.plt)}
+  . = 0x10000;
+  .rela.dyn       : { *(.rela.ifunc) }
+  . = 0x11000;
+  .rela.plt       : { *(.rela.plt) *(.rela.iplt) }
+  . = 0x12340000;
+  .far : { *(.far) }
+  .ARM.attributes 0 : { *(.ARM.atttributes) }
+}
diff --git a/ld/testsuite/ld-arm/arm-elf.exp b/ld/testsuite/ld-arm/arm-elf.exp
index 450a76b708..440a1568c2 100644
--- a/ld/testsuite/ld-arm/arm-elf.exp
+++ b/ld/testsuite/ld-arm/arm-elf.exp
@@ -768,6 +768,12 @@ set armeabitests_nonacl {
      {cmse-implib.s}
      {{ld cmse-new-wrong-implib.out}}
      "cmse-new-wrong-implib"}
+    {"Secure gateway veneers:cmse functions debug information missing"
+      "--section-start .gnu.sgstubs=0x190000 --gc-sections -e0" ""
+      "-march=armv8-m.main -mthumb"
+      {cmse_main.s cmse_sec_debug.s}
+      {{objdump --dwarf=info cmse_main_sec_debug.d}}
+      "cmse_main_sec_debug"}
 
     {"R_ARM_THM_JUMP19 Relocation veneers: Short"
      "--section-start destsect=0x000108002 --section-start .text=0x8000" ""
diff --git a/ld/testsuite/ld-arm/cmse_main.s b/ld/testsuite/ld-arm/cmse_main.s
new file mode 100644
index 0000000000..5047c02f46
--- /dev/null
+++ b/ld/testsuite/ld-arm/cmse_main.s
@@ -0,0 +1,21 @@
+	.arch armv8-m.main
+	.file	"cmse_main.c"
+	.text
+.Ltext0:
+	.cfi_sections	.debug_frame
+	.section	.text.main,"ax",%progbits
+	.align	1
+	.global	main
+	.arch armv8-m.main
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu fpv5-sp-d16
+	.type	main, %function
+main:
+.LFB0:
+	.file 1 "cmse_main.c"
+	.loc 1 2 1
+	.cfi_startproc
+	.cfi_endproc
+.LFE0:
diff --git a/ld/testsuite/ld-arm/cmse_main_sec_debug.d b/ld/testsuite/ld-arm/cmse_main_sec_debug.d
new file mode 100644
index 0000000000..2f01af295c
--- /dev/null
+++ b/ld/testsuite/ld-arm/cmse_main_sec_debug.d
@@ -0,0 +1,29 @@
+
+tmpdir/cmse_main_sec_debug:     .*
+
+Contents of the \.debug_info section:
+
+  Compilation Unit @ offset 0x0:
+   Length:        0x34 \(32-bit\)
+   Version:       4
+   Abbrev Offset: 0x0
+   Pointer Size:  4
+ <0><b>: Abbrev Number: 1 \(DW_TAG_compile_unit\)
+    <c>   DW_AT_producer    : \(indirect string, offset: 0x[a-f0-9]+\): GNU C17 10.0.0 20190617
+    <10>   DW_AT_language    : 12	\(ANSI C99\)
+    <11>   DW_AT_name        : \(indirect string, offset: 0x[a-f0-9]+\): sec.c
+    <15>   DW_AT_comp_dir    : \(indirect string, offset: 0x[a-f0-9]+\): Blinky
+    <19>   DW_AT_ranges      : 0x[a-f0-9]+
+    <1d>   DW_AT_low_pc      : 0x[a-f0-9]+
+    <21>   DW_AT_stmt_list   : 0x[a-f0-9]+
+ <1><25>: Abbrev Number: 2 \(DW_TAG_subprogram\)
+    <26>   DW_AT_external    : 1
+    <26>   DW_AT_name        : \(indirect string, offset: 0x[a-f0-9]+\): SecureLED_On
+    <2a>   DW_AT_decl_file   : 1
+    <2b>   DW_AT_decl_line   : 2
+    <2c>   DW_AT_decl_column : 1
+    <2d>   DW_AT_low_pc      : 0x[a-f0-9]+
+    <31>   DW_AT_high_pc     : 0x[a-f0-9]+
+    <35>   DW_AT_frame_base  : 1 byte block: 9c 	\(DW_OP_call_frame_cfa\)
+    <37>   DW_AT_GNU_all_call_sites: 1
+ <1><37>: Abbrev Number: 0
diff --git a/ld/testsuite/ld-arm/cmse_sec_debug.s b/ld/testsuite/ld-arm/cmse_sec_debug.s
new file mode 100644
index 0000000000..0ca949e3e5
--- /dev/null
+++ b/ld/testsuite/ld-arm/cmse_sec_debug.s
@@ -0,0 +1,142 @@
+	.arch armv8-m.main
+	.file	"sec.c"
+	.text
+.Ltext0:
+	.cfi_sections	.debug_frame
+	.section	.text.SecureLED_On,"ax",%progbits
+	.align	1
+	.global	SecureLED_On
+	.global	__acle_se_SecureLED_On
+	.arch armv8-m.main
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu fpv5-sp-d16
+	.type	__acle_se_SecureLED_On, %function
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu fpv5-sp-d16
+	.type	SecureLED_On, %function
+SecureLED_On:
+__acle_se_SecureLED_On:
+.LFB0:
+	.file 1 "sec.c"
+	.loc 1 3 1
+	.cfi_startproc
+	push	{r7}
+	.cfi_def_cfa_offset 4
+	.cfi_offset 7, -4
+	add	r7, sp, #0
+	.cfi_def_cfa_register 7
+	.loc 1 4 1
+	mov	sp, r7
+	.cfi_def_cfa_register 13
+	ldr	r7, [sp], #4
+	.cfi_restore 7
+	.cfi_def_cfa_offset 0
+	bxns	lr
+	.cfi_endproc
+.LFE0:
+	.size	SecureLED_On, .-SecureLED_On
+	.text
+.Letext0:
+	.section	.debug_info,"",%progbits
+.Ldebug_info0:
+	.4byte	0x34
+	.2byte	0x4
+	.4byte	.Ldebug_abbrev0
+	.byte	0x4
+	.uleb128 0x1
+	.4byte	.LASF0
+	.byte	0xc
+	.4byte	.LASF1
+	.4byte	.LASF2
+	.4byte	.Ldebug_ranges0+0
+	.4byte	0
+	.4byte	.Ldebug_line0
+	.uleb128 0x2
+	.4byte	.LASF3
+	.byte	0x1
+	.byte	0x2
+	.byte	0x1
+	.4byte	.LFB0
+	.4byte	.LFE0-.LFB0
+	.uleb128 0x1
+	.byte	0x9c
+	.byte	0
+	.section	.debug_abbrev,"",%progbits
+.Ldebug_abbrev0:
+	.uleb128 0x1
+	.uleb128 0x11
+	.byte	0x1
+	.uleb128 0x25
+	.uleb128 0xe
+	.uleb128 0x13
+	.uleb128 0xb
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x1b
+	.uleb128 0xe
+	.uleb128 0x55
+	.uleb128 0x17
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x10
+	.uleb128 0x17
+	.byte	0
+	.byte	0
+	.uleb128 0x2
+	.uleb128 0x2e
+	.byte	0
+	.uleb128 0x3f
+	.uleb128 0x19
+	.uleb128 0x3
+	.uleb128 0xe
+	.uleb128 0x3a
+	.uleb128 0xb
+	.uleb128 0x3b
+	.uleb128 0xb
+	.uleb128 0x39
+	.uleb128 0xb
+	.uleb128 0x11
+	.uleb128 0x1
+	.uleb128 0x12
+	.uleb128 0x6
+	.uleb128 0x40
+	.uleb128 0x18
+	.uleb128 0x2117
+	.uleb128 0x19
+	.byte	0
+	.byte	0
+	.byte	0
+	.section	.debug_aranges,"",%progbits
+	.4byte	0x1c
+	.2byte	0x2
+	.4byte	.Ldebug_info0
+	.byte	0x4
+	.byte	0
+	.2byte	0
+	.2byte	0
+	.4byte	.LFB0
+	.4byte	.LFE0-.LFB0
+	.4byte	0
+	.4byte	0
+	.section	.debug_ranges,"",%progbits
+.Ldebug_ranges0:
+	.4byte	.LFB0
+	.4byte	.LFE0
+	.4byte	0
+	.4byte	0
+	.section	.debug_line,"",%progbits
+.Ldebug_line0:
+	.section	.debug_str,"MS",%progbits,1
+.LASF1:
+	.ascii	"sec.c\000"
+.LASF0:
+	.ascii	"GNU C17 10.0.0 20190617\000"
+.LASF3:
+	.ascii	"SecureLED_On\000"
+.LASF2:
+	.ascii	"Blinky\000"
+	.ident	"GCC: (GNU) 10.0.0 20190617 (experimental)"
diff --git a/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d b/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d
index d818cf579e..88481f0e92 100644
--- a/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d
+++ b/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d
@@ -10,7 +10,7 @@ Disassembly of section destsect:
 Disassembly of section .text:
 
 000080.. <[^>]*>:
-    80..:	(8002f040|f0408002) 	.word	0x(8002f040|f0408002)
+    80..:	f040 8002 	bne.w	8008 <__dest_veneer>
     80..:	0000      	movs	r0, r0
 	...
 
diff --git a/ld/testsuite/ld-arm/jump-reloc-veneers-long.d b/ld/testsuite/ld-arm/jump-reloc-veneers-long.d
index 6bd5652de3..ae176bed8a 100644
--- a/ld/testsuite/ld-arm/jump-reloc-veneers-long.d
+++ b/ld/testsuite/ld-arm/jump-reloc-veneers-long.d
@@ -10,8 +10,9 @@ Disassembly of section destsect:
 Disassembly of section .text:
 
 000080.. <[^>]*>:
-    80..:	(b802f000|f000b802) 	.word	0x(b802f000|f000b802)
-    80..:	00000000 	andeq	r0, r0, r0
+    80..:	f000 b802 	b.w	8008 <__dest_veneer>
+    80..:	0000      	movs	r0, r0
+	...
 
 000080.. <[^>]*>:
     80..:	4778      	bx	pc
diff --git a/ld/testsuite/ld-s390/gotreloc_31-1.dd b/ld/testsuite/ld-s390/gotreloc_31-1.dd
index d6dd86162d..b1cf37c54d 100644
--- a/ld/testsuite/ld-s390/gotreloc_31-1.dd
+++ b/ld/testsuite/ld-s390/gotreloc_31-1.dd
@@ -4,10 +4,10 @@ tmpdir/gotreloc_31-1:     file format elf32-s390
 Disassembly of section .text:
 
 .* <foo>:
-.*:	c4 18 00 00 08 50 [	 ]*lgrl	%r1,11a8 <\.got\+0x8>
-.*:	e3 10 c0 08 00 04 [	 ]*lg	%r1,8\(%r12\)
+.*:	c4 18 00 00 08 56 [	 ]*lgrl	%r1,11b4 <_GLOBAL_OFFSET_TABLE_\+0x14>
+.*:	e3 10 c0 14 00 04 [	 ]*lg	%r1,20\(%r12\)
 .*:	c0 10 00 00 08 52 [	 ]*larl	%r1,11b8 <bar>
-.*:	58 10 c0 08 [	 ]*l	%r1,8\(%r12\)
+.*:	58 10 c0 14 [	 ]*l	%r1,20\(%r12\)
 .*:	c0 10 00 00 08 4d [	 ]*larl	%r1,11b8 <bar>
-.*:	c4 18 00 00 08 40 [	 ]*lgrl	%r1,11a4 <\.got\+0x4>
-.*:	c4 18 00 00 08 3b [	 ]*lgrl	%r1,11a0 <\.got>
+.*:	c4 18 00 00 08 46 [	 ]*lgrl	%r1,11b0 <_GLOBAL_OFFSET_TABLE_\+0x10>
+.*:	c4 18 00 00 08 41 [	 ]*lgrl	%r1,11ac <_GLOBAL_OFFSET_TABLE_\+0xc>
diff --git a/ld/testsuite/ld-s390/s390.exp b/ld/testsuite/ld-s390/s390.exp
index 38fd072104..7970f23a89 100644
--- a/ld/testsuite/ld-s390/s390.exp
+++ b/ld/testsuite/ld-s390/s390.exp
@@ -92,8 +92,6 @@ if [istarget "s390-*-*"] {
 }
 
 if [istarget "s390x-*-*"] {
-    if {! [istarget "*-*-tpf"] } {
-	run_ld_link_tests $s390tests
-    }
+    run_ld_link_tests $s390tests
     run_ld_link_tests $s390xtests
 }
diff --git a/ld/testsuite/ld-s390/tlsbin.dd b/ld/testsuite/ld-s390/tlsbin.dd
index 4d992c4bbf..677357c69f 100644
--- a/ld/testsuite/ld-s390/tlsbin.dd
+++ b/ld/testsuite/ld-s390/tlsbin.dd
@@ -27,9 +27,9 @@ Disassembly of section .text:
 # __tls_get_addr@plt-.LT1
   +[0-9a-f]+:	[0-9a-f ]+       	.long	0x[0-9a-f]+
 # sG1@tlsgd
-  +[0-9a-f]+:	00 00 00 18       	.long	0x00000018
+  +[0-9a-f]+:	00 00 00 28       	.long	0x00000028
 # sG2@tlsgd
-  +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
+  +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sg1@tlsgd
   +[0-9a-f]+:	ff ff ff 60       	.long	0xffffff60
 # sl1@tlsgd
@@ -49,7 +49,7 @@ Disassembly of section .text:
 # sh2@dtpoff
   +[0-9a-f]+:	ff ff ff a4       	.long	0xffffffa4
 # sG2@gotntpoff
-  +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
+  +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sg1@gotntpoff
   +[0-9a-f]+:	ff ff ff 60       	.long	0xffffff60
 # sl1@gotntpoff
@@ -122,17 +122,17 @@ Disassembly of section .text:
   +[0-9a-f]+:	07 00             	nopr
   +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against global var with small got access (no optimization)
-  +[0-9a-f]+:	58 30 c0 04       	l	%r3,4\(%r12\)
+  +[0-9a-f]+:	58 30 c0 14       	l	%r3,20\(%r12\)
   +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against global var defined in exec with small got access
 # (no optimization)
-  +[0-9a-f]+:	58 30 c0 08       	l	%r3,8\(%r12\)
+  +[0-9a-f]+:	58 30 c0 18       	l	%r3,24\(%r12\)
   +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against local var with small got access (no optimization)
-  +[0-9a-f]+:	58 30 c0 00       	l	%r3,0\(%r12\)
+  +[0-9a-f]+:	58 30 c0 10       	l	%r3,16\(%r12\)
   +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden var with small got access (no optimization)
-  +[0-9a-f]+:	58 30 c0 0c       	l	%r3,12\(%r12\)
+  +[0-9a-f]+:	58 30 c0 1c       	l	%r3,28\(%r12\)
   +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # function epilog
   +[0-9a-f]+:	98 6e f0 78       	lm	%r6,%r14,120\(%r15\)
@@ -151,7 +151,7 @@ Disassembly of section .text:
   +[0-9a-f]+:	90 6e f0 18       	stm	%r6,%r14,24\(%r15\)
   +[0-9a-f]+:	a7 d5 00 0c       	bras	%r13,[0-9a-f]+ <_start\+0x1c>
 # sG6@indntpoff
-  +[0-9a-f]+:	00 40 15 54       	.long	0x00401554
+  +[0-9a-f]+:	00 40 15 64       	.long	0x00401564
 # bg6@indntpoff
   +[0-9a-f]+:	ff ff ff d4       	.long	0xffffffd4
 # bl6@indntpoff
diff --git a/ld/testsuite/ld-s390/tlsbin.rd b/ld/testsuite/ld-s390/tlsbin.rd
index 963f77430b..50d444372b 100644
--- a/ld/testsuite/ld-s390/tlsbin.rd
+++ b/ld/testsuite/ld-s390/tlsbin.rd
@@ -22,7 +22,6 @@ Section Headers:
  +\[[ 0-9]+\] .tbss +NOBITS .* 0+40 00 WAT +0 +0 +1
  +\[[ 0-9]+\] .dynamic +DYNAMIC .*
  +\[[ 0-9]+\] .got +PROGBITS .*
- +\[[ 0-9]+\] .got.plt +PROGBITS .*
  +\[[ 0-9]+\] .symtab .*
  +\[[ 0-9]+\] .strtab .*
  +\[[ 0-9]+\] .shstrtab .*
@@ -48,7 +47,7 @@ Program Headers:
  +00 *
  +01 +.interp *
  +02 +.interp .hash .dynsym .dynstr .rela.dyn .rela.plt .plt .text *
- +03 +.tdata .dynamic .got .got.plt *
+ +03 +.tdata .dynamic .got *
  +04 +.dynamic *
  +05 +.tdata .tbss *
 
@@ -87,7 +86,6 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* SECTION +LOCAL +DEFAULT +10 
 .* SECTION +LOCAL +DEFAULT +11 
 .* SECTION +LOCAL +DEFAULT +12 
-.* SECTION +LOCAL +DEFAULT +13 
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* TLS +LOCAL +DEFAULT +9 sl1
 .* TLS +LOCAL +DEFAULT +9 sl2
@@ -108,7 +106,7 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +LOCAL +DEFAULT +10 bl8
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* OBJECT +LOCAL +DEFAULT +11 _DYNAMIC
-.* OBJECT +LOCAL +DEFAULT +13 _GLOBAL_OFFSET_TABLE_
+.* OBJECT +LOCAL +DEFAULT +12 _GLOBAL_OFFSET_TABLE_
 .* TLS +GLOBAL +DEFAULT +UND sG3
 .* TLS +GLOBAL +DEFAULT +9 sg8
 .* TLS +GLOBAL +DEFAULT +10 bg8
@@ -128,7 +126,7 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +GLOBAL +HIDDEN +9 sh4
 .* TLS +GLOBAL +DEFAULT +10 bg7
 .* TLS +GLOBAL +HIDDEN +9 sh5
-.* NOTYPE +GLOBAL +DEFAULT +13 __bss_start
+.* NOTYPE +GLOBAL +DEFAULT +12 __bss_start
 .* TLS +GLOBAL +DEFAULT +UND sG6
 .* FUNC +GLOBAL +DEFAULT +8 fn2
 .* TLS +GLOBAL +DEFAULT +9 sg2
@@ -136,8 +134,8 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +GLOBAL +HIDDEN +9 sh1
 .* TLS +GLOBAL +DEFAULT +9 sg6
 .* TLS +GLOBAL +DEFAULT +9 sg7
-.* NOTYPE +GLOBAL +DEFAULT +13 _edata
-.* NOTYPE +GLOBAL +DEFAULT +13 _end
+.* NOTYPE +GLOBAL +DEFAULT +12 _edata
+.* NOTYPE +GLOBAL +DEFAULT +12 _end
 .* TLS +GLOBAL +HIDDEN +9 sh2
 .* TLS +GLOBAL +HIDDEN +9 sh6
 .* TLS +GLOBAL +DEFAULT +10 bg2
diff --git a/ld/testsuite/ld-s390/tlsbin.sd b/ld/testsuite/ld-s390/tlsbin.sd
index 12ec2f19b6..b1ecbf0f20 100644
--- a/ld/testsuite/ld-s390/tlsbin.sd
+++ b/ld/testsuite/ld-s390/tlsbin.sd
@@ -8,5 +8,6 @@
 .*:     file format elf32-s390
 
 Contents of section .got:
+ [0-9a-f]+ [0-9a-f]+ 00000000 00000000 [0-9a-f]+  .@...........@..
  [0-9a-f]+ ffffff88 00000000 ffffff68 ffffffa8  ...........h....
  [0-9a-f]+ 00000000 00000000 00000000           ............    
diff --git a/ld/testsuite/ld-s390/tlsbin_64.dd b/ld/testsuite/ld-s390/tlsbin_64.dd
index 6ee87b0224..b984c5719c 100644
--- a/ld/testsuite/ld-s390/tlsbin_64.dd
+++ b/ld/testsuite/ld-s390/tlsbin_64.dd
@@ -70,7 +70,7 @@ Disassembly of section .text:
 # function prolog
  +[0-9a-f]+:	b9 04 00 ef       	lgr	%r14,%r15
  +[0-9a-f]+:	a7 fb ff 60       	aghi	%r15,-160
- +[0-9a-f]+:	c0 c0 [0-9a-f ]+ 	larl	%r12,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 c0 [0-9a-f ]+ 	larl	%r12,[0-9a-f]+ <_GLOBAL_OFFSET_TABLE_>
  +[0-9a-f]+:	e3 e0 e0 00 00 24 	stg	%r14,0\(%r14\)
 # extract TCB
  +[0-9a-f]+:	b2 4f 00 90       	ear	%r9,%a0
@@ -133,29 +133,29 @@ Disassembly of section .text:
  +[0-9a-f]+:	e3 33 c0 00 00 04 	lg	%r3,0\(%r3,%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against global var defined in exec with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <_GLOBAL_OFFSET_TABLE_\+0x38>
  +[0-9a-f]+:	eb 43 00 00 00 0d 	sllg	%r4,%r3,0
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against local var with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <_GLOBAL_OFFSET_TABLE_\+0x20>
  +[0-9a-f]+:	eb 43 00 00 00 0d 	sllg	%r4,%r3,0
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against hidden var with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <_GLOBAL_OFFSET_TABLE_\+0x40>
  +[0-9a-f]+:	eb 43 00 00 00 0d 	sllg	%r4,%r3,0
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against global var with small got access (no optimization)
- +[0-9a-f]+:	e3 30 c0 .8 00 04 	lg	%r3,.*\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 28 00 04 	lg	%r3,40\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against global var defined in exec with small got access
 # (no optimization)
- +[0-9a-f]+:	e3 30 c0 .8 00 04 	lg	%r3,..\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 38 00 04 	lg	%r3,56\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against local var with small got access (no optimization)
- +[0-9a-f]+:	e3 30 c0 .0 00 04 	lg	%r3,.*\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 20 00 04 	lg	%r3,32\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden var with small got access (no optimization)
- +[0-9a-f]+:	e3 30 c0 .0 00 04 	lg	%r3,..\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 40 00 04 	lg	%r3,64\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # function epilog
  +[0-9a-f]+:	eb 6e f0 d0 00 04 	lmg	%r6,%r14,208\(%r15\)
@@ -177,7 +177,7 @@ Disassembly of section .text:
  +[0-9a-f]+:	a7 d5 00 16       	bras	%r13,[0-9a-f]+ <_start\+0x30>
 # sG6@indntpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	01 00 1. .8       	.long	0x01001..8
+ +[0-9a-f]+:	01 00 18 18       	.long	0x01001818
 # bg6@indntpoff
  +[0-9a-f]+:	ff ff ff ff       	.long	0xffffffff
  +[0-9a-f]+:	ff ff ff d4       	.long	0xffffffd4
diff --git a/ld/testsuite/ld-s390/tlsbin_64.rd b/ld/testsuite/ld-s390/tlsbin_64.rd
index 9790fa7f55..fe7811a680 100644
--- a/ld/testsuite/ld-s390/tlsbin_64.rd
+++ b/ld/testsuite/ld-s390/tlsbin_64.rd
@@ -22,7 +22,6 @@ Section Headers:
  +\[[ 0-9]+\] .tbss +NOBITS .* 0+40 00 WAT +0 +0 +1
  +\[[ 0-9]+\] .dynamic +DYNAMIC .*
  +\[[ 0-9]+\] .got +PROGBITS .*
-#...
  +\[[ 0-9]+\] .symtab .*
  +\[[ 0-9]+\] .strtab .*
  +\[[ 0-9]+\] .shstrtab .*
@@ -87,7 +86,6 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* SECTION +LOCAL +DEFAULT +10 
 .* SECTION +LOCAL +DEFAULT +11 
 .* SECTION +LOCAL +DEFAULT +12 
-#...
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* TLS +LOCAL +DEFAULT +9 sl1
 .* TLS +LOCAL +DEFAULT +9 sl2
@@ -108,7 +106,7 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +LOCAL +DEFAULT +10 bl8
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* OBJECT +LOCAL +DEFAULT +11 _DYNAMIC
-.* OBJECT +LOCAL +DEFAULT +1. _GLOBAL_OFFSET_TABLE_
+.* OBJECT +LOCAL +DEFAULT +12 _GLOBAL_OFFSET_TABLE_
 .* TLS +GLOBAL +DEFAULT +UND sG3
 .* TLS +GLOBAL +DEFAULT +9 sg8
 .* TLS +GLOBAL +DEFAULT +10 bg8
@@ -128,7 +126,7 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +GLOBAL +HIDDEN +9 sh4
 .* TLS +GLOBAL +DEFAULT +10 bg7
 .* TLS +GLOBAL +HIDDEN +9 sh5
-.* NOTYPE +GLOBAL +DEFAULT +1. __bss_start
+.* NOTYPE +GLOBAL +DEFAULT +12 __bss_start
 .* TLS +GLOBAL +DEFAULT +UND sG6
 .* FUNC +GLOBAL +DEFAULT +8 fn2
 .* TLS +GLOBAL +DEFAULT +9 sg2
@@ -136,8 +134,8 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* TLS +GLOBAL +HIDDEN +9 sh1
 .* TLS +GLOBAL +DEFAULT +9 sg6
 .* TLS +GLOBAL +DEFAULT +9 sg7
-.* NOTYPE +GLOBAL +DEFAULT +1. _edata
-.* NOTYPE +GLOBAL +DEFAULT +1. _end
+.* NOTYPE +GLOBAL +DEFAULT +12 _edata
+.* NOTYPE +GLOBAL +DEFAULT +12 _end
 .* TLS +GLOBAL +HIDDEN +9 sh2
 .* TLS +GLOBAL +HIDDEN +9 sh6
 .* TLS +GLOBAL +DEFAULT +10 bg2
diff --git a/ld/testsuite/ld-s390/tlsbin_64.sd b/ld/testsuite/ld-s390/tlsbin_64.sd
index 7212114315..6618e455d7 100644
--- a/ld/testsuite/ld-s390/tlsbin_64.sd
+++ b/ld/testsuite/ld-s390/tlsbin_64.sd
@@ -8,10 +8,11 @@
 .*:     file format elf64-s390
 
 Contents of section .got:
- [0-9a-f]+ ........ ........ 00000000 00000000  .*
- [0-9a-f]+ 00000000 00000000 ........ ........  .*
- [0-9a-f]+ ffffffff ffffff.8 00000000 00000000  .*
- [0-9a-f]+ 00000000 00000000 ........ ........  .*
- [0-9a-f]+ ........ ........ ........ ........  .*
- [0-9a-f]+ 00000000 00000000 .*
-#...
+ [0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 [0-9a-f]+ [0-9a-f]+  .*
+ [0-9a-f]+ ffffffff ffffff88 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 ffffffff ffffff68  .*
+ [0-9a-f]+ ffffffff ffffffa8 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000                    .*
diff --git a/ld/testsuite/ld-s390/tlspic.dd b/ld/testsuite/ld-s390/tlspic.dd
index 427e2f62bc..d5caeaf253 100644
--- a/ld/testsuite/ld-s390/tlspic.dd
+++ b/ld/testsuite/ld-s390/tlspic.dd
@@ -18,47 +18,47 @@ Disassembly of section .text:
 # __tls_get_addr@plt-.LT1
  +[0-9a-f]+:	[0-9a-f ]+       	.long	0x[0-9a-f]+
 # sg1@tlsgd
- +[0-9a-f]+:	00 00 00 28       	.long	0x00000028
-# sg2@tlsgd
  +[0-9a-f]+:	00 00 00 38       	.long	0x00000038
+# sg2@tlsgd
+ +[0-9a-f]+:	00 00 00 48       	.long	0x00000048
 # sl1@tlsgd
- +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
+ +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
 # sl2@tlsgd
- +[0-9a-f]+:	00 00 00 08       	.long	0x00000008
+ +[0-9a-f]+:	00 00 00 18       	.long	0x00000018
 # sh1@tlsgd
- +[0-9a-f]+:	00 00 00 3c       	.long	0x0000003c
+ +[0-9a-f]+:	00 00 00 4c       	.long	0x0000004c
 # sh2@tlsgd
- +[0-9a-f]+:	00 00 00 44       	.long	0x00000044
+ +[0-9a-f]+:	00 00 00 54       	.long	0x00000054
 # sH1@tlsgd
- +[0-9a-f]+:	00 00 00 18       	.long	0x00000018
+ +[0-9a-f]+:	00 00 00 28       	.long	0x00000028
 # sH2@tlsgd
- +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
+ +[0-9a-f]+:	00 00 00 30       	.long	0x00000030
 # sl1@tlsldm
- +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
+ +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sl1@dtpoff
  +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sl2@dtpoff
  +[0-9a-f]+:	00 00 00 24       	.long	0x00000024
 # sh1@tlsldm
- +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
+ +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sh1@dtpoff
  +[0-9a-f]+:	00 00 00 40       	.long	0x00000040
 # sh2@dtpoff
  +[0-9a-f]+:	00 00 00 44       	.long	0x00000044
 # sH1@tlsldm
- +[0-9a-f]+:	00 00 00 10       	.long	0x00000010
+ +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sH1@dtpoff
  +[0-9a-f]+:	00 00 00 60       	.long	0x00000060
 # sH2@dtpoff
  +[0-9a-f]+:	00 00 00 64       	.long	0x00000064
 # sg2@gotntpoff
- +[0-9a-f]+:	00 00 00 38       	.long	0x00000038
+ +[0-9a-f]+:	00 00 00 48       	.long	0x00000048
 # sl2@gotntpoff
- +[0-9a-f]+:	00 00 00 08       	.long	0x00000008
+ +[0-9a-f]+:	00 00 00 18       	.long	0x00000018
 # sh2@gotntpoff
- +[0-9a-f]+:	00 00 00 44       	.long	0x00000044
+ +[0-9a-f]+:	00 00 00 54       	.long	0x00000054
 # sH2@gotntpoff
- +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
+ +[0-9a-f]+:	00 00 00 30       	.long	0x00000030
 # function prolog
  +[0-9a-f]+:	18 ef             	lr	%r14,%r15
  +[0-9a-f]+:	58 c0 d0 00       	l	%r12,0\(%r13\)
@@ -143,18 +143,18 @@ Disassembly of section .text:
  +[0-9a-f]+:	58 43 c0 00       	l	%r4,0\(%r3,%r12\)
  +[0-9a-f]+:	41 54 30 00       	la	%r5,0\(%r4,%r3\)
 # IE against global var with small got access (no optimization)
- +[0-9a-f]+:	58 30 c0 24       	l	%r3,36\(%r12\)
+ +[0-9a-f]+:	58 30 c0 34       	l	%r3,52\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against local var with small got access (no optimization)
- +[0-9a-f]+:	58 30 c0 0c       	l	%r3,12\(%r12\)
+ +[0-9a-f]+:	58 30 c0 1c       	l	%r3,28\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden and local var with small got access
 # (no optimization)
- +[0-9a-f]+:	58 30 c0 30       	l	%r3,48\(%r12\)
+ +[0-9a-f]+:	58 30 c0 40       	l	%r3,64\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden but not local var with small got access
 # (no optimization)
- +[0-9a-f]+:	58 30 c0 34       	l	%r3,52\(%r12\)
+ +[0-9a-f]+:	58 30 c0 44       	l	%r3,68\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # function prolog
  +[0-9a-f]+:	98 6e f0 78       	lm	%r6,%r14,120\(%r15\)
diff --git a/ld/testsuite/ld-s390/tlspic.rd b/ld/testsuite/ld-s390/tlspic.rd
index 3d28203beb..20cb4bf7cb 100644
--- a/ld/testsuite/ld-s390/tlspic.rd
+++ b/ld/testsuite/ld-s390/tlspic.rd
@@ -21,7 +21,6 @@ Section Headers:
  +\[[ 0-9]+\] .tbss +NOBITS .* 0+20 00 WAT +0 +0 +1
  +\[[ 0-9]+\] .dynamic +DYNAMIC .*
  +\[[ 0-9]+\] .got +PROGBITS .*
- +\[[ 0-9]+\] .got.plt +PROGBITS .*
  +\[[ 0-9]+\] .symtab .*
  +\[[ 0-9]+\] .strtab .*
  +\[[ 0-9]+\] .shstrtab .*
@@ -42,7 +41,7 @@ Program Headers:
  Section to Segment mapping:
  +Segment Sections...
  +00 +.hash .dynsym .dynstr .rela.dyn .rela.plt .plt .text 
- +01 +.tdata .dynamic .got .got.plt 
+ +01 +.tdata .dynamic .got 
  +02 +.dynamic 
  +03 +.tdata .tbss 
 
@@ -97,7 +96,6 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* SECTION +LOCAL +DEFAULT +9 
 .* SECTION +LOCAL +DEFAULT +10 
 .* SECTION +LOCAL +DEFAULT +11 
-.* SECTION +LOCAL +DEFAULT +12 
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* TLS +LOCAL +DEFAULT +8 sl1
 .* TLS +LOCAL +DEFAULT +8 sl2
diff --git a/ld/testsuite/ld-s390/tlspic.sd b/ld/testsuite/ld-s390/tlspic.sd
index 9230f746b4..6e32dea30b 100644
--- a/ld/testsuite/ld-s390/tlspic.sd
+++ b/ld/testsuite/ld-s390/tlspic.sd
@@ -8,6 +8,7 @@
 .*: +file format elf32-s390
 
 Contents of section .got:
+ [0-9a-f]+ [0-9a-f]+ 00000000 00000000 [0-9a-f]+  .*
  [0-9a-f]+ 00000000 00000020 00000000 00000000  .*
  [0-9a-f]+ 00000000 00000000 00000000 00000060  .*
  [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
diff --git a/ld/testsuite/ld-s390/tlspic_64.dd b/ld/testsuite/ld-s390/tlspic_64.dd
index 21c6d384e8..86fdbbd6fd 100644
--- a/ld/testsuite/ld-s390/tlspic_64.dd
+++ b/ld/testsuite/ld-s390/tlspic_64.dd
@@ -15,40 +15,40 @@ Disassembly of section .text:
  +[0-9a-f]+:	a7 d5 00 56       	bras	%r13,[0-9a-f]+ <fn1\+0xb2>
 # sg1@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 70       	.long	0x00000070
 # sg2@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 90       	.long	0x00000090
 # sl1@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sl2@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 30       	.long	0x00000030
 # sh1@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .8       	.long	0x000000.8
+ +[0-9a-f]+:	00 00 00 98       	.long	0x00000098
 # sh2@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .8       	.long	0x000000.8
+ +[0-9a-f]+:	00 00 00 a8       	.long	0x000000a8
 # sH1@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 50       	.long	0x00000050
 # sH2@tlsgd
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 60       	.long	0x00000060
 # sl1@tlsldm
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 40       	.long	0x00000040
 # sl1@dtpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 20       	.long	0x00000020
 # sl2@dtpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
  +[0-9a-f]+:	00 00 00 24       	.long	0x00000024
 # sh1@tlsldm
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 40       	.long	0x00000040
 # sh1@dtpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
  +[0-9a-f]+:	00 00 00 40       	.long	0x00000040
@@ -57,7 +57,7 @@ Disassembly of section .text:
  +[0-9a-f]+:	00 00 00 44       	.long	0x00000044
 # sH1@tlsldm
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 40       	.long	0x00000040
 # sH1@dtpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
  +[0-9a-f]+:	00 00 00 60       	.long	0x00000060
@@ -66,19 +66,19 @@ Disassembly of section .text:
  +[0-9a-f]+:	00 00 00 64       	.long	0x00000064
 # sg2@gotntpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 90       	.long	0x00000090
 # sl2@gotntpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 30       	.long	0x00000030
 # sh2@gotntpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .8       	.long	0x000000.8
+ +[0-9a-f]+:	00 00 00 a8       	.long	0x000000a8
 # sH2@gotntpoff
  +[0-9a-f]+:	00 00 00 00       	.long	0x00000000
- +[0-9a-f]+:	00 00 00 .0       	.long	0x000000.0
+ +[0-9a-f]+:	00 00 00 60       	.long	0x00000060
 # function prolog
  +[0-9a-f]+:	b9 04 00 ef       	lgr	%r14,%r15
- +[0-9a-f]+:	c0 c0 [0-9a-f ]+ 	larl	%r12,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 c0 [0-9a-f ]+ 	larl	%r12,[0-9a-f]+ <_GLOBAL_OFFSET_TABLE_>
  +[0-9a-f]+:	a7 fb ff 60       	aghi	%r15,-160
  +[0-9a-f]+:	e3 e0 e0 00 00 24 	stg	%r14,0\(%r14\)
 # extract TCB
@@ -164,30 +164,30 @@ Disassembly of section .text:
  +[0-9a-f]+:	e3 33 c0 00 00 04 	lg	%r3,0\(%r3,%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against local var with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <\_GLOBAL\_OFFSET\_TABLE\_\+0x38>
  +[0-9a-f]+:	e3 43 c0 00 00 04 	lg	%r4,0\(%r3,%r12\)
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against hidden and local var with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <\_GLOBAL\_OFFSET\_TABLE\_\+0x80>
  +[0-9a-f]+:	e3 43 c0 00 00 04 	lg	%r4,0\(%r3,%r12\)
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against hidden but not local var with larl got access
- +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <.*>
+ +[0-9a-f]+:	c0 30 [0-9a-f ]+ 	larl	%r3,[0-9a-f]+ <\_GLOBAL\_OFFSET\_TABLE\_\+0x88>
  +[0-9a-f]+:	e3 43 c0 00 00 04 	lg	%r4,0\(%r3,%r12\)
  +[0-9a-f]+:	41 54 90 00       	la	%r5,0\(%r4,%r9\)
 # IE against global var with small got access (no optimization)
- +[0-9a-f]+:	e3 30 c0 .8 00 04 	lg	%r3,.*\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 68 00 04 	lg	%r3,104\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against local var with small got access (no optimization)
- +[0-9a-f]+:	e3 30 c0 .8 00 04 	lg	%r3,..\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 38 00 04 	lg	%r3,56\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden and local var with small got access
 # (no optimization)
- +[0-9a-f]+:	e3 30 c0 .0 00 04 	lg	%r3,.*\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 80 00 04 	lg	%r3,128\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # IE against hidden but not local var with small got access
 # (no optimization)
- +[0-9a-f]+:	e3 30 c0 .8 00 04 	lg	%r3,1..\(%r12\)
+ +[0-9a-f]+:	e3 30 c0 88 00 04 	lg	%r3,136\(%r12\)
  +[0-9a-f]+:	41 33 90 00       	la	%r3,0\(%r3,%r9\)
 # function epilog
  +[0-9a-f]+:	eb 6e f0 d0 00 04 	lmg	%r6,%r14,208\(%r15\)
diff --git a/ld/testsuite/ld-s390/tlspic_64.rd b/ld/testsuite/ld-s390/tlspic_64.rd
index e44bbdb1a4..646c611cdf 100644
--- a/ld/testsuite/ld-s390/tlspic_64.rd
+++ b/ld/testsuite/ld-s390/tlspic_64.rd
@@ -21,7 +21,6 @@ Section Headers:
  +\[[ 0-9]+\] .tbss +NOBITS .* 0+20 00 WAT +0 +0 +1
  +\[[ 0-9]+\] .dynamic +DYNAMIC .*
  +\[[ 0-9]+\] .got +PROGBITS .*
-#...
  +\[[ 0-9]+\] .symtab .*
  +\[[ 0-9]+\] .strtab .*
  +\[[ 0-9]+\] .shstrtab .*
@@ -97,7 +96,6 @@ Symbol table '\.symtab' contains [0-9]+ entries:
 .* SECTION +LOCAL +DEFAULT +9 
 .* SECTION +LOCAL +DEFAULT +10 
 .* SECTION +LOCAL +DEFAULT +11 
-#...
 .* FILE +LOCAL +DEFAULT +ABS .*
 .* TLS +LOCAL +DEFAULT +8 sl1
 .* TLS +LOCAL +DEFAULT +8 sl2
diff --git a/ld/testsuite/ld-s390/tlspic_64.sd b/ld/testsuite/ld-s390/tlspic_64.sd
index c402710c14..267416e127 100644
--- a/ld/testsuite/ld-s390/tlspic_64.sd
+++ b/ld/testsuite/ld-s390/tlspic_64.sd
@@ -8,13 +8,14 @@
 .*: +file format elf64-s390
 
 Contents of section .got:
- [0-9a-f]+ 00000000 0000.... 00000000 000000.0  .*
- [0-9a-f]+ 00000000 00000000 00000000 00000...  .*
- [0-9a-f]+ 00000000 00000000 00000000 00000...  .*
- [0-9a-f]+ 00000000 00000000 00000000 000000.0  .*
- [0-9a-f]+ 00000000 00000000 00000000 000000..  .*
- [0-9a-f]+ 00000000 00000000 00000000 00000...  .*
- [0-9a-f]+ 00000000 00000000 00000000 000000..  .*
- [0-9a-f]+ 00000000 00000000 00000000 00000...  .*
- [0-9a-f]+ 00000000 000000.0 00000000 00000...  .*
-#...
\ No newline at end of file
+ [0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 [0-9a-f]+ [0-9a-f]+  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000020  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000060  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
+ [0-9a-f]+ 00000000 00000040 00000000 00000000  .*
diff --git a/ld/testsuite/ld-x86-64/pr24151a-x32.d b/ld/testsuite/ld-x86-64/pr24151a-x32.d
new file mode 100644
index 0000000000..130611ddf4
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24151a-x32.d
@@ -0,0 +1,4 @@
+#source: pr24151a.s
+#as: --x32
+#ld: -shared -melf32_x86_64
+#error: .*relocation R_X86_64_PC32 against protected symbol `foo' can not be used when making a shared object
diff --git a/ld/testsuite/ld-x86-64/pr24151a.d b/ld/testsuite/ld-x86-64/pr24151a.d
new file mode 100644
index 0000000000..783b85a1a6
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24151a.d
@@ -0,0 +1,3 @@
+#as: --64
+#ld: -shared -melf_x86_64
+#error: .*relocation R_X86_64_PC32 against protected symbol `foo' can not be used when making a shared object
diff --git a/ld/testsuite/ld-x86-64/pr24151a.s b/ld/testsuite/ld-x86-64/pr24151a.s
new file mode 100644
index 0000000000..e4ec7c8ce4
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24151a.s
@@ -0,0 +1,9 @@
+	.text
+	.globl	bar
+	.type	bar,@function
+bar:
+	movl	$30, foo(%rip)
+	.size	bar, .-bar
+	.protected foo
+	.type	foo,@object
+	.comm	foo,4,4
diff --git a/ld/testsuite/ld-x86-64/pr24458.s b/ld/testsuite/ld-x86-64/pr24458.s
new file mode 100644
index 0000000000..7dbd47af63
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458.s
@@ -0,0 +1,5 @@
+	.text
+	.globl	_start
+	.type	_start, @function
+_start:
+	movq	__ehdr_start(%rip), %rax
diff --git a/ld/testsuite/ld-x86-64/pr24458a-x32.d b/ld/testsuite/ld-x86-64/pr24458a-x32.d
new file mode 100644
index 0000000000..ae3994a557
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458a-x32.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --x32 -mx86-used-note=yes
+#ld: -m elf32_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24458a.d b/ld/testsuite/ld-x86-64/pr24458a.d
new file mode 100644
index 0000000000..9e2e8b0979
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458a.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --64 -mx86-used-note=yes
+#ld: -m elf_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24458b-x32.d b/ld/testsuite/ld-x86-64/pr24458b-x32.d
new file mode 100644
index 0000000000..57d10ab11e
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458b-x32.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --x32 -mx86-used-note=yes
+#ld: -pie -m elf32_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24458b.d b/ld/testsuite/ld-x86-64/pr24458b.d
new file mode 100644
index 0000000000..bdcc79a341
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458b.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --64 -mx86-used-note=yes
+#ld: -pie -m elf_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24458c-x32.d b/ld/testsuite/ld-x86-64/pr24458c-x32.d
new file mode 100644
index 0000000000..4d76636404
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458c-x32.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --x32 -mx86-used-note=yes
+#ld: -shared -m elf32_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24458c.d b/ld/testsuite/ld-x86-64/pr24458c.d
new file mode 100644
index 0000000000..e299831681
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24458c.d
@@ -0,0 +1,10 @@
+#source: pr24458.s
+#as: --64 -mx86-used-note=yes
+#ld: -shared -m elf_x86_64
+#readelf: -n
+
+Displaying notes found in: .note.gnu.property
+  Owner                 Data size	Description
+  GNU                  0x[0-9a-f]+	NT_GNU_PROPERTY_TYPE_0
+      Properties: x86 ISA used: <None>
+	x86 feature used: x86
diff --git a/ld/testsuite/ld-x86-64/pr24721-x32.d b/ld/testsuite/ld-x86-64/pr24721-x32.d
new file mode 100644
index 0000000000..9b067efdc1
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24721-x32.d
@@ -0,0 +1,6 @@
+#source: pr24721a.s
+#source: pr24721b.s
+#as: --x32 -mx86-used-note=no
+#ld: -r -m elf32_x86_64 -Map tmpdir/pr24721.map
+#readelf: -n
+#map: pr24721.map
diff --git a/ld/testsuite/ld-x86-64/pr24721.d b/ld/testsuite/ld-x86-64/pr24721.d
new file mode 100644
index 0000000000..efa88db2b3
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24721.d
@@ -0,0 +1,6 @@
+#source: pr24721a.s
+#source: pr24721b.s
+#as: --64 -defsym __64_bit__=1 -mx86-used-note=no
+#ld: -r -melf_x86_64 -Map tmpdir/pr24721.map
+#readelf: -n
+#map: pr24721.map
diff --git a/ld/testsuite/ld-x86-64/pr24721.map b/ld/testsuite/ld-x86-64/pr24721.map
new file mode 100644
index 0000000000..9e63fff275
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24721.map
@@ -0,0 +1,3 @@
+#...
+Removed property 0xc0000002 to merge tmpdir/pr24721a.o \(0x1\) and tmpdir/pr24721b.o \(not found\)
+#pass
diff --git a/ld/testsuite/ld-x86-64/pr24721a.s b/ld/testsuite/ld-x86-64/pr24721a.s
new file mode 100644
index 0000000000..b229d19b02
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24721a.s
@@ -0,0 +1,34 @@
+	.text
+	.globl foo
+	.type foo,@function
+	.p2align 4
+foo:
+	ret
+
+	.section ".note.gnu.property", "a"
+.ifdef __64_bit__
+	.p2align 3
+.else
+	.p2align 2
+.endif
+	.long 1f - 0f		/* name length */
+	.long 5f - 2f		/* data length */
+	.long 5			/* note type */
+0:	.asciz "GNU"		/* vendor name */
+1:
+.ifdef __64_bit__
+	.p2align 3
+.else
+	.p2align 2
+.endif
+2:	.long 0xc0000002	/* pr_type.  */
+	.long 4f - 3f		/* pr_datasz.  */
+3:
+	.long 0x1
+4:
+.ifdef __64_bit__
+	.p2align 3
+.else
+	.p2align 2
+.endif
+5:
diff --git a/ld/testsuite/ld-x86-64/pr24721b.s b/ld/testsuite/ld-x86-64/pr24721b.s
new file mode 100644
index 0000000000..3d11691166
--- /dev/null
+++ b/ld/testsuite/ld-x86-64/pr24721b.s
@@ -0,0 +1,6 @@
+	.text
+	.globl bar
+	.type bar,@function
+	.p2align 4
+bar:
+	ret
diff --git a/ld/testsuite/ld-x86-64/x86-64.exp b/ld/testsuite/ld-x86-64/x86-64.exp
index 86b163fc7a..707ab89f8e 100644
--- a/ld/testsuite/ld-x86-64/x86-64.exp
+++ b/ld/testsuite/ld-x86-64/x86-64.exp
@@ -424,6 +424,16 @@ run_dump_test "pr23486d-x32"
 run_dump_test "pr23854"
 run_dump_test "pr23930"
 run_dump_test "pr23930-x32"
+run_dump_test "pr24151a"
+run_dump_test "pr24151a-x32"
+run_dump_test "pr24458a"
+run_dump_test "pr24458a-x32"
+run_dump_test "pr24458b"
+run_dump_test "pr24458b-x32"
+run_dump_test "pr24458c"
+run_dump_test "pr24458c-x32"
+run_dump_test "pr24721"
+run_dump_test "pr24721-x32"
 
 if { ![istarget "x86_64-*-linux*"] && ![istarget "x86_64-*-nacl*"]} {
     return
diff --git a/opcodes/ChangeLog b/opcodes/ChangeLog
index 63226c6a27..86d4cc3bd2 100644
--- a/opcodes/ChangeLog
+++ b/opcodes/ChangeLog
@@ -1,3 +1,113 @@
+2019-07-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
+
+	Backport from mainline
+	2019-07-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>
+
+	* aarch64-opc.c (aarch64_sys_regs): Add gmid_el1 entry.
+	(aarch64_sys_reg_supported_p): Handle gmid_el1 encoding.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* aarch64-tbl.h (aarch64_opcode): Set C_SCAN_MOVPRFX for the
+	SVE FMOV alias of FCPY.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* aarch64-tbl.h (aarch64_opcode_table): Add C_MAX_ELEM flags
+	to SVE fcvtzs, fcvtzu, scvtf and ucvtf entries.
+
+2019-07-02  Richard Sandiford  <richard.sandiford@arm.com>
+
+	* aarch64-opc.c (verify_constraints): Skip GPRs when scanning the
+	registers in an instruction prefixed by MOVPRFX.
+
+2019-04-16  Sudakshina Das  <sudi.das@arm.com>
+
+	Backport from mainline.
+	2019-04-11  Sudakshina Das  <sudi.das@arm.com>
+
+	* aarch64-opc.c (aarch64_print_operand): Add case for
+	AARCH64_OPND_Rt_SP.
+	(verify_constraints): Likewise.
+	* aarch64-tbl.h (QL_LDST_AT): Update to add SP qualifier.
+	(struct aarch64_opcode): Update stg, stzg, st2g, stz2g instructions
+	to accept Rt|SP as first operand.
+	(AARCH64_OPERANDS): Add new Rt_SP.
+	* aarch64-asm-2.c: Regenerated.
+	* aarch64-dis-2.c: Regenerated.
+	* aarch64-opc-2.c: Regenerated.
+
+2019-04-16  Sudakshina Das  <sudi.das@arm.com>
+
+	Backport from mainline.
+	2019-04-11  Sudakshina Das  <sudi.das@arm.com>
+
+	* aarch64-asm-2.c: Regenerated.
+	* aarch64-dis-2.c: Likewise.
+	* aarch64-opc-2.c: Likewise.
+	* aarch64-tbl.h (aarch64_opcode): Add new ldgm and stgm.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* arm-dis.c (struct arm_private_data): Remove has_mapping_symbols.
+	(mapping_symbol_for_insn): Implement new algorithm.
+	(print_insn): Remove duplicate code.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* aarch64-dis.c (print_insn_aarch64):
+	Implement override.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* aarch64-dis.c (print_insn_aarch64): Update the mapping symbol search
+	order.
+
+2019-04-01  Tamar Christina  <tamar.christina@arm.com>
+
+	Backport from mainline.
+	2019-03-25  Tamar Christina  <tamar.christina@arm.com>
+
+	* aarch64-dis.c (last_stop_offset): New.
+	(print_insn_aarch64): Use stop_offset.
+
+2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	Backport from mainline
+	2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	* s390-opc.txt: Rename selhhhr to selfhr.  Remove optional operand
+	from vstrszb, vstrszh, and vstrszf.
+
+2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	Backport from mainline
+	2019-03-12  Andreas Krebbel  <krebbel@linux.ibm.com>
+
+	* s390-opc.txt: Add instruction descriptions.
+
+2019-02-07  Tamar Christina  <tamar.christina@arm.com>
+
+	* arm-dis.c (arm_opcodes): Redefine hlt to armv1.
+
+2019-02-07  Nick Clifton  <nickc@redhat.com>
+
+	* po/sv.po: Updated Swedish translation.
+
+2019-02-02  Nick Clifton  <nickc@redhat.com>
+
+	* configure: Regenerate.
+	* po/opcodes.pot: Regenerate.
+
 2019-02-02  Nick Clifton  <nickc@redhat.com>
 
 	2.32 Release
diff --git a/opcodes/aarch64-asm-2.c b/opcodes/aarch64-asm-2.c
index 25870933fd..f361556cb6 100644
--- a/opcodes/aarch64-asm-2.c
+++ b/opcodes/aarch64-asm-2.c
@@ -201,390 +201,390 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)
     case 757:	/* extr */
       value = 757;	/* --> extr.  */
       break;
-    case 989:	/* bic */
-    case 988:	/* and */
-      value = 988;	/* --> and.  */
-      break;
-    case 991:	/* mov */
-    case 990:	/* orr */
-      value = 990;	/* --> orr.  */
-      break;
-    case 994:	/* tst */
-    case 993:	/* ands */
-      value = 993;	/* --> ands.  */
-      break;
-    case 999:	/* uxtw */
-    case 998:	/* mov */
-    case 997:	/* orr */
-      value = 997;	/* --> orr.  */
+    case 991:	/* bic */
+    case 990:	/* and */
+      value = 990;	/* --> and.  */
+      break;
+    case 993:	/* mov */
+    case 992:	/* orr */
+      value = 992;	/* --> orr.  */
+      break;
+    case 996:	/* tst */
+    case 995:	/* ands */
+      value = 995;	/* --> ands.  */
+      break;
+    case 1001:	/* uxtw */
+    case 1000:	/* mov */
+    case 999:	/* orr */
+      value = 999;	/* --> orr.  */
       break;
-    case 1001:	/* mvn */
-    case 1000:	/* orn */
-      value = 1000;	/* --> orn.  */
+    case 1003:	/* mvn */
+    case 1002:	/* orn */
+      value = 1002;	/* --> orn.  */
       break;
-    case 1005:	/* tst */
-    case 1004:	/* ands */
-      value = 1004;	/* --> ands.  */
+    case 1007:	/* tst */
+    case 1006:	/* ands */
+      value = 1006;	/* --> ands.  */
       break;
-    case 1131:	/* staddb */
-    case 1035:	/* ldaddb */
-      value = 1035;	/* --> ldaddb.  */
+    case 1133:	/* staddb */
+    case 1037:	/* ldaddb */
+      value = 1037;	/* --> ldaddb.  */
       break;
-    case 1132:	/* staddh */
-    case 1036:	/* ldaddh */
-      value = 1036;	/* --> ldaddh.  */
+    case 1134:	/* staddh */
+    case 1038:	/* ldaddh */
+      value = 1038;	/* --> ldaddh.  */
       break;
-    case 1133:	/* stadd */
-    case 1037:	/* ldadd */
-      value = 1037;	/* --> ldadd.  */
+    case 1135:	/* stadd */
+    case 1039:	/* ldadd */
+      value = 1039;	/* --> ldadd.  */
       break;
-    case 1134:	/* staddlb */
-    case 1039:	/* ldaddlb */
-      value = 1039;	/* --> ldaddlb.  */
+    case 1136:	/* staddlb */
+    case 1041:	/* ldaddlb */
+      value = 1041;	/* --> ldaddlb.  */
       break;
-    case 1135:	/* staddlh */
-    case 1042:	/* ldaddlh */
-      value = 1042;	/* --> ldaddlh.  */
+    case 1137:	/* staddlh */
+    case 1044:	/* ldaddlh */
+      value = 1044;	/* --> ldaddlh.  */
       break;
-    case 1136:	/* staddl */
-    case 1045:	/* ldaddl */
-      value = 1045;	/* --> ldaddl.  */
+    case 1138:	/* staddl */
+    case 1047:	/* ldaddl */
+      value = 1047;	/* --> ldaddl.  */
       break;
-    case 1137:	/* stclrb */
-    case 1047:	/* ldclrb */
-      value = 1047;	/* --> ldclrb.  */
+    case 1139:	/* stclrb */
+    case 1049:	/* ldclrb */
+      value = 1049;	/* --> ldclrb.  */
       break;
-    case 1138:	/* stclrh */
-    case 1048:	/* ldclrh */
-      value = 1048;	/* --> ldclrh.  */
+    case 1140:	/* stclrh */
+    case 1050:	/* ldclrh */
+      value = 1050;	/* --> ldclrh.  */
       break;
-    case 1139:	/* stclr */
-    case 1049:	/* ldclr */
-      value = 1049;	/* --> ldclr.  */
+    case 1141:	/* stclr */
+    case 1051:	/* ldclr */
+      value = 1051;	/* --> ldclr.  */
       break;
-    case 1140:	/* stclrlb */
-    case 1051:	/* ldclrlb */
-      value = 1051;	/* --> ldclrlb.  */
+    case 1142:	/* stclrlb */
+    case 1053:	/* ldclrlb */
+      value = 1053;	/* --> ldclrlb.  */
       break;
-    case 1141:	/* stclrlh */
-    case 1054:	/* ldclrlh */
-      value = 1054;	/* --> ldclrlh.  */
+    case 1143:	/* stclrlh */
+    case 1056:	/* ldclrlh */
+      value = 1056;	/* --> ldclrlh.  */
       break;
-    case 1142:	/* stclrl */
-    case 1057:	/* ldclrl */
-      value = 1057;	/* --> ldclrl.  */
+    case 1144:	/* stclrl */
+    case 1059:	/* ldclrl */
+      value = 1059;	/* --> ldclrl.  */
       break;
-    case 1143:	/* steorb */
-    case 1059:	/* ldeorb */
-      value = 1059;	/* --> ldeorb.  */
+    case 1145:	/* steorb */
+    case 1061:	/* ldeorb */
+      value = 1061;	/* --> ldeorb.  */
       break;
-    case 1144:	/* steorh */
-    case 1060:	/* ldeorh */
-      value = 1060;	/* --> ldeorh.  */
+    case 1146:	/* steorh */
+    case 1062:	/* ldeorh */
+      value = 1062;	/* --> ldeorh.  */
       break;
-    case 1145:	/* steor */
-    case 1061:	/* ldeor */
-      value = 1061;	/* --> ldeor.  */
+    case 1147:	/* steor */
+    case 1063:	/* ldeor */
+      value = 1063;	/* --> ldeor.  */
       break;
-    case 1146:	/* steorlb */
-    case 1063:	/* ldeorlb */
-      value = 1063;	/* --> ldeorlb.  */
+    case 1148:	/* steorlb */
+    case 1065:	/* ldeorlb */
+      value = 1065;	/* --> ldeorlb.  */
       break;
-    case 1147:	/* steorlh */
-    case 1066:	/* ldeorlh */
-      value = 1066;	/* --> ldeorlh.  */
+    case 1149:	/* steorlh */
+    case 1068:	/* ldeorlh */
+      value = 1068;	/* --> ldeorlh.  */
       break;
-    case 1148:	/* steorl */
-    case 1069:	/* ldeorl */
-      value = 1069;	/* --> ldeorl.  */
+    case 1150:	/* steorl */
+    case 1071:	/* ldeorl */
+      value = 1071;	/* --> ldeorl.  */
       break;
-    case 1149:	/* stsetb */
-    case 1071:	/* ldsetb */
-      value = 1071;	/* --> ldsetb.  */
+    case 1151:	/* stsetb */
+    case 1073:	/* ldsetb */
+      value = 1073;	/* --> ldsetb.  */
       break;
-    case 1150:	/* stseth */
-    case 1072:	/* ldseth */
-      value = 1072;	/* --> ldseth.  */
+    case 1152:	/* stseth */
+    case 1074:	/* ldseth */
+      value = 1074;	/* --> ldseth.  */
       break;
-    case 1151:	/* stset */
-    case 1073:	/* ldset */
-      value = 1073;	/* --> ldset.  */
+    case 1153:	/* stset */
+    case 1075:	/* ldset */
+      value = 1075;	/* --> ldset.  */
       break;
-    case 1152:	/* stsetlb */
-    case 1075:	/* ldsetlb */
-      value = 1075;	/* --> ldsetlb.  */
+    case 1154:	/* stsetlb */
+    case 1077:	/* ldsetlb */
+      value = 1077;	/* --> ldsetlb.  */
       break;
-    case 1153:	/* stsetlh */
-    case 1078:	/* ldsetlh */
-      value = 1078;	/* --> ldsetlh.  */
+    case 1155:	/* stsetlh */
+    case 1080:	/* ldsetlh */
+      value = 1080;	/* --> ldsetlh.  */
       break;
-    case 1154:	/* stsetl */
-    case 1081:	/* ldsetl */
-      value = 1081;	/* --> ldsetl.  */
+    case 1156:	/* stsetl */
+    case 1083:	/* ldsetl */
+      value = 1083;	/* --> ldsetl.  */
       break;
-    case 1155:	/* stsmaxb */
-    case 1083:	/* ldsmaxb */
-      value = 1083;	/* --> ldsmaxb.  */
+    case 1157:	/* stsmaxb */
+    case 1085:	/* ldsmaxb */
+      value = 1085;	/* --> ldsmaxb.  */
       break;
-    case 1156:	/* stsmaxh */
-    case 1084:	/* ldsmaxh */
-      value = 1084;	/* --> ldsmaxh.  */
+    case 1158:	/* stsmaxh */
+    case 1086:	/* ldsmaxh */
+      value = 1086;	/* --> ldsmaxh.  */
       break;
-    case 1157:	/* stsmax */
-    case 1085:	/* ldsmax */
-      value = 1085;	/* --> ldsmax.  */
+    case 1159:	/* stsmax */
+    case 1087:	/* ldsmax */
+      value = 1087;	/* --> ldsmax.  */
       break;
-    case 1158:	/* stsmaxlb */
-    case 1087:	/* ldsmaxlb */
-      value = 1087;	/* --> ldsmaxlb.  */
+    case 1160:	/* stsmaxlb */
+    case 1089:	/* ldsmaxlb */
+      value = 1089;	/* --> ldsmaxlb.  */
       break;
-    case 1159:	/* stsmaxlh */
-    case 1090:	/* ldsmaxlh */
-      value = 1090;	/* --> ldsmaxlh.  */
+    case 1161:	/* stsmaxlh */
+    case 1092:	/* ldsmaxlh */
+      value = 1092;	/* --> ldsmaxlh.  */
       break;
-    case 1160:	/* stsmaxl */
-    case 1093:	/* ldsmaxl */
-      value = 1093;	/* --> ldsmaxl.  */
+    case 1162:	/* stsmaxl */
+    case 1095:	/* ldsmaxl */
+      value = 1095;	/* --> ldsmaxl.  */
       break;
-    case 1161:	/* stsminb */
-    case 1095:	/* ldsminb */
-      value = 1095;	/* --> ldsminb.  */
+    case 1163:	/* stsminb */
+    case 1097:	/* ldsminb */
+      value = 1097;	/* --> ldsminb.  */
       break;
-    case 1162:	/* stsminh */
-    case 1096:	/* ldsminh */
-      value = 1096;	/* --> ldsminh.  */
+    case 1164:	/* stsminh */
+    case 1098:	/* ldsminh */
+      value = 1098;	/* --> ldsminh.  */
       break;
-    case 1163:	/* stsmin */
-    case 1097:	/* ldsmin */
-      value = 1097;	/* --> ldsmin.  */
+    case 1165:	/* stsmin */
+    case 1099:	/* ldsmin */
+      value = 1099;	/* --> ldsmin.  */
       break;
-    case 1164:	/* stsminlb */
-    case 1099:	/* ldsminlb */
-      value = 1099;	/* --> ldsminlb.  */
+    case 1166:	/* stsminlb */
+    case 1101:	/* ldsminlb */
+      value = 1101;	/* --> ldsminlb.  */
       break;
-    case 1165:	/* stsminlh */
-    case 1102:	/* ldsminlh */
-      value = 1102;	/* --> ldsminlh.  */
+    case 1167:	/* stsminlh */
+    case 1104:	/* ldsminlh */
+      value = 1104;	/* --> ldsminlh.  */
       break;
-    case 1166:	/* stsminl */
-    case 1105:	/* ldsminl */
-      value = 1105;	/* --> ldsminl.  */
+    case 1168:	/* stsminl */
+    case 1107:	/* ldsminl */
+      value = 1107;	/* --> ldsminl.  */
       break;
-    case 1167:	/* stumaxb */
-    case 1107:	/* ldumaxb */
-      value = 1107;	/* --> ldumaxb.  */
+    case 1169:	/* stumaxb */
+    case 1109:	/* ldumaxb */
+      value = 1109;	/* --> ldumaxb.  */
       break;
-    case 1168:	/* stumaxh */
-    case 1108:	/* ldumaxh */
-      value = 1108;	/* --> ldumaxh.  */
+    case 1170:	/* stumaxh */
+    case 1110:	/* ldumaxh */
+      value = 1110;	/* --> ldumaxh.  */
       break;
-    case 1169:	/* stumax */
-    case 1109:	/* ldumax */
-      value = 1109;	/* --> ldumax.  */
+    case 1171:	/* stumax */
+    case 1111:	/* ldumax */
+      value = 1111;	/* --> ldumax.  */
       break;
-    case 1170:	/* stumaxlb */
-    case 1111:	/* ldumaxlb */
-      value = 1111;	/* --> ldumaxlb.  */
+    case 1172:	/* stumaxlb */
+    case 1113:	/* ldumaxlb */
+      value = 1113;	/* --> ldumaxlb.  */
       break;
-    case 1171:	/* stumaxlh */
-    case 1114:	/* ldumaxlh */
-      value = 1114;	/* --> ldumaxlh.  */
+    case 1173:	/* stumaxlh */
+    case 1116:	/* ldumaxlh */
+      value = 1116;	/* --> ldumaxlh.  */
       break;
-    case 1172:	/* stumaxl */
-    case 1117:	/* ldumaxl */
-      value = 1117;	/* --> ldumaxl.  */
+    case 1174:	/* stumaxl */
+    case 1119:	/* ldumaxl */
+      value = 1119;	/* --> ldumaxl.  */
       break;
-    case 1173:	/* stuminb */
-    case 1119:	/* lduminb */
-      value = 1119;	/* --> lduminb.  */
+    case 1175:	/* stuminb */
+    case 1121:	/* lduminb */
+      value = 1121;	/* --> lduminb.  */
       break;
-    case 1174:	/* stuminh */
-    case 1120:	/* lduminh */
-      value = 1120;	/* --> lduminh.  */
+    case 1176:	/* stuminh */
+    case 1122:	/* lduminh */
+      value = 1122;	/* --> lduminh.  */
       break;
-    case 1175:	/* stumin */
-    case 1121:	/* ldumin */
-      value = 1121;	/* --> ldumin.  */
+    case 1177:	/* stumin */
+    case 1123:	/* ldumin */
+      value = 1123;	/* --> ldumin.  */
       break;
-    case 1176:	/* stuminlb */
-    case 1123:	/* lduminlb */
-      value = 1123;	/* --> lduminlb.  */
+    case 1178:	/* stuminlb */
+    case 1125:	/* lduminlb */
+      value = 1125;	/* --> lduminlb.  */
       break;
-    case 1177:	/* stuminlh */
-    case 1126:	/* lduminlh */
-      value = 1126;	/* --> lduminlh.  */
+    case 1179:	/* stuminlh */
+    case 1128:	/* lduminlh */
+      value = 1128;	/* --> lduminlh.  */
       break;
-    case 1178:	/* stuminl */
-    case 1129:	/* lduminl */
-      value = 1129;	/* --> lduminl.  */
-      break;
-    case 1180:	/* mov */
-    case 1179:	/* movn */
-      value = 1179;	/* --> movn.  */
+    case 1180:	/* stuminl */
+    case 1131:	/* lduminl */
+      value = 1131;	/* --> lduminl.  */
       break;
     case 1182:	/* mov */
-    case 1181:	/* movz */
-      value = 1181;	/* --> movz.  */
-      break;
-    case 1228:	/* autibsp */
-    case 1227:	/* autibz */
-    case 1226:	/* autiasp */
-    case 1225:	/* autiaz */
-    case 1224:	/* pacibsp */
-    case 1223:	/* pacibz */
-    case 1222:	/* paciasp */
-    case 1221:	/* paciaz */
-    case 1202:	/* psb */
-    case 1201:	/* esb */
-    case 1200:	/* autib1716 */
-    case 1199:	/* autia1716 */
-    case 1198:	/* pacib1716 */
-    case 1197:	/* pacia1716 */
-    case 1196:	/* xpaclri */
-    case 1195:	/* sevl */
-    case 1194:	/* sev */
-    case 1193:	/* wfi */
-    case 1192:	/* wfe */
-    case 1191:	/* yield */
-    case 1190:	/* bti */
-    case 1189:	/* csdb */
-    case 1188:	/* nop */
-    case 1187:	/* hint */
-      value = 1187;	/* --> hint.  */
-      break;
-    case 1206:	/* pssbb */
-    case 1205:	/* ssbb */
-    case 1204:	/* dsb */
-      value = 1204;	/* --> dsb.  */
-      break;
-    case 1217:	/* cpp */
-    case 1216:	/* dvp */
-    case 1215:	/* cfp */
-    case 1214:	/* tlbi */
-    case 1213:	/* ic */
-    case 1212:	/* dc */
-    case 1211:	/* at */
-    case 1210:	/* sys */
-      value = 1210;	/* --> sys.  */
-      break;
-    case 2026:	/* bic */
-    case 1276:	/* and */
-      value = 1276;	/* --> and.  */
-      break;
-    case 1259:	/* mov */
+    case 1181:	/* movn */
+      value = 1181;	/* --> movn.  */
+      break;
+    case 1184:	/* mov */
+    case 1183:	/* movz */
+      value = 1183;	/* --> movz.  */
+      break;
+    case 1230:	/* autibsp */
+    case 1229:	/* autibz */
+    case 1228:	/* autiasp */
+    case 1227:	/* autiaz */
+    case 1226:	/* pacibsp */
+    case 1225:	/* pacibz */
+    case 1224:	/* paciasp */
+    case 1223:	/* paciaz */
+    case 1204:	/* psb */
+    case 1203:	/* esb */
+    case 1202:	/* autib1716 */
+    case 1201:	/* autia1716 */
+    case 1200:	/* pacib1716 */
+    case 1199:	/* pacia1716 */
+    case 1198:	/* xpaclri */
+    case 1197:	/* sevl */
+    case 1196:	/* sev */
+    case 1195:	/* wfi */
+    case 1194:	/* wfe */
+    case 1193:	/* yield */
+    case 1192:	/* bti */
+    case 1191:	/* csdb */
+    case 1190:	/* nop */
+    case 1189:	/* hint */
+      value = 1189;	/* --> hint.  */
+      break;
+    case 1208:	/* pssbb */
+    case 1207:	/* ssbb */
+    case 1206:	/* dsb */
+      value = 1206;	/* --> dsb.  */
+      break;
+    case 1219:	/* cpp */
+    case 1218:	/* dvp */
+    case 1217:	/* cfp */
+    case 1216:	/* tlbi */
+    case 1215:	/* ic */
+    case 1214:	/* dc */
+    case 1213:	/* at */
+    case 1212:	/* sys */
+      value = 1212;	/* --> sys.  */
+      break;
+    case 2028:	/* bic */
     case 1278:	/* and */
       value = 1278;	/* --> and.  */
       break;
-    case 1263:	/* movs */
-    case 1279:	/* ands */
-      value = 1279;	/* --> ands.  */
+    case 1261:	/* mov */
+    case 1280:	/* and */
+      value = 1280;	/* --> and.  */
       break;
-    case 2027:	/* cmple */
-    case 1314:	/* cmpge */
-      value = 1314;	/* --> cmpge.  */
+    case 1265:	/* movs */
+    case 1281:	/* ands */
+      value = 1281;	/* --> ands.  */
       break;
-    case 2030:	/* cmplt */
-    case 1317:	/* cmpgt */
-      value = 1317;	/* --> cmpgt.  */
+    case 2029:	/* cmple */
+    case 1316:	/* cmpge */
+      value = 1316;	/* --> cmpge.  */
       break;
-    case 2028:	/* cmplo */
-    case 1319:	/* cmphi */
-      value = 1319;	/* --> cmphi.  */
+    case 2032:	/* cmplt */
+    case 1319:	/* cmpgt */
+      value = 1319;	/* --> cmpgt.  */
       break;
-    case 2029:	/* cmpls */
-    case 1322:	/* cmphs */
-      value = 1322;	/* --> cmphs.  */
+    case 2030:	/* cmplo */
+    case 1321:	/* cmphi */
+      value = 1321;	/* --> cmphi.  */
       break;
-    case 1256:	/* mov */
-    case 1344:	/* cpy */
-      value = 1344;	/* --> cpy.  */
+    case 2031:	/* cmpls */
+    case 1324:	/* cmphs */
+      value = 1324;	/* --> cmphs.  */
       break;
     case 1258:	/* mov */
-    case 1345:	/* cpy */
-      value = 1345;	/* --> cpy.  */
-      break;
-    case 2037:	/* fmov */
-    case 1261:	/* mov */
     case 1346:	/* cpy */
       value = 1346;	/* --> cpy.  */
       break;
-    case 1251:	/* mov */
-    case 1358:	/* dup */
-      value = 1358;	/* --> dup.  */
+    case 1260:	/* mov */
+    case 1347:	/* cpy */
+      value = 1347;	/* --> cpy.  */
       break;
-    case 1253:	/* mov */
-    case 1250:	/* mov */
-    case 1359:	/* dup */
-      value = 1359;	/* --> dup.  */
+    case 2039:	/* fmov */
+    case 1263:	/* mov */
+    case 1348:	/* cpy */
+      value = 1348;	/* --> cpy.  */
       break;
-    case 2036:	/* fmov */
-    case 1255:	/* mov */
+    case 1253:	/* mov */
     case 1360:	/* dup */
       value = 1360;	/* --> dup.  */
       break;
-    case 1254:	/* mov */
-    case 1361:	/* dupm */
-      value = 1361;	/* --> dupm.  */
+    case 1255:	/* mov */
+    case 1252:	/* mov */
+    case 1361:	/* dup */
+      value = 1361;	/* --> dup.  */
       break;
-    case 2031:	/* eon */
-    case 1363:	/* eor */
-      value = 1363;	/* --> eor.  */
+    case 2038:	/* fmov */
+    case 1257:	/* mov */
+    case 1362:	/* dup */
+      value = 1362;	/* --> dup.  */
       break;
-    case 1264:	/* not */
+    case 1256:	/* mov */
+    case 1363:	/* dupm */
+      value = 1363;	/* --> dupm.  */
+      break;
+    case 2033:	/* eon */
     case 1365:	/* eor */
       value = 1365;	/* --> eor.  */
       break;
-    case 1265:	/* nots */
-    case 1366:	/* eors */
-      value = 1366;	/* --> eors.  */
+    case 1266:	/* not */
+    case 1367:	/* eor */
+      value = 1367;	/* --> eor.  */
       break;
-    case 2032:	/* facle */
-    case 1371:	/* facge */
-      value = 1371;	/* --> facge.  */
+    case 1267:	/* nots */
+    case 1368:	/* eors */
+      value = 1368;	/* --> eors.  */
       break;
-    case 2033:	/* faclt */
-    case 1372:	/* facgt */
-      value = 1372;	/* --> facgt.  */
+    case 2034:	/* facle */
+    case 1373:	/* facge */
+      value = 1373;	/* --> facge.  */
       break;
-    case 2034:	/* fcmle */
-    case 1385:	/* fcmge */
-      value = 1385;	/* --> fcmge.  */
+    case 2035:	/* faclt */
+    case 1374:	/* facgt */
+      value = 1374;	/* --> facgt.  */
       break;
-    case 2035:	/* fcmlt */
-    case 1387:	/* fcmgt */
-      value = 1387;	/* --> fcmgt.  */
+    case 2036:	/* fcmle */
+    case 1387:	/* fcmge */
+      value = 1387;	/* --> fcmge.  */
       break;
-    case 1248:	/* fmov */
-    case 1393:	/* fcpy */
-      value = 1393;	/* --> fcpy.  */
+    case 2037:	/* fcmlt */
+    case 1389:	/* fcmgt */
+      value = 1389;	/* --> fcmgt.  */
       break;
-    case 1247:	/* fmov */
-    case 1416:	/* fdup */
-      value = 1416;	/* --> fdup.  */
+    case 1250:	/* fmov */
+    case 1395:	/* fcpy */
+      value = 1395;	/* --> fcpy.  */
       break;
-    case 1249:	/* mov */
-    case 1747:	/* orr */
-      value = 1747;	/* --> orr.  */
+    case 1249:	/* fmov */
+    case 1418:	/* fdup */
+      value = 1418;	/* --> fdup.  */
       break;
-    case 2038:	/* orn */
-    case 1748:	/* orr */
-      value = 1748;	/* --> orr.  */
+    case 1251:	/* mov */
+    case 1749:	/* orr */
+      value = 1749;	/* --> orr.  */
       break;
-    case 1252:	/* mov */
+    case 2040:	/* orn */
     case 1750:	/* orr */
       value = 1750;	/* --> orr.  */
       break;
-    case 1262:	/* movs */
-    case 1751:	/* orrs */
-      value = 1751;	/* --> orrs.  */
+    case 1254:	/* mov */
+    case 1752:	/* orr */
+      value = 1752;	/* --> orr.  */
       break;
-    case 1257:	/* mov */
-    case 1813:	/* sel */
-      value = 1813;	/* --> sel.  */
+    case 1264:	/* movs */
+    case 1753:	/* orrs */
+      value = 1753;	/* --> orrs.  */
       break;
-    case 1260:	/* mov */
-    case 1814:	/* sel */
-      value = 1814;	/* --> sel.  */
+    case 1259:	/* mov */
+    case 1815:	/* sel */
+      value = 1815;	/* --> sel.  */
+      break;
+    case 1262:	/* mov */
+    case 1816:	/* sel */
+      value = 1816;	/* --> sel.  */
       break;
     default: return NULL;
     }
@@ -613,11 +613,11 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 9:
     case 10:
     case 11:
-    case 15:
+    case 12:
     case 16:
     case 17:
     case 18:
-    case 20:
+    case 19:
     case 21:
     case 22:
     case 23:
@@ -627,7 +627,7 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 27:
     case 28:
     case 29:
-    case 159:
+    case 30:
     case 160:
     case 161:
     case 162:
@@ -637,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 166:
     case 167:
     case 168:
-    case 181:
+    case 169:
     case 182:
     case 183:
     case 184:
@@ -646,34 +646,34 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 187:
     case 188:
     case 189:
-    case 193:
-    case 196:
+    case 190:
+    case 194:
+    case 197:
       return aarch64_ins_regno (self, info, code, inst, errors);
-    case 13:
-      return aarch64_ins_reg_extended (self, info, code, inst, errors);
     case 14:
+      return aarch64_ins_reg_extended (self, info, code, inst, errors);
+    case 15:
       return aarch64_ins_reg_shifted (self, info, code, inst, errors);
-    case 19:
+    case 20:
       return aarch64_ins_ft (self, info, code, inst, errors);
-    case 30:
     case 31:
     case 32:
     case 33:
-    case 198:
-      return aarch64_ins_reglane (self, info, code, inst, errors);
     case 34:
-      return aarch64_ins_reglist (self, info, code, inst, errors);
+    case 199:
+      return aarch64_ins_reglane (self, info, code, inst, errors);
     case 35:
-      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);
+      return aarch64_ins_reglist (self, info, code, inst, errors);
     case 36:
-      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);
+      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);
     case 37:
-      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);
+      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);
     case 38:
+      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);
     case 39:
     case 40:
     case 41:
-    case 51:
+    case 42:
     case 52:
     case 53:
     case 54:
@@ -689,13 +689,13 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 64:
     case 65:
     case 66:
-    case 78:
+    case 67:
     case 79:
     case 80:
     case 81:
-    case 156:
-    case 158:
-    case 173:
+    case 82:
+    case 157:
+    case 159:
     case 174:
     case 175:
     case 176:
@@ -703,90 +703,90 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 178:
     case 179:
     case 180:
+    case 181:
       return aarch64_ins_imm (self, info, code, inst, errors);
-    case 42:
     case 43:
-      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);
     case 44:
+      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);
     case 45:
     case 46:
+    case 47:
       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);
-    case 50:
-    case 147:
+    case 51:
+    case 148:
       return aarch64_ins_fpimm (self, info, code, inst, errors);
-    case 67:
-    case 154:
-      return aarch64_ins_limm (self, info, code, inst, errors);
     case 68:
-      return aarch64_ins_aimm (self, info, code, inst, errors);
+    case 155:
+      return aarch64_ins_limm (self, info, code, inst, errors);
     case 69:
-      return aarch64_ins_imm_half (self, info, code, inst, errors);
+      return aarch64_ins_aimm (self, info, code, inst, errors);
     case 70:
+      return aarch64_ins_imm_half (self, info, code, inst, errors);
+    case 71:
       return aarch64_ins_fbits (self, info, code, inst, errors);
-    case 72:
     case 73:
-    case 152:
-      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);
     case 74:
-    case 151:
-      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);
+    case 153:
+      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);
     case 75:
+    case 152:
+      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);
     case 76:
+    case 77:
       return aarch64_ins_cond (self, info, code, inst, errors);
-    case 82:
-    case 91:
-      return aarch64_ins_addr_simple (self, info, code, inst, errors);
     case 83:
-      return aarch64_ins_addr_regoff (self, info, code, inst, errors);
+    case 92:
+      return aarch64_ins_addr_simple (self, info, code, inst, errors);
     case 84:
+      return aarch64_ins_addr_regoff (self, info, code, inst, errors);
     case 85:
     case 86:
-    case 88:
-    case 90:
-      return aarch64_ins_addr_simm (self, info, code, inst, errors);
     case 87:
-      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);
     case 89:
+    case 91:
+      return aarch64_ins_addr_simm (self, info, code, inst, errors);
+    case 88:
+      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);
+    case 90:
       return aarch64_ins_addr_uimm12 (self, info, code, inst, errors);
-    case 92:
-      return aarch64_ins_addr_offset (self, info, code, inst, errors);
     case 93:
-      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);
+      return aarch64_ins_addr_offset (self, info, code, inst, errors);
     case 94:
-      return aarch64_ins_sysreg (self, info, code, inst, errors);
+      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);
     case 95:
-      return aarch64_ins_pstatefield (self, info, code, inst, errors);
+      return aarch64_ins_sysreg (self, info, code, inst, errors);
     case 96:
+      return aarch64_ins_pstatefield (self, info, code, inst, errors);
     case 97:
     case 98:
     case 99:
     case 100:
-      return aarch64_ins_sysins_op (self, info, code, inst, errors);
     case 101:
+      return aarch64_ins_sysins_op (self, info, code, inst, errors);
     case 102:
-      return aarch64_ins_barrier (self, info, code, inst, errors);
     case 103:
-      return aarch64_ins_prfop (self, info, code, inst, errors);
+      return aarch64_ins_barrier (self, info, code, inst, errors);
     case 104:
+      return aarch64_ins_prfop (self, info, code, inst, errors);
     case 105:
-      return aarch64_ins_hint (self, info, code, inst, errors);
     case 106:
-      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);
+      return aarch64_ins_hint (self, info, code, inst, errors);
     case 107:
+      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);
     case 108:
     case 109:
     case 110:
-      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);
     case 111:
-      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);
     case 112:
-      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);
     case 113:
+      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);
     case 114:
     case 115:
     case 116:
-      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);
     case 117:
+      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);
     case 118:
     case 119:
     case 120:
@@ -799,8 +799,8 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 127:
     case 128:
     case 129:
-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);
     case 130:
+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);
     case 131:
     case 132:
     case 133:
@@ -808,48 +808,49 @@ aarch64_insert_operand (const aarch64_operand *self,
     case 135:
     case 136:
     case 137:
-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);
     case 138:
+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);
     case 139:
     case 140:
     case 141:
-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);
     case 142:
-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);
     case 143:
-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);
     case 144:
-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);
     case 145:
-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);
+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);
     case 146:
+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);
+    case 147:
       return aarch64_ins_sve_asimm (self, info, code, inst, errors);
-    case 148:
-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);
     case 149:
-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);
+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);
     case 150:
+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);
+    case 151:
       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);
-    case 153:
+    case 154:
       return aarch64_ins_inv_limm (self, info, code, inst, errors);
-    case 155:
+    case 156:
       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);
-    case 157:
+    case 158:
       return aarch64_ins_sve_scale (self, info, code, inst, errors);
-    case 169:
     case 170:
-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);
     case 171:
+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);
     case 172:
+    case 173:
       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);
-    case 190:
     case 191:
     case 192:
+    case 193:
       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);
-    case 194:
-      return aarch64_ins_sve_index (self, info, code, inst, errors);
     case 195:
-    case 197:
+      return aarch64_ins_sve_index (self, info, code, inst, errors);
+    case 196:
+    case 198:
       return aarch64_ins_sve_reglist (self, info, code, inst, errors);
     default: assert (0); abort ();
     }
diff --git a/opcodes/aarch64-dis-2.c b/opcodes/aarch64-dis-2.c
index a5b7f455b4..b47473de00 100644
--- a/opcodes/aarch64-dis-2.c
+++ b/opcodes/aarch64-dis-2.c
@@ -40,7 +40,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                          10987654321098765432109876543210
                          0xxx0000xxxxxxxxxxxxxxxxxxxxxxxx
                          adr.  */
-                      return 1184;
+                      return 1186;
                     }
                   else
                     {
@@ -48,7 +48,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                          10987654321098765432109876543210
                          1xxx0000xxxxxxxxxxxxxxxxxxxxxxxx
                          adrp.  */
-                      return 1185;
+                      return 1187;
                     }
                 }
               else
@@ -143,7 +143,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              0x00100x001xxxxx0xxxxxxxxxxxxxxx
                                              casp.  */
-                                          return 1019;
+                                          return 1021;
                                         }
                                       else
                                         {
@@ -195,7 +195,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              0x00100x001xxxxx1xxxxxxxxxxxxxxx
                                              caspl.  */
-                                          return 1021;
+                                          return 1023;
                                         }
                                       else
                                         {
@@ -216,7 +216,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x010100x00xxxxxxxxxxxxxxxxxxxxxx
                                      stnp.  */
-                                  return 968;
+                                  return 970;
                                 }
                               else
                                 {
@@ -224,7 +224,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x110100x00xxxxxxxxxxxxxxxxxxxxxx
                                      stgp.  */
-                                  return 977;
+                                  return 979;
                                 }
                             }
                         }
@@ -242,7 +242,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              0x00100x100xxxxx0xxxxxxxxxxxxxxx
                                              stllrb.  */
-                                          return 966;
+                                          return 968;
                                         }
                                       else
                                         {
@@ -250,7 +250,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x100xxxxx0xxxxxxxxxxxxxxx
                                              stllr.  */
-                                          return 965;
+                                          return 967;
                                         }
                                     }
                                   else
@@ -263,7 +263,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0000100x101xxxxx0xxxxxxxxxxxxxxx
                                                  casb.  */
-                                              return 1007;
+                                              return 1009;
                                             }
                                           else
                                             {
@@ -271,7 +271,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0100100x101xxxxx0xxxxxxxxxxxxxxx
                                                  cash.  */
-                                              return 1008;
+                                              return 1010;
                                             }
                                         }
                                       else
@@ -280,7 +280,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x101xxxxx0xxxxxxxxxxxxxxx
                                              cas.  */
-                                          return 1009;
+                                          return 1011;
                                         }
                                     }
                                 }
@@ -326,7 +326,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0000100x101xxxxx1xxxxxxxxxxxxxxx
                                                  caslb.  */
-                                              return 1011;
+                                              return 1013;
                                             }
                                           else
                                             {
@@ -334,7 +334,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0100100x101xxxxx1xxxxxxxxxxxxxxx
                                                  caslh.  */
-                                              return 1014;
+                                              return 1016;
                                             }
                                         }
                                       else
@@ -343,7 +343,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x101xxxxx1xxxxxxxxxxxxxxx
                                              casl.  */
-                                          return 1017;
+                                          return 1019;
                                         }
                                     }
                                 }
@@ -356,7 +356,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x010100x10xxxxxxxxxxxxxxxxxxxxxx
                                      stp.  */
-                                  return 978;
+                                  return 980;
                                 }
                               else
                                 {
@@ -364,7 +364,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x110100x10xxxxxxxxxxxxxxxxxxxxxx
                                      stgp.  */
-                                  return 983;
+                                  return 985;
                                 }
                             }
                         }
@@ -415,7 +415,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              0x00100x011xxxxx0xxxxxxxxxxxxxxx
                                              caspa.  */
-                                          return 1020;
+                                          return 1022;
                                         }
                                       else
                                         {
@@ -467,7 +467,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              0x00100x011xxxxx1xxxxxxxxxxxxxxx
                                              caspal.  */
-                                          return 1022;
+                                          return 1024;
                                         }
                                       else
                                         {
@@ -488,7 +488,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x010100x01xxxxxxxxxxxxxxxxxxxxxx
                                      ldnp.  */
-                                  return 969;
+                                  return 971;
                                 }
                               else
                                 {
@@ -496,7 +496,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x110100x01xxxxxxxxxxxxxxxxxxxxxx
                                      ldpsw.  */
-                                  return 976;
+                                  return 978;
                                 }
                             }
                         }
@@ -516,7 +516,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0000100x110xxxxx0xxxxxxxxxxxxxxx
                                                  ldlarb.  */
-                                              return 963;
+                                              return 965;
                                             }
                                           else
                                             {
@@ -524,7 +524,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0100100x110xxxxx0xxxxxxxxxxxxxxx
                                                  ldlarh.  */
-                                              return 964;
+                                              return 966;
                                             }
                                         }
                                       else
@@ -533,7 +533,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x110xxxxx0xxxxxxxxxxxxxxx
                                              ldlar.  */
-                                          return 962;
+                                          return 964;
                                         }
                                     }
                                   else
@@ -546,7 +546,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0000100x111xxxxx0xxxxxxxxxxxxxxx
                                                  casab.  */
-                                              return 1010;
+                                              return 1012;
                                             }
                                           else
                                             {
@@ -554,7 +554,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0100100x111xxxxx0xxxxxxxxxxxxxxx
                                                  casah.  */
-                                              return 1013;
+                                              return 1015;
                                             }
                                         }
                                       else
@@ -563,7 +563,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x111xxxxx0xxxxxxxxxxxxxxx
                                              casa.  */
-                                          return 1016;
+                                          return 1018;
                                         }
                                     }
                                 }
@@ -609,7 +609,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0000100x111xxxxx1xxxxxxxxxxxxxxx
                                                  casalb.  */
-                                              return 1012;
+                                              return 1014;
                                             }
                                           else
                                             {
@@ -617,7 +617,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  0100100x111xxxxx1xxxxxxxxxxxxxxx
                                                  casalh.  */
-                                              return 1015;
+                                              return 1017;
                                             }
                                         }
                                       else
@@ -626,7 +626,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x00100x111xxxxx1xxxxxxxxxxxxxxx
                                              casal.  */
-                                          return 1018;
+                                          return 1020;
                                         }
                                     }
                                 }
@@ -639,7 +639,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x010100x11xxxxxxxxxxxxxxxxxxxxxx
                                      ldp.  */
-                                  return 979;
+                                  return 981;
                                 }
                               else
                                 {
@@ -647,7 +647,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x110100x11xxxxxxxxxxxxxxxxxxxxxx
                                      ldpsw.  */
-                                  return 982;
+                                  return 984;
                                 }
                             }
                         }
@@ -665,7 +665,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  0x011000xxxxxxxxxxxxxxxxxxxxxxxx
                                  ldr.  */
-                              return 984;
+                              return 986;
                             }
                           else
                             {
@@ -675,7 +675,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      10011000xxxxxxxxxxxxxxxxxxxxxxxx
                                      ldrsw.  */
-                                  return 986;
+                                  return 988;
                                 }
                               else
                                 {
@@ -683,7 +683,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      11011000xxxxxxxxxxxxxxxxxxxxxxxx
                                      prfm.  */
-                                  return 987;
+                                  return 989;
                                 }
                             }
                         }
@@ -822,7 +822,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000001xxxxx000000xxxxxxxxxx
                                                                          ldaddb.  */
-                                                                      return 1035;
+                                                                      return 1037;
                                                                     }
                                                                   else
                                                                     {
@@ -830,7 +830,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000001xxxxx000000xxxxxxxxxx
                                                                          ldaddh.  */
-                                                                      return 1036;
+                                                                      return 1038;
                                                                     }
                                                                 }
                                                               else
@@ -839,7 +839,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000001xxxxx000000xxxxxxxxxx
                                                                      ldadd.  */
-                                                                  return 1037;
+                                                                  return 1039;
                                                                 }
                                                             }
                                                           else
@@ -852,7 +852,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000101xxxxx000000xxxxxxxxxx
                                                                          ldaddab.  */
-                                                                      return 1038;
+                                                                      return 1040;
                                                                     }
                                                                   else
                                                                     {
@@ -860,7 +860,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000101xxxxx000000xxxxxxxxxx
                                                                          ldaddah.  */
-                                                                      return 1041;
+                                                                      return 1043;
                                                                     }
                                                                 }
                                                               else
@@ -869,7 +869,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000101xxxxx000000xxxxxxxxxx
                                                                      ldadda.  */
-                                                                  return 1044;
+                                                                  return 1046;
                                                                 }
                                                             }
                                                         }
@@ -885,7 +885,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000011xxxxx000000xxxxxxxxxx
                                                                          ldaddlb.  */
-                                                                      return 1039;
+                                                                      return 1041;
                                                                     }
                                                                   else
                                                                     {
@@ -893,7 +893,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000011xxxxx000000xxxxxxxxxx
                                                                          ldaddlh.  */
-                                                                      return 1042;
+                                                                      return 1044;
                                                                     }
                                                                 }
                                                               else
@@ -902,7 +902,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000011xxxxx000000xxxxxxxxxx
                                                                      ldaddl.  */
-                                                                  return 1045;
+                                                                  return 1047;
                                                                 }
                                                             }
                                                           else
@@ -915,7 +915,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000111xxxxx000000xxxxxxxxxx
                                                                          ldaddalb.  */
-                                                                      return 1040;
+                                                                      return 1042;
                                                                     }
                                                                   else
                                                                     {
@@ -923,7 +923,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000111xxxxx000000xxxxxxxxxx
                                                                          ldaddalh.  */
-                                                                      return 1043;
+                                                                      return 1045;
                                                                     }
                                                                 }
                                                               else
@@ -932,7 +932,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000111xxxxx000000xxxxxxxxxx
                                                                      ldaddal.  */
-                                                                  return 1046;
+                                                                  return 1048;
                                                                 }
                                                             }
                                                         }
@@ -951,7 +951,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000001xxxxx100000xxxxxxxxxx
                                                                          swpb.  */
-                                                                      return 1023;
+                                                                      return 1025;
                                                                     }
                                                                   else
                                                                     {
@@ -959,7 +959,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000001xxxxx100000xxxxxxxxxx
                                                                          swph.  */
-                                                                      return 1024;
+                                                                      return 1026;
                                                                     }
                                                                 }
                                                               else
@@ -968,7 +968,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000001xxxxx100000xxxxxxxxxx
                                                                      swp.  */
-                                                                  return 1025;
+                                                                  return 1027;
                                                                 }
                                                             }
                                                           else
@@ -981,7 +981,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000101xxxxx100000xxxxxxxxxx
                                                                          swpab.  */
-                                                                      return 1026;
+                                                                      return 1028;
                                                                     }
                                                                   else
                                                                     {
@@ -989,7 +989,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000101xxxxx100000xxxxxxxxxx
                                                                          swpah.  */
-                                                                      return 1029;
+                                                                      return 1031;
                                                                     }
                                                                 }
                                                               else
@@ -998,7 +998,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000101xxxxx100000xxxxxxxxxx
                                                                      swpa.  */
-                                                                  return 1032;
+                                                                  return 1034;
                                                                 }
                                                             }
                                                         }
@@ -1014,7 +1014,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000011xxxxx100000xxxxxxxxxx
                                                                          swplb.  */
-                                                                      return 1027;
+                                                                      return 1029;
                                                                     }
                                                                   else
                                                                     {
@@ -1022,7 +1022,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000011xxxxx100000xxxxxxxxxx
                                                                          swplh.  */
-                                                                      return 1030;
+                                                                      return 1032;
                                                                     }
                                                                 }
                                                               else
@@ -1031,7 +1031,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000011xxxxx100000xxxxxxxxxx
                                                                      swpl.  */
-                                                                  return 1033;
+                                                                  return 1035;
                                                                 }
                                                             }
                                                           else
@@ -1044,7 +1044,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000111xxxxx100000xxxxxxxxxx
                                                                          swpalb.  */
-                                                                      return 1028;
+                                                                      return 1030;
                                                                     }
                                                                   else
                                                                     {
@@ -1052,7 +1052,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000111xxxxx100000xxxxxxxxxx
                                                                          swpalh.  */
-                                                                      return 1031;
+                                                                      return 1033;
                                                                     }
                                                                 }
                                                               else
@@ -1061,7 +1061,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000111xxxxx100000xxxxxxxxxx
                                                                      swpal.  */
-                                                                  return 1034;
+                                                                  return 1036;
                                                                 }
                                                             }
                                                         }
@@ -1083,7 +1083,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000001xxxxx010000xxxxxxxxxx
                                                                          ldsmaxb.  */
-                                                                      return 1083;
+                                                                      return 1085;
                                                                     }
                                                                   else
                                                                     {
@@ -1091,7 +1091,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000001xxxxx010000xxxxxxxxxx
                                                                          ldsmaxh.  */
-                                                                      return 1084;
+                                                                      return 1086;
                                                                     }
                                                                 }
                                                               else
@@ -1100,7 +1100,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000001xxxxx010000xxxxxxxxxx
                                                                      ldsmax.  */
-                                                                  return 1085;
+                                                                  return 1087;
                                                                 }
                                                             }
                                                           else
@@ -1113,7 +1113,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000101xxxxx010000xxxxxxxxxx
                                                                          ldsmaxab.  */
-                                                                      return 1086;
+                                                                      return 1088;
                                                                     }
                                                                   else
                                                                     {
@@ -1121,7 +1121,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000101xxxxx010000xxxxxxxxxx
                                                                          ldsmaxah.  */
-                                                                      return 1089;
+                                                                      return 1091;
                                                                     }
                                                                 }
                                                               else
@@ -1130,7 +1130,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000101xxxxx010000xxxxxxxxxx
                                                                      ldsmaxa.  */
-                                                                  return 1092;
+                                                                  return 1094;
                                                                 }
                                                             }
                                                         }
@@ -1146,7 +1146,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000011xxxxx010000xxxxxxxxxx
                                                                          ldsmaxlb.  */
-                                                                      return 1087;
+                                                                      return 1089;
                                                                     }
                                                                   else
                                                                     {
@@ -1154,7 +1154,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000011xxxxx010000xxxxxxxxxx
                                                                          ldsmaxlh.  */
-                                                                      return 1090;
+                                                                      return 1092;
                                                                     }
                                                                 }
                                                               else
@@ -1163,7 +1163,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000011xxxxx010000xxxxxxxxxx
                                                                      ldsmaxl.  */
-                                                                  return 1093;
+                                                                  return 1095;
                                                                 }
                                                             }
                                                           else
@@ -1176,7 +1176,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          00111000111xxxxx010000xxxxxxxxxx
                                                                          ldsmaxalb.  */
-                                                                      return 1088;
+                                                                      return 1090;
                                                                     }
                                                                   else
                                                                     {
@@ -1184,7 +1184,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          01111000111xxxxx010000xxxxxxxxxx
                                                                          ldsmaxalh.  */
-                                                                      return 1091;
+                                                                      return 1093;
                                                                     }
                                                                 }
                                                               else
@@ -1193,7 +1193,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      1x111000111xxxxx010000xxxxxxxxxx
                                                                      ldsmaxal.  */
-                                                                  return 1094;
+                                                                  return 1096;
                                                                 }
                                                             }
                                                         }
@@ -1246,7 +1246,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx01000xxxxxxxxxx
                                                                      ldeorb.  */
-                                                                  return 1059;
+                                                                  return 1061;
                                                                 }
                                                               else
                                                                 {
@@ -1254,7 +1254,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx01000xxxxxxxxxx
                                                                      ldeorh.  */
-                                                                  return 1060;
+                                                                  return 1062;
                                                                 }
                                                             }
                                                           else
@@ -1263,7 +1263,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx01000xxxxxxxxxx
                                                                  ldeor.  */
-                                                              return 1061;
+                                                              return 1063;
                                                             }
                                                         }
                                                       else
@@ -1276,7 +1276,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx01000xxxxxxxxxx
                                                                      ldeorab.  */
-                                                                  return 1062;
+                                                                  return 1064;
                                                                 }
                                                               else
                                                                 {
@@ -1284,7 +1284,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx01000xxxxxxxxxx
                                                                      ldeorah.  */
-                                                                  return 1065;
+                                                                  return 1067;
                                                                 }
                                                             }
                                                           else
@@ -1293,7 +1293,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx01000xxxxxxxxxx
                                                                  ldeora.  */
-                                                              return 1068;
+                                                              return 1070;
                                                             }
                                                         }
                                                     }
@@ -1309,7 +1309,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx01000xxxxxxxxxx
                                                                      ldeorlb.  */
-                                                                  return 1063;
+                                                                  return 1065;
                                                                 }
                                                               else
                                                                 {
@@ -1317,7 +1317,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx01000xxxxxxxxxx
                                                                      ldeorlh.  */
-                                                                  return 1066;
+                                                                  return 1068;
                                                                 }
                                                             }
                                                           else
@@ -1326,7 +1326,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx01000xxxxxxxxxx
                                                                  ldeorl.  */
-                                                              return 1069;
+                                                              return 1071;
                                                             }
                                                         }
                                                       else
@@ -1339,7 +1339,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx01000xxxxxxxxxx
                                                                      ldeoralb.  */
-                                                                  return 1064;
+                                                                  return 1066;
                                                                 }
                                                               else
                                                                 {
@@ -1347,7 +1347,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx01000xxxxxxxxxx
                                                                      ldeoralh.  */
-                                                                  return 1067;
+                                                                  return 1069;
                                                                 }
                                                             }
                                                           else
@@ -1356,7 +1356,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx01000xxxxxxxxxx
                                                                  ldeoral.  */
-                                                              return 1070;
+                                                              return 1072;
                                                             }
                                                         }
                                                     }
@@ -1375,7 +1375,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx11000xxxxxxxxxx
                                                                      ldumaxb.  */
-                                                                  return 1107;
+                                                                  return 1109;
                                                                 }
                                                               else
                                                                 {
@@ -1383,7 +1383,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx11000xxxxxxxxxx
                                                                      ldumaxh.  */
-                                                                  return 1108;
+                                                                  return 1110;
                                                                 }
                                                             }
                                                           else
@@ -1392,7 +1392,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx11000xxxxxxxxxx
                                                                  ldumax.  */
-                                                              return 1109;
+                                                              return 1111;
                                                             }
                                                         }
                                                       else
@@ -1405,7 +1405,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx11000xxxxxxxxxx
                                                                      ldumaxab.  */
-                                                                  return 1110;
+                                                                  return 1112;
                                                                 }
                                                               else
                                                                 {
@@ -1413,7 +1413,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx11000xxxxxxxxxx
                                                                      ldumaxah.  */
-                                                                  return 1113;
+                                                                  return 1115;
                                                                 }
                                                             }
                                                           else
@@ -1422,7 +1422,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx11000xxxxxxxxxx
                                                                  ldumaxa.  */
-                                                              return 1116;
+                                                              return 1118;
                                                             }
                                                         }
                                                     }
@@ -1438,7 +1438,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx11000xxxxxxxxxx
                                                                      ldumaxlb.  */
-                                                                  return 1111;
+                                                                  return 1113;
                                                                 }
                                                               else
                                                                 {
@@ -1446,7 +1446,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx11000xxxxxxxxxx
                                                                      ldumaxlh.  */
-                                                                  return 1114;
+                                                                  return 1116;
                                                                 }
                                                             }
                                                           else
@@ -1455,7 +1455,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx11000xxxxxxxxxx
                                                                  ldumaxl.  */
-                                                              return 1117;
+                                                              return 1119;
                                                             }
                                                         }
                                                       else
@@ -1468,7 +1468,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx11000xxxxxxxxxx
                                                                      ldumaxalb.  */
-                                                                  return 1112;
+                                                                  return 1114;
                                                                 }
                                                               else
                                                                 {
@@ -1476,7 +1476,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx11000xxxxxxxxxx
                                                                      ldumaxalh.  */
-                                                                  return 1115;
+                                                                  return 1117;
                                                                 }
                                                             }
                                                           else
@@ -1485,7 +1485,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx11000xxxxxxxxxx
                                                                  ldumaxal.  */
-                                                              return 1118;
+                                                              return 1120;
                                                             }
                                                         }
                                                     }
@@ -1510,7 +1510,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx00100xxxxxxxxxx
                                                                      ldclrb.  */
-                                                                  return 1047;
+                                                                  return 1049;
                                                                 }
                                                               else
                                                                 {
@@ -1518,7 +1518,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx00100xxxxxxxxxx
                                                                      ldclrh.  */
-                                                                  return 1048;
+                                                                  return 1050;
                                                                 }
                                                             }
                                                           else
@@ -1527,7 +1527,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx00100xxxxxxxxxx
                                                                  ldclr.  */
-                                                              return 1049;
+                                                              return 1051;
                                                             }
                                                         }
                                                       else
@@ -1540,7 +1540,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx00100xxxxxxxxxx
                                                                      ldclrab.  */
-                                                                  return 1050;
+                                                                  return 1052;
                                                                 }
                                                               else
                                                                 {
@@ -1548,7 +1548,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx00100xxxxxxxxxx
                                                                      ldclrah.  */
-                                                                  return 1053;
+                                                                  return 1055;
                                                                 }
                                                             }
                                                           else
@@ -1557,7 +1557,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx00100xxxxxxxxxx
                                                                  ldclra.  */
-                                                              return 1056;
+                                                              return 1058;
                                                             }
                                                         }
                                                     }
@@ -1573,7 +1573,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx00100xxxxxxxxxx
                                                                      ldclrlb.  */
-                                                                  return 1051;
+                                                                  return 1053;
                                                                 }
                                                               else
                                                                 {
@@ -1581,7 +1581,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx00100xxxxxxxxxx
                                                                      ldclrlh.  */
-                                                                  return 1054;
+                                                                  return 1056;
                                                                 }
                                                             }
                                                           else
@@ -1590,7 +1590,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx00100xxxxxxxxxx
                                                                  ldclrl.  */
-                                                              return 1057;
+                                                              return 1059;
                                                             }
                                                         }
                                                       else
@@ -1603,7 +1603,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx00100xxxxxxxxxx
                                                                      ldclralb.  */
-                                                                  return 1052;
+                                                                  return 1054;
                                                                 }
                                                               else
                                                                 {
@@ -1611,7 +1611,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx00100xxxxxxxxxx
                                                                      ldclralh.  */
-                                                                  return 1055;
+                                                                  return 1057;
                                                                 }
                                                             }
                                                           else
@@ -1620,7 +1620,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx00100xxxxxxxxxx
                                                                  ldclral.  */
-                                                              return 1058;
+                                                              return 1060;
                                                             }
                                                         }
                                                     }
@@ -1639,7 +1639,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx10100xxxxxxxxxx
                                                                      ldsminb.  */
-                                                                  return 1095;
+                                                                  return 1097;
                                                                 }
                                                               else
                                                                 {
@@ -1647,7 +1647,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx10100xxxxxxxxxx
                                                                      ldsminh.  */
-                                                                  return 1096;
+                                                                  return 1098;
                                                                 }
                                                             }
                                                           else
@@ -1656,7 +1656,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx10100xxxxxxxxxx
                                                                  ldsmin.  */
-                                                              return 1097;
+                                                              return 1099;
                                                             }
                                                         }
                                                       else
@@ -1669,7 +1669,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx10100xxxxxxxxxx
                                                                      ldsminab.  */
-                                                                  return 1098;
+                                                                  return 1100;
                                                                 }
                                                               else
                                                                 {
@@ -1677,7 +1677,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx10100xxxxxxxxxx
                                                                      ldsminah.  */
-                                                                  return 1101;
+                                                                  return 1103;
                                                                 }
                                                             }
                                                           else
@@ -1686,7 +1686,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx10100xxxxxxxxxx
                                                                  ldsmina.  */
-                                                              return 1104;
+                                                              return 1106;
                                                             }
                                                         }
                                                     }
@@ -1702,7 +1702,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx10100xxxxxxxxxx
                                                                      ldsminlb.  */
-                                                                  return 1099;
+                                                                  return 1101;
                                                                 }
                                                               else
                                                                 {
@@ -1710,7 +1710,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx10100xxxxxxxxxx
                                                                      ldsminlh.  */
-                                                                  return 1102;
+                                                                  return 1104;
                                                                 }
                                                             }
                                                           else
@@ -1719,7 +1719,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx10100xxxxxxxxxx
                                                                  ldsminl.  */
-                                                              return 1105;
+                                                              return 1107;
                                                             }
                                                         }
                                                       else
@@ -1732,7 +1732,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx10100xxxxxxxxxx
                                                                      ldsminalb.  */
-                                                                  return 1100;
+                                                                  return 1102;
                                                                 }
                                                               else
                                                                 {
@@ -1740,7 +1740,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx10100xxxxxxxxxx
                                                                      ldsminalh.  */
-                                                                  return 1103;
+                                                                  return 1105;
                                                                 }
                                                             }
                                                           else
@@ -1749,7 +1749,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx10100xxxxxxxxxx
                                                                  ldsminal.  */
-                                                              return 1106;
+                                                              return 1108;
                                                             }
                                                         }
                                                     }
@@ -1771,7 +1771,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx01100xxxxxxxxxx
                                                                      ldsetb.  */
-                                                                  return 1071;
+                                                                  return 1073;
                                                                 }
                                                               else
                                                                 {
@@ -1779,7 +1779,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx01100xxxxxxxxxx
                                                                      ldseth.  */
-                                                                  return 1072;
+                                                                  return 1074;
                                                                 }
                                                             }
                                                           else
@@ -1788,7 +1788,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx01100xxxxxxxxxx
                                                                  ldset.  */
-                                                              return 1073;
+                                                              return 1075;
                                                             }
                                                         }
                                                       else
@@ -1801,7 +1801,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx01100xxxxxxxxxx
                                                                      ldsetab.  */
-                                                                  return 1074;
+                                                                  return 1076;
                                                                 }
                                                               else
                                                                 {
@@ -1809,7 +1809,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx01100xxxxxxxxxx
                                                                      ldsetah.  */
-                                                                  return 1077;
+                                                                  return 1079;
                                                                 }
                                                             }
                                                           else
@@ -1818,7 +1818,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx01100xxxxxxxxxx
                                                                  ldseta.  */
-                                                              return 1080;
+                                                              return 1082;
                                                             }
                                                         }
                                                     }
@@ -1834,7 +1834,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx01100xxxxxxxxxx
                                                                      ldsetlb.  */
-                                                                  return 1075;
+                                                                  return 1077;
                                                                 }
                                                               else
                                                                 {
@@ -1842,7 +1842,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx01100xxxxxxxxxx
                                                                      ldsetlh.  */
-                                                                  return 1078;
+                                                                  return 1080;
                                                                 }
                                                             }
                                                           else
@@ -1851,7 +1851,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx01100xxxxxxxxxx
                                                                  ldsetl.  */
-                                                              return 1081;
+                                                              return 1083;
                                                             }
                                                         }
                                                       else
@@ -1864,7 +1864,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx01100xxxxxxxxxx
                                                                      ldsetalb.  */
-                                                                  return 1076;
+                                                                  return 1078;
                                                                 }
                                                               else
                                                                 {
@@ -1872,7 +1872,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx01100xxxxxxxxxx
                                                                      ldsetalh.  */
-                                                                  return 1079;
+                                                                  return 1081;
                                                                 }
                                                             }
                                                           else
@@ -1881,7 +1881,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx01100xxxxxxxxxx
                                                                  ldsetal.  */
-                                                              return 1082;
+                                                              return 1084;
                                                             }
                                                         }
                                                     }
@@ -1900,7 +1900,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000001xxxxxx11100xxxxxxxxxx
                                                                      lduminb.  */
-                                                                  return 1119;
+                                                                  return 1121;
                                                                 }
                                                               else
                                                                 {
@@ -1908,7 +1908,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000001xxxxxx11100xxxxxxxxxx
                                                                      lduminh.  */
-                                                                  return 1120;
+                                                                  return 1122;
                                                                 }
                                                             }
                                                           else
@@ -1917,7 +1917,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000001xxxxxx11100xxxxxxxxxx
                                                                  ldumin.  */
-                                                              return 1121;
+                                                              return 1123;
                                                             }
                                                         }
                                                       else
@@ -1930,7 +1930,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000101xxxxxx11100xxxxxxxxxx
                                                                      lduminab.  */
-                                                                  return 1122;
+                                                                  return 1124;
                                                                 }
                                                               else
                                                                 {
@@ -1938,7 +1938,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000101xxxxxx11100xxxxxxxxxx
                                                                      lduminah.  */
-                                                                  return 1125;
+                                                                  return 1127;
                                                                 }
                                                             }
                                                           else
@@ -1947,7 +1947,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000101xxxxxx11100xxxxxxxxxx
                                                                  ldumina.  */
-                                                              return 1128;
+                                                              return 1130;
                                                             }
                                                         }
                                                     }
@@ -1963,7 +1963,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000011xxxxxx11100xxxxxxxxxx
                                                                      lduminlb.  */
-                                                                  return 1123;
+                                                                  return 1125;
                                                                 }
                                                               else
                                                                 {
@@ -1971,7 +1971,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000011xxxxxx11100xxxxxxxxxx
                                                                      lduminlh.  */
-                                                                  return 1126;
+                                                                  return 1128;
                                                                 }
                                                             }
                                                           else
@@ -1980,7 +1980,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000011xxxxxx11100xxxxxxxxxx
                                                                  lduminl.  */
-                                                              return 1129;
+                                                              return 1131;
                                                             }
                                                         }
                                                       else
@@ -1993,7 +1993,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      00111000111xxxxxx11100xxxxxxxxxx
                                                                      lduminalb.  */
-                                                                  return 1124;
+                                                                  return 1126;
                                                                 }
                                                               else
                                                                 {
@@ -2001,7 +2001,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      01111000111xxxxxx11100xxxxxxxxxx
                                                                      lduminalh.  */
-                                                                  return 1127;
+                                                                  return 1129;
                                                                 }
                                                             }
                                                           else
@@ -2010,7 +2010,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x111000111xxxxxx11100xxxxxxxxxx
                                                                  lduminal.  */
-                                                              return 1130;
+                                                              return 1132;
                                                             }
                                                         }
                                                     }
@@ -2368,7 +2368,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          00011001000xxxxxxxxx00xxxxxxxxxx
                                                          stlurb.  */
-                                                      return 2080;
+                                                      return 2082;
                                                     }
                                                   else
                                                     {
@@ -2376,7 +2376,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          10011001000xxxxxxxxx00xxxxxxxxxx
                                                          stlur.  */
-                                                      return 2088;
+                                                      return 2090;
                                                     }
                                                 }
                                               else
@@ -2387,7 +2387,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          01011001000xxxxxxxxx00xxxxxxxxxx
                                                          stlurh.  */
-                                                      return 2084;
+                                                      return 2086;
                                                     }
                                                   else
                                                     {
@@ -2395,7 +2395,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          11011001000xxxxxxxxx00xxxxxxxxxx
                                                          stlur.  */
-                                                      return 2091;
+                                                      return 2093;
                                                     }
                                                 }
                                             }
@@ -2405,7 +2405,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  xx011001001xxxxxxxxx00xxxxxxxxxx
                                                  stzgm.  */
-                                              return 961;
+                                              return 963;
                                             }
                                         }
                                       else
@@ -2475,7 +2475,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          00011001010xxxxxxxxx00xxxxxxxxxx
                                                          ldapurb.  */
-                                                      return 2081;
+                                                      return 2083;
                                                     }
                                                   else
                                                     {
@@ -2483,7 +2483,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          10011001010xxxxxxxxx00xxxxxxxxxx
                                                          ldapur.  */
-                                                      return 2089;
+                                                      return 2091;
                                                     }
                                                 }
                                               else
@@ -2494,7 +2494,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          01011001010xxxxxxxxx00xxxxxxxxxx
                                                          ldapurh.  */
-                                                      return 2085;
+                                                      return 2087;
                                                     }
                                                   else
                                                     {
@@ -2502,7 +2502,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          11011001010xxxxxxxxx00xxxxxxxxxx
                                                          ldapur.  */
-                                                      return 2092;
+                                                      return 2094;
                                                     }
                                                 }
                                             }
@@ -2573,53 +2573,75 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                 {
                                   if (((word >> 11) & 0x1) == 0)
                                     {
-                                      if (((word >> 22) & 0x1) == 0)
+                                      if (((word >> 21) & 0x1) == 0)
                                         {
-                                          if (((word >> 30) & 0x1) == 0)
+                                          if (((word >> 22) & 0x1) == 0)
                                             {
-                                              if (((word >> 31) & 0x1) == 0)
+                                              if (((word >> 30) & 0x1) == 0)
                                                 {
-                                                  /* 33222222222211111111110000000000
-                                                     10987654321098765432109876543210
-                                                     0001100110xxxxxxxxxx00xxxxxxxxxx
-                                                     ldapursb.  */
-                                                  return 2083;
+                                                  if (((word >> 31) & 0x1) == 0)
+                                                    {
+                                                      /* 33222222222211111111110000000000
+                                                         10987654321098765432109876543210
+                                                         00011001100xxxxxxxxx00xxxxxxxxxx
+                                                         ldapursb.  */
+                                                      return 2085;
+                                                    }
+                                                  else
+                                                    {
+                                                      /* 33222222222211111111110000000000
+                                                         10987654321098765432109876543210
+                                                         10011001100xxxxxxxxx00xxxxxxxxxx
+                                                         ldapursw.  */
+                                                      return 2092;
+                                                    }
                                                 }
                                               else
                                                 {
                                                   /* 33222222222211111111110000000000
                                                      10987654321098765432109876543210
-                                                     1001100110xxxxxxxxxx00xxxxxxxxxx
-                                                     ldapursw.  */
-                                                  return 2090;
+                                                     x1011001100xxxxxxxxx00xxxxxxxxxx
+                                                     ldapursh.  */
+                                                  return 2089;
                                                 }
                                             }
                                           else
                                             {
-                                              /* 33222222222211111111110000000000
-                                                 10987654321098765432109876543210
-                                                 x101100110xxxxxxxxxx00xxxxxxxxxx
-                                                 ldapursh.  */
-                                              return 2087;
+                                              if (((word >> 30) & 0x1) == 0)
+                                                {
+                                                  /* 33222222222211111111110000000000
+                                                     10987654321098765432109876543210
+                                                     x0011001110xxxxxxxxx00xxxxxxxxxx
+                                                     ldapursb.  */
+                                                  return 2084;
+                                                }
+                                              else
+                                                {
+                                                  /* 33222222222211111111110000000000
+                                                     10987654321098765432109876543210
+                                                     x1011001110xxxxxxxxx00xxxxxxxxxx
+                                                     ldapursh.  */
+                                                  return 2088;
+                                                }
                                             }
                                         }
                                       else
                                         {
-                                          if (((word >> 30) & 0x1) == 0)
+                                          if (((word >> 22) & 0x1) == 0)
                                             {
                                               /* 33222222222211111111110000000000
                                                  10987654321098765432109876543210
-                                                 x001100111xxxxxxxxxx00xxxxxxxxxx
-                                                 ldapursb.  */
-                                              return 2082;
+                                                 xx011001101xxxxxxxxx00xxxxxxxxxx
+                                                 stgm.  */
+                                              return 962;
                                             }
                                           else
                                             {
                                               /* 33222222222211111111110000000000
                                                  10987654321098765432109876543210
-                                                 x101100111xxxxxxxxxx00xxxxxxxxxx
-                                                 ldapursh.  */
-                                              return 2086;
+                                                 xx011001111xxxxxxxxx00xxxxxxxxxx
+                                                 ldgm.  */
+                                              return 961;
                                             }
                                         }
                                     }
@@ -2725,7 +2747,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x00x00100xxxxxxxxxxxxxxxxxxxxxxx
                                  and.  */
-                              return 988;
+                              return 990;
                             }
                           else
                             {
@@ -2733,7 +2755,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x10x00100xxxxxxxxxxxxxxxxxxxxxxx
                                  eor.  */
-                              return 992;
+                              return 994;
                             }
                         }
                       else
@@ -2744,7 +2766,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x01x00100xxxxxxxxxxxxxxxxxxxxxxx
                                  orr.  */
-                              return 990;
+                              return 992;
                             }
                           else
                             {
@@ -2752,7 +2774,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x11x00100xxxxxxxxxxxxxxxxxxxxxxx
                                  ands.  */
-                              return 993;
+                              return 995;
                             }
                         }
                     }
@@ -2766,7 +2788,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x00x00101xxxxxxxxxxxxxxxxxxxxxxx
                                  movn.  */
-                              return 1179;
+                              return 1181;
                             }
                           else
                             {
@@ -2774,7 +2796,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x10x00101xxxxxxxxxxxxxxxxxxxxxxx
                                  movz.  */
-                              return 1181;
+                              return 1183;
                             }
                         }
                       else
@@ -2783,7 +2805,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                              10987654321098765432109876543210
                              xx1x00101xxxxxxxxxxxxxxxxxxxxxxx
                              movk.  */
-                          return 1183;
+                          return 1185;
                         }
                     }
                 }
@@ -2801,7 +2823,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x0001010xx0xxxxxxxxxxxxxxxxxxxxx
                                      and.  */
-                                  return 995;
+                                  return 997;
                                 }
                               else
                                 {
@@ -2809,7 +2831,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x1001010xx0xxxxxxxxxxxxxxxxxxxxx
                                      eor.  */
-                                  return 1002;
+                                  return 1004;
                                 }
                             }
                           else
@@ -2820,7 +2842,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x0101010xx0xxxxxxxxxxxxxxxxxxxxx
                                      orr.  */
-                                  return 997;
+                                  return 999;
                                 }
                               else
                                 {
@@ -2828,7 +2850,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x1101010xx0xxxxxxxxxxxxxxxxxxxxx
                                      ands.  */
-                                  return 1004;
+                                  return 1006;
                                 }
                             }
                         }
@@ -3085,7 +3107,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx
                                              setf8.  */
-                                          return 2078;
+                                          return 2080;
                                         }
                                       else
                                         {
@@ -3093,7 +3115,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx
                                              setf16.  */
-                                          return 2079;
+                                          return 2081;
                                         }
                                     }
                                   else
@@ -3239,7 +3261,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              xxx11010000xxxxxxxxx01xxxxxxxxxx
                                              rmif.  */
-                                          return 2077;
+                                          return 2079;
                                         }
                                       else
                                         {
@@ -3489,7 +3511,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x00x1010xx1xxxxxxxxxxxxxxxxxxxxx
                                  bic.  */
-                              return 996;
+                              return 998;
                             }
                           else
                             {
@@ -3497,7 +3519,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x10x1010xx1xxxxxxxxxxxxxxxxxxxxx
                                  eon.  */
-                              return 1003;
+                              return 1005;
                             }
                         }
                       else
@@ -3508,7 +3530,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x01x1010xx1xxxxxxxxxxxxxxxxxxxxx
                                  orn.  */
-                              return 1000;
+                              return 1002;
                             }
                           else
                             {
@@ -3516,7 +3538,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  x11x1010xx1xxxxxxxxxxxxxxxxxxxxx
                                  bics.  */
-                              return 1006;
+                              return 1008;
                             }
                         }
                     }
@@ -3777,7 +3799,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx000000000xxxxxxxxxxxxx
                                                                      add.  */
-                                                                  return 1269;
+                                                                  return 1271;
                                                                 }
                                                               else
                                                                 {
@@ -3785,7 +3807,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx010000000xxxxxxxxxxxxx
                                                                      mul.  */
-                                                                  return 1738;
+                                                                  return 1740;
                                                                 }
                                                             }
                                                           else
@@ -3796,7 +3818,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx001000000xxxxxxxxxxxxx
                                                                      smax.  */
-                                                                  return 1817;
+                                                                  return 1819;
                                                                 }
                                                               else
                                                                 {
@@ -3804,7 +3826,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx011000000xxxxxxxxxxxxx
                                                                      orr.  */
-                                                                  return 1749;
+                                                                  return 1751;
                                                                 }
                                                             }
                                                         }
@@ -3816,7 +3838,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0100000xxxxxxxxxxxxx
                                                                  sdiv.  */
-                                                              return 1808;
+                                                              return 1810;
                                                             }
                                                           else
                                                             {
@@ -3824,7 +3846,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1100000xxxxxxxxxxxxx
                                                                  sabd.  */
-                                                              return 1799;
+                                                              return 1801;
                                                             }
                                                         }
                                                     }
@@ -3838,7 +3860,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0010000xxxxxxxxxxxxx
                                                                  smulh.  */
-                                                              return 1822;
+                                                              return 1824;
                                                             }
                                                           else
                                                             {
@@ -3848,7 +3870,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx001010000xxxxxxxxxxxxx
                                                                      smin.  */
-                                                                  return 1820;
+                                                                  return 1822;
                                                                 }
                                                               else
                                                                 {
@@ -3856,7 +3878,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx011010000xxxxxxxxxxxxx
                                                                      and.  */
-                                                                  return 1277;
+                                                                  return 1279;
                                                                 }
                                                             }
                                                         }
@@ -3866,7 +3888,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0xx110000xxxxxxxxxxxxx
                                                              sdivr.  */
-                                                          return 1809;
+                                                          return 1811;
                                                         }
                                                     }
                                                 }
@@ -3882,7 +3904,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0001000xxxxxxxxxxxxx
                                                                  sub.  */
-                                                              return 1938;
+                                                              return 1940;
                                                             }
                                                           else
                                                             {
@@ -3892,7 +3914,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx001001000xxxxxxxxxxxxx
                                                                      umax.  */
-                                                                  return 1966;
+                                                                  return 1968;
                                                                 }
                                                               else
                                                                 {
@@ -3900,7 +3922,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx011001000xxxxxxxxxxxxx
                                                                      eor.  */
-                                                                  return 1364;
+                                                                  return 1366;
                                                                 }
                                                             }
                                                         }
@@ -3912,7 +3934,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0101000xxxxxxxxxxxxx
                                                                  udiv.  */
-                                                              return 1960;
+                                                              return 1962;
                                                             }
                                                           else
                                                             {
@@ -3920,7 +3942,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1101000xxxxxxxxxxxxx
                                                                  uabd.  */
-                                                              return 1951;
+                                                              return 1953;
                                                             }
                                                         }
                                                     }
@@ -3936,7 +3958,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx000011000xxxxxxxxxxxxx
                                                                      subr.  */
-                                                                  return 1940;
+                                                                  return 1942;
                                                                 }
                                                               else
                                                                 {
@@ -3944,7 +3966,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx010011000xxxxxxxxxxxxx
                                                                      umulh.  */
-                                                                  return 1971;
+                                                                  return 1973;
                                                                 }
                                                             }
                                                           else
@@ -3955,7 +3977,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx001011000xxxxxxxxxxxxx
                                                                      umin.  */
-                                                                  return 1969;
+                                                                  return 1971;
                                                                 }
                                                               else
                                                                 {
@@ -3963,7 +3985,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx011011000xxxxxxxxxxxxx
                                                                      bic.  */
-                                                                  return 1289;
+                                                                  return 1291;
                                                                 }
                                                             }
                                                         }
@@ -3973,7 +3995,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0xx111000xxxxxxxxxxxxx
                                                              udivr.  */
-                                                          return 1961;
+                                                          return 1963;
                                                         }
                                                     }
                                                 }
@@ -3986,7 +4008,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x0xxxxx000xxxxxxxxxxxxx
                                                      ld1sb.  */
-                                                  return 1551;
+                                                  return 1553;
                                                 }
                                               else
                                                 {
@@ -3994,7 +4016,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x0xxxxx000xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1562;
+                                                  return 1564;
                                                 }
                                             }
                                         }
@@ -4006,7 +4028,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx000xxxxxxxxxxxxx
                                                  ld1sb.  */
-                                              return 1555;
+                                              return 1557;
                                             }
                                           else
                                             {
@@ -4018,7 +4040,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          010001x01x0xxxxx000xx0xxxxxxxxxx
                                                          sdot.  */
-                                                      return 1810;
+                                                      return 1812;
                                                     }
                                                   else
                                                     {
@@ -4026,7 +4048,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          010001x01x0xxxxx000xx1xxxxxxxxxx
                                                          udot.  */
-                                                      return 1962;
+                                                      return 1964;
                                                     }
                                                 }
                                               else
@@ -4035,7 +4057,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      110001x01x0xxxxx000xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1566;
+                                                  return 1568;
                                                 }
                                             }
                                         }
@@ -4056,7 +4078,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx000000xxxxxxxxxx
                                                              add.  */
-                                                          return 1267;
+                                                          return 1269;
                                                         }
                                                       else
                                                         {
@@ -4064,7 +4086,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx000100xxxxxxxxxx
                                                              sqadd.  */
-                                                          return 1824;
+                                                          return 1826;
                                                         }
                                                     }
                                                   else
@@ -4073,7 +4095,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx000x10xxxxxxxxxx
                                                          sqsub.  */
-                                                      return 1854;
+                                                      return 1856;
                                                     }
                                                 }
                                               else
@@ -4086,7 +4108,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx000001xxxxxxxxxx
                                                              sub.  */
-                                                          return 1936;
+                                                          return 1938;
                                                         }
                                                       else
                                                         {
@@ -4094,7 +4116,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx000101xxxxxxxxxx
                                                              uqadd.  */
-                                                          return 1972;
+                                                          return 1974;
                                                         }
                                                     }
                                                   else
@@ -4103,7 +4125,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx000x11xxxxxxxxxx
                                                          uqsub.  */
-                                                      return 2002;
+                                                      return 2004;
                                                     }
                                                 }
                                             }
@@ -4115,7 +4137,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x1xxxxx000xxxxxxxxxxxxx
                                                      prfb.  */
-                                                  return 1757;
+                                                  return 1759;
                                                 }
                                               else
                                                 {
@@ -4123,7 +4145,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x1xxxxx000xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1563;
+                                                  return 1565;
                                                 }
                                             }
                                         }
@@ -4135,7 +4157,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x1xxxxx000xxxxxxxxxxxxx
                                                  prfb.  */
-                                              return 1758;
+                                              return 1760;
                                             }
                                           else
                                             {
@@ -4149,7 +4171,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              010001x0101xxxxx000xx0xxxxxxxxxx
                                                              sdot.  */
-                                                          return 1811;
+                                                          return 1813;
                                                         }
                                                       else
                                                         {
@@ -4157,7 +4179,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              010001x0111xxxxx000xx0xxxxxxxxxx
                                                              sdot.  */
-                                                          return 1812;
+                                                          return 1814;
                                                         }
                                                     }
                                                   else
@@ -4168,7 +4190,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              010001x0101xxxxx000xx1xxxxxxxxxx
                                                              udot.  */
-                                                          return 1963;
+                                                          return 1965;
                                                         }
                                                       else
                                                         {
@@ -4176,7 +4198,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              010001x0111xxxxx000xx1xxxxxxxxxx
                                                              udot.  */
-                                                          return 1964;
+                                                          return 1966;
                                                         }
                                                     }
                                                 }
@@ -4186,7 +4208,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      110001x01x1xxxxx000xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1567;
+                                                  return 1569;
                                                 }
                                             }
                                         }
@@ -4212,7 +4234,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0000x0100xxxxxxxxxxxxx
                                                                  asr.  */
-                                                              return 1285;
+                                                              return 1287;
                                                             }
                                                           else
                                                             {
@@ -4220,7 +4242,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0100x0100xxxxxxxxxxxxx
                                                                  asr.  */
-                                                              return 1283;
+                                                              return 1285;
                                                             }
                                                         }
                                                       else
@@ -4229,7 +4251,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0x10x0100xxxxxxxxxxxxx
                                                              asr.  */
-                                                          return 1284;
+                                                          return 1286;
                                                         }
                                                     }
                                                   else
@@ -4240,7 +4262,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx00x1x0100xxxxxxxxxxxxx
                                                              asrd.  */
-                                                          return 1286;
+                                                          return 1288;
                                                         }
                                                       else
                                                         {
@@ -4248,7 +4270,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx01x1x0100xxxxxxxxxxxxx
                                                              asrr.  */
-                                                          return 1287;
+                                                          return 1289;
                                                         }
                                                     }
                                                 }
@@ -4266,7 +4288,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx000001100xxxxxxxxxxxxx
                                                                      lsr.  */
-                                                                  return 1729;
+                                                                  return 1731;
                                                                 }
                                                               else
                                                                 {
@@ -4274,7 +4296,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx010001100xxxxxxxxxxxxx
                                                                      lsr.  */
-                                                                  return 1727;
+                                                                  return 1729;
                                                                 }
                                                             }
                                                           else
@@ -4283,7 +4305,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1001100xxxxxxxxxxxxx
                                                                  lsr.  */
-                                                              return 1728;
+                                                              return 1730;
                                                             }
                                                         }
                                                       else
@@ -4292,7 +4314,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0xx101100xxxxxxxxxxxxx
                                                              lsrr.  */
-                                                          return 1730;
+                                                          return 1732;
                                                         }
                                                     }
                                                   else
@@ -4307,7 +4329,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx000011100xxxxxxxxxxxxx
                                                                      lsl.  */
-                                                                  return 1723;
+                                                                  return 1725;
                                                                 }
                                                               else
                                                                 {
@@ -4315,7 +4337,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0xx010011100xxxxxxxxxxxxx
                                                                      lsl.  */
-                                                                  return 1721;
+                                                                  return 1723;
                                                                 }
                                                             }
                                                           else
@@ -4324,7 +4346,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1011100xxxxxxxxxxxxx
                                                                  lsl.  */
-                                                              return 1722;
+                                                              return 1724;
                                                             }
                                                         }
                                                       else
@@ -4333,7 +4355,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0xx111100xxxxxxxxxxxxx
                                                              lslr.  */
-                                                          return 1724;
+                                                          return 1726;
                                                         }
                                                     }
                                                 }
@@ -4348,7 +4370,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx1000x0xxxxxxxxxx
                                                          asr.  */
-                                                      return 1281;
+                                                      return 1283;
                                                     }
                                                   else
                                                     {
@@ -4356,7 +4378,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx1001x0xxxxxxxxxx
                                                          asr.  */
-                                                      return 1282;
+                                                      return 1284;
                                                     }
                                                 }
                                               else
@@ -4369,7 +4391,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx100001xxxxxxxxxx
                                                              lsr.  */
-                                                          return 1725;
+                                                          return 1727;
                                                         }
                                                       else
                                                         {
@@ -4377,7 +4399,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx100101xxxxxxxxxx
                                                              lsr.  */
-                                                          return 1726;
+                                                          return 1728;
                                                         }
                                                     }
                                                   else
@@ -4388,7 +4410,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx100011xxxxxxxxxx
                                                              lsl.  */
-                                                          return 1719;
+                                                          return 1721;
                                                         }
                                                       else
                                                         {
@@ -4396,7 +4418,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx100111xxxxxxxxxx
                                                              lsl.  */
-                                                          return 1720;
+                                                          return 1722;
                                                         }
                                                     }
                                                 }
@@ -4412,7 +4434,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x000xxxxxx100xxxxxxxxxxxxx
                                                      ld1sb.  */
-                                                  return 1557;
+                                                  return 1559;
                                                 }
                                               else
                                                 {
@@ -4420,7 +4442,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x010xxxxxx100xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1570;
+                                                  return 1572;
                                                 }
                                             }
                                           else
@@ -4431,7 +4453,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x001xxxxxx100xxxxxxxxxxxxx
                                                      ld1rb.  */
-                                                  return 1527;
+                                                  return 1529;
                                                 }
                                               else
                                                 {
@@ -4439,7 +4461,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x011xxxxxx100xxxxxxxxxxxxx
                                                      ld1rsw.  */
-                                                  return 1548;
+                                                  return 1550;
                                                 }
                                             }
                                         }
@@ -4454,7 +4476,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx100xxxxxxxxxxxxx
                                                  ld1sb.  */
-                                              return 1556;
+                                              return 1558;
                                             }
                                           else
                                             {
@@ -4462,7 +4484,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx100xxxxxxxxxxxxx
                                                  ld1sh.  */
-                                              return 1568;
+                                              return 1570;
                                             }
                                         }
                                       else
@@ -4475,7 +4497,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0001xxxxx100xxxxxxxxxxxxx
                                                      ld1sb.  */
-                                                  return 1561;
+                                                  return 1563;
                                                 }
                                               else
                                                 {
@@ -4483,7 +4505,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0101xxxxx100xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1573;
+                                                  return 1575;
                                                 }
                                             }
                                           else
@@ -4494,7 +4516,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0011xxxxx100xxxxxxxxxxxxx
                                                      prfb.  */
-                                                  return 1759;
+                                                  return 1761;
                                                 }
                                               else
                                                 {
@@ -4502,7 +4524,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0111xxxxx100xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1569;
+                                                  return 1571;
                                                 }
                                             }
                                         }
@@ -4523,7 +4545,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x0xx0xxxxx010xxxxxxxxxxxxx
                                                  mla.  */
-                                              return 1732;
+                                              return 1734;
                                             }
                                           else
                                             {
@@ -4533,7 +4555,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x0xxxxx010xxxxxxxxxxxxx
                                                      ld1b.  */
-                                                  return 1493;
+                                                  return 1495;
                                                 }
                                               else
                                                 {
@@ -4541,7 +4563,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x0xxxxx010xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1513;
+                                                  return 1515;
                                                 }
                                             }
                                         }
@@ -4553,7 +4575,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx010xxxxxxxxxxxxx
                                                  ld1b.  */
-                                              return 1498;
+                                              return 1500;
                                             }
                                           else
                                             {
@@ -4561,7 +4583,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx010xxxxxxxxxxxxx
                                                  ld1h.  */
-                                              return 1518;
+                                              return 1520;
                                             }
                                         }
                                     }
@@ -4581,7 +4603,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx010000xxxxxxxxxx
                                                              index.  */
-                                                          return 1484;
+                                                          return 1486;
                                                         }
                                                       else
                                                         {
@@ -4589,7 +4611,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx010001xxxxxxxxxx
                                                              index.  */
-                                                          return 1485;
+                                                          return 1487;
                                                         }
                                                     }
                                                   else
@@ -4602,7 +4624,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0001xxxxx01010xxxxxxxxxxx
                                                                  addvl.  */
-                                                              return 1271;
+                                                              return 1273;
                                                             }
                                                           else
                                                             {
@@ -4610,7 +4632,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0101xxxxx01010xxxxxxxxxxx
                                                                  rdvl.  */
-                                                              return 1793;
+                                                              return 1795;
                                                             }
                                                         }
                                                       else
@@ -4619,7 +4641,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0x11xxxxx01010xxxxxxxxxxx
                                                              addpl.  */
-                                                          return 1270;
+                                                          return 1272;
                                                         }
                                                     }
                                                 }
@@ -4631,7 +4653,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx010x10xxxxxxxxxx
                                                          index.  */
-                                                      return 1486;
+                                                      return 1488;
                                                     }
                                                   else
                                                     {
@@ -4639,7 +4661,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx010x11xxxxxxxxxx
                                                          index.  */
-                                                      return 1483;
+                                                      return 1485;
                                                     }
                                                 }
                                             }
@@ -4651,7 +4673,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x1xxxxx010xxxxxxxxxxxxx
                                                      prfw.  */
-                                                  return 1777;
+                                                  return 1779;
                                                 }
                                               else
                                                 {
@@ -4659,7 +4681,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x1xxxxx010xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1514;
+                                                  return 1516;
                                                 }
                                             }
                                         }
@@ -4671,7 +4693,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x1xxxxx010xxxxxxxxxxxxx
                                                  prfw.  */
-                                              return 1779;
+                                              return 1781;
                                             }
                                           else
                                             {
@@ -4679,7 +4701,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x1xxxxx010xxxxxxxxxxxxx
                                                  ld1h.  */
-                                              return 1519;
+                                              return 1521;
                                             }
                                         }
                                     }
@@ -4696,7 +4718,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x0xx0xxxxx110xxxxxxxxxxxxx
                                                  mad.  */
-                                              return 1731;
+                                              return 1733;
                                             }
                                           else
                                             {
@@ -4712,7 +4734,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0x010xxxx110x00xxxxxxxxxx
                                                                  sqincw.  */
-                                                              return 1851;
+                                                              return 1853;
                                                             }
                                                           else
                                                             {
@@ -4722,7 +4744,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00110xxxx110x00xxxxxxxxxx
                                                                      sqinch.  */
-                                                                  return 1845;
+                                                                  return 1847;
                                                                 }
                                                               else
                                                                 {
@@ -4730,7 +4752,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01110xxxx110x00xxxxxxxxxx
                                                                      sqincd.  */
-                                                                  return 1842;
+                                                                  return 1844;
                                                                 }
                                                             }
                                                         }
@@ -4742,7 +4764,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0x011xxxx110x00xxxxxxxxxx
                                                                  incw.  */
-                                                              return 1481;
+                                                              return 1483;
                                                             }
                                                           else
                                                             {
@@ -4752,7 +4774,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00111xxxx110x00xxxxxxxxxx
                                                                      inch.  */
-                                                                  return 1477;
+                                                                  return 1479;
                                                                 }
                                                               else
                                                                 {
@@ -4760,7 +4782,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01111xxxx110x00xxxxxxxxxx
                                                                      incd.  */
-                                                                  return 1475;
+                                                                  return 1477;
                                                                 }
                                                             }
                                                         }
@@ -4773,7 +4795,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0x01xxxxx110x10xxxxxxxxxx
                                                              sqdecw.  */
-                                                          return 1837;
+                                                          return 1839;
                                                         }
                                                       else
                                                         {
@@ -4783,7 +4805,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0011xxxxx110x10xxxxxxxxxx
                                                                  sqdech.  */
-                                                              return 1831;
+                                                              return 1833;
                                                             }
                                                           else
                                                             {
@@ -4791,7 +4813,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0111xxxxx110x10xxxxxxxxxx
                                                                  sqdecd.  */
-                                                              return 1828;
+                                                              return 1830;
                                                             }
                                                         }
                                                     }
@@ -4808,7 +4830,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0x010xxxx110x01xxxxxxxxxx
                                                                  uqincw.  */
-                                                              return 1999;
+                                                              return 2001;
                                                             }
                                                           else
                                                             {
@@ -4818,7 +4840,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00110xxxx110x01xxxxxxxxxx
                                                                      uqinch.  */
-                                                                  return 1993;
+                                                                  return 1995;
                                                                 }
                                                               else
                                                                 {
@@ -4826,7 +4848,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01110xxxx110x01xxxxxxxxxx
                                                                      uqincd.  */
-                                                                  return 1990;
+                                                                  return 1992;
                                                                 }
                                                             }
                                                         }
@@ -4838,7 +4860,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0x011xxxx110x01xxxxxxxxxx
                                                                  decw.  */
-                                                              return 1356;
+                                                              return 1358;
                                                             }
                                                           else
                                                             {
@@ -4848,7 +4870,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00111xxxx110x01xxxxxxxxxx
                                                                      dech.  */
-                                                                  return 1352;
+                                                                  return 1354;
                                                                 }
                                                               else
                                                                 {
@@ -4856,7 +4878,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01111xxxx110x01xxxxxxxxxx
                                                                      decd.  */
-                                                                  return 1350;
+                                                                  return 1352;
                                                                 }
                                                             }
                                                         }
@@ -4869,7 +4891,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0x01xxxxx110x11xxxxxxxxxx
                                                              uqdecw.  */
-                                                          return 1985;
+                                                          return 1987;
                                                         }
                                                       else
                                                         {
@@ -4879,7 +4901,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0011xxxxx110x11xxxxxxxxxx
                                                                  uqdech.  */
-                                                              return 1979;
+                                                              return 1981;
                                                             }
                                                           else
                                                             {
@@ -4887,7 +4909,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0111xxxxx110x11xxxxxxxxxx
                                                                  uqdecd.  */
-                                                              return 1976;
+                                                              return 1978;
                                                             }
                                                         }
                                                     }
@@ -4906,7 +4928,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0000xxxxx110xxxxxxxxxxxxx
                                                          prfb.  */
-                                                      return 1756;
+                                                      return 1758;
                                                     }
                                                   else
                                                     {
@@ -4914,7 +4936,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0100xxxxx110xxxxxxxxxxxxx
                                                          prfh.  */
-                                                      return 1771;
+                                                      return 1773;
                                                     }
                                                 }
                                               else
@@ -4925,7 +4947,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0001xxxxx110xxxxxxxxxxxxx
                                                          ld1b.  */
-                                                      return 1500;
+                                                      return 1502;
                                                     }
                                                   else
                                                     {
@@ -4933,7 +4955,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0101xxxxx110xxxxxxxxxxxxx
                                                          ld1h.  */
-                                                      return 1522;
+                                                      return 1524;
                                                     }
                                                 }
                                             }
@@ -4945,7 +4967,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x001xxxxxx110xxxxxxxxxxxxx
                                                      ld1rb.  */
-                                                  return 1529;
+                                                  return 1531;
                                                 }
                                               else
                                                 {
@@ -4953,7 +4975,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x011xxxxxx110xxxxxxxxxxxxx
                                                      ld1rh.  */
-                                                  return 1533;
+                                                  return 1535;
                                                 }
                                             }
                                         }
@@ -4968,7 +4990,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx110xxxxxxxxxxxxx
                                                  ld1b.  */
-                                              return 1499;
+                                              return 1501;
                                             }
                                           else
                                             {
@@ -4976,7 +4998,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx110xxxxxxxxxxxxx
                                                  ld1h.  */
-                                              return 1520;
+                                              return 1522;
                                             }
                                         }
                                       else
@@ -4989,7 +5011,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0001xxxxx110xxxxxxxxxxxxx
                                                      ld1b.  */
-                                                  return 1505;
+                                                  return 1507;
                                                 }
                                               else
                                                 {
@@ -4997,7 +5019,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0101xxxxx110xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1526;
+                                                  return 1528;
                                                 }
                                             }
                                           else
@@ -5008,7 +5030,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0011xxxxx110xxxxxxxxxxxxx
                                                      prfw.  */
-                                                  return 1780;
+                                                  return 1782;
                                                 }
                                               else
                                                 {
@@ -5016,7 +5038,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0111xxxxx110xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1521;
+                                                  return 1523;
                                                 }
                                             }
                                         }
@@ -5048,7 +5070,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx000x00001xxxxxxxxxxxxx
                                                                  saddv.  */
-                                                              return 1800;
+                                                              return 1802;
                                                             }
                                                           else
                                                             {
@@ -5056,7 +5078,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx000x01001xxxxxxxxxxxxx
                                                                  uaddv.  */
-                                                              return 1952;
+                                                              return 1954;
                                                             }
                                                         }
                                                       else
@@ -5065,7 +5087,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx010x0x001xxxxxxxxxxxxx
                                                              movprfx.  */
-                                                          return 1735;
+                                                          return 1737;
                                                         }
                                                     }
                                                   else
@@ -5078,7 +5100,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx001x00001xxxxxxxxxxxxx
                                                                  smaxv.  */
-                                                              return 1818;
+                                                              return 1820;
                                                             }
                                                           else
                                                             {
@@ -5086,7 +5108,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx011x00001xxxxxxxxxxxxx
                                                                  orv.  */
-                                                              return 1752;
+                                                              return 1754;
                                                             }
                                                         }
                                                       else
@@ -5097,7 +5119,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx001x01001xxxxxxxxxxxxx
                                                                  umaxv.  */
-                                                              return 1967;
+                                                              return 1969;
                                                             }
                                                           else
                                                             {
@@ -5105,7 +5127,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx011x01001xxxxxxxxxxxxx
                                                                  eorv.  */
-                                                              return 1367;
+                                                              return 1369;
                                                             }
                                                         }
                                                     }
@@ -5120,7 +5142,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx00xx10001xxxxxxxxxxxxx
                                                              sminv.  */
-                                                          return 1821;
+                                                          return 1823;
                                                         }
                                                       else
                                                         {
@@ -5128,7 +5150,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx01xx10001xxxxxxxxxxxxx
                                                              andv.  */
-                                                          return 1280;
+                                                          return 1282;
                                                         }
                                                     }
                                                   else
@@ -5137,7 +5159,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx0xxx11001xxxxxxxxxxxxx
                                                          uminv.  */
-                                                      return 1970;
+                                                      return 1972;
                                                     }
                                                 }
                                             }
@@ -5149,7 +5171,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x0xxxxx001xxxxxxxxxxxxx
                                                      ldff1sb.  */
-                                                  return 1651;
+                                                  return 1653;
                                                 }
                                               else
                                                 {
@@ -5157,7 +5179,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x0xxxxx001xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1662;
+                                                  return 1664;
                                                 }
                                             }
                                         }
@@ -5169,7 +5191,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx001xxxxxxxxxxxxx
                                                  ldff1sb.  */
-                                              return 1658;
+                                              return 1660;
                                             }
                                           else
                                             {
@@ -5177,7 +5199,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx001xxxxxxxxxxxxx
                                                  ldff1sh.  */
-                                              return 1668;
+                                              return 1670;
                                             }
                                         }
                                     }
@@ -5195,7 +5217,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0001xxxxx001xxxxxxxxxxxxx
                                                          and.  */
-                                                      return 1275;
+                                                      return 1277;
                                                     }
                                                   else
                                                     {
@@ -5203,7 +5225,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0011xxxxx001xxxxxxxxxxxxx
                                                          orr.  */
-                                                      return 1747;
+                                                      return 1749;
                                                     }
                                                 }
                                               else
@@ -5212,7 +5234,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x1xxxxx001xxxxxxxxxxxxx
                                                      prfh.  */
-                                                  return 1770;
+                                                  return 1772;
                                                 }
                                             }
                                           else
@@ -5221,7 +5243,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x1xxxxx001xxxxxxxxxxxxx
                                                  prfh.  */
-                                              return 1772;
+                                              return 1774;
                                             }
                                         }
                                       else
@@ -5236,7 +5258,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0101xxxxx001xxxxxxxxxxxxx
                                                          eor.  */
-                                                      return 1362;
+                                                      return 1364;
                                                     }
                                                   else
                                                     {
@@ -5244,7 +5266,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0111xxxxx001xxxxxxxxxxxxx
                                                          bic.  */
-                                                      return 1288;
+                                                      return 1290;
                                                     }
                                                 }
                                               else
@@ -5253,7 +5275,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x1xxxxx001xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1663;
+                                                  return 1665;
                                                 }
                                             }
                                           else
@@ -5262,7 +5284,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x1xxxxx001xxxxxxxxxxxxx
                                                  ldff1sh.  */
-                                              return 1669;
+                                              return 1671;
                                             }
                                         }
                                     }
@@ -5287,7 +5309,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0000101xxxxxxxxxxxxx
                                                                  sxtb.  */
-                                                              return 1943;
+                                                              return 1945;
                                                             }
                                                           else
                                                             {
@@ -5295,7 +5317,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1000101xxxxxxxxxxxxx
                                                                  cls.  */
-                                                              return 1308;
+                                                              return 1310;
                                                             }
                                                         }
                                                       else
@@ -5306,7 +5328,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0100101xxxxxxxxxxxxx
                                                                  sxtw.  */
-                                                              return 1945;
+                                                              return 1947;
                                                             }
                                                           else
                                                             {
@@ -5314,7 +5336,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1100101xxxxxxxxxxxxx
                                                                  fabs.  */
-                                                              return 1370;
+                                                              return 1372;
                                                             }
                                                         }
                                                     }
@@ -5328,7 +5350,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0010101xxxxxxxxxxxxx
                                                                  sxth.  */
-                                                              return 1944;
+                                                              return 1946;
                                                             }
                                                           else
                                                             {
@@ -5336,7 +5358,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1010101xxxxxxxxxxxxx
                                                                  cnt.  */
-                                                              return 1337;
+                                                              return 1339;
                                                             }
                                                         }
                                                       else
@@ -5347,7 +5369,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0110101xxxxxxxxxxxxx
                                                                  abs.  */
-                                                              return 1266;
+                                                              return 1268;
                                                             }
                                                           else
                                                             {
@@ -5355,7 +5377,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1110101xxxxxxxxxxxxx
                                                                  not.  */
-                                                              return 1744;
+                                                              return 1746;
                                                             }
                                                         }
                                                     }
@@ -5372,7 +5394,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0001101xxxxxxxxxxxxx
                                                                  uxtb.  */
-                                                              return 2006;
+                                                              return 2008;
                                                             }
                                                           else
                                                             {
@@ -5380,7 +5402,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1001101xxxxxxxxxxxxx
                                                                  clz.  */
-                                                              return 1309;
+                                                              return 1311;
                                                             }
                                                         }
                                                       else
@@ -5391,7 +5413,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0101101xxxxxxxxxxxxx
                                                                  uxtw.  */
-                                                              return 2008;
+                                                              return 2010;
                                                             }
                                                           else
                                                             {
@@ -5399,7 +5421,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1101101xxxxxxxxxxxxx
                                                                  fneg.  */
-                                                              return 1447;
+                                                              return 1449;
                                                             }
                                                         }
                                                     }
@@ -5413,7 +5435,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x0011101xxxxxxxxxxxxx
                                                                  uxth.  */
-                                                              return 2007;
+                                                              return 2009;
                                                             }
                                                           else
                                                             {
@@ -5421,7 +5443,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x0xx0x1011101xxxxxxxxxxxxx
                                                                  cnot.  */
-                                                              return 1336;
+                                                              return 1338;
                                                             }
                                                         }
                                                       else
@@ -5430,7 +5452,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx0xx111101xxxxxxxxxxxxx
                                                              neg.  */
-                                                          return 1741;
+                                                          return 1743;
                                                         }
                                                     }
                                                 }
@@ -5447,7 +5469,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0001xxxxx1010xxxxxxxxxxxx
                                                              adr.  */
-                                                          return 1272;
+                                                          return 1274;
                                                         }
                                                       else
                                                         {
@@ -5455,7 +5477,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0011xxxxx1010xxxxxxxxxxxx
                                                              adr.  */
-                                                          return 1273;
+                                                          return 1275;
                                                         }
                                                     }
                                                   else
@@ -5464,7 +5486,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x01x1xxxxx1010xxxxxxxxxxxx
                                                          adr.  */
-                                                      return 1274;
+                                                      return 1276;
                                                     }
                                                 }
                                               else
@@ -5477,7 +5499,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx101100xxxxxxxxxx
                                                              ftssel.  */
-                                                          return 1473;
+                                                          return 1475;
                                                         }
                                                       else
                                                         {
@@ -5485,7 +5507,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x0xx1xxxxx101110xxxxxxxxxx
                                                              fexpa.  */
-                                                          return 1417;
+                                                          return 1419;
                                                         }
                                                     }
                                                   else
@@ -5494,7 +5516,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x0xx1xxxxx1011x1xxxxxxxxxx
                                                          movprfx.  */
-                                                      return 1734;
+                                                      return 1736;
                                                     }
                                                 }
                                             }
@@ -5509,7 +5531,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x000xxxxxx101xxxxxxxxxxxxx
                                                      ldff1sb.  */
-                                                  return 1660;
+                                                  return 1662;
                                                 }
                                               else
                                                 {
@@ -5517,7 +5539,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x010xxxxxx101xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1672;
+                                                  return 1674;
                                                 }
                                             }
                                           else
@@ -5528,7 +5550,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x001xxxxxx101xxxxxxxxxxxxx
                                                      ld1rb.  */
-                                                  return 1528;
+                                                  return 1530;
                                                 }
                                               else
                                                 {
@@ -5536,7 +5558,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x011xxxxxx101xxxxxxxxxxxxx
                                                      ld1rh.  */
-                                                  return 1532;
+                                                  return 1534;
                                                 }
                                             }
                                         }
@@ -5551,7 +5573,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx101xxxxxxxxxxxxx
                                                  ldff1sb.  */
-                                              return 1659;
+                                              return 1661;
                                             }
                                           else
                                             {
@@ -5559,7 +5581,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx101xxxxxxxxxxxxx
                                                  ldff1sh.  */
-                                              return 1670;
+                                              return 1672;
                                             }
                                         }
                                       else
@@ -5572,7 +5594,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0001xxxxx101xxxxxxxxxxxxx
                                                      ldff1sb.  */
-                                                  return 1661;
+                                                  return 1663;
                                                 }
                                               else
                                                 {
@@ -5580,7 +5602,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0101xxxxx101xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1673;
+                                                  return 1675;
                                                 }
                                             }
                                           else
@@ -5591,7 +5613,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0011xxxxx101xxxxxxxxxxxxx
                                                      prfh.  */
-                                                  return 1773;
+                                                  return 1775;
                                                 }
                                               else
                                                 {
@@ -5599,7 +5621,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0111xxxxx101xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1671;
+                                                  return 1673;
                                                 }
                                             }
                                         }
@@ -5620,7 +5642,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x0xx0xxxxx011xxxxxxxxxxxxx
                                                  mls.  */
-                                              return 1733;
+                                              return 1735;
                                             }
                                           else
                                             {
@@ -5630,7 +5652,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x00x0xxxxx011xxxxxxxxxxxxx
                                                      ldff1b.  */
-                                                  return 1617;
+                                                  return 1619;
                                                 }
                                               else
                                                 {
@@ -5638,7 +5660,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x01x0xxxxx011xxxxxxxxxxxxx
                                                      ldff1h.  */
-                                                  return 1637;
+                                                  return 1639;
                                                 }
                                             }
                                         }
@@ -5650,7 +5672,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x0xxxxx011xxxxxxxxxxxxx
                                                  ldff1b.  */
-                                              return 1626;
+                                              return 1628;
                                             }
                                           else
                                             {
@@ -5658,7 +5680,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x0xxxxx011xxxxxxxxxxxxx
                                                  ldff1h.  */
-                                              return 1645;
+                                              return 1647;
                                             }
                                         }
                                     }
@@ -5672,7 +5694,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x00001x00x1xxxxx011xxxxxxxxxxxxx
                                                  prfd.  */
-                                              return 1763;
+                                              return 1765;
                                             }
                                           else
                                             {
@@ -5680,7 +5702,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x00x1xxxxx011xxxxxxxxxxxxx
                                                  prfd.  */
-                                              return 1765;
+                                              return 1767;
                                             }
                                         }
                                       else
@@ -5691,7 +5713,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x00001x01x1xxxxx011xxxxxxxxxxxxx
                                                  ldff1h.  */
-                                              return 1638;
+                                              return 1640;
                                             }
                                           else
                                             {
@@ -5699,7 +5721,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x01x1xxxxx011xxxxxxxxxxxxx
                                                  ldff1h.  */
-                                              return 1646;
+                                              return 1648;
                                             }
                                         }
                                     }
@@ -5716,7 +5738,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x0xx0xxxxx111xxxxxxxxxxxxx
                                                  msb.  */
-                                              return 1736;
+                                              return 1738;
                                             }
                                           else
                                             {
@@ -5736,7 +5758,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00010xxxx111000xxxxxxxxxx
                                                                          cntb.  */
-                                                                      return 1338;
+                                                                      return 1340;
                                                                     }
                                                                   else
                                                                     {
@@ -5744,7 +5766,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01010xxxx111000xxxxxxxxxx
                                                                          cntw.  */
-                                                                      return 1342;
+                                                                      return 1344;
                                                                     }
                                                                 }
                                                               else
@@ -5755,7 +5777,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00110xxxx111000xxxxxxxxxx
                                                                          cnth.  */
-                                                                      return 1340;
+                                                                      return 1342;
                                                                     }
                                                                   else
                                                                     {
@@ -5763,7 +5785,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01110xxxx111000xxxxxxxxxx
                                                                          cntd.  */
-                                                                      return 1339;
+                                                                      return 1341;
                                                                     }
                                                                 }
                                                             }
@@ -5777,7 +5799,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00011xxxx111000xxxxxxxxxx
                                                                          incb.  */
-                                                                      return 1474;
+                                                                      return 1476;
                                                                     }
                                                                   else
                                                                     {
@@ -5785,7 +5807,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01011xxxx111000xxxxxxxxxx
                                                                          incw.  */
-                                                                      return 1482;
+                                                                      return 1484;
                                                                     }
                                                                 }
                                                               else
@@ -5796,7 +5818,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00111xxxx111000xxxxxxxxxx
                                                                          inch.  */
-                                                                      return 1478;
+                                                                      return 1480;
                                                                     }
                                                                   else
                                                                     {
@@ -5804,7 +5826,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01111xxxx111000xxxxxxxxxx
                                                                          incd.  */
-                                                                      return 1476;
+                                                                      return 1478;
                                                                     }
                                                                 }
                                                             }
@@ -5821,7 +5843,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00010xxxx111100xxxxxxxxxx
                                                                          sqincb.  */
-                                                                      return 1841;
+                                                                      return 1843;
                                                                     }
                                                                   else
                                                                     {
@@ -5829,7 +5851,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01010xxxx111100xxxxxxxxxx
                                                                          sqincw.  */
-                                                                      return 1853;
+                                                                      return 1855;
                                                                     }
                                                                 }
                                                               else
@@ -5840,7 +5862,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00110xxxx111100xxxxxxxxxx
                                                                          sqinch.  */
-                                                                      return 1847;
+                                                                      return 1849;
                                                                     }
                                                                   else
                                                                     {
@@ -5848,7 +5870,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01110xxxx111100xxxxxxxxxx
                                                                          sqincd.  */
-                                                                      return 1844;
+                                                                      return 1846;
                                                                     }
                                                                 }
                                                             }
@@ -5862,7 +5884,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00011xxxx111100xxxxxxxxxx
                                                                          sqincb.  */
-                                                                      return 1840;
+                                                                      return 1842;
                                                                     }
                                                                   else
                                                                     {
@@ -5870,7 +5892,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01011xxxx111100xxxxxxxxxx
                                                                          sqincw.  */
-                                                                      return 1852;
+                                                                      return 1854;
                                                                     }
                                                                 }
                                                               else
@@ -5881,7 +5903,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00111xxxx111100xxxxxxxxxx
                                                                          sqinch.  */
-                                                                      return 1846;
+                                                                      return 1848;
                                                                     }
                                                                   else
                                                                     {
@@ -5889,7 +5911,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01111xxxx111100xxxxxxxxxx
                                                                          sqincd.  */
-                                                                      return 1843;
+                                                                      return 1845;
                                                                     }
                                                                 }
                                                             }
@@ -5907,7 +5929,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00010xxxx111x10xxxxxxxxxx
                                                                      sqdecb.  */
-                                                                  return 1827;
+                                                                  return 1829;
                                                                 }
                                                               else
                                                                 {
@@ -5915,7 +5937,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01010xxxx111x10xxxxxxxxxx
                                                                      sqdecw.  */
-                                                                  return 1839;
+                                                                  return 1841;
                                                                 }
                                                             }
                                                           else
@@ -5926,7 +5948,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00110xxxx111x10xxxxxxxxxx
                                                                      sqdech.  */
-                                                                  return 1833;
+                                                                  return 1835;
                                                                 }
                                                               else
                                                                 {
@@ -5934,7 +5956,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01110xxxx111x10xxxxxxxxxx
                                                                      sqdecd.  */
-                                                                  return 1830;
+                                                                  return 1832;
                                                                 }
                                                             }
                                                         }
@@ -5948,7 +5970,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00011xxxx111x10xxxxxxxxxx
                                                                      sqdecb.  */
-                                                                  return 1826;
+                                                                  return 1828;
                                                                 }
                                                               else
                                                                 {
@@ -5956,7 +5978,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01011xxxx111x10xxxxxxxxxx
                                                                      sqdecw.  */
-                                                                  return 1838;
+                                                                  return 1840;
                                                                 }
                                                             }
                                                           else
@@ -5967,7 +5989,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00111xxxx111x10xxxxxxxxxx
                                                                      sqdech.  */
-                                                                  return 1832;
+                                                                  return 1834;
                                                                 }
                                                               else
                                                                 {
@@ -5975,7 +5997,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01111xxxx111x10xxxxxxxxxx
                                                                      sqdecd.  */
-                                                                  return 1829;
+                                                                  return 1831;
                                                                 }
                                                             }
                                                         }
@@ -5995,7 +6017,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0001xxxxx111001xxxxxxxxxx
                                                                      decb.  */
-                                                                  return 1349;
+                                                                  return 1351;
                                                                 }
                                                               else
                                                                 {
@@ -6003,7 +6025,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0101xxxxx111001xxxxxxxxxx
                                                                      decw.  */
-                                                                  return 1357;
+                                                                  return 1359;
                                                                 }
                                                             }
                                                           else
@@ -6014,7 +6036,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0011xxxxx111001xxxxxxxxxx
                                                                      dech.  */
-                                                                  return 1353;
+                                                                  return 1355;
                                                                 }
                                                               else
                                                                 {
@@ -6022,7 +6044,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x0111xxxxx111001xxxxxxxxxx
                                                                      decd.  */
-                                                                  return 1351;
+                                                                  return 1353;
                                                                 }
                                                             }
                                                         }
@@ -6038,7 +6060,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00010xxxx111101xxxxxxxxxx
                                                                          uqincb.  */
-                                                                      return 1988;
+                                                                      return 1990;
                                                                     }
                                                                   else
                                                                     {
@@ -6046,7 +6068,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01010xxxx111101xxxxxxxxxx
                                                                          uqincw.  */
-                                                                      return 2000;
+                                                                      return 2002;
                                                                     }
                                                                 }
                                                               else
@@ -6057,7 +6079,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00110xxxx111101xxxxxxxxxx
                                                                          uqinch.  */
-                                                                      return 1994;
+                                                                      return 1996;
                                                                     }
                                                                   else
                                                                     {
@@ -6065,7 +6087,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01110xxxx111101xxxxxxxxxx
                                                                          uqincd.  */
-                                                                      return 1991;
+                                                                      return 1993;
                                                                     }
                                                                 }
                                                             }
@@ -6079,7 +6101,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00011xxxx111101xxxxxxxxxx
                                                                          uqincb.  */
-                                                                      return 1989;
+                                                                      return 1991;
                                                                     }
                                                                   else
                                                                     {
@@ -6087,7 +6109,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01011xxxx111101xxxxxxxxxx
                                                                          uqincw.  */
-                                                                      return 2001;
+                                                                      return 2003;
                                                                     }
                                                                 }
                                                               else
@@ -6098,7 +6120,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x00111xxxx111101xxxxxxxxxx
                                                                          uqinch.  */
-                                                                      return 1995;
+                                                                      return 1997;
                                                                     }
                                                                   else
                                                                     {
@@ -6106,7 +6128,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x01111xxxx111101xxxxxxxxxx
                                                                          uqincd.  */
-                                                                      return 1992;
+                                                                      return 1994;
                                                                     }
                                                                 }
                                                             }
@@ -6124,7 +6146,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00010xxxx111x11xxxxxxxxxx
                                                                      uqdecb.  */
-                                                                  return 1974;
+                                                                  return 1976;
                                                                 }
                                                               else
                                                                 {
@@ -6132,7 +6154,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01010xxxx111x11xxxxxxxxxx
                                                                      uqdecw.  */
-                                                                  return 1986;
+                                                                  return 1988;
                                                                 }
                                                             }
                                                           else
@@ -6143,7 +6165,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00110xxxx111x11xxxxxxxxxx
                                                                      uqdech.  */
-                                                                  return 1980;
+                                                                  return 1982;
                                                                 }
                                                               else
                                                                 {
@@ -6151,7 +6173,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01110xxxx111x11xxxxxxxxxx
                                                                      uqdecd.  */
-                                                                  return 1977;
+                                                                  return 1979;
                                                                 }
                                                             }
                                                         }
@@ -6165,7 +6187,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00011xxxx111x11xxxxxxxxxx
                                                                      uqdecb.  */
-                                                                  return 1975;
+                                                                  return 1977;
                                                                 }
                                                               else
                                                                 {
@@ -6173,7 +6195,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01011xxxx111x11xxxxxxxxxx
                                                                      uqdecw.  */
-                                                                  return 1987;
+                                                                  return 1989;
                                                                 }
                                                             }
                                                           else
@@ -6184,7 +6206,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x00111xxxx111x11xxxxxxxxxx
                                                                      uqdech.  */
-                                                                  return 1981;
+                                                                  return 1983;
                                                                 }
                                                               else
                                                                 {
@@ -6192,7 +6214,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x01111xxxx111x11xxxxxxxxxx
                                                                      uqdecd.  */
-                                                                  return 1978;
+                                                                  return 1980;
                                                                 }
                                                             }
                                                         }
@@ -6212,7 +6234,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0000xxxxx111xxxxxxxxxxxxx
                                                          prfb.  */
-                                                      return 1760;
+                                                      return 1762;
                                                     }
                                                   else
                                                     {
@@ -6220,7 +6242,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0100xxxxx111xxxxxxxxxxxxx
                                                          prfh.  */
-                                                      return 1774;
+                                                      return 1776;
                                                     }
                                                 }
                                               else
@@ -6231,7 +6253,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0001xxxxx111xxxxxxxxxxxxx
                                                          ldff1b.  */
-                                                      return 1628;
+                                                      return 1630;
                                                     }
                                                   else
                                                     {
@@ -6239,7 +6261,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x0101xxxxx111xxxxxxxxxxxxx
                                                          ldff1h.  */
-                                                      return 1649;
+                                                      return 1651;
                                                     }
                                                 }
                                             }
@@ -6251,7 +6273,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x001xxxxxx111xxxxxxxxxxxxx
                                                      ld1rb.  */
-                                                  return 1530;
+                                                  return 1532;
                                                 }
                                               else
                                                 {
@@ -6259,7 +6281,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x011xxxxxx111xxxxxxxxxxxxx
                                                      ld1rh.  */
-                                                  return 1534;
+                                                  return 1536;
                                                 }
                                             }
                                         }
@@ -6276,7 +6298,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0000xxxxx111xxxxxxxxxxxxx
                                                      prfb.  */
-                                                  return 1762;
+                                                  return 1764;
                                                 }
                                               else
                                                 {
@@ -6284,7 +6306,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0100xxxxx111xxxxxxxxxxxxx
                                                      prfh.  */
-                                                  return 1776;
+                                                  return 1778;
                                                 }
                                             }
                                           else
@@ -6295,7 +6317,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0010xxxxx111xxxxxxxxxxxxx
                                                      ldff1b.  */
-                                                  return 1627;
+                                                  return 1629;
                                                 }
                                               else
                                                 {
@@ -6303,7 +6325,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0110xxxxx111xxxxxxxxxxxxx
                                                      ldff1h.  */
-                                                  return 1647;
+                                                  return 1649;
                                                 }
                                             }
                                         }
@@ -6317,7 +6339,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0001xxxxx111xxxxxxxxxxxxx
                                                      ldff1b.  */
-                                                  return 1629;
+                                                  return 1631;
                                                 }
                                               else
                                                 {
@@ -6325,7 +6347,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0101xxxxx111xxxxxxxxxxxxx
                                                      ldff1h.  */
-                                                  return 1650;
+                                                  return 1652;
                                                 }
                                             }
                                           else
@@ -6336,7 +6358,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0011xxxxx111xxxxxxxxxxxxx
                                                      prfd.  */
-                                                  return 1766;
+                                                  return 1768;
                                                 }
                                               else
                                                 {
@@ -6344,7 +6366,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x0111xxxxx111xxxxxxxxxxxxx
                                                      ldff1h.  */
-                                                  return 1648;
+                                                  return 1650;
                                                 }
                                             }
                                         }
@@ -6373,7 +6395,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx000xxxxxxxx0xxxx
                                                      cmphs.  */
-                                                  return 1322;
+                                                  return 1324;
                                                 }
                                               else
                                                 {
@@ -6381,7 +6403,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx000xxxxxxxx1xxxx
                                                      cmphi.  */
-                                                  return 1319;
+                                                  return 1321;
                                                 }
                                             }
                                           else
@@ -6392,7 +6414,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x00x0xxxxx000xxxxxxxxxxxxx
                                                      ld1rqb.  */
-                                                  return 1536;
+                                                  return 1538;
                                                 }
                                               else
                                                 {
@@ -6400,7 +6422,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x01x0xxxxx000xxxxxxxxxxxxx
                                                      ld1rqh.  */
-                                                  return 1540;
+                                                  return 1542;
                                                 }
                                             }
                                         }
@@ -6414,7 +6436,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx010xxxxxxxx0xxxx
                                                      cmpge.  */
-                                                  return 1313;
+                                                  return 1315;
                                                 }
                                               else
                                                 {
@@ -6422,7 +6444,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx010xxxxxxxx1xxxx
                                                      cmpgt.  */
-                                                  return 1316;
+                                                  return 1318;
                                                 }
                                             }
                                           else
@@ -6435,7 +6457,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0000xxxxx010xxxxxxxxxxxxx
                                                          ld1b.  */
-                                                      return 1494;
+                                                      return 1496;
                                                     }
                                                   else
                                                     {
@@ -6443,7 +6465,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0100xxxxx010xxxxxxxxxxxxx
                                                          ld1sw.  */
-                                                      return 1574;
+                                                      return 1576;
                                                     }
                                                 }
                                               else
@@ -6454,7 +6476,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0010xxxxx010xxxxxxxxxxxxx
                                                          ld1b.  */
-                                                      return 1496;
+                                                      return 1498;
                                                     }
                                                   else
                                                     {
@@ -6462,7 +6484,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0110xxxxx010xxxxxxxxxxxxx
                                                          ld1h.  */
-                                                      return 1516;
+                                                      return 1518;
                                                     }
                                                 }
                                             }
@@ -6480,7 +6502,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx001xxxxxxxx0xxxx
                                                      cmpeq.  */
-                                                  return 1310;
+                                                  return 1312;
                                                 }
                                               else
                                                 {
@@ -6488,7 +6510,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx001xxxxxxxx1xxxx
                                                      cmpne.  */
-                                                  return 1333;
+                                                  return 1335;
                                                 }
                                             }
                                           else
@@ -6499,7 +6521,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x00x0xxxxx001xxxxxxxxxxxxx
                                                      ld1rqb.  */
-                                                  return 1535;
+                                                  return 1537;
                                                 }
                                               else
                                                 {
@@ -6507,7 +6529,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x01x0xxxxx001xxxxxxxxxxxxx
                                                      ld1rqh.  */
-                                                  return 1539;
+                                                  return 1541;
                                                 }
                                             }
                                         }
@@ -6521,7 +6543,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx011xxxxxxxx0xxxx
                                                      cmplt.  */
-                                                  return 1331;
+                                                  return 1333;
                                                 }
                                               else
                                                 {
@@ -6529,7 +6551,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx011xxxxxxxx1xxxx
                                                      cmple.  */
-                                                  return 1325;
+                                                  return 1327;
                                                 }
                                             }
                                           else
@@ -6542,7 +6564,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0000xxxxx011xxxxxxxxxxxxx
                                                          ldff1b.  */
-                                                      return 1618;
+                                                      return 1620;
                                                     }
                                                   else
                                                     {
@@ -6550,7 +6572,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0100xxxxx011xxxxxxxxxxxxx
                                                          ldff1sw.  */
-                                                      return 1674;
+                                                      return 1676;
                                                     }
                                                 }
                                               else
@@ -6561,7 +6583,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0010xxxxx011xxxxxxxxxxxxx
                                                          ldff1b.  */
-                                                      return 1622;
+                                                      return 1624;
                                                     }
                                                   else
                                                     {
@@ -6569,7 +6591,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0110xxxxx011xxxxxxxxxxxxx
                                                          ldff1h.  */
-                                                      return 1641;
+                                                      return 1643;
                                                     }
                                                 }
                                             }
@@ -6584,7 +6606,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                          10987654321098765432109876543210
                                          011001x0xx0xxxxx0xxxxxxxxxxxxxxx
                                          fcmla.  */
-                                      return 1379;
+                                      return 1381;
                                     }
                                   else
                                     {
@@ -6596,7 +6618,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  111001x0x00xxxxx0x0xxxxxxxxxxxxx
                                                  st1b.  */
-                                              return 1856;
+                                              return 1858;
                                             }
                                           else
                                             {
@@ -6606,7 +6628,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0010xxxxx0x0xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1860;
+                                                  return 1862;
                                                 }
                                               else
                                                 {
@@ -6614,7 +6636,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0110xxxxx0x0xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1881;
+                                                  return 1883;
                                                 }
                                             }
                                         }
@@ -6628,7 +6650,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0000xxxxx0x1xxxxxxxxxxxxx
                                                      stnt1b.  */
-                                                  return 1926;
+                                                  return 1928;
                                                 }
                                               else
                                                 {
@@ -6636,7 +6658,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0100xxxxx0x1xxxxxxxxxxxxx
                                                      stnt1h.  */
-                                                  return 1930;
+                                                  return 1932;
                                                 }
                                             }
                                           else
@@ -6647,7 +6669,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0010xxxxx0x1xxxxxxxxxxxxx
                                                      st3b.  */
-                                                  return 1910;
+                                                  return 1912;
                                                 }
                                               else
                                                 {
@@ -6655,7 +6677,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0110xxxxx0x1xxxxxxxxxxxxx
                                                      st3h.  */
-                                                  return 1914;
+                                                  return 1916;
                                                 }
                                             }
                                         }
@@ -6676,7 +6698,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x0xx0xxxxx100xxxxxxxx0xxxx
                                                  cmpge.  */
-                                              return 1314;
+                                              return 1316;
                                             }
                                           else
                                             {
@@ -6684,7 +6706,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x0xx0xxxxx100xxxxxxxx1xxxx
                                                  cmpgt.  */
-                                              return 1317;
+                                              return 1319;
                                             }
                                         }
                                       else
@@ -6697,7 +6719,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx110xxxxxxxx0xxxx
                                                      cmphs.  */
-                                                  return 1323;
+                                                  return 1325;
                                                 }
                                               else
                                                 {
@@ -6705,7 +6727,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx110xxxxxxxx1xxxx
                                                      cmphi.  */
-                                                  return 1320;
+                                                  return 1322;
                                                 }
                                             }
                                           else
@@ -6718,7 +6740,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0000xxxxx110xxxxxxxxxxxxx
                                                          ldnt1b.  */
-                                                      return 1709;
+                                                      return 1711;
                                                     }
                                                   else
                                                     {
@@ -6726,7 +6748,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0100xxxxx110xxxxxxxxxxxxx
                                                          ldnt1h.  */
-                                                      return 1713;
+                                                      return 1715;
                                                     }
                                                 }
                                               else
@@ -6737,7 +6759,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0010xxxxx110xxxxxxxxxxxxx
                                                          ld3b.  */
-                                                      return 1601;
+                                                      return 1603;
                                                     }
                                                   else
                                                     {
@@ -6745,7 +6767,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0110xxxxx110xxxxxxxxxxxxx
                                                          ld3h.  */
-                                                      return 1605;
+                                                      return 1607;
                                                     }
                                                 }
                                             }
@@ -6759,7 +6781,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              011001x0xx0xxxxx1x0xxxxxxxxxxxxx
                                              fcadd.  */
-                                          return 1378;
+                                          return 1380;
                                         }
                                       else
                                         {
@@ -6771,7 +6793,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0000xxxxx1x0xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1857;
+                                                  return 1859;
                                                 }
                                               else
                                                 {
@@ -6779,7 +6801,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0100xxxxx1x0xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1876;
+                                                  return 1878;
                                                 }
                                             }
                                           else
@@ -6790,7 +6812,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0010xxxxx1x0xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1861;
+                                                  return 1863;
                                                 }
                                               else
                                                 {
@@ -6798,7 +6820,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x0110xxxxx1x0xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1882;
+                                                  return 1884;
                                                 }
                                             }
                                         }
@@ -6818,7 +6840,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx101xxxxxxxx0xxxx
                                                      cmpeq.  */
-                                                  return 1311;
+                                                  return 1313;
                                                 }
                                               else
                                                 {
@@ -6826,7 +6848,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx101xxxxxxxx1xxxx
                                                      cmpne.  */
-                                                  return 1334;
+                                                  return 1336;
                                                 }
                                             }
                                           else
@@ -6841,7 +6863,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x00000xxxx101xxxxxxxxxxxxx
                                                              ld1b.  */
-                                                          return 1501;
+                                                          return 1503;
                                                         }
                                                       else
                                                         {
@@ -6849,7 +6871,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x01000xxxx101xxxxxxxxxxxxx
                                                              ld1sw.  */
-                                                          return 1579;
+                                                          return 1581;
                                                         }
                                                     }
                                                   else
@@ -6860,7 +6882,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x00100xxxx101xxxxxxxxxxxxx
                                                              ld1b.  */
-                                                          return 1503;
+                                                          return 1505;
                                                         }
                                                       else
                                                         {
@@ -6868,7 +6890,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x01100xxxx101xxxxxxxxxxxxx
                                                              ld1h.  */
-                                                          return 1524;
+                                                          return 1526;
                                                         }
                                                     }
                                                 }
@@ -6882,7 +6904,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x00001xxxx101xxxxxxxxxxxxx
                                                              ldnf1b.  */
-                                                          return 1693;
+                                                          return 1695;
                                                         }
                                                       else
                                                         {
@@ -6890,7 +6912,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x01001xxxx101xxxxxxxxxxxxx
                                                              ldnf1sw.  */
-                                                          return 1706;
+                                                          return 1708;
                                                         }
                                                     }
                                                   else
@@ -6901,7 +6923,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x00101xxxx101xxxxxxxxxxxxx
                                                              ldnf1b.  */
-                                                          return 1695;
+                                                          return 1697;
                                                         }
                                                       else
                                                         {
@@ -6909,7 +6931,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              101001x01101xxxx101xxxxxxxxxxxxx
                                                              ldnf1h.  */
-                                                          return 1699;
+                                                          return 1701;
                                                         }
                                                     }
                                                 }
@@ -6925,7 +6947,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0000xxxxx101xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1858;
+                                                  return 1860;
                                                 }
                                               else
                                                 {
@@ -6933,7 +6955,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0100xxxxx101xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1877;
+                                                  return 1879;
                                                 }
                                             }
                                           else
@@ -6944,7 +6966,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0010xxxxx101xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1865;
+                                                  return 1867;
                                                 }
                                               else
                                                 {
@@ -6952,7 +6974,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0110xxxxx101xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1886;
+                                                  return 1888;
                                                 }
                                             }
                                         }
@@ -6969,7 +6991,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx111xxxxxxxx0xxxx
                                                      cmplo.  */
-                                                  return 1327;
+                                                  return 1329;
                                                 }
                                               else
                                                 {
@@ -6977,7 +6999,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x0xx0xxxxx111xxxxxxxx1xxxx
                                                      cmpls.  */
-                                                  return 1329;
+                                                  return 1331;
                                                 }
                                             }
                                           else
@@ -6990,7 +7012,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0000xxxxx111xxxxxxxxxxxxx
                                                          ldnt1b.  */
-                                                      return 1710;
+                                                      return 1712;
                                                     }
                                                   else
                                                     {
@@ -6998,7 +7020,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0100xxxxx111xxxxxxxxxxxxx
                                                          ldnt1h.  */
-                                                      return 1714;
+                                                      return 1716;
                                                     }
                                                 }
                                               else
@@ -7009,7 +7031,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0010xxxxx111xxxxxxxxxxxxx
                                                          ld3b.  */
-                                                      return 1602;
+                                                      return 1604;
                                                     }
                                                   else
                                                     {
@@ -7017,7 +7039,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0110xxxxx111xxxxxxxxxxxxx
                                                          ld3h.  */
-                                                      return 1606;
+                                                      return 1608;
                                                     }
                                                 }
                                             }
@@ -7032,7 +7054,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0x000xxxx111xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1863;
+                                                  return 1865;
                                                 }
                                               else
                                                 {
@@ -7042,7 +7064,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00100xxxx111xxxxxxxxxxxxx
                                                          st1b.  */
-                                                      return 1866;
+                                                      return 1868;
                                                     }
                                                   else
                                                     {
@@ -7050,7 +7072,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01100xxxx111xxxxxxxxxxxxx
                                                          st1h.  */
-                                                      return 1887;
+                                                      return 1889;
                                                     }
                                                 }
                                             }
@@ -7064,7 +7086,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00001xxxx111xxxxxxxxxxxxx
                                                          stnt1b.  */
-                                                      return 1927;
+                                                      return 1929;
                                                     }
                                                   else
                                                     {
@@ -7072,7 +7094,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01001xxxx111xxxxxxxxxxxxx
                                                          stnt1h.  */
-                                                      return 1931;
+                                                      return 1933;
                                                     }
                                                 }
                                               else
@@ -7083,7 +7105,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00101xxxx111xxxxxxxxxxxxx
                                                          st3b.  */
-                                                      return 1911;
+                                                      return 1913;
                                                     }
                                                   else
                                                     {
@@ -7091,7 +7113,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01101xxxx111xxxxxxxxxxxxx
                                                          st3h.  */
-                                                      return 1915;
+                                                      return 1917;
                                                     }
                                                 }
                                             }
@@ -7114,7 +7136,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              001001x0xx1xxxxxxx0xxxxxxxx0xxxx
                                              cmphs.  */
-                                          return 1324;
+                                          return 1326;
                                         }
                                       else
                                         {
@@ -7122,7 +7144,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              001001x0xx1xxxxxxx0xxxxxxxx1xxxx
                                              cmphi.  */
-                                          return 1321;
+                                          return 1323;
                                         }
                                     }
                                   else
@@ -7137,7 +7159,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0001xxxxx0x0xxxxxxxxxxxxx
                                                      ld1b.  */
-                                                  return 1495;
+                                                  return 1497;
                                                 }
                                               else
                                                 {
@@ -7145,7 +7167,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0101xxxxx0x0xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1515;
+                                                  return 1517;
                                                 }
                                             }
                                           else
@@ -7156,7 +7178,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0011xxxxx0x0xxxxxxxxxxxxx
                                                      ld1b.  */
-                                                  return 1497;
+                                                  return 1499;
                                                 }
                                               else
                                                 {
@@ -7164,7 +7186,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0111xxxxx0x0xxxxxxxxxxxxx
                                                      ld1h.  */
-                                                  return 1517;
+                                                  return 1519;
                                                 }
                                             }
                                         }
@@ -7178,7 +7200,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0001xxxxx1x0xxxxxxxxxxxxx
                                                      ld2b.  */
-                                                  return 1593;
+                                                  return 1595;
                                                 }
                                               else
                                                 {
@@ -7186,7 +7208,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0101xxxxx1x0xxxxxxxxxxxxx
                                                      ld2h.  */
-                                                  return 1597;
+                                                  return 1599;
                                                 }
                                             }
                                           else
@@ -7197,7 +7219,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0011xxxxx1x0xxxxxxxxxxxxx
                                                      ld4b.  */
-                                                  return 1609;
+                                                  return 1611;
                                                 }
                                               else
                                                 {
@@ -7205,7 +7227,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x0111xxxxx1x0xxxxxxxxxxxxx
                                                      ld4h.  */
-                                                  return 1613;
+                                                  return 1615;
                                                 }
                                             }
                                         }
@@ -7227,7 +7249,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00x1xxxxx0000x0xxxxxxxxxx
                                                          fmla.  */
-                                                      return 1432;
+                                                      return 1434;
                                                     }
                                                   else
                                                     {
@@ -7237,7 +7259,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x0101xxxxx0000x0xxxxxxxxxx
                                                              fmla.  */
-                                                          return 1433;
+                                                          return 1435;
                                                         }
                                                       else
                                                         {
@@ -7245,7 +7267,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x0111xxxxx0000x0xxxxxxxxxx
                                                              fmla.  */
-                                                          return 1434;
+                                                          return 1436;
                                                         }
                                                     }
                                                 }
@@ -7257,7 +7279,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00x1xxxxx0000x1xxxxxxxxxx
                                                          fmls.  */
-                                                      return 1436;
+                                                      return 1438;
                                                     }
                                                   else
                                                     {
@@ -7267,7 +7289,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x0101xxxxx0000x1xxxxxxxxxx
                                                              fmls.  */
-                                                          return 1437;
+                                                          return 1439;
                                                         }
                                                       else
                                                         {
@@ -7275,7 +7297,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x0111xxxxx0000x1xxxxxxxxxx
                                                              fmls.  */
-                                                          return 1438;
+                                                          return 1440;
                                                         }
                                                     }
                                                 }
@@ -7288,7 +7310,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0x01xxxxx0001xxxxxxxxxxxx
                                                      fcmla.  */
-                                                  return 1380;
+                                                  return 1382;
                                                 }
                                               else
                                                 {
@@ -7296,7 +7318,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0x11xxxxx0001xxxxxxxxxxxx
                                                      fcmla.  */
-                                                  return 1381;
+                                                  return 1383;
                                                 }
                                             }
                                         }
@@ -7310,7 +7332,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0001xxxxx010xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1859;
+                                                  return 1861;
                                                 }
                                               else
                                                 {
@@ -7318,7 +7340,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0101xxxxx010xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1878;
+                                                  return 1880;
                                                 }
                                             }
                                           else
@@ -7329,7 +7351,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0011xxxxx010xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1862;
+                                                  return 1864;
                                                 }
                                               else
                                                 {
@@ -7337,7 +7359,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0111xxxxx010xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1883;
+                                                  return 1885;
                                                 }
                                             }
                                         }
@@ -7350,7 +7372,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x11001x0x01xxxxx1x0xxxxxxxxxxxxx
                                              st1h.  */
-                                          return 1879;
+                                          return 1881;
                                         }
                                       else
                                         {
@@ -7358,7 +7380,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x11001x0x11xxxxx1x0xxxxxxxxxxxxx
                                              st1h.  */
-                                          return 1884;
+                                          return 1886;
                                         }
                                     }
                                 }
@@ -7375,7 +7397,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              001001x0xx1xxxxxxx1xxxxxxxx0xxxx
                                              cmplo.  */
-                                          return 1328;
+                                          return 1330;
                                         }
                                       else
                                         {
@@ -7383,7 +7405,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              001001x0xx1xxxxxxx1xxxxxxxx1xxxx
                                              cmpls.  */
-                                          return 1330;
+                                          return 1332;
                                         }
                                     }
                                   else
@@ -7400,7 +7422,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x00010xxxxx01xxxxxxxxxxxxx
                                                          ld1b.  */
-                                                      return 1502;
+                                                      return 1504;
                                                     }
                                                   else
                                                     {
@@ -7408,7 +7430,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x01010xxxxx01xxxxxxxxxxxxx
                                                          ld1h.  */
-                                                      return 1523;
+                                                      return 1525;
                                                     }
                                                 }
                                               else
@@ -7419,7 +7441,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x00110xxxxx01xxxxxxxxxxxxx
                                                          ld1b.  */
-                                                      return 1504;
+                                                      return 1506;
                                                     }
                                                   else
                                                     {
@@ -7427,7 +7449,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x01110xxxxx01xxxxxxxxxxxxx
                                                          ld1h.  */
-                                                      return 1525;
+                                                      return 1527;
                                                     }
                                                 }
                                             }
@@ -7441,7 +7463,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x00011xxxxx01xxxxxxxxxxxxx
                                                          ldnf1b.  */
-                                                      return 1694;
+                                                      return 1696;
                                                     }
                                                   else
                                                     {
@@ -7449,7 +7471,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x01011xxxxx01xxxxxxxxxxxxx
                                                          ldnf1h.  */
-                                                      return 1698;
+                                                      return 1700;
                                                     }
                                                 }
                                               else
@@ -7460,7 +7482,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x00111xxxxx01xxxxxxxxxxxxx
                                                          ldnf1b.  */
-                                                      return 1696;
+                                                      return 1698;
                                                     }
                                                   else
                                                     {
@@ -7468,7 +7490,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x01111xxxxx01xxxxxxxxxxxxx
                                                          ldnf1h.  */
-                                                      return 1700;
+                                                      return 1702;
                                                     }
                                                 }
                                             }
@@ -7485,7 +7507,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0001xxxxx011xxxxxxxxxxxxx
                                                          ldff1b.  */
-                                                      return 1620;
+                                                      return 1622;
                                                     }
                                                   else
                                                     {
@@ -7493,7 +7515,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0101xxxxx011xxxxxxxxxxxxx
                                                          ldff1h.  */
-                                                      return 1639;
+                                                      return 1641;
                                                     }
                                                 }
                                               else
@@ -7504,7 +7526,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0011xxxxx011xxxxxxxxxxxxx
                                                          ldff1b.  */
-                                                      return 1624;
+                                                      return 1626;
                                                     }
                                                   else
                                                     {
@@ -7512,7 +7534,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0111xxxxx011xxxxxxxxxxxxx
                                                          ldff1h.  */
-                                                      return 1643;
+                                                      return 1645;
                                                     }
                                                 }
                                             }
@@ -7526,7 +7548,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0001xxxxx111xxxxxxxxxxxxx
                                                          ld2b.  */
-                                                      return 1594;
+                                                      return 1596;
                                                     }
                                                   else
                                                     {
@@ -7534,7 +7556,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0101xxxxx111xxxxxxxxxxxxx
                                                          ld2h.  */
-                                                      return 1598;
+                                                      return 1600;
                                                     }
                                                 }
                                               else
@@ -7545,7 +7567,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0011xxxxx111xxxxxxxxxxxxx
                                                          ld4b.  */
-                                                      return 1610;
+                                                      return 1612;
                                                     }
                                                   else
                                                     {
@@ -7553,7 +7575,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x0111xxxxx111xxxxxxxxxxxxx
                                                          ld4h.  */
-                                                      return 1614;
+                                                      return 1616;
                                                     }
                                                 }
                                             }
@@ -7572,7 +7594,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x11001x00x1xxxxx001xxxxxxxxxxxxx
                                                  fmul.  */
-                                              return 1443;
+                                              return 1445;
                                             }
                                           else
                                             {
@@ -7582,7 +7604,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0101xxxxx001xxxxxxxxxxxxx
                                                      fmul.  */
-                                                  return 1444;
+                                                  return 1446;
                                                 }
                                               else
                                                 {
@@ -7590,7 +7612,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0111xxxxx001xxxxxxxxxxxxx
                                                      fmul.  */
-                                                  return 1445;
+                                                  return 1447;
                                                 }
                                             }
                                         }
@@ -7602,7 +7624,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x11001x0x01xxxxx101xxxxxxxxxxxxx
                                                  st1h.  */
-                                              return 1880;
+                                              return 1882;
                                             }
                                           else
                                             {
@@ -7612,7 +7634,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0011xxxxx101xxxxxxxxxxxxx
                                                      st1b.  */
-                                                  return 1867;
+                                                  return 1869;
                                                 }
                                               else
                                                 {
@@ -7620,7 +7642,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0111xxxxx101xxxxxxxxxxxxx
                                                      st1h.  */
-                                                  return 1888;
+                                                  return 1890;
                                                 }
                                             }
                                         }
@@ -7637,7 +7659,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0001xxxxx011xxxxxxxxxxxxx
                                                      st2b.  */
-                                                  return 1902;
+                                                  return 1904;
                                                 }
                                               else
                                                 {
@@ -7645,7 +7667,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0101xxxxx011xxxxxxxxxxxxx
                                                      st2h.  */
-                                                  return 1906;
+                                                  return 1908;
                                                 }
                                             }
                                           else
@@ -7656,7 +7678,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0011xxxxx011xxxxxxxxxxxxx
                                                      st4b.  */
-                                                  return 1918;
+                                                  return 1920;
                                                 }
                                               else
                                                 {
@@ -7664,7 +7686,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x11001x0111xxxxx011xxxxxxxxxxxxx
                                                      st4h.  */
-                                                  return 1922;
+                                                  return 1924;
                                                 }
                                             }
                                         }
@@ -7680,7 +7702,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00010xxxx111xxxxxxxxxxxxx
                                                          st1b.  */
-                                                      return 1864;
+                                                      return 1866;
                                                     }
                                                   else
                                                     {
@@ -7688,7 +7710,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01010xxxx111xxxxxxxxxxxxx
                                                          st1h.  */
-                                                      return 1885;
+                                                      return 1887;
                                                     }
                                                 }
                                               else
@@ -7699,7 +7721,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00110xxxx111xxxxxxxxxxxxx
                                                          st1b.  */
-                                                      return 1868;
+                                                      return 1870;
                                                     }
                                                   else
                                                     {
@@ -7707,7 +7729,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01110xxxx111xxxxxxxxxxxxx
                                                          st1h.  */
-                                                      return 1889;
+                                                      return 1891;
                                                     }
                                                 }
                                             }
@@ -7721,7 +7743,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00011xxxx111xxxxxxxxxxxxx
                                                          st2b.  */
-                                                      return 1903;
+                                                      return 1905;
                                                     }
                                                   else
                                                     {
@@ -7729,7 +7751,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01011xxxx111xxxxxxxxxxxxx
                                                          st2h.  */
-                                                      return 1907;
+                                                      return 1909;
                                                     }
                                                 }
                                               else
@@ -7740,7 +7762,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x00111xxxx111xxxxxxxxxxxxx
                                                          st4b.  */
-                                                      return 1919;
+                                                      return 1921;
                                                     }
                                                   else
                                                     {
@@ -7748,7 +7770,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x01111xxxx111xxxxxxxxxxxxx
                                                          st4h.  */
-                                                      return 1923;
+                                                      return 1925;
                                                     }
                                                 }
                                             }
@@ -7779,7 +7801,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x10000xxxxxxxxxxxxxxxxxxxx
                                                  orr.  */
-                                              return 1748;
+                                              return 1750;
                                             }
                                           else
                                             {
@@ -7787,7 +7809,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x11000xxxxxxxxxxxxxxxxxxxx
                                                  and.  */
-                                              return 1276;
+                                              return 1278;
                                             }
                                         }
                                       else
@@ -7798,7 +7820,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x10100xxxxxxxxxxxxxxxxxxxx
                                                  eor.  */
-                                              return 1363;
+                                              return 1365;
                                             }
                                           else
                                             {
@@ -7806,7 +7828,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x11100xxxxxxxxxxxxxxxxxxxx
                                                  dupm.  */
-                                              return 1361;
+                                              return 1363;
                                             }
                                         }
                                     }
@@ -7818,7 +7840,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              000001x1xx01xxxx0xxxxxxxxxxxxxxx
                                              cpy.  */
-                                          return 1346;
+                                          return 1348;
                                         }
                                       else
                                         {
@@ -7826,7 +7848,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              000001x1xx01xxxx1xxxxxxxxxxxxxxx
                                              fcpy.  */
-                                          return 1393;
+                                          return 1395;
                                         }
                                     }
                                 }
@@ -7842,7 +7864,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  000001x1xx1xxxxx000xxxxxxxxxxxxx
                                                  ext.  */
-                                              return 1368;
+                                              return 1370;
                                             }
                                           else
                                             {
@@ -7858,7 +7880,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x0000100xxxxxxxxxxxxx
                                                                  cpy.  */
-                                                              return 1344;
+                                                              return 1346;
                                                             }
                                                           else
                                                             {
@@ -7866,7 +7888,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x1000100xxxxxxxxxxxxx
                                                                  clasta.  */
-                                                              return 1302;
+                                                              return 1304;
                                                             }
                                                         }
                                                       else
@@ -7877,7 +7899,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x0100100xxxxxxxxxxxxx
                                                                  revb.  */
-                                                              return 1796;
+                                                              return 1798;
                                                             }
                                                           else
                                                             {
@@ -7885,7 +7907,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x1100100xxxxxxxxxxxxx
                                                                  splice.  */
-                                                              return 1823;
+                                                              return 1825;
                                                             }
                                                         }
                                                     }
@@ -7899,7 +7921,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x0010100xxxxxxxxxxxxx
                                                                  lasta.  */
-                                                              return 1490;
+                                                              return 1492;
                                                             }
                                                           else
                                                             {
@@ -7907,7 +7929,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x1010100xxxxxxxxxxxxx
                                                                  clasta.  */
-                                                              return 1303;
+                                                              return 1305;
                                                             }
                                                         }
                                                       else
@@ -7916,7 +7938,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xx110100xxxxxxxxxxxxx
                                                              revw.  */
-                                                          return 1798;
+                                                          return 1800;
                                                         }
                                                     }
                                                 }
@@ -7932,7 +7954,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x0001100xxxxxxxxxxxxx
                                                                  compact.  */
-                                                              return 1343;
+                                                              return 1345;
                                                             }
                                                           else
                                                             {
@@ -7940,7 +7962,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x1001100xxxxxxxxxxxxx
                                                                  clastb.  */
-                                                              return 1305;
+                                                              return 1307;
                                                             }
                                                         }
                                                       else
@@ -7949,7 +7971,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xx101100xxxxxxxxxxxxx
                                                              revh.  */
-                                                          return 1797;
+                                                          return 1799;
                                                         }
                                                     }
                                                   else
@@ -7962,7 +7984,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x0011100xxxxxxxxxxxxx
                                                                  lastb.  */
-                                                              return 1492;
+                                                              return 1494;
                                                             }
                                                           else
                                                             {
@@ -7970,7 +7992,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx1x1011100xxxxxxxxxxxxx
                                                                  clastb.  */
-                                                              return 1306;
+                                                              return 1308;
                                                             }
                                                         }
                                                       else
@@ -7979,7 +8001,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xx111100xxxxxxxxxxxxx
                                                              rbit.  */
-                                                          return 1789;
+                                                          return 1791;
                                                         }
                                                     }
                                                 }
@@ -7997,7 +8019,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx00100xxxxxxxxxxx
                                                          dup.  */
-                                                      return 1359;
+                                                      return 1361;
                                                     }
                                                   else
                                                     {
@@ -8005,7 +8027,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx00110xxxxxxxxxxx
                                                          tbl.  */
-                                                      return 1946;
+                                                      return 1948;
                                                     }
                                                 }
                                               else
@@ -8024,7 +8046,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x1xx100000001x1xxxxxxxxxxx
                                                                          dup.  */
-                                                                      return 1358;
+                                                                      return 1360;
                                                                     }
                                                                   else
                                                                     {
@@ -8032,7 +8054,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x1xx110000001x1xxxxxxxxxxx
                                                                          sunpklo.  */
-                                                                      return 1942;
+                                                                      return 1944;
                                                                     }
                                                                 }
                                                               else
@@ -8041,7 +8063,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x1xx1x1000001x1xxxxxxxxxxx
                                                                      rev.  */
-                                                                  return 1795;
+                                                                  return 1797;
                                                                 }
                                                             }
                                                           else
@@ -8052,7 +8074,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x1xx10x100001x1xxxxxxxxxxx
                                                                      insr.  */
-                                                                  return 1487;
+                                                                  return 1489;
                                                                 }
                                                               else
                                                                 {
@@ -8060,7 +8082,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x1xx11x100001x1xxxxxxxxxxx
                                                                      insr.  */
-                                                                  return 1488;
+                                                                  return 1490;
                                                                 }
                                                             }
                                                         }
@@ -8070,7 +8092,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxx10001x1xxxxxxxxxxx
                                                              uunpklo.  */
-                                                          return 2005;
+                                                          return 2007;
                                                         }
                                                     }
                                                   else
@@ -8081,7 +8103,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxx01001x1xxxxxxxxxxx
                                                              sunpkhi.  */
-                                                          return 1941;
+                                                          return 1943;
                                                         }
                                                       else
                                                         {
@@ -8089,7 +8111,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxx11001x1xxxxxxxxxxx
                                                              uunpkhi.  */
-                                                          return 2004;
+                                                          return 2006;
                                                         }
                                                     }
                                                 }
@@ -8106,7 +8128,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx100xx0101xxxxxxxxxxxxx
                                                              lasta.  */
-                                                          return 1489;
+                                                          return 1491;
                                                         }
                                                       else
                                                         {
@@ -8114,7 +8136,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx110xx0101xxxxxxxxxxxxx
                                                              clasta.  */
-                                                          return 1304;
+                                                          return 1306;
                                                         }
                                                     }
                                                   else
@@ -8123,7 +8145,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1x1xx0101xxxxxxxxxxxxx
                                                          cpy.  */
-                                                      return 1345;
+                                                      return 1347;
                                                     }
                                                 }
                                               else
@@ -8134,7 +8156,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx10xxx1101xxxxxxxxxxxxx
                                                          lastb.  */
-                                                      return 1491;
+                                                      return 1493;
                                                     }
                                                   else
                                                     {
@@ -8142,7 +8164,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx11xxx1101xxxxxxxxxxxxx
                                                          clastb.  */
-                                                      return 1307;
+                                                      return 1309;
                                                     }
                                                 }
                                             }
@@ -8166,7 +8188,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  000001x1xx10xxxx010000xxxxxxxxxx
                                                                  zip1.  */
-                                                              return 2022;
+                                                              return 2024;
                                                             }
                                                           else
                                                             {
@@ -8178,7 +8200,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x1xx11x0x0010000xxxxxxxxxx
                                                                          punpklo.  */
-                                                                      return 1788;
+                                                                      return 1790;
                                                                     }
                                                                   else
                                                                     {
@@ -8186,7 +8208,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          000001x1xx11x1x0010000xxxxxxxxxx
                                                                          rev.  */
-                                                                      return 1794;
+                                                                      return 1796;
                                                                     }
                                                                 }
                                                               else
@@ -8195,7 +8217,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      000001x1xx11xxx1010000xxxxxxxxxx
                                                                      punpkhi.  */
-                                                                  return 1787;
+                                                                  return 1789;
                                                                 }
                                                             }
                                                         }
@@ -8205,7 +8227,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx011000xxxxxxxxxx
                                                              zip1.  */
-                                                          return 2023;
+                                                          return 2025;
                                                         }
                                                     }
                                                   else
@@ -8216,7 +8238,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx010100xxxxxxxxxx
                                                              trn1.  */
-                                                          return 1947;
+                                                          return 1949;
                                                         }
                                                       else
                                                         {
@@ -8224,7 +8246,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx011100xxxxxxxxxx
                                                              trn1.  */
-                                                          return 1948;
+                                                          return 1950;
                                                         }
                                                     }
                                                 }
@@ -8236,7 +8258,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx010x10xxxxxxxxxx
                                                          uzp1.  */
-                                                      return 2009;
+                                                      return 2011;
                                                     }
                                                   else
                                                     {
@@ -8244,7 +8266,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx011x10xxxxxxxxxx
                                                          uzp1.  */
-                                                      return 2010;
+                                                      return 2012;
                                                     }
                                                 }
                                             }
@@ -8260,7 +8282,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx010001xxxxxxxxxx
                                                              zip2.  */
-                                                          return 2024;
+                                                          return 2026;
                                                         }
                                                       else
                                                         {
@@ -8268,7 +8290,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx011001xxxxxxxxxx
                                                              zip2.  */
-                                                          return 2025;
+                                                          return 2027;
                                                         }
                                                     }
                                                   else
@@ -8279,7 +8301,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx010101xxxxxxxxxx
                                                              trn2.  */
-                                                          return 1949;
+                                                          return 1951;
                                                         }
                                                       else
                                                         {
@@ -8287,7 +8309,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              000001x1xx1xxxxx011101xxxxxxxxxx
                                                              trn2.  */
-                                                          return 1950;
+                                                          return 1952;
                                                         }
                                                     }
                                                 }
@@ -8299,7 +8321,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx010x11xxxxxxxxxx
                                                          uzp2.  */
-                                                      return 2011;
+                                                      return 2013;
                                                     }
                                                   else
                                                     {
@@ -8307,7 +8329,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          000001x1xx1xxxxx011x11xxxxxxxxxx
                                                          uzp2.  */
-                                                      return 2012;
+                                                      return 2014;
                                                     }
                                                 }
                                             }
@@ -8318,7 +8340,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              000001x1xx1xxxxx11xxxxxxxxxxxxxx
                                              sel.  */
-                                          return 1813;
+                                          return 1815;
                                         }
                                     }
                                 }
@@ -8337,7 +8359,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x1x0xxxxxx000xxxxxxxxxxxxx
                                                  ldr.  */
-                                              return 1717;
+                                              return 1719;
                                             }
                                           else
                                             {
@@ -8345,7 +8367,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x1x1xxxxxx000xxxxxxxxxxxxx
                                                  prfb.  */
-                                              return 1761;
+                                              return 1763;
                                             }
                                         }
                                       else
@@ -8356,7 +8378,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x10xxxxxxx100xxxxxxxxxxxxx
                                                  ld1rsh.  */
-                                              return 1546;
+                                              return 1548;
                                             }
                                           else
                                             {
@@ -8364,7 +8386,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x11xxxxxxx100xxxxxxxxxxxxx
                                                  ld1rsb.  */
-                                              return 1543;
+                                              return 1545;
                                             }
                                         }
                                     }
@@ -8380,7 +8402,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x10x0xxxxx010xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1581;
+                                                  return 1583;
                                                 }
                                               else
                                                 {
@@ -8388,7 +8410,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x10x1xxxxx010xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1582;
+                                                  return 1584;
                                                 }
                                             }
                                           else
@@ -8399,7 +8421,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x110xxxxxx010xxxxxxxxxxxxx
                                                      ldr.  */
-                                                  return 1718;
+                                                  return 1720;
                                                 }
                                               else
                                                 {
@@ -8407,7 +8429,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x111xxxxxx010xxxxxxxxxxxxx
                                                      prfw.  */
-                                                  return 1782;
+                                                  return 1784;
                                                 }
                                             }
                                         }
@@ -8423,7 +8445,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x1000xxxxx110xxxxxxxxxxxxx
                                                          prfw.  */
-                                                      return 1778;
+                                                      return 1780;
                                                     }
                                                   else
                                                     {
@@ -8431,7 +8453,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x1100xxxxx110xxxxxxxxxxxxx
                                                          prfd.  */
-                                                      return 1764;
+                                                      return 1766;
                                                     }
                                                 }
                                               else
@@ -8440,7 +8462,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x1x01xxxxx110xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1589;
+                                                  return 1591;
                                                 }
                                             }
                                           else
@@ -8451,7 +8473,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x101xxxxxx110xxxxxxxxxxxxx
                                                      ld1rw.  */
-                                                  return 1549;
+                                                  return 1551;
                                                 }
                                               else
                                                 {
@@ -8459,7 +8481,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x111xxxxxx110xxxxxxxxxxxxx
                                                      ld1rsb.  */
-                                                  return 1545;
+                                                  return 1547;
                                                 }
                                             }
                                         }
@@ -8475,7 +8497,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              100001x1xxxxxxxx001xxxxxxxxxxxxx
                                              prfh.  */
-                                          return 1775;
+                                          return 1777;
                                         }
                                       else
                                         {
@@ -8485,7 +8507,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x10xxxxxxx101xxxxxxxxxxxxx
                                                  ld1rsh.  */
-                                              return 1547;
+                                              return 1549;
                                             }
                                           else
                                             {
@@ -8493,7 +8515,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x11xxxxxxx101xxxxxxxxxxxxx
                                                  ld1rsb.  */
-                                              return 1544;
+                                              return 1546;
                                             }
                                         }
                                     }
@@ -8509,7 +8531,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x10x0xxxxx011xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1681;
+                                                  return 1683;
                                                 }
                                               else
                                                 {
@@ -8517,7 +8539,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x10x1xxxxx011xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1682;
+                                                  return 1684;
                                                 }
                                             }
                                           else
@@ -8526,7 +8548,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  100001x11xxxxxxx011xxxxxxxxxxxxx
                                                  prfd.  */
-                                              return 1768;
+                                              return 1770;
                                             }
                                         }
                                       else
@@ -8541,7 +8563,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x1000xxxxx111xxxxxxxxxxxxx
                                                          prfw.  */
-                                                      return 1781;
+                                                      return 1783;
                                                     }
                                                   else
                                                     {
@@ -8549,7 +8571,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          100001x1100xxxxx111xxxxxxxxxxxxx
                                                          prfd.  */
-                                                      return 1767;
+                                                      return 1769;
                                                     }
                                                 }
                                               else
@@ -8558,7 +8580,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x1x01xxxxx111xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1691;
+                                                  return 1693;
                                                 }
                                             }
                                           else
@@ -8569,7 +8591,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x101xxxxxx111xxxxxxxxxxxxx
                                                      ld1rw.  */
-                                                  return 1550;
+                                                  return 1552;
                                                 }
                                               else
                                                 {
@@ -8577,7 +8599,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      100001x111xxxxxx111xxxxxxxxxxxxx
                                                      ld1rd.  */
-                                                  return 1531;
+                                                  return 1533;
                                                 }
                                             }
                                         }
@@ -8599,7 +8621,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx0xxxxx000xxxxxxxxxxxxx
                                              ld1sw.  */
-                                          return 1575;
+                                          return 1577;
                                         }
                                       else
                                         {
@@ -8607,7 +8629,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx1xxxxx000xxxxxxxxxxxxx
                                              ld1sw.  */
-                                          return 1576;
+                                          return 1578;
                                         }
                                     }
                                   else
@@ -8618,7 +8640,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx0xxxxx100xxxxxxxxxxxxx
                                              ld1sw.  */
-                                          return 1577;
+                                          return 1579;
                                         }
                                       else
                                         {
@@ -8628,7 +8650,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x1x01xxxxx100xxxxxxxxxxxxx
                                                  ld1sw.  */
-                                              return 1580;
+                                              return 1582;
                                             }
                                           else
                                             {
@@ -8636,7 +8658,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x1x11xxxxx100xxxxxxxxxxxxx
                                                  ld1sw.  */
-                                              return 1578;
+                                              return 1580;
                                             }
                                         }
                                     }
@@ -8653,7 +8675,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x10x0xxxxx010xxxxxxxxxxxxx
                                                  ld1w.  */
-                                              return 1585;
+                                              return 1587;
                                             }
                                           else
                                             {
@@ -8661,7 +8683,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x11x0xxxxx010xxxxxxxxxxxxx
                                                  ld1d.  */
-                                              return 1507;
+                                              return 1509;
                                             }
                                         }
                                       else
@@ -8672,7 +8694,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x10x1xxxxx010xxxxxxxxxxxxx
                                                  ld1w.  */
-                                              return 1586;
+                                              return 1588;
                                             }
                                           else
                                             {
@@ -8680,7 +8702,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x11x1xxxxx010xxxxxxxxxxxxx
                                                  ld1d.  */
-                                              return 1508;
+                                              return 1510;
                                             }
                                         }
                                     }
@@ -8694,7 +8716,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x10x0xxxxx110xxxxxxxxxxxxx
                                                  ld1w.  */
-                                              return 1587;
+                                              return 1589;
                                             }
                                           else
                                             {
@@ -8702,7 +8724,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x11x0xxxxx110xxxxxxxxxxxxx
                                                  ld1d.  */
-                                              return 1509;
+                                              return 1511;
                                             }
                                         }
                                       else
@@ -8715,7 +8737,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1001xxxxx110xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1592;
+                                                  return 1594;
                                                 }
                                               else
                                                 {
@@ -8723,7 +8745,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1101xxxxx110xxxxxxxxxxxxx
                                                      ld1d.  */
-                                                  return 1512;
+                                                  return 1514;
                                                 }
                                             }
                                           else
@@ -8734,7 +8756,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1011xxxxx110xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1588;
+                                                  return 1590;
                                                 }
                                               else
                                                 {
@@ -8742,7 +8764,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1111xxxxx110xxxxxxxxxxxxx
                                                      ld1d.  */
-                                                  return 1510;
+                                                  return 1512;
                                                 }
                                             }
                                         }
@@ -8761,7 +8783,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx0xxxxx001xxxxxxxxxxxxx
                                              ldff1sw.  */
-                                          return 1676;
+                                          return 1678;
                                         }
                                       else
                                         {
@@ -8769,7 +8791,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx1xxxxx001xxxxxxxxxxxxx
                                              ldff1sw.  */
-                                          return 1677;
+                                          return 1679;
                                         }
                                     }
                                   else
@@ -8780,7 +8802,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x10001x1xx0xxxxx101xxxxxxxxxxxxx
                                              ldff1sw.  */
-                                          return 1678;
+                                          return 1680;
                                         }
                                       else
                                         {
@@ -8790,7 +8812,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x1x01xxxxx101xxxxxxxxxxxxx
                                                  ldff1sw.  */
-                                              return 1680;
+                                              return 1682;
                                             }
                                           else
                                             {
@@ -8798,7 +8820,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x1x11xxxxx101xxxxxxxxxxxxx
                                                  ldff1sw.  */
-                                              return 1679;
+                                              return 1681;
                                             }
                                         }
                                     }
@@ -8815,7 +8837,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x10x0xxxxx011xxxxxxxxxxxxx
                                                  ldff1w.  */
-                                              return 1687;
+                                              return 1689;
                                             }
                                           else
                                             {
@@ -8823,7 +8845,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x11x0xxxxx011xxxxxxxxxxxxx
                                                  ldff1d.  */
-                                              return 1632;
+                                              return 1634;
                                             }
                                         }
                                       else
@@ -8834,7 +8856,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x10x1xxxxx011xxxxxxxxxxxxx
                                                  ldff1w.  */
-                                              return 1688;
+                                              return 1690;
                                             }
                                           else
                                             {
@@ -8842,7 +8864,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x10001x11x1xxxxx011xxxxxxxxxxxxx
                                                  ldff1d.  */
-                                              return 1633;
+                                              return 1635;
                                             }
                                         }
                                     }
@@ -8858,7 +8880,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1000xxxxx111xxxxxxxxxxxxx
                                                      prfw.  */
-                                                  return 1783;
+                                                  return 1785;
                                                 }
                                               else
                                                 {
@@ -8866,7 +8888,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1100xxxxx111xxxxxxxxxxxxx
                                                      prfd.  */
-                                                  return 1769;
+                                                  return 1771;
                                                 }
                                             }
                                           else
@@ -8877,7 +8899,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1010xxxxx111xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1689;
+                                                  return 1691;
                                                 }
                                               else
                                                 {
@@ -8885,7 +8907,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1110xxxxx111xxxxxxxxxxxxx
                                                      ldff1d.  */
-                                                  return 1634;
+                                                  return 1636;
                                                 }
                                             }
                                         }
@@ -8899,7 +8921,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1001xxxxx111xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1692;
+                                                  return 1694;
                                                 }
                                               else
                                                 {
@@ -8907,7 +8929,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1101xxxxx111xxxxxxxxxxxxx
                                                      ldff1d.  */
-                                                  return 1636;
+                                                  return 1638;
                                                 }
                                             }
                                           else
@@ -8918,7 +8940,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1011xxxxx111xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1690;
+                                                  return 1692;
                                                 }
                                               else
                                                 {
@@ -8926,7 +8948,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x10001x1111xxxxx111xxxxxxxxxxxxx
                                                      ldff1d.  */
-                                                  return 1635;
+                                                  return 1637;
                                                 }
                                             }
                                         }
@@ -8955,7 +8977,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1xx0xxxxx000xxxxxxxx0xxxx
                                                      cmpge.  */
-                                                  return 1315;
+                                                  return 1317;
                                                 }
                                               else
                                                 {
@@ -8963,7 +8985,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1xx0xxxxx000xxxxxxxx1xxxx
                                                      cmpgt.  */
-                                                  return 1318;
+                                                  return 1320;
                                                 }
                                             }
                                           else
@@ -8974,7 +8996,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x10x0xxxxx000xxxxxxxxxxxxx
                                                      ld1rqw.  */
-                                                  return 1542;
+                                                  return 1544;
                                                 }
                                               else
                                                 {
@@ -8982,7 +9004,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x11x0xxxxx000xxxxxxxxxxxxx
                                                      ld1rqd.  */
-                                                  return 1538;
+                                                  return 1540;
                                                 }
                                             }
                                         }
@@ -8998,7 +9020,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00000xxxxxx0xxxx
                                                          whilelt.  */
-                                                      return 2019;
+                                                      return 2021;
                                                     }
                                                   else
                                                     {
@@ -9006,7 +9028,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00010xxxxxx0xxxx
                                                          whilelt.  */
-                                                      return 2020;
+                                                      return 2022;
                                                     }
                                                 }
                                               else
@@ -9017,7 +9039,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00001xxxxxx0xxxx
                                                          whilelo.  */
-                                                      return 2015;
+                                                      return 2017;
                                                     }
                                                   else
                                                     {
@@ -9025,7 +9047,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00011xxxxxx0xxxx
                                                          whilelo.  */
-                                                      return 2016;
+                                                      return 2018;
                                                     }
                                                 }
                                             }
@@ -9039,7 +9061,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00000xxxxxx1xxxx
                                                          whilele.  */
-                                                      return 2013;
+                                                      return 2015;
                                                     }
                                                   else
                                                     {
@@ -9047,7 +9069,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00010xxxxxx1xxxx
                                                          whilele.  */
-                                                      return 2014;
+                                                      return 2016;
                                                     }
                                                 }
                                               else
@@ -9058,7 +9080,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00001xxxxxx1xxxx
                                                          whilels.  */
-                                                      return 2017;
+                                                      return 2019;
                                                     }
                                                   else
                                                     {
@@ -9066,7 +9088,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x1xx1xxxxx00011xxxxxx1xxxx
                                                          whilels.  */
-                                                      return 2018;
+                                                      return 2020;
                                                     }
                                                 }
                                             }
@@ -9086,7 +9108,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          011001x1xx0xxxxx000x00xxxxxxxxxx
                                                          fadd.  */
-                                                      return 1373;
+                                                      return 1375;
                                                     }
                                                   else
                                                     {
@@ -9096,7 +9118,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              011001x1xx0xxxxx000010xxxxxxxxxx
                                                              fmul.  */
-                                                          return 1440;
+                                                          return 1442;
                                                         }
                                                       else
                                                         {
@@ -9104,7 +9126,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              011001x1xx0xxxxx000110xxxxxxxxxx
                                                              frecps.  */
-                                                          return 1453;
+                                                          return 1455;
                                                         }
                                                     }
                                                 }
@@ -9116,7 +9138,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          011001x1xx0xxxxx000x01xxxxxxxxxx
                                                          fsub.  */
-                                                      return 1466;
+                                                      return 1468;
                                                     }
                                                   else
                                                     {
@@ -9126,7 +9148,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              011001x1xx0xxxxx000011xxxxxxxxxx
                                                              ftsmul.  */
-                                                          return 1472;
+                                                          return 1474;
                                                         }
                                                       else
                                                         {
@@ -9134,7 +9156,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              011001x1xx0xxxxx000111xxxxxxxxxx
                                                              frsqrts.  */
-                                                          return 1463;
+                                                          return 1465;
                                                         }
                                                     }
                                                 }
@@ -9145,7 +9167,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx000xxxxxxxxxxxxx
                                                  fmla.  */
-                                              return 1431;
+                                              return 1433;
                                             }
                                         }
                                       else
@@ -9154,7 +9176,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              111001x1xxxxxxxx000xxxxxxxxxxxxx
                                              str.  */
-                                          return 1934;
+                                          return 1936;
                                         }
                                     }
                                 }
@@ -9172,7 +9194,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1xx0xxxxx001xxxxxxxx0xxxx
                                                      cmplt.  */
-                                                  return 1332;
+                                                  return 1334;
                                                 }
                                               else
                                                 {
@@ -9180,7 +9202,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1xx0xxxxx001xxxxxxxx1xxxx
                                                      cmple.  */
-                                                  return 1326;
+                                                  return 1328;
                                                 }
                                             }
                                           else
@@ -9191,7 +9213,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x10x0xxxxx001xxxxxxxxxxxxx
                                                      ld1rqw.  */
-                                                  return 1541;
+                                                  return 1543;
                                                 }
                                               else
                                                 {
@@ -9199,7 +9221,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      101001x11x0xxxxx001xxxxxxxxxxxxx
                                                      ld1rqd.  */
-                                                  return 1537;
+                                                  return 1539;
                                                 }
                                             }
                                         }
@@ -9219,7 +9241,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x11001x1xx000000001xxxxxxxxxxxxx
                                                                  faddv.  */
-                                                              return 1377;
+                                                              return 1379;
                                                             }
                                                           else
                                                             {
@@ -9229,7 +9251,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      x11001x1xx010000001xxxxxxxx0xxxx
                                                                      fcmge.  */
-                                                                  return 1384;
+                                                                  return 1386;
                                                                 }
                                                               else
                                                                 {
@@ -9237,7 +9259,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      x11001x1xx010000001xxxxxxxx1xxxx
                                                                      fcmgt.  */
-                                                                  return 1386;
+                                                                  return 1388;
                                                                 }
                                                             }
                                                         }
@@ -9247,7 +9269,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0x1000001xxxxxxxxxxxxx
                                                              fadda.  */
-                                                          return 1376;
+                                                          return 1378;
                                                         }
                                                     }
                                                   else
@@ -9256,7 +9278,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x1xx0xx100001xxxxxxxxxxxxx
                                                          fmaxnmv.  */
-                                                      return 1423;
+                                                      return 1425;
                                                     }
                                                 }
                                               else
@@ -9267,7 +9289,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x1xx0xx010001xxxxxxxxxxxxx
                                                          fcmeq.  */
-                                                      return 1382;
+                                                      return 1384;
                                                     }
                                                   else
                                                     {
@@ -9277,7 +9299,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0x0110001xxxxxxxxxxxxx
                                                              fmaxv.  */
-                                                          return 1424;
+                                                          return 1426;
                                                         }
                                                       else
                                                         {
@@ -9285,7 +9307,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0x1110001xxxxxxxxxxxxx
                                                              frecpe.  */
-                                                          return 1452;
+                                                          return 1454;
                                                         }
                                                     }
                                                 }
@@ -9302,7 +9324,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0xx001001xxxxxxxx0xxxx
                                                              fcmlt.  */
-                                                          return 1389;
+                                                          return 1391;
                                                         }
                                                       else
                                                         {
@@ -9310,7 +9332,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0xx001001xxxxxxxx1xxxx
                                                              fcmle.  */
-                                                          return 1388;
+                                                          return 1390;
                                                         }
                                                     }
                                                   else
@@ -9319,7 +9341,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x1xx0xx101001xxxxxxxxxxxxx
                                                          fminnmv.  */
-                                                      return 1429;
+                                                      return 1431;
                                                     }
                                                 }
                                               else
@@ -9330,7 +9352,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x11001x1xx0xx011001xxxxxxxxxxxxx
                                                          fcmne.  */
-                                                      return 1390;
+                                                      return 1392;
                                                     }
                                                   else
                                                     {
@@ -9340,7 +9362,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0x0111001xxxxxxxxxxxxx
                                                              fminv.  */
-                                                          return 1430;
+                                                          return 1432;
                                                         }
                                                       else
                                                         {
@@ -9348,7 +9370,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              x11001x1xx0x1111001xxxxxxxxxxxxx
                                                              frsqrte.  */
-                                                          return 1462;
+                                                          return 1464;
                                                         }
                                                     }
                                                 }
@@ -9365,7 +9387,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x1xx1xxxxx001xxxxxxxx0xxxx
                                                  ctermeq.  */
-                                              return 1347;
+                                              return 1349;
                                             }
                                           else
                                             {
@@ -9373,7 +9395,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x1xx1xxxxx001xxxxxxxx1xxxx
                                                  ctermne.  */
-                                              return 1348;
+                                              return 1350;
                                             }
                                         }
                                       else
@@ -9382,7 +9404,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              x11001x1xx1xxxxx001xxxxxxxxxxxxx
                                              fmls.  */
-                                          return 1435;
+                                          return 1437;
                                         }
                                     }
                                 }
@@ -9409,7 +9431,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x10000xxxx01xxxx0xxxx0xxxx
                                                                  and.  */
-                                                              return 1278;
+                                                              return 1280;
                                                             }
                                                           else
                                                             {
@@ -9417,7 +9439,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x10000xxxx01xxxx0xxxx1xxxx
                                                                  bic.  */
-                                                              return 1290;
+                                                              return 1292;
                                                             }
                                                         }
                                                       else
@@ -9428,7 +9450,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x100010xxx01xxxx0xxxxxxxxx
                                                                  brka.  */
-                                                              return 1292;
+                                                              return 1294;
                                                             }
                                                           else
                                                             {
@@ -9436,7 +9458,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x100011xxx01xxxx0xxxxxxxxx
                                                                  brkn.  */
-                                                              return 1296;
+                                                              return 1298;
                                                             }
                                                         }
                                                     }
@@ -9448,7 +9470,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1000xxxxx01xxxx1xxxx0xxxx
                                                              eor.  */
-                                                          return 1365;
+                                                          return 1367;
                                                         }
                                                       else
                                                         {
@@ -9456,7 +9478,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1000xxxxx01xxxx1xxxx1xxxx
                                                              sel.  */
-                                                          return 1814;
+                                                          return 1816;
                                                         }
                                                     }
                                                 }
@@ -9468,7 +9490,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1000xxxxx010xxxxxxxxxxxxx
                                                          ld1sh.  */
-                                                      return 1564;
+                                                      return 1566;
                                                     }
                                                   else
                                                     {
@@ -9476,7 +9498,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1000xxxxx011xxxxxxxxxxxxx
                                                          ldff1sh.  */
-                                                      return 1664;
+                                                      return 1666;
                                                     }
                                                 }
                                             }
@@ -9494,7 +9516,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x11000xxxx01xxxx0xxxx0xxxx
                                                                  orr.  */
-                                                              return 1750;
+                                                              return 1752;
                                                             }
                                                           else
                                                             {
@@ -9502,7 +9524,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x11000xxxx01xxxx0xxxx1xxxx
                                                                  orn.  */
-                                                              return 1745;
+                                                              return 1747;
                                                             }
                                                         }
                                                       else
@@ -9511,7 +9533,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x11001xxxx01xxxx0xxxxxxxxx
                                                              brkb.  */
-                                                          return 1294;
+                                                          return 1296;
                                                         }
                                                     }
                                                   else
@@ -9522,7 +9544,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1100xxxxx01xxxx1xxxx0xxxx
                                                              nor.  */
-                                                          return 1742;
+                                                          return 1744;
                                                         }
                                                       else
                                                         {
@@ -9530,7 +9552,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1100xxxxx01xxxx1xxxx1xxxx
                                                              nand.  */
-                                                          return 1739;
+                                                          return 1741;
                                                         }
                                                     }
                                                 }
@@ -9542,7 +9564,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1100xxxxx010xxxxxxxxxxxxx
                                                          ld1sb.  */
-                                                      return 1552;
+                                                      return 1554;
                                                     }
                                                   else
                                                     {
@@ -9550,7 +9572,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1100xxxxx011xxxxxxxxxxxxx
                                                          ldff1sb.  */
-                                                      return 1652;
+                                                      return 1654;
                                                     }
                                                 }
                                             }
@@ -9571,7 +9593,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x10100xxxx01xxxx0xxxx0xxxx
                                                                  ands.  */
-                                                              return 1279;
+                                                              return 1281;
                                                             }
                                                           else
                                                             {
@@ -9581,7 +9603,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x101010xxx01xxxx0xxxx0xxxx
                                                                      brkas.  */
-                                                                  return 1293;
+                                                                  return 1295;
                                                                 }
                                                               else
                                                                 {
@@ -9589,7 +9611,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x101011xxx01xxxx0xxxx0xxxx
                                                                      brkns.  */
-                                                                  return 1297;
+                                                                  return 1299;
                                                                 }
                                                             }
                                                         }
@@ -9599,7 +9621,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1010xxxxx01xxxx1xxxx0xxxx
                                                              eors.  */
-                                                          return 1366;
+                                                          return 1368;
                                                         }
                                                     }
                                                   else
@@ -9608,7 +9630,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1010xxxxx01xxxxxxxxx1xxxx
                                                          bics.  */
-                                                      return 1291;
+                                                      return 1293;
                                                     }
                                                 }
                                               else
@@ -9619,7 +9641,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1010xxxxx010xxxxxxxxxxxxx
                                                          ld1w.  */
-                                                      return 1583;
+                                                      return 1585;
                                                     }
                                                   else
                                                     {
@@ -9627,7 +9649,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1010xxxxx011xxxxxxxxxxxxx
                                                          ldff1w.  */
-                                                      return 1683;
+                                                      return 1685;
                                                     }
                                                 }
                                             }
@@ -9645,7 +9667,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x11100xxxx01xxxx0xxxx0xxxx
                                                                  orrs.  */
-                                                              return 1751;
+                                                              return 1753;
                                                             }
                                                           else
                                                             {
@@ -9653,7 +9675,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x11101xxxx01xxxx0xxxx0xxxx
                                                                  brkbs.  */
-                                                              return 1295;
+                                                              return 1297;
                                                             }
                                                         }
                                                       else
@@ -9662,7 +9684,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1110xxxxx01xxxx1xxxx0xxxx
                                                              nors.  */
-                                                          return 1743;
+                                                          return 1745;
                                                         }
                                                     }
                                                   else
@@ -9673,7 +9695,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1110xxxxx01xxxx0xxxx1xxxx
                                                              orns.  */
-                                                          return 1746;
+                                                          return 1748;
                                                         }
                                                       else
                                                         {
@@ -9681,7 +9703,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1110xxxxx01xxxx1xxxx1xxxx
                                                              nands.  */
-                                                          return 1740;
+                                                          return 1742;
                                                         }
                                                     }
                                                 }
@@ -9693,7 +9715,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1110xxxxx010xxxxxxxxxxxxx
                                                          ld1sb.  */
-                                                      return 1554;
+                                                      return 1556;
                                                     }
                                                   else
                                                     {
@@ -9701,7 +9723,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1110xxxxx011xxxxxxxxxxxxx
                                                          ldff1sb.  */
-                                                      return 1656;
+                                                      return 1658;
                                                     }
                                                 }
                                             }
@@ -9719,7 +9741,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1001xxxxx010xxxxxxxxxxxxx
                                                      ld1sh.  */
-                                                  return 1565;
+                                                  return 1567;
                                                 }
                                               else
                                                 {
@@ -9727,7 +9749,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1101xxxxx010xxxxxxxxxxxxx
                                                      ld1sb.  */
-                                                  return 1553;
+                                                  return 1555;
                                                 }
                                             }
                                           else
@@ -9738,7 +9760,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1011xxxxx010xxxxxxxxxxxxx
                                                      ld1w.  */
-                                                  return 1584;
+                                                  return 1586;
                                                 }
                                               else
                                                 {
@@ -9746,7 +9768,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1111xxxxx010xxxxxxxxxxxxx
                                                      ld1d.  */
-                                                  return 1506;
+                                                  return 1508;
                                                 }
                                             }
                                         }
@@ -9760,7 +9782,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1001xxxxx011xxxxxxxxxxxxx
                                                      ldff1sh.  */
-                                                  return 1666;
+                                                  return 1668;
                                                 }
                                               else
                                                 {
@@ -9768,7 +9790,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1101xxxxx011xxxxxxxxxxxxx
                                                      ldff1sb.  */
-                                                  return 1654;
+                                                  return 1656;
                                                 }
                                             }
                                           else
@@ -9779,7 +9801,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1011xxxxx011xxxxxxxxxxxxx
                                                      ldff1w.  */
-                                                  return 1685;
+                                                  return 1687;
                                                 }
                                               else
                                                 {
@@ -9787,7 +9809,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x1111xxxxx011xxxxxxxxxxxxx
                                                      ldff1d.  */
-                                                  return 1630;
+                                                  return 1632;
                                                 }
                                             }
                                         }
@@ -9807,7 +9829,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx010xxxxxxxx0xxxx
                                                      fcmge.  */
-                                                  return 1385;
+                                                  return 1387;
                                                 }
                                               else
                                                 {
@@ -9815,7 +9837,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx010xxxxxxxx1xxxx
                                                      fcmgt.  */
-                                                  return 1387;
+                                                  return 1389;
                                                 }
                                             }
                                           else
@@ -9824,7 +9846,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx010xxxxxxxxxxxxx
                                                  fnmla.  */
-                                              return 1449;
+                                              return 1451;
                                             }
                                         }
                                       else
@@ -9835,7 +9857,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  111001x1x0xxxxxx010xxxxxxxxxxxxx
                                                  str.  */
-                                              return 1935;
+                                              return 1937;
                                             }
                                           else
                                             {
@@ -9845,7 +9867,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1x10xxxxx010xxxxxxxxxxxxx
                                                      st1w.  */
-                                                  return 1894;
+                                                  return 1896;
                                                 }
                                               else
                                                 {
@@ -9855,7 +9877,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1011xxxxx010xxxxxxxxxxxxx
                                                          st1w.  */
-                                                      return 1896;
+                                                      return 1898;
                                                     }
                                                   else
                                                     {
@@ -9863,7 +9885,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1111xxxxx010xxxxxxxxxxxxx
                                                          st1d.  */
-                                                      return 1873;
+                                                      return 1875;
                                                     }
                                                 }
                                             }
@@ -9881,7 +9903,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx011xxxxxxxx0xxxx
                                                      fcmeq.  */
-                                                  return 1383;
+                                                  return 1385;
                                                 }
                                               else
                                                 {
@@ -9889,7 +9911,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx011xxxxxxxx1xxxx
                                                      fcmne.  */
-                                                  return 1391;
+                                                  return 1393;
                                                 }
                                             }
                                           else
@@ -9902,7 +9924,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1000xxxxx011xxxxxxxxxxxxx
                                                          stnt1w.  */
-                                                      return 1932;
+                                                      return 1934;
                                                     }
                                                   else
                                                     {
@@ -9910,7 +9932,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1100xxxxx011xxxxxxxxxxxxx
                                                          stnt1d.  */
-                                                      return 1928;
+                                                      return 1930;
                                                     }
                                                 }
                                               else
@@ -9921,7 +9943,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1010xxxxx011xxxxxxxxxxxxx
                                                          st3w.  */
-                                                      return 1916;
+                                                      return 1918;
                                                     }
                                                   else
                                                     {
@@ -9929,7 +9951,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1110xxxxx011xxxxxxxxxxxxx
                                                          st3d.  */
-                                                      return 1912;
+                                                      return 1914;
                                                     }
                                                 }
                                             }
@@ -9942,7 +9964,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx011xxxxxxxxxxxxx
                                                  fnmls.  */
-                                              return 1450;
+                                              return 1452;
                                             }
                                           else
                                             {
@@ -9954,7 +9976,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1001xxxxx011xxxxxxxxxxxxx
                                                          st2w.  */
-                                                      return 1908;
+                                                      return 1910;
                                                     }
                                                   else
                                                     {
@@ -9962,7 +9984,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1101xxxxx011xxxxxxxxxxxxx
                                                          st2d.  */
-                                                      return 1904;
+                                                      return 1906;
                                                     }
                                                 }
                                               else
@@ -9973,7 +9995,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1011xxxxx011xxxxxxxxxxxxx
                                                          st4w.  */
-                                                      return 1924;
+                                                      return 1926;
                                                     }
                                                   else
                                                     {
@@ -9981,7 +10003,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1111xxxxx011xxxxxxxxxxxxx
                                                          st4d.  */
-                                                      return 1920;
+                                                      return 1922;
                                                     }
                                                 }
                                             }
@@ -10006,7 +10028,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x1xx0xxxxx100xxxxxxxx0xxxx
                                                  cmpeq.  */
-                                              return 1312;
+                                              return 1314;
                                             }
                                           else
                                             {
@@ -10014,7 +10036,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  x01001x1xx0xxxxx100xxxxxxxx1xxxx
                                                  cmpne.  */
-                                              return 1335;
+                                              return 1337;
                                             }
                                         }
                                       else
@@ -10029,7 +10051,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x10000xxxx101xxxxxxxxxxxxx
                                                          ld1sh.  */
-                                                      return 1571;
+                                                      return 1573;
                                                     }
                                                   else
                                                     {
@@ -10037,7 +10059,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x11000xxxx101xxxxxxxxxxxxx
                                                          ld1sb.  */
-                                                      return 1558;
+                                                      return 1560;
                                                     }
                                                 }
                                               else
@@ -10048,7 +10070,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x10100xxxx101xxxxxxxxxxxxx
                                                          ld1w.  */
-                                                      return 1590;
+                                                      return 1592;
                                                     }
                                                   else
                                                     {
@@ -10056,7 +10078,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x11100xxxx101xxxxxxxxxxxxx
                                                          ld1sb.  */
-                                                      return 1560;
+                                                      return 1562;
                                                     }
                                                 }
                                             }
@@ -10070,7 +10092,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x10001xxxx101xxxxxxxxxxxxx
                                                          ldnf1sh.  */
-                                                      return 1704;
+                                                      return 1706;
                                                     }
                                                   else
                                                     {
@@ -10078,7 +10100,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x11001xxxx101xxxxxxxxxxxxx
                                                          ldnf1sb.  */
-                                                      return 1701;
+                                                      return 1703;
                                                     }
                                                 }
                                               else
@@ -10089,7 +10111,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x10101xxxx101xxxxxxxxxxxxx
                                                          ldnf1w.  */
-                                                      return 1707;
+                                                      return 1709;
                                                     }
                                                   else
                                                     {
@@ -10097,7 +10119,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          x01001x11101xxxx101xxxxxxxxxxxxx
                                                          ldnf1sb.  */
-                                                      return 1703;
+                                                      return 1705;
                                                     }
                                                 }
                                             }
@@ -10117,7 +10139,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1x000xxxx11xxxxxxxxx0xxxx
                                                          brkpa.  */
-                                                      return 1298;
+                                                      return 1300;
                                                     }
                                                   else
                                                     {
@@ -10125,7 +10147,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1x100xxxx11xxxxxxxxx0xxxx
                                                          brkpas.  */
-                                                      return 1299;
+                                                      return 1301;
                                                     }
                                                 }
                                               else
@@ -10138,7 +10160,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx010xx011xxxxxxxxx0xxxx
                                                              ptest.  */
-                                                          return 1784;
+                                                          return 1786;
                                                         }
                                                       else
                                                         {
@@ -10152,7 +10174,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          001001x1xx011xx01100x0xxxxx0xxxx
                                                                          pfirst.  */
-                                                                      return 1754;
+                                                                      return 1756;
                                                                     }
                                                                   else
                                                                     {
@@ -10160,7 +10182,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          001001x1xx011xx01110x0xxxxx0xxxx
                                                                          ptrue.  */
-                                                                      return 1785;
+                                                                      return 1787;
                                                                     }
                                                                 }
                                                               else
@@ -10171,7 +10193,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          001001x1x0011xx011x1x0xxxxx0xxxx
                                                                          rdffr.  */
-                                                                      return 1791;
+                                                                      return 1793;
                                                                     }
                                                                   else
                                                                     {
@@ -10179,7 +10201,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          001001x1x1011xx011x1x0xxxxx0xxxx
                                                                          rdffrs.  */
-                                                                      return 1792;
+                                                                      return 1794;
                                                                     }
                                                                 }
                                                             }
@@ -10189,7 +10211,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx011xx011xxx1xxxxx0xxxx
                                                                  pfalse.  */
-                                                              return 1753;
+                                                              return 1755;
                                                             }
                                                         }
                                                     }
@@ -10203,7 +10225,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx01xxx111x0x0xxxxx0xxxx
                                                                  ptrues.  */
-                                                              return 1786;
+                                                              return 1788;
                                                             }
                                                           else
                                                             {
@@ -10211,7 +10233,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx01xxx111x1x0xxxxx0xxxx
                                                                  rdffr.  */
-                                                              return 1790;
+                                                              return 1792;
                                                             }
                                                         }
                                                       else
@@ -10220,7 +10242,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx01xxx111xxx1xxxxx0xxxx
                                                              pnext.  */
-                                                          return 1755;
+                                                          return 1757;
                                                         }
                                                     }
                                                 }
@@ -10233,7 +10255,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1x00xxxxx11xxxxxxxxx1xxxx
                                                      brkpb.  */
-                                                  return 1300;
+                                                  return 1302;
                                                 }
                                               else
                                                 {
@@ -10241,7 +10263,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      001001x1x10xxxxx11xxxxxxxxx1xxxx
                                                      brkpbs.  */
-                                                  return 1301;
+                                                  return 1303;
                                                 }
                                             }
                                         }
@@ -10257,7 +10279,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1000xxxxx110xxxxxxxxxxxxx
                                                          ldnt1w.  */
-                                                      return 1715;
+                                                      return 1717;
                                                     }
                                                   else
                                                     {
@@ -10265,7 +10287,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1100xxxxx110xxxxxxxxxxxxx
                                                          ldnt1d.  */
-                                                      return 1711;
+                                                      return 1713;
                                                     }
                                                 }
                                               else
@@ -10276,7 +10298,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1010xxxxx110xxxxxxxxxxxxx
                                                          ld3w.  */
-                                                      return 1607;
+                                                      return 1609;
                                                     }
                                                   else
                                                     {
@@ -10284,7 +10306,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1110xxxxx110xxxxxxxxxxxxx
                                                          ld3d.  */
-                                                      return 1603;
+                                                      return 1605;
                                                     }
                                                 }
                                             }
@@ -10298,7 +10320,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1000xxxxx111xxxxxxxxxxxxx
                                                          ldnt1w.  */
-                                                      return 1716;
+                                                      return 1718;
                                                     }
                                                   else
                                                     {
@@ -10306,7 +10328,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1100xxxxx111xxxxxxxxxxxxx
                                                          ldnt1d.  */
-                                                      return 1712;
+                                                      return 1714;
                                                     }
                                                 }
                                               else
@@ -10317,7 +10339,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1010xxxxx111xxxxxxxxxxxxx
                                                          ld3w.  */
-                                                      return 1608;
+                                                      return 1610;
                                                     }
                                                   else
                                                     {
@@ -10325,7 +10347,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1110xxxxx111xxxxxxxxxxxxx
                                                          ld3d.  */
-                                                      return 1604;
+                                                      return 1606;
                                                     }
                                                 }
                                             }
@@ -10354,7 +10376,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000000100xxxxxxxxxxxxx
                                                                      fadd.  */
-                                                                  return 1374;
+                                                                  return 1376;
                                                                 }
                                                               else
                                                                 {
@@ -10362,7 +10384,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000100100xxxxxxxxxxxxx
                                                                      fmaxnm.  */
-                                                                  return 1421;
+                                                                  return 1423;
                                                                 }
                                                             }
                                                           else
@@ -10373,7 +10395,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000010100xxxxxxxxxxxxx
                                                                      fmul.  */
-                                                                  return 1441;
+                                                                  return 1443;
                                                                 }
                                                               else
                                                                 {
@@ -10381,7 +10403,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000110100xxxxxxxxxxxxx
                                                                      fmax.  */
-                                                                  return 1419;
+                                                                  return 1421;
                                                                 }
                                                             }
                                                         }
@@ -10395,7 +10417,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000001100xxxxxxxxxxxxx
                                                                      fsub.  */
-                                                                  return 1467;
+                                                                  return 1469;
                                                                 }
                                                               else
                                                                 {
@@ -10403,7 +10425,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000101100xxxxxxxxxxxxx
                                                                      fminnm.  */
-                                                                  return 1427;
+                                                                  return 1429;
                                                                 }
                                                             }
                                                           else
@@ -10414,7 +10436,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000011100xxxxxxxxxxxxx
                                                                      fsubr.  */
-                                                                  return 1469;
+                                                                  return 1471;
                                                                 }
                                                               else
                                                                 {
@@ -10422,7 +10444,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000111100xxxxxxxxxxxxx
                                                                      fmin.  */
-                                                                  return 1425;
+                                                                  return 1427;
                                                                 }
                                                             }
                                                         }
@@ -10433,7 +10455,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          011001x1xx010xxx100xxxxxxxxxxxxx
                                                          ftmad.  */
-                                                      return 1471;
+                                                      return 1473;
                                                     }
                                                 }
                                               else
@@ -10450,7 +10472,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001000100xxxxxxxxxxxxx
                                                                      fabd.  */
-                                                                  return 1369;
+                                                                  return 1371;
                                                                 }
                                                               else
                                                                 {
@@ -10458,7 +10480,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011000100xxxxxxxxxxxxx
                                                                      fadd.  */
-                                                                  return 1375;
+                                                                  return 1377;
                                                                 }
                                                             }
                                                           else
@@ -10469,7 +10491,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001100100xxxxxxxxxxxxx
                                                                      fdivr.  */
-                                                                  return 1415;
+                                                                  return 1417;
                                                                 }
                                                               else
                                                                 {
@@ -10477,7 +10499,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011100100xxxxxxxxxxxxx
                                                                      fmaxnm.  */
-                                                                  return 1422;
+                                                                  return 1424;
                                                                 }
                                                             }
                                                         }
@@ -10491,7 +10513,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001010100xxxxxxxxxxxxx
                                                                      fmulx.  */
-                                                                  return 1446;
+                                                                  return 1448;
                                                                 }
                                                               else
                                                                 {
@@ -10499,7 +10521,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011010100xxxxxxxxxxxxx
                                                                      fmul.  */
-                                                                  return 1442;
+                                                                  return 1444;
                                                                 }
                                                             }
                                                           else
@@ -10508,7 +10530,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  011001x1xx0x1110100xxxxxxxxxxxxx
                                                                  fmax.  */
-                                                              return 1420;
+                                                              return 1422;
                                                             }
                                                         }
                                                     }
@@ -10524,7 +10546,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001001100xxxxxxxxxxxxx
                                                                      fscale.  */
-                                                                  return 1464;
+                                                                  return 1466;
                                                                 }
                                                               else
                                                                 {
@@ -10532,7 +10554,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011001100xxxxxxxxxxxxx
                                                                      fsub.  */
-                                                                  return 1468;
+                                                                  return 1470;
                                                                 }
                                                             }
                                                           else
@@ -10543,7 +10565,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001101100xxxxxxxxxxxxx
                                                                      fdiv.  */
-                                                                  return 1414;
+                                                                  return 1416;
                                                                 }
                                                               else
                                                                 {
@@ -10551,7 +10573,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011101100xxxxxxxxxxxxx
                                                                      fminnm.  */
-                                                                  return 1428;
+                                                                  return 1430;
                                                                 }
                                                             }
                                                         }
@@ -10563,7 +10585,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  011001x1xx0x1011100xxxxxxxxxxxxx
                                                                  fsubr.  */
-                                                              return 1470;
+                                                              return 1472;
                                                             }
                                                           else
                                                             {
@@ -10571,7 +10593,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  011001x1xx0x1111100xxxxxxxxxxxxx
                                                                  fmin.  */
-                                                              return 1426;
+                                                              return 1428;
                                                             }
                                                         }
                                                     }
@@ -10585,7 +10607,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx110xxxxxxxx0xxxx
                                                      fcmuo.  */
-                                                  return 1392;
+                                                  return 1394;
                                                 }
                                               else
                                                 {
@@ -10593,7 +10615,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      011001x1xx0xxxxx110xxxxxxxx1xxxx
                                                      facge.  */
-                                                  return 1371;
+                                                  return 1373;
                                                 }
                                             }
                                         }
@@ -10607,7 +10629,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1000xxxxx1x0xxxxxxxxxxxxx
                                                      st1w.  */
-                                                  return 1890;
+                                                  return 1892;
                                                 }
                                               else
                                                 {
@@ -10615,7 +10637,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1100xxxxx1x0xxxxxxxxxxxxx
                                                      st1d.  */
-                                                  return 1869;
+                                                  return 1871;
                                                 }
                                             }
                                           else
@@ -10624,7 +10646,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  111001x1x10xxxxx1x0xxxxxxxxxxxxx
                                                  st1w.  */
-                                              return 1895;
+                                              return 1897;
                                             }
                                         }
                                     }
@@ -10648,7 +10670,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000000101xxxxxxxxxxxxx
                                                                      frintn.  */
-                                                                  return 1458;
+                                                                  return 1460;
                                                                 }
                                                               else
                                                                 {
@@ -10656,7 +10678,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx010000101xxxxxxxxxxxxx
                                                                      scvtf.  */
-                                                                  return 1804;
+                                                                  return 1806;
                                                                 }
                                                             }
                                                           else
@@ -10669,7 +10691,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x0001000101xxxxxxxxxxxxx
                                                                          fcvt.  */
-                                                                      return 1394;
+                                                                      return 1396;
                                                                     }
                                                                   else
                                                                     {
@@ -10677,7 +10699,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x1001000101xxxxxxxxxxxxx
                                                                          fcvt.  */
-                                                                      return 1396;
+                                                                      return 1398;
                                                                     }
                                                                 }
                                                               else
@@ -10686,7 +10708,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011000101xxxxxxxxxxxxx
                                                                      fcvtzs.  */
-                                                                  return 1404;
+                                                                  return 1406;
                                                                 }
                                                             }
                                                         }
@@ -10700,7 +10722,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000100101xxxxxxxxxxxxx
                                                                      frinta.  */
-                                                                  return 1455;
+                                                                  return 1457;
                                                                 }
                                                               else
                                                                 {
@@ -10710,7 +10732,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x0010100101xxxxxxxxxxxxx
                                                                          scvtf.  */
-                                                                      return 1803;
+                                                                      return 1805;
                                                                     }
                                                                   else
                                                                     {
@@ -10720,7 +10742,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x101010100101xxxxxxxxxxxxx
                                                                              scvtf.  */
-                                                                          return 1802;
+                                                                          return 1804;
                                                                         }
                                                                       else
                                                                         {
@@ -10728,7 +10750,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x111010100101xxxxxxxxxxxxx
                                                                              scvtf.  */
-                                                                          return 1806;
+                                                                          return 1808;
                                                                         }
                                                                     }
                                                                 }
@@ -10741,7 +10763,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001100101xxxxxxxxxxxxx
                                                                      frecpx.  */
-                                                                  return 1454;
+                                                                  return 1456;
                                                                 }
                                                               else
                                                                 {
@@ -10751,7 +10773,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x0011100101xxxxxxxxxxxxx
                                                                          fcvtzs.  */
-                                                                      return 1403;
+                                                                      return 1405;
                                                                     }
                                                                   else
                                                                     {
@@ -10761,7 +10783,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x101011100101xxxxxxxxxxxxx
                                                                              fcvtzs.  */
-                                                                          return 1401;
+                                                                          return 1403;
                                                                         }
                                                                       else
                                                                         {
@@ -10769,7 +10791,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x111011100101xxxxxxxxxxxxx
                                                                              fcvtzs.  */
-                                                                          return 1405;
+                                                                          return 1407;
                                                                         }
                                                                     }
                                                                 }
@@ -10788,7 +10810,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000010101xxxxxxxxxxxxx
                                                                      frintm.  */
-                                                                  return 1457;
+                                                                  return 1459;
                                                                 }
                                                               else
                                                                 {
@@ -10796,7 +10818,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx010010101xxxxxxxxxxxxx
                                                                      scvtf.  */
-                                                                  return 1801;
+                                                                  return 1803;
                                                                 }
                                                             }
                                                           else
@@ -10807,7 +10829,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001010101xxxxxxxxxxxxx
                                                                      fcvt.  */
-                                                                  return 1398;
+                                                                  return 1400;
                                                                 }
                                                               else
                                                                 {
@@ -10815,7 +10837,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011010101xxxxxxxxxxxxx
                                                                      fcvtzs.  */
-                                                                  return 1400;
+                                                                  return 1402;
                                                                 }
                                                             }
                                                         }
@@ -10829,7 +10851,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000110101xxxxxxxxxxxxx
                                                                      frintx.  */
-                                                                  return 1460;
+                                                                  return 1462;
                                                                 }
                                                               else
                                                                 {
@@ -10839,7 +10861,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x10x010110101xxxxxxxxxxxxx
                                                                          scvtf.  */
-                                                                      return 1805;
+                                                                      return 1807;
                                                                     }
                                                                   else
                                                                     {
@@ -10847,7 +10869,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x11x010110101xxxxxxxxxxxxx
                                                                          scvtf.  */
-                                                                      return 1807;
+                                                                      return 1809;
                                                                     }
                                                                 }
                                                             }
@@ -10859,7 +10881,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x10x0x1110101xxxxxxxxxxxxx
                                                                      fcvtzs.  */
-                                                                  return 1402;
+                                                                  return 1404;
                                                                 }
                                                               else
                                                                 {
@@ -10867,7 +10889,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x11x0x1110101xxxxxxxxxxxxx
                                                                      fcvtzs.  */
-                                                                  return 1406;
+                                                                  return 1408;
                                                                 }
                                                             }
                                                         }
@@ -10887,7 +10909,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000001101xxxxxxxxxxxxx
                                                                      frintp.  */
-                                                                  return 1459;
+                                                                  return 1461;
                                                                 }
                                                               else
                                                                 {
@@ -10895,7 +10917,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx010001101xxxxxxxxxxxxx
                                                                      ucvtf.  */
-                                                                  return 1956;
+                                                                  return 1958;
                                                                 }
                                                             }
                                                           else
@@ -10908,7 +10930,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x0001001101xxxxxxxxxxxxx
                                                                          fcvt.  */
-                                                                      return 1395;
+                                                                      return 1397;
                                                                     }
                                                                   else
                                                                     {
@@ -10916,7 +10938,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x1001001101xxxxxxxxxxxxx
                                                                          fcvt.  */
-                                                                      return 1397;
+                                                                      return 1399;
                                                                     }
                                                                 }
                                                               else
@@ -10925,7 +10947,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011001101xxxxxxxxxxxxx
                                                                      fcvtzu.  */
-                                                                  return 1411;
+                                                                  return 1413;
                                                                 }
                                                             }
                                                         }
@@ -10939,7 +10961,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1x00x0101101xxxxxxxxxxxxx
                                                                      ucvtf.  */
-                                                                  return 1955;
+                                                                  return 1957;
                                                                 }
                                                               else
                                                                 {
@@ -10949,7 +10971,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1010x0101101xxxxxxxxxxxxx
                                                                          ucvtf.  */
-                                                                      return 1954;
+                                                                      return 1956;
                                                                     }
                                                                   else
                                                                     {
@@ -10957,7 +10979,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1110x0101101xxxxxxxxxxxxx
                                                                          ucvtf.  */
-                                                                      return 1958;
+                                                                      return 1960;
                                                                     }
                                                                 }
                                                             }
@@ -10969,7 +10991,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001101101xxxxxxxxxxxxx
                                                                      fsqrt.  */
-                                                                  return 1465;
+                                                                  return 1467;
                                                                 }
                                                               else
                                                                 {
@@ -10979,7 +11001,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x1x0011101101xxxxxxxxxxxxx
                                                                          fcvtzu.  */
-                                                                      return 1410;
+                                                                      return 1412;
                                                                     }
                                                                   else
                                                                     {
@@ -10989,7 +11011,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x101011101101xxxxxxxxxxxxx
                                                                              fcvtzu.  */
-                                                                          return 1408;
+                                                                          return 1410;
                                                                         }
                                                                       else
                                                                         {
@@ -10997,7 +11019,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              011001x111011101101xxxxxxxxxxxxx
                                                                              fcvtzu.  */
-                                                                          return 1412;
+                                                                          return 1414;
                                                                         }
                                                                     }
                                                                 }
@@ -11016,7 +11038,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000011101xxxxxxxxxxxxx
                                                                      frintz.  */
-                                                                  return 1461;
+                                                                  return 1463;
                                                                 }
                                                               else
                                                                 {
@@ -11024,7 +11046,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx010011101xxxxxxxxxxxxx
                                                                      ucvtf.  */
-                                                                  return 1953;
+                                                                  return 1955;
                                                                 }
                                                             }
                                                           else
@@ -11035,7 +11057,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx001011101xxxxxxxxxxxxx
                                                                      fcvt.  */
-                                                                  return 1399;
+                                                                  return 1401;
                                                                 }
                                                               else
                                                                 {
@@ -11043,7 +11065,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx011011101xxxxxxxxxxxxx
                                                                      fcvtzu.  */
-                                                                  return 1407;
+                                                                  return 1409;
                                                                 }
                                                             }
                                                         }
@@ -11057,7 +11079,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x1xx000111101xxxxxxxxxxxxx
                                                                      frinti.  */
-                                                                  return 1456;
+                                                                  return 1458;
                                                                 }
                                                               else
                                                                 {
@@ -11067,7 +11089,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x10x010111101xxxxxxxxxxxxx
                                                                          ucvtf.  */
-                                                                      return 1957;
+                                                                      return 1959;
                                                                     }
                                                                   else
                                                                     {
@@ -11075,7 +11097,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          011001x11x010111101xxxxxxxxxxxxx
                                                                          ucvtf.  */
-                                                                      return 1959;
+                                                                      return 1961;
                                                                     }
                                                                 }
                                                             }
@@ -11087,7 +11109,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x10x0x1111101xxxxxxxxxxxxx
                                                                      fcvtzu.  */
-                                                                  return 1409;
+                                                                  return 1411;
                                                                 }
                                                               else
                                                                 {
@@ -11095,7 +11117,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      011001x11x0x1111101xxxxxxxxxxxxx
                                                                      fcvtzu.  */
-                                                                  return 1413;
+                                                                  return 1415;
                                                                 }
                                                             }
                                                         }
@@ -11112,7 +11134,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1000xxxxx101xxxxxxxxxxxxx
                                                          st1w.  */
-                                                      return 1891;
+                                                      return 1893;
                                                     }
                                                   else
                                                     {
@@ -11120,7 +11142,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1100xxxxx101xxxxxxxxxxxxx
                                                          st1d.  */
-                                                      return 1870;
+                                                      return 1872;
                                                     }
                                                 }
                                               else
@@ -11131,7 +11153,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1010xxxxx101xxxxxxxxxxxxx
                                                          st1w.  */
-                                                      return 1898;
+                                                      return 1900;
                                                     }
                                                   else
                                                     {
@@ -11139,7 +11161,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1110xxxxx101xxxxxxxxxxxxx
                                                          st1d.  */
-                                                      return 1874;
+                                                      return 1876;
                                                     }
                                                 }
                                             }
@@ -11152,7 +11174,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx0xxxxx111xxxxxxxxxxxxx
                                                  facgt.  */
-                                              return 1372;
+                                              return 1374;
                                             }
                                           else
                                             {
@@ -11162,7 +11184,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1xx00xxxx111xxxxxxxxxxxxx
                                                      st1w.  */
-                                                  return 1899;
+                                                  return 1901;
                                                 }
                                               else
                                                 {
@@ -11174,7 +11196,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x10001xxxx111xxxxxxxxxxxxx
                                                              stnt1w.  */
-                                                          return 1933;
+                                                          return 1935;
                                                         }
                                                       else
                                                         {
@@ -11182,7 +11204,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x11001xxxx111xxxxxxxxxxxxx
                                                              stnt1d.  */
-                                                          return 1929;
+                                                          return 1931;
                                                         }
                                                     }
                                                   else
@@ -11193,7 +11215,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x10101xxxx111xxxxxxxxxxxxx
                                                              st3w.  */
-                                                          return 1917;
+                                                          return 1919;
                                                         }
                                                       else
                                                         {
@@ -11201,7 +11223,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x11101xxxx111xxxxxxxxxxxxx
                                                              st3d.  */
-                                                          return 1913;
+                                                          return 1915;
                                                         }
                                                     }
                                                 }
@@ -11232,7 +11254,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10000010xxxxxxxxxxxxxx
                                                                  cntp.  */
-                                                              return 1341;
+                                                              return 1343;
                                                             }
                                                           else
                                                             {
@@ -11246,7 +11268,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              001001x1xx10100010x000xxxxxxxxxx
                                                                              sqincp.  */
-                                                                          return 1848;
+                                                                          return 1850;
                                                                         }
                                                                       else
                                                                         {
@@ -11254,7 +11276,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                              10987654321098765432109876543210
                                                                              001001x1xx10100010x100xxxxxxxxxx
                                                                              wrffr.  */
-                                                                          return 2021;
+                                                                          return 2023;
                                                                         }
                                                                     }
                                                                   else
@@ -11263,7 +11285,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                          10987654321098765432109876543210
                                                                          001001x1xx10100010xx10xxxxxxxxxx
                                                                          sqincp.  */
-                                                                      return 1850;
+                                                                      return 1852;
                                                                     }
                                                                 }
                                                               else
@@ -11272,7 +11294,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10100010xxx1xxxxxxxxxx
                                                                      sqincp.  */
-                                                                  return 1849;
+                                                                  return 1851;
                                                                 }
                                                             }
                                                         }
@@ -11286,7 +11308,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x10010x00xxxxxxxxxxx
                                                                      incp.  */
-                                                                  return 1479;
+                                                                  return 1481;
                                                                 }
                                                               else
                                                                 {
@@ -11294,7 +11316,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x10010x10xxxxxxxxxxx
                                                                      setffr.  */
-                                                                  return 1815;
+                                                                  return 1817;
                                                                 }
                                                             }
                                                           else
@@ -11303,7 +11325,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10x10010xx1xxxxxxxxxxx
                                                                  incp.  */
-                                                              return 1480;
+                                                              return 1482;
                                                             }
                                                         }
                                                     }
@@ -11317,7 +11339,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10xx1010xx00xxxxxxxxxx
                                                                  sqdecp.  */
-                                                              return 1834;
+                                                              return 1836;
                                                             }
                                                           else
                                                             {
@@ -11325,7 +11347,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10xx1010xx10xxxxxxxxxx
                                                                  sqdecp.  */
-                                                              return 1836;
+                                                              return 1838;
                                                             }
                                                         }
                                                       else
@@ -11334,7 +11356,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx10xx1010xxx1xxxxxxxxxx
                                                              sqdecp.  */
-                                                          return 1835;
+                                                          return 1837;
                                                         }
                                                     }
                                                 }
@@ -11352,7 +11374,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x00110xx00xxxxxxxxxx
                                                                      uqincp.  */
-                                                                  return 1996;
+                                                                  return 1998;
                                                                 }
                                                               else
                                                                 {
@@ -11360,7 +11382,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x10110xx00xxxxxxxxxx
                                                                      decp.  */
-                                                                  return 1354;
+                                                                  return 1356;
                                                                 }
                                                             }
                                                           else
@@ -11369,7 +11391,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10xx1110xx00xxxxxxxxxx
                                                                  uqdecp.  */
-                                                              return 1982;
+                                                              return 1984;
                                                             }
                                                         }
                                                       else
@@ -11382,7 +11404,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x00110xx10xxxxxxxxxx
                                                                      uqincp.  */
-                                                                  return 1997;
+                                                                  return 1999;
                                                                 }
                                                               else
                                                                 {
@@ -11390,7 +11412,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                      10987654321098765432109876543210
                                                                      001001x1xx10x10110xx10xxxxxxxxxx
                                                                      decp.  */
-                                                                  return 1355;
+                                                                  return 1357;
                                                                 }
                                                             }
                                                           else
@@ -11399,7 +11421,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10xx1110xx10xxxxxxxxxx
                                                                  uqdecp.  */
-                                                              return 1983;
+                                                              return 1985;
                                                             }
                                                         }
                                                     }
@@ -11411,7 +11433,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx10xx0110xxx1xxxxxxxxxx
                                                              uqincp.  */
-                                                          return 1998;
+                                                          return 2000;
                                                         }
                                                       else
                                                         {
@@ -11419,7 +11441,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx10xx1110xxx1xxxxxxxxxx
                                                              uqdecp.  */
-                                                          return 1984;
+                                                          return 1986;
                                                         }
                                                     }
                                                 }
@@ -11434,7 +11456,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x10010xxxx10xxxxxxxxxxxxxx
                                                          ld1sh.  */
-                                                      return 1572;
+                                                      return 1574;
                                                     }
                                                   else
                                                     {
@@ -11442,7 +11464,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x11010xxxx10xxxxxxxxxxxxxx
                                                          ld1sb.  */
-                                                      return 1559;
+                                                      return 1561;
                                                     }
                                                 }
                                               else
@@ -11453,7 +11475,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x10110xxxx10xxxxxxxxxxxxxx
                                                          ld1w.  */
-                                                      return 1591;
+                                                      return 1593;
                                                     }
                                                   else
                                                     {
@@ -11461,7 +11483,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x11110xxxx10xxxxxxxxxxxxxx
                                                          ld1d.  */
-                                                      return 1511;
+                                                      return 1513;
                                                     }
                                                 }
                                             }
@@ -11476,7 +11498,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x10011xxxx10xxxxxxxxxxxxxx
                                                      ldnf1sh.  */
-                                                  return 1705;
+                                                  return 1707;
                                                 }
                                               else
                                                 {
@@ -11484,7 +11506,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x11011xxxx10xxxxxxxxxxxxxx
                                                      ldnf1sb.  */
-                                                  return 1702;
+                                                  return 1704;
                                                 }
                                             }
                                           else
@@ -11495,7 +11517,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x10111xxxx10xxxxxxxxxxxxxx
                                                      ldnf1w.  */
-                                                  return 1708;
+                                                  return 1710;
                                                 }
                                               else
                                                 {
@@ -11503,7 +11525,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x01001x11111xxxx10xxxxxxxxxxxxxx
                                                      ldnf1d.  */
-                                                  return 1697;
+                                                  return 1699;
                                                 }
                                             }
                                         }
@@ -11526,7 +11548,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10000011xxxxxxxxxxxxxx
                                                                  add.  */
-                                                              return 1268;
+                                                              return 1270;
                                                             }
                                                           else
                                                             {
@@ -11534,7 +11556,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx11000011xxxxxxxxxxxxxx
                                                                  mul.  */
-                                                              return 1737;
+                                                              return 1739;
                                                             }
                                                         }
                                                       else
@@ -11545,7 +11567,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10100011xxxxxxxxxxxxxx
                                                                  smax.  */
-                                                              return 1816;
+                                                              return 1818;
                                                             }
                                                           else
                                                             {
@@ -11553,7 +11575,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx11100011xxxxxxxxxxxxxx
                                                                  dup.  */
-                                                              return 1360;
+                                                              return 1362;
                                                             }
                                                         }
                                                     }
@@ -11563,7 +11585,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1xx1xx10011xxxxxxxxxxxxxx
                                                          sqadd.  */
-                                                      return 1825;
+                                                      return 1827;
                                                     }
                                                 }
                                               else
@@ -11574,7 +11596,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1xx1xx01011xxxxxxxxxxxxxx
                                                          smin.  */
-                                                      return 1819;
+                                                      return 1821;
                                                     }
                                                   else
                                                     {
@@ -11582,7 +11604,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1xx1xx11011xxxxxxxxxxxxxx
                                                          sqsub.  */
-                                                      return 1855;
+                                                      return 1857;
                                                     }
                                                 }
                                             }
@@ -11598,7 +11620,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx1x000111xxxxxxxxxxxxxx
                                                              sub.  */
-                                                          return 1937;
+                                                          return 1939;
                                                         }
                                                       else
                                                         {
@@ -11608,7 +11630,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx10100111xxxxxxxxxxxxxx
                                                                  umax.  */
-                                                              return 1965;
+                                                              return 1967;
                                                             }
                                                           else
                                                             {
@@ -11616,7 +11638,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  001001x1xx11100111xxxxxxxxxxxxxx
                                                                  fdup.  */
-                                                              return 1416;
+                                                              return 1418;
                                                             }
                                                         }
                                                     }
@@ -11626,7 +11648,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1xx1xx10111xxxxxxxxxxxxxx
                                                          uqadd.  */
-                                                      return 1973;
+                                                      return 1975;
                                                     }
                                                 }
                                               else
@@ -11639,7 +11661,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx1x001111xxxxxxxxxxxxxx
                                                              subr.  */
-                                                          return 1939;
+                                                          return 1941;
                                                         }
                                                       else
                                                         {
@@ -11647,7 +11669,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              001001x1xx1x101111xxxxxxxxxxxxxx
                                                              umin.  */
-                                                          return 1968;
+                                                          return 1970;
                                                         }
                                                     }
                                                   else
@@ -11656,7 +11678,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          001001x1xx1xx11111xxxxxxxxxxxxxx
                                                          uqsub.  */
-                                                      return 2003;
+                                                      return 2005;
                                                     }
                                                 }
                                             }
@@ -11673,7 +11695,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1001xxxxx110xxxxxxxxxxxxx
                                                          ld2w.  */
-                                                      return 1599;
+                                                      return 1601;
                                                     }
                                                   else
                                                     {
@@ -11681,7 +11703,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1101xxxxx110xxxxxxxxxxxxx
                                                          ld2d.  */
-                                                      return 1595;
+                                                      return 1597;
                                                     }
                                                 }
                                               else
@@ -11692,7 +11714,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1011xxxxx110xxxxxxxxxxxxx
                                                          ld4w.  */
-                                                      return 1615;
+                                                      return 1617;
                                                     }
                                                   else
                                                     {
@@ -11700,7 +11722,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1111xxxxx110xxxxxxxxxxxxx
                                                          ld4d.  */
-                                                      return 1611;
+                                                      return 1613;
                                                     }
                                                 }
                                             }
@@ -11714,7 +11736,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1001xxxxx111xxxxxxxxxxxxx
                                                          ld2w.  */
-                                                      return 1600;
+                                                      return 1602;
                                                     }
                                                   else
                                                     {
@@ -11722,7 +11744,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1101xxxxx111xxxxxxxxxxxxx
                                                          ld2d.  */
-                                                      return 1596;
+                                                      return 1598;
                                                     }
                                                 }
                                               else
@@ -11733,7 +11755,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1011xxxxx111xxxxxxxxxxxxx
                                                          ld4w.  */
-                                                      return 1616;
+                                                      return 1618;
                                                     }
                                                   else
                                                     {
@@ -11741,7 +11763,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          101001x1111xxxxx111xxxxxxxxxxxxx
                                                          ld4d.  */
-                                                      return 1612;
+                                                      return 1614;
                                                     }
                                                 }
                                             }
@@ -11760,7 +11782,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx100xxxxxxxxxxxxx
                                                  fmad.  */
-                                              return 1418;
+                                              return 1420;
                                             }
                                           else
                                             {
@@ -11768,7 +11790,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx110xxxxxxxxxxxxx
                                                  fnmad.  */
-                                              return 1448;
+                                              return 1450;
                                             }
                                         }
                                       else
@@ -11781,7 +11803,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1001xxxxx1x0xxxxxxxxxxxxx
                                                      st1w.  */
-                                                  return 1892;
+                                                  return 1894;
                                                 }
                                               else
                                                 {
@@ -11789,7 +11811,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1101xxxxx1x0xxxxxxxxxxxxx
                                                      st1d.  */
-                                                  return 1871;
+                                                  return 1873;
                                                 }
                                             }
                                           else
@@ -11798,7 +11820,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  111001x1x11xxxxx1x0xxxxxxxxxxxxx
                                                  st1w.  */
-                                              return 1897;
+                                              return 1899;
                                             }
                                         }
                                     }
@@ -11812,7 +11834,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx101xxxxxxxxxxxxx
                                                  fmsb.  */
-                                              return 1439;
+                                              return 1441;
                                             }
                                           else
                                             {
@@ -11824,7 +11846,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1001xxxxx101xxxxxxxxxxxxx
                                                          st1w.  */
-                                                      return 1893;
+                                                      return 1895;
                                                     }
                                                   else
                                                     {
@@ -11832,7 +11854,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x1101xxxxx101xxxxxxxxxxxxx
                                                          st1d.  */
-                                                      return 1872;
+                                                      return 1874;
                                                     }
                                                 }
                                               else
@@ -11841,7 +11863,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      111001x1x11xxxxx101xxxxxxxxxxxxx
                                                      st1w.  */
-                                                  return 1900;
+                                                  return 1902;
                                                 }
                                             }
                                         }
@@ -11853,7 +11875,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  011001x1xx1xxxxx111xxxxxxxxxxxxx
                                                  fnmsb.  */
-                                              return 1451;
+                                              return 1453;
                                             }
                                           else
                                             {
@@ -11865,7 +11887,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x10x10xxxx111xxxxxxxxxxxxx
                                                          st1w.  */
-                                                      return 1901;
+                                                      return 1903;
                                                     }
                                                   else
                                                     {
@@ -11873,7 +11895,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          111001x11x10xxxx111xxxxxxxxxxxxx
                                                          st1d.  */
-                                                      return 1875;
+                                                      return 1877;
                                                     }
                                                 }
                                               else
@@ -11886,7 +11908,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x10011xxxx111xxxxxxxxxxxxx
                                                              st2w.  */
-                                                          return 1909;
+                                                          return 1911;
                                                         }
                                                       else
                                                         {
@@ -11894,7 +11916,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x11011xxxx111xxxxxxxxxxxxx
                                                              st2d.  */
-                                                          return 1905;
+                                                          return 1907;
                                                         }
                                                     }
                                                   else
@@ -11905,7 +11927,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x10111xxxx111xxxxxxxxxxxxx
                                                              st4w.  */
-                                                          return 1925;
+                                                          return 1927;
                                                         }
                                                       else
                                                         {
@@ -11913,7 +11935,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              111001x11111xxxx111xxxxxxxxxxxxx
                                                              st4d.  */
-                                                          return 1921;
+                                                          return 1923;
                                                         }
                                                     }
                                                 }
@@ -12230,7 +12252,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      x1010101xx1xxxxxxxxxxxxxxxxxxxxx
                                      sysl.  */
-                                  return 1219;
+                                  return 1221;
                                 }
                               else
                                 {
@@ -12273,7 +12295,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                              10987654321098765432109876543210
                              xx110110xxxxxxxxxxxxxxxxxxxxxxxx
                              tbz.  */
-                          return 1229;
+                          return 1231;
                         }
                     }
                   else
@@ -12292,7 +12314,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                              10987654321098765432109876543210
                              xx110111xxxxxxxxxxxxxxxxxxxxxxxx
                              tbnz.  */
-                          return 1230;
+                          return 1232;
                         }
                     }
                 }
@@ -12324,7 +12346,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      xx10110000xxxxxxxxxxxxxxxxxxxxxx
                                      stnp.  */
-                                  return 970;
+                                  return 972;
                                 }
                             }
                           else
@@ -12376,7 +12398,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      xx10110100xxxxxxxxxxxxxxxxxxxxxx
                                      stp.  */
-                                  return 974;
+                                  return 976;
                                 }
                             }
                         }
@@ -12440,7 +12462,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  xx10110x10xxxxxxxxxxxxxxxxxxxxxx
                                  stp.  */
-                              return 980;
+                              return 982;
                             }
                         }
                     }
@@ -12464,7 +12486,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      xx10110001xxxxxxxxxxxxxxxxxxxxxx
                                      ldnp.  */
-                                  return 971;
+                                  return 973;
                                 }
                             }
                           else
@@ -12516,7 +12538,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                      10987654321098765432109876543210
                                      xx10110101xxxxxxxxxxxxxxxxxxxxxx
                                      ldp.  */
-                                  return 975;
+                                  return 977;
                                 }
                             }
                         }
@@ -12580,7 +12602,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                  10987654321098765432109876543210
                                  xx10110x11xxxxxxxxxxxxxxxxxxxxxx
                                  ldp.  */
-                              return 981;
+                              return 983;
                             }
                         }
                     }
@@ -12595,7 +12617,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                              10987654321098765432109876543210
                              xx011100xxxxxxxxxxxxxxxxxxxxxxxx
                              ldr.  */
-                          return 985;
+                          return 987;
                         }
                       else
                         {
@@ -12853,7 +12875,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx
                                                          sdot.  */
-                                                      return 2040;
+                                                      return 2042;
                                                     }
                                                 }
                                               else
@@ -12985,7 +13007,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x001110000xxxxxxxxxxxxxxxxxxxxx
                                              eor3.  */
-                                          return 2047;
+                                          return 2049;
                                         }
                                       else
                                         {
@@ -12993,7 +13015,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x001110100xxxxxxxxxxxxxxxxxxxxx
                                              xar.  */
-                                          return 2049;
+                                          return 2051;
                                         }
                                     }
                                   else
@@ -13004,7 +13026,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                              10987654321098765432109876543210
                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx
                                              sm3ss1.  */
-                                          return 2051;
+                                          return 2053;
                                         }
                                       else
                                         {
@@ -13018,7 +13040,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          1x001110010xxxxx1xxx00xxxxxxxxxx
                                                          sm3tt1a.  */
-                                                      return 2052;
+                                                      return 2054;
                                                     }
                                                   else
                                                     {
@@ -13026,7 +13048,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          1x001110110xxxxx1xxx00xxxxxxxxxx
                                                          sha512su0.  */
-                                                      return 2045;
+                                                      return 2047;
                                                     }
                                                 }
                                               else
@@ -13035,7 +13057,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx
                                                      sm3tt2a.  */
-                                                  return 2054;
+                                                  return 2056;
                                                 }
                                             }
                                           else
@@ -13048,7 +13070,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          1x001110010xxxxx1xxx01xxxxxxxxxx
                                                          sm3tt1b.  */
-                                                      return 2053;
+                                                      return 2055;
                                                     }
                                                   else
                                                     {
@@ -13056,7 +13078,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          1x001110110xxxxx1xxx01xxxxxxxxxx
                                                          sm4e.  */
-                                                      return 2058;
+                                                      return 2060;
                                                     }
                                                 }
                                               else
@@ -13065,7 +13087,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx
                                                      sm3tt2b.  */
-                                                  return 2055;
+                                                  return 2057;
                                                 }
                                             }
                                         }
@@ -13246,7 +13268,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                          10987654321098765432109876543210
                                                          xx101110xx0xxxxx100101xxxxxxxxxx
                                                          udot.  */
-                                                      return 2039;
+                                                      return 2041;
                                                     }
                                                 }
                                               else
@@ -14157,7 +14179,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                          10987654321098765432109876543210
                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx
                                          bcax.  */
-                                      return 2050;
+                                      return 2052;
                                     }
                                 }
                               else
@@ -14768,7 +14790,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  11001110xx1xxxxx100000xxxxxxxxxx
                                                                  sha512h.  */
-                                                              return 2043;
+                                                              return 2045;
                                                             }
                                                         }
                                                     }
@@ -14820,7 +14842,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  11001110xx1xxxxx110000xxxxxxxxxx
                                                                  sm3partw1.  */
-                                                              return 2056;
+                                                              return 2058;
                                                             }
                                                         }
                                                     }
@@ -15063,7 +15085,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              1x001110xx1xxxxx100010xxxxxxxxxx
                                                              sha512su1.  */
-                                                          return 2046;
+                                                          return 2048;
                                                         }
                                                     }
                                                   else
@@ -15139,7 +15161,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x0011100x1xxxxx110010xxxxxxxxxx
                                                                  sm4ekey.  */
-                                                              return 2059;
+                                                              return 2061;
                                                             }
                                                         }
                                                       else
@@ -15965,7 +15987,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              1x001110xx1xxxxx100001xxxxxxxxxx
                                                              sha512h2.  */
-                                                          return 2044;
+                                                          return 2046;
                                                         }
                                                     }
                                                   else
@@ -15997,7 +16019,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  1x0011100x1xxxxx110001xxxxxxxxxx
                                                                  sm3partw2.  */
-                                                              return 2057;
+                                                              return 2059;
                                                             }
                                                         }
                                                       else
@@ -16237,7 +16259,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                              10987654321098765432109876543210
                                                              1x001110xx1xxxxx100011xxxxxxxxxx
                                                              rax1.  */
-                                                          return 2048;
+                                                          return 2050;
                                                         }
                                                     }
                                                   else
@@ -16269,7 +16291,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x01011100x1xxxxx110011xxxxxxxxxx
                                                                  fmlal2.  */
-                                                              return 2062;
+                                                              return 2064;
                                                             }
                                                           else
                                                             {
@@ -16277,7 +16299,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x11011100x1xxxxx110011xxxxxxxxxx
                                                                  fmlal2.  */
-                                                              return 2066;
+                                                              return 2068;
                                                             }
                                                         }
                                                     }
@@ -16299,7 +16321,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x01011101x1xxxxx110011xxxxxxxxxx
                                                                  fmlsl2.  */
-                                                              return 2063;
+                                                              return 2065;
                                                             }
                                                           else
                                                             {
@@ -16307,7 +16329,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x11011101x1xxxxx110011xxxxxxxxxx
                                                                  fmlsl2.  */
-                                                              return 2067;
+                                                              return 2069;
                                                             }
                                                         }
                                                     }
@@ -16346,7 +16368,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x00011100x1xxxxx111011xxxxxxxxxx
                                                                  fmlal.  */
-                                                              return 2060;
+                                                              return 2062;
                                                             }
                                                           else
                                                             {
@@ -16354,7 +16376,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x10011100x1xxxxx111011xxxxxxxxxx
                                                                  fmlal.  */
-                                                              return 2064;
+                                                              return 2066;
                                                             }
                                                         }
                                                       else
@@ -16376,7 +16398,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x00011101x1xxxxx111011xxxxxxxxxx
                                                                  fmlsl.  */
-                                                              return 2061;
+                                                              return 2063;
                                                             }
                                                           else
                                                             {
@@ -16384,7 +16406,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                                  10987654321098765432109876543210
                                                                  x10011101x1xxxxx111011xxxxxxxxxx
                                                                  fmlsl.  */
-                                                              return 2065;
+                                                              return 2067;
                                                             }
                                                         }
                                                       else
@@ -18192,7 +18214,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx
                                                      fmlal.  */
-                                                  return 2068;
+                                                  return 2070;
                                                 }
                                               else
                                                 {
@@ -18200,7 +18222,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx
                                                      fmlal.  */
-                                                  return 2072;
+                                                  return 2074;
                                                 }
                                             }
                                           else
@@ -18222,7 +18244,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx
                                                      fmlsl.  */
-                                                  return 2069;
+                                                  return 2071;
                                                 }
                                               else
                                                 {
@@ -18230,7 +18252,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx
                                                      fmlsl.  */
-                                                  return 2073;
+                                                  return 2075;
                                                 }
                                             }
                                           else
@@ -18736,7 +18758,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx
                                                      fmlal2.  */
-                                                  return 2070;
+                                                  return 2072;
                                                 }
                                               else
                                                 {
@@ -18744,7 +18766,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx
                                                      fmlal2.  */
-                                                  return 2074;
+                                                  return 2076;
                                                 }
                                             }
                                         }
@@ -18766,7 +18788,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx
                                                      fmlsl2.  */
-                                                  return 2071;
+                                                  return 2073;
                                                 }
                                               else
                                                 {
@@ -18774,7 +18796,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                      10987654321098765432109876543210
                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx
                                                      fmlsl2.  */
-                                                  return 2075;
+                                                  return 2077;
                                                 }
                                             }
                                         }
@@ -18830,7 +18852,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx
                                                  sdot.  */
-                                              return 2042;
+                                              return 2044;
                                             }
                                           else
                                             {
@@ -18838,7 +18860,7 @@ aarch64_opcode_lookup_1 (uint32_t word)
                                                  10987654321098765432109876543210
                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx
                                                  udot.  */
-                                              return 2041;
+                                              return 2043;
                                             }
                                         }
                                     }
@@ -19414,58 +19436,58 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)
     case 19: return NULL;		/* addg --> NULL.  */
     case 16: value = 20; break;	/* sub --> subg.  */
     case 20: return NULL;		/* subg --> NULL.  */
-    case 968: value = 972; break;	/* stnp --> stp.  */
-    case 972: return NULL;		/* stp --> NULL.  */
-    case 966: value = 967; break;	/* stllrb --> stllrh.  */
-    case 967: return NULL;		/* stllrh --> NULL.  */
-    case 969: value = 973; break;	/* ldnp --> ldp.  */
-    case 973: return NULL;		/* ldp --> NULL.  */
-    case 1618: value = 1619; break;	/* ldff1b --> ldff1b.  */
-    case 1619: return NULL;		/* ldff1b --> NULL.  */
-    case 1674: value = 1675; break;	/* ldff1sw --> ldff1sw.  */
-    case 1675: return NULL;		/* ldff1sw --> NULL.  */
-    case 1622: value = 1623; break;	/* ldff1b --> ldff1b.  */
-    case 1623: return NULL;		/* ldff1b --> NULL.  */
-    case 1641: value = 1642; break;	/* ldff1h --> ldff1h.  */
-    case 1642: return NULL;		/* ldff1h --> NULL.  */
+    case 970: value = 974; break;	/* stnp --> stp.  */
+    case 974: return NULL;		/* stp --> NULL.  */
+    case 968: value = 969; break;	/* stllrb --> stllrh.  */
+    case 969: return NULL;		/* stllrh --> NULL.  */
+    case 971: value = 975; break;	/* ldnp --> ldp.  */
+    case 975: return NULL;		/* ldp --> NULL.  */
     case 1620: value = 1621; break;	/* ldff1b --> ldff1b.  */
     case 1621: return NULL;		/* ldff1b --> NULL.  */
-    case 1639: value = 1640; break;	/* ldff1h --> ldff1h.  */
-    case 1640: return NULL;		/* ldff1h --> NULL.  */
+    case 1676: value = 1677; break;	/* ldff1sw --> ldff1sw.  */
+    case 1677: return NULL;		/* ldff1sw --> NULL.  */
     case 1624: value = 1625; break;	/* ldff1b --> ldff1b.  */
     case 1625: return NULL;		/* ldff1b --> NULL.  */
     case 1643: value = 1644; break;	/* ldff1h --> ldff1h.  */
     case 1644: return NULL;		/* ldff1h --> NULL.  */
-    case 1664: value = 1665; break;	/* ldff1sh --> ldff1sh.  */
-    case 1665: return NULL;		/* ldff1sh --> NULL.  */
-    case 1652: value = 1653; break;	/* ldff1sb --> ldff1sb.  */
-    case 1653: return NULL;		/* ldff1sb --> NULL.  */
-    case 1683: value = 1684; break;	/* ldff1w --> ldff1w.  */
-    case 1684: return NULL;		/* ldff1w --> NULL.  */
-    case 1656: value = 1657; break;	/* ldff1sb --> ldff1sb.  */
-    case 1657: return NULL;		/* ldff1sb --> NULL.  */
+    case 1622: value = 1623; break;	/* ldff1b --> ldff1b.  */
+    case 1623: return NULL;		/* ldff1b --> NULL.  */
+    case 1641: value = 1642; break;	/* ldff1h --> ldff1h.  */
+    case 1642: return NULL;		/* ldff1h --> NULL.  */
+    case 1626: value = 1627; break;	/* ldff1b --> ldff1b.  */
+    case 1627: return NULL;		/* ldff1b --> NULL.  */
+    case 1645: value = 1646; break;	/* ldff1h --> ldff1h.  */
+    case 1646: return NULL;		/* ldff1h --> NULL.  */
     case 1666: value = 1667; break;	/* ldff1sh --> ldff1sh.  */
     case 1667: return NULL;		/* ldff1sh --> NULL.  */
     case 1654: value = 1655; break;	/* ldff1sb --> ldff1sb.  */
     case 1655: return NULL;		/* ldff1sb --> NULL.  */
     case 1685: value = 1686; break;	/* ldff1w --> ldff1w.  */
     case 1686: return NULL;		/* ldff1w --> NULL.  */
-    case 1630: value = 1631; break;	/* ldff1d --> ldff1d.  */
-    case 1631: return NULL;		/* ldff1d --> NULL.  */
+    case 1658: value = 1659; break;	/* ldff1sb --> ldff1sb.  */
+    case 1659: return NULL;		/* ldff1sb --> NULL.  */
+    case 1668: value = 1669; break;	/* ldff1sh --> ldff1sh.  */
+    case 1669: return NULL;		/* ldff1sh --> NULL.  */
+    case 1656: value = 1657; break;	/* ldff1sb --> ldff1sb.  */
+    case 1657: return NULL;		/* ldff1sb --> NULL.  */
+    case 1687: value = 1688; break;	/* ldff1w --> ldff1w.  */
+    case 1688: return NULL;		/* ldff1w --> NULL.  */
+    case 1632: value = 1633; break;	/* ldff1d --> ldff1d.  */
+    case 1633: return NULL;		/* ldff1d --> NULL.  */
     case 810: value = 811; break;	/* xaflag --> axflag.  */
-    case 811: value = 1186; break;	/* axflag --> msr.  */
-    case 1186: value = 1187; break;	/* msr --> hint.  */
-    case 1187: value = 1203; break;	/* hint --> clrex.  */
-    case 1203: value = 1204; break;	/* clrex --> dsb.  */
-    case 1204: value = 1207; break;	/* dsb --> dmb.  */
-    case 1207: value = 1208; break;	/* dmb --> isb.  */
-    case 1208: value = 1209; break;	/* isb --> sb.  */
-    case 1209: value = 1210; break;	/* sb --> sys.  */
-    case 1210: value = 1218; break;	/* sys --> msr.  */
-    case 1218: value = 2076; break;	/* msr --> cfinv.  */
-    case 2076: return NULL;		/* cfinv --> NULL.  */
-    case 1219: value = 1220; break;	/* sysl --> mrs.  */
-    case 1220: return NULL;		/* mrs --> NULL.  */
+    case 811: value = 1188; break;	/* axflag --> msr.  */
+    case 1188: value = 1189; break;	/* msr --> hint.  */
+    case 1189: value = 1205; break;	/* hint --> clrex.  */
+    case 1205: value = 1206; break;	/* clrex --> dsb.  */
+    case 1206: value = 1209; break;	/* dsb --> dmb.  */
+    case 1209: value = 1210; break;	/* dmb --> isb.  */
+    case 1210: value = 1211; break;	/* isb --> sb.  */
+    case 1211: value = 1212; break;	/* sb --> sys.  */
+    case 1212: value = 1220; break;	/* sys --> msr.  */
+    case 1220: value = 2078; break;	/* msr --> cfinv.  */
+    case 2078: return NULL;		/* cfinv --> NULL.  */
+    case 1221: value = 1222; break;	/* sysl --> mrs.  */
+    case 1222: return NULL;		/* mrs --> NULL.  */
     case 440: value = 441; break;	/* st4 --> st1.  */
     case 441: value = 442; break;	/* st1 --> st2.  */
     case 442: value = 443; break;	/* st2 --> st3.  */
@@ -19705,94 +19727,94 @@ aarch64_find_alias_opcode (const aarch64_opcode *opcode)
     case 744: value = 745; break;	/* umaddl --> umull.  */
     case 746: value = 747; break;	/* umsubl --> umnegl.  */
     case 757: value = 758; break;	/* extr --> ror.  */
-    case 988: value = 989; break;	/* and --> bic.  */
-    case 990: value = 991; break;	/* orr --> mov.  */
-    case 993: value = 994; break;	/* ands --> tst.  */
-    case 997: value = 999; break;	/* orr --> uxtw.  */
-    case 1000: value = 1001; break;	/* orn --> mvn.  */
-    case 1004: value = 1005; break;	/* ands --> tst.  */
-    case 1035: value = 1131; break;	/* ldaddb --> staddb.  */
-    case 1036: value = 1132; break;	/* ldaddh --> staddh.  */
-    case 1037: value = 1133; break;	/* ldadd --> stadd.  */
-    case 1039: value = 1134; break;	/* ldaddlb --> staddlb.  */
-    case 1042: value = 1135; break;	/* ldaddlh --> staddlh.  */
-    case 1045: value = 1136; break;	/* ldaddl --> staddl.  */
-    case 1047: value = 1137; break;	/* ldclrb --> stclrb.  */
-    case 1048: value = 1138; break;	/* ldclrh --> stclrh.  */
-    case 1049: value = 1139; break;	/* ldclr --> stclr.  */
-    case 1051: value = 1140; break;	/* ldclrlb --> stclrlb.  */
-    case 1054: value = 1141; break;	/* ldclrlh --> stclrlh.  */
-    case 1057: value = 1142; break;	/* ldclrl --> stclrl.  */
-    case 1059: value = 1143; break;	/* ldeorb --> steorb.  */
-    case 1060: value = 1144; break;	/* ldeorh --> steorh.  */
-    case 1061: value = 1145; break;	/* ldeor --> steor.  */
-    case 1063: value = 1146; break;	/* ldeorlb --> steorlb.  */
-    case 1066: value = 1147; break;	/* ldeorlh --> steorlh.  */
-    case 1069: value = 1148; break;	/* ldeorl --> steorl.  */
-    case 1071: value = 1149; break;	/* ldsetb --> stsetb.  */
-    case 1072: value = 1150; break;	/* ldseth --> stseth.  */
-    case 1073: value = 1151; break;	/* ldset --> stset.  */
-    case 1075: value = 1152; break;	/* ldsetlb --> stsetlb.  */
-    case 1078: value = 1153; break;	/* ldsetlh --> stsetlh.  */
-    case 1081: value = 1154; break;	/* ldsetl --> stsetl.  */
-    case 1083: value = 1155; break;	/* ldsmaxb --> stsmaxb.  */
-    case 1084: value = 1156; break;	/* ldsmaxh --> stsmaxh.  */
-    case 1085: value = 1157; break;	/* ldsmax --> stsmax.  */
-    case 1087: value = 1158; break;	/* ldsmaxlb --> stsmaxlb.  */
-    case 1090: value = 1159; break;	/* ldsmaxlh --> stsmaxlh.  */
-    case 1093: value = 1160; break;	/* ldsmaxl --> stsmaxl.  */
-    case 1095: value = 1161; break;	/* ldsminb --> stsminb.  */
-    case 1096: value = 1162; break;	/* ldsminh --> stsminh.  */
-    case 1097: value = 1163; break;	/* ldsmin --> stsmin.  */
-    case 1099: value = 1164; break;	/* ldsminlb --> stsminlb.  */
-    case 1102: value = 1165; break;	/* ldsminlh --> stsminlh.  */
-    case 1105: value = 1166; break;	/* ldsminl --> stsminl.  */
-    case 1107: value = 1167; break;	/* ldumaxb --> stumaxb.  */
-    case 1108: value = 1168; break;	/* ldumaxh --> stumaxh.  */
-    case 1109: value = 1169; break;	/* ldumax --> stumax.  */
-    case 1111: value = 1170; break;	/* ldumaxlb --> stumaxlb.  */
-    case 1114: value = 1171; break;	/* ldumaxlh --> stumaxlh.  */
-    case 1117: value = 1172; break;	/* ldumaxl --> stumaxl.  */
-    case 1119: value = 1173; break;	/* lduminb --> stuminb.  */
-    case 1120: value = 1174; break;	/* lduminh --> stuminh.  */
-    case 1121: value = 1175; break;	/* ldumin --> stumin.  */
-    case 1123: value = 1176; break;	/* lduminlb --> stuminlb.  */
-    case 1126: value = 1177; break;	/* lduminlh --> stuminlh.  */
-    case 1129: value = 1178; break;	/* lduminl --> stuminl.  */
-    case 1179: value = 1180; break;	/* movn --> mov.  */
-    case 1181: value = 1182; break;	/* movz --> mov.  */
-    case 1187: value = 1228; break;	/* hint --> autibsp.  */
-    case 1204: value = 1206; break;	/* dsb --> pssbb.  */
-    case 1210: value = 1217; break;	/* sys --> cpp.  */
-    case 1276: value = 2026; break;	/* and --> bic.  */
-    case 1278: value = 1259; break;	/* and --> mov.  */
-    case 1279: value = 1263; break;	/* ands --> movs.  */
-    case 1314: value = 2027; break;	/* cmpge --> cmple.  */
-    case 1317: value = 2030; break;	/* cmpgt --> cmplt.  */
-    case 1319: value = 2028; break;	/* cmphi --> cmplo.  */
-    case 1322: value = 2029; break;	/* cmphs --> cmpls.  */
-    case 1344: value = 1256; break;	/* cpy --> mov.  */
-    case 1345: value = 1258; break;	/* cpy --> mov.  */
-    case 1346: value = 2037; break;	/* cpy --> fmov.  */
-    case 1358: value = 1251; break;	/* dup --> mov.  */
-    case 1359: value = 1253; break;	/* dup --> mov.  */
-    case 1360: value = 2036; break;	/* dup --> fmov.  */
-    case 1361: value = 1254; break;	/* dupm --> mov.  */
-    case 1363: value = 2031; break;	/* eor --> eon.  */
-    case 1365: value = 1264; break;	/* eor --> not.  */
-    case 1366: value = 1265; break;	/* eors --> nots.  */
-    case 1371: value = 2032; break;	/* facge --> facle.  */
-    case 1372: value = 2033; break;	/* facgt --> faclt.  */
-    case 1385: value = 2034; break;	/* fcmge --> fcmle.  */
-    case 1387: value = 2035; break;	/* fcmgt --> fcmlt.  */
-    case 1393: value = 1248; break;	/* fcpy --> fmov.  */
-    case 1416: value = 1247; break;	/* fdup --> fmov.  */
-    case 1747: value = 1249; break;	/* orr --> mov.  */
-    case 1748: value = 2038; break;	/* orr --> orn.  */
-    case 1750: value = 1252; break;	/* orr --> mov.  */
-    case 1751: value = 1262; break;	/* orrs --> movs.  */
-    case 1813: value = 1257; break;	/* sel --> mov.  */
-    case 1814: value = 1260; break;	/* sel --> mov.  */
+    case 990: value = 991; break;	/* and --> bic.  */
+    case 992: value = 993; break;	/* orr --> mov.  */
+    case 995: value = 996; break;	/* ands --> tst.  */
+    case 999: value = 1001; break;	/* orr --> uxtw.  */
+    case 1002: value = 1003; break;	/* orn --> mvn.  */
+    case 1006: value = 1007; break;	/* ands --> tst.  */
+    case 1037: value = 1133; break;	/* ldaddb --> staddb.  */
+    case 1038: value = 1134; break;	/* ldaddh --> staddh.  */
+    case 1039: value = 1135; break;	/* ldadd --> stadd.  */
+    case 1041: value = 1136; break;	/* ldaddlb --> staddlb.  */
+    case 1044: value = 1137; break;	/* ldaddlh --> staddlh.  */
+    case 1047: value = 1138; break;	/* ldaddl --> staddl.  */
+    case 1049: value = 1139; break;	/* ldclrb --> stclrb.  */
+    case 1050: value = 1140; break;	/* ldclrh --> stclrh.  */
+    case 1051: value = 1141; break;	/* ldclr --> stclr.  */
+    case 1053: value = 1142; break;	/* ldclrlb --> stclrlb.  */
+    case 1056: value = 1143; break;	/* ldclrlh --> stclrlh.  */
+    case 1059: value = 1144; break;	/* ldclrl --> stclrl.  */
+    case 1061: value = 1145; break;	/* ldeorb --> steorb.  */
+    case 1062: value = 1146; break;	/* ldeorh --> steorh.  */
+    case 1063: value = 1147; break;	/* ldeor --> steor.  */
+    case 1065: value = 1148; break;	/* ldeorlb --> steorlb.  */
+    case 1068: value = 1149; break;	/* ldeorlh --> steorlh.  */
+    case 1071: value = 1150; break;	/* ldeorl --> steorl.  */
+    case 1073: value = 1151; break;	/* ldsetb --> stsetb.  */
+    case 1074: value = 1152; break;	/* ldseth --> stseth.  */
+    case 1075: value = 1153; break;	/* ldset --> stset.  */
+    case 1077: value = 1154; break;	/* ldsetlb --> stsetlb.  */
+    case 1080: value = 1155; break;	/* ldsetlh --> stsetlh.  */
+    case 1083: value = 1156; break;	/* ldsetl --> stsetl.  */
+    case 1085: value = 1157; break;	/* ldsmaxb --> stsmaxb.  */
+    case 1086: value = 1158; break;	/* ldsmaxh --> stsmaxh.  */
+    case 1087: value = 1159; break;	/* ldsmax --> stsmax.  */
+    case 1089: value = 1160; break;	/* ldsmaxlb --> stsmaxlb.  */
+    case 1092: value = 1161; break;	/* ldsmaxlh --> stsmaxlh.  */
+    case 1095: value = 1162; break;	/* ldsmaxl --> stsmaxl.  */
+    case 1097: value = 1163; break;	/* ldsminb --> stsminb.  */
+    case 1098: value = 1164; break;	/* ldsminh --> stsminh.  */
+    case 1099: value = 1165; break;	/* ldsmin --> stsmin.  */
+    case 1101: value = 1166; break;	/* ldsminlb --> stsminlb.  */
+    case 1104: value = 1167; break;	/* ldsminlh --> stsminlh.  */
+    case 1107: value = 1168; break;	/* ldsminl --> stsminl.  */
+    case 1109: value = 1169; break;	/* ldumaxb --> stumaxb.  */
+    case 1110: value = 1170; break;	/* ldumaxh --> stumaxh.  */
+    case 1111: value = 1171; break;	/* ldumax --> stumax.  */
+    case 1113: value = 1172; break;	/* ldumaxlb --> stumaxlb.  */
+    case 1116: value = 1173; break;	/* ldumaxlh --> stumaxlh.  */
+    case 1119: value = 1174; break;	/* ldumaxl --> stumaxl.  */
+    case 1121: value = 1175; break;	/* lduminb --> stuminb.  */
+    case 1122: value = 1176; break;	/* lduminh --> stuminh.  */
+    case 1123: value = 1177; break;	/* ldumin --> stumin.  */
+    case 1125: value = 1178; break;	/* lduminlb --> stuminlb.  */
+    case 1128: value = 1179; break;	/* lduminlh --> stuminlh.  */
+    case 1131: value = 1180; break;	/* lduminl --> stuminl.  */
+    case 1181: value = 1182; break;	/* movn --> mov.  */
+    case 1183: value = 1184; break;	/* movz --> mov.  */
+    case 1189: value = 1230; break;	/* hint --> autibsp.  */
+    case 1206: value = 1208; break;	/* dsb --> pssbb.  */
+    case 1212: value = 1219; break;	/* sys --> cpp.  */
+    case 1278: value = 2028; break;	/* and --> bic.  */
+    case 1280: value = 1261; break;	/* and --> mov.  */
+    case 1281: value = 1265; break;	/* ands --> movs.  */
+    case 1316: value = 2029; break;	/* cmpge --> cmple.  */
+    case 1319: value = 2032; break;	/* cmpgt --> cmplt.  */
+    case 1321: value = 2030; break;	/* cmphi --> cmplo.  */
+    case 1324: value = 2031; break;	/* cmphs --> cmpls.  */
+    case 1346: value = 1258; break;	/* cpy --> mov.  */
+    case 1347: value = 1260; break;	/* cpy --> mov.  */
+    case 1348: value = 2039; break;	/* cpy --> fmov.  */
+    case 1360: value = 1253; break;	/* dup --> mov.  */
+    case 1361: value = 1255; break;	/* dup --> mov.  */
+    case 1362: value = 2038; break;	/* dup --> fmov.  */
+    case 1363: value = 1256; break;	/* dupm --> mov.  */
+    case 1365: value = 2033; break;	/* eor --> eon.  */
+    case 1367: value = 1266; break;	/* eor --> not.  */
+    case 1368: value = 1267; break;	/* eors --> nots.  */
+    case 1373: value = 2034; break;	/* facge --> facle.  */
+    case 1374: value = 2035; break;	/* facgt --> faclt.  */
+    case 1387: value = 2036; break;	/* fcmge --> fcmle.  */
+    case 1389: value = 2037; break;	/* fcmgt --> fcmlt.  */
+    case 1395: value = 1250; break;	/* fcpy --> fmov.  */
+    case 1418: value = 1249; break;	/* fdup --> fmov.  */
+    case 1749: value = 1251; break;	/* orr --> mov.  */
+    case 1750: value = 2040; break;	/* orr --> orn.  */
+    case 1752: value = 1254; break;	/* orr --> mov.  */
+    case 1753: value = 1264; break;	/* orrs --> movs.  */
+    case 1815: value = 1259; break;	/* sel --> mov.  */
+    case 1816: value = 1262; break;	/* sel --> mov.  */
     default: return NULL;
     }
 
@@ -19861,127 +19883,127 @@ aarch64_find_next_alias_opcode (const aarch64_opcode *opcode)
     case 745: value = 744; break;	/* umull --> umaddl.  */
     case 747: value = 746; break;	/* umnegl --> umsubl.  */
     case 758: value = 757; break;	/* ror --> extr.  */
-    case 989: value = 988; break;	/* bic --> and.  */
-    case 991: value = 990; break;	/* mov --> orr.  */
-    case 994: value = 993; break;	/* tst --> ands.  */
-    case 999: value = 998; break;	/* uxtw --> mov.  */
-    case 998: value = 997; break;	/* mov --> orr.  */
-    case 1001: value = 1000; break;	/* mvn --> orn.  */
-    case 1005: value = 1004; break;	/* tst --> ands.  */
-    case 1131: value = 1035; break;	/* staddb --> ldaddb.  */
-    case 1132: value = 1036; break;	/* staddh --> ldaddh.  */
-    case 1133: value = 1037; break;	/* stadd --> ldadd.  */
-    case 1134: value = 1039; break;	/* staddlb --> ldaddlb.  */
-    case 1135: value = 1042; break;	/* staddlh --> ldaddlh.  */
-    case 1136: value = 1045; break;	/* staddl --> ldaddl.  */
-    case 1137: value = 1047; break;	/* stclrb --> ldclrb.  */
-    case 1138: value = 1048; break;	/* stclrh --> ldclrh.  */
-    case 1139: value = 1049; break;	/* stclr --> ldclr.  */
-    case 1140: value = 1051; break;	/* stclrlb --> ldclrlb.  */
-    case 1141: value = 1054; break;	/* stclrlh --> ldclrlh.  */
-    case 1142: value = 1057; break;	/* stclrl --> ldclrl.  */
-    case 1143: value = 1059; break;	/* steorb --> ldeorb.  */
-    case 1144: value = 1060; break;	/* steorh --> ldeorh.  */
-    case 1145: value = 1061; break;	/* steor --> ldeor.  */
-    case 1146: value = 1063; break;	/* steorlb --> ldeorlb.  */
-    case 1147: value = 1066; break;	/* steorlh --> ldeorlh.  */
-    case 1148: value = 1069; break;	/* steorl --> ldeorl.  */
-    case 1149: value = 1071; break;	/* stsetb --> ldsetb.  */
-    case 1150: value = 1072; break;	/* stseth --> ldseth.  */
-    case 1151: value = 1073; break;	/* stset --> ldset.  */
-    case 1152: value = 1075; break;	/* stsetlb --> ldsetlb.  */
-    case 1153: value = 1078; break;	/* stsetlh --> ldsetlh.  */
-    case 1154: value = 1081; break;	/* stsetl --> ldsetl.  */
-    case 1155: value = 1083; break;	/* stsmaxb --> ldsmaxb.  */
-    case 1156: value = 1084; break;	/* stsmaxh --> ldsmaxh.  */
-    case 1157: value = 1085; break;	/* stsmax --> ldsmax.  */
-    case 1158: value = 1087; break;	/* stsmaxlb --> ldsmaxlb.  */
-    case 1159: value = 1090; break;	/* stsmaxlh --> ldsmaxlh.  */
-    case 1160: value = 1093; break;	/* stsmaxl --> ldsmaxl.  */
-    case 1161: value = 1095; break;	/* stsminb --> ldsminb.  */
-    case 1162: value = 1096; break;	/* stsminh --> ldsminh.  */
-    case 1163: value = 1097; break;	/* stsmin --> ldsmin.  */
-    case 1164: value = 1099; break;	/* stsminlb --> ldsminlb.  */
-    case 1165: value = 1102; break;	/* stsminlh --> ldsminlh.  */
-    case 1166: value = 1105; break;	/* stsminl --> ldsminl.  */
-    case 1167: value = 1107; break;	/* stumaxb --> ldumaxb.  */
-    case 1168: value = 1108; break;	/* stumaxh --> ldumaxh.  */
-    case 1169: value = 1109; break;	/* stumax --> ldumax.  */
-    case 1170: value = 1111; break;	/* stumaxlb --> ldumaxlb.  */
-    case 1171: value = 1114; break;	/* stumaxlh --> ldumaxlh.  */
-    case 1172: value = 1117; break;	/* stumaxl --> ldumaxl.  */
-    case 1173: value = 1119; break;	/* stuminb --> lduminb.  */
-    case 1174: value = 1120; break;	/* stuminh --> lduminh.  */
-    case 1175: value = 1121; break;	/* stumin --> ldumin.  */
-    case 1176: value = 1123; break;	/* stuminlb --> lduminlb.  */
-    case 1177: value = 1126; break;	/* stuminlh --> lduminlh.  */
-    case 1178: value = 1129; break;	/* stuminl --> lduminl.  */
-    case 1180: value = 1179; break;	/* mov --> movn.  */
-    case 1182: value = 1181; break;	/* mov --> movz.  */
-    case 1228: value = 1227; break;	/* autibsp --> autibz.  */
-    case 1227: value = 1226; break;	/* autibz --> autiasp.  */
-    case 1226: value = 1225; break;	/* autiasp --> autiaz.  */
-    case 1225: value = 1224; break;	/* autiaz --> pacibsp.  */
-    case 1224: value = 1223; break;	/* pacibsp --> pacibz.  */
-    case 1223: value = 1222; break;	/* pacibz --> paciasp.  */
-    case 1222: value = 1221; break;	/* paciasp --> paciaz.  */
-    case 1221: value = 1202; break;	/* paciaz --> psb.  */
-    case 1202: value = 1201; break;	/* psb --> esb.  */
-    case 1201: value = 1200; break;	/* esb --> autib1716.  */
-    case 1200: value = 1199; break;	/* autib1716 --> autia1716.  */
-    case 1199: value = 1198; break;	/* autia1716 --> pacib1716.  */
-    case 1198: value = 1197; break;	/* pacib1716 --> pacia1716.  */
-    case 1197: value = 1196; break;	/* pacia1716 --> xpaclri.  */
-    case 1196: value = 1195; break;	/* xpaclri --> sevl.  */
-    case 1195: value = 1194; break;	/* sevl --> sev.  */
-    case 1194: value = 1193; break;	/* sev --> wfi.  */
-    case 1193: value = 1192; break;	/* wfi --> wfe.  */
-    case 1192: value = 1191; break;	/* wfe --> yield.  */
-    case 1191: value = 1190; break;	/* yield --> bti.  */
-    case 1190: value = 1189; break;	/* bti --> csdb.  */
-    case 1189: value = 1188; break;	/* csdb --> nop.  */
-    case 1188: value = 1187; break;	/* nop --> hint.  */
-    case 1206: value = 1205; break;	/* pssbb --> ssbb.  */
-    case 1205: value = 1204; break;	/* ssbb --> dsb.  */
-    case 1217: value = 1216; break;	/* cpp --> dvp.  */
-    case 1216: value = 1215; break;	/* dvp --> cfp.  */
-    case 1215: value = 1214; break;	/* cfp --> tlbi.  */
-    case 1214: value = 1213; break;	/* tlbi --> ic.  */
-    case 1213: value = 1212; break;	/* ic --> dc.  */
-    case 1212: value = 1211; break;	/* dc --> at.  */
-    case 1211: value = 1210; break;	/* at --> sys.  */
-    case 2026: value = 1276; break;	/* bic --> and.  */
-    case 1259: value = 1278; break;	/* mov --> and.  */
-    case 1263: value = 1279; break;	/* movs --> ands.  */
-    case 2027: value = 1314; break;	/* cmple --> cmpge.  */
-    case 2030: value = 1317; break;	/* cmplt --> cmpgt.  */
-    case 2028: value = 1319; break;	/* cmplo --> cmphi.  */
-    case 2029: value = 1322; break;	/* cmpls --> cmphs.  */
-    case 1256: value = 1344; break;	/* mov --> cpy.  */
-    case 1258: value = 1345; break;	/* mov --> cpy.  */
-    case 2037: value = 1261; break;	/* fmov --> mov.  */
-    case 1261: value = 1346; break;	/* mov --> cpy.  */
-    case 1251: value = 1358; break;	/* mov --> dup.  */
-    case 1253: value = 1250; break;	/* mov --> mov.  */
-    case 1250: value = 1359; break;	/* mov --> dup.  */
-    case 2036: value = 1255; break;	/* fmov --> mov.  */
-    case 1255: value = 1360; break;	/* mov --> dup.  */
-    case 1254: value = 1361; break;	/* mov --> dupm.  */
-    case 2031: value = 1363; break;	/* eon --> eor.  */
-    case 1264: value = 1365; break;	/* not --> eor.  */
-    case 1265: value = 1366; break;	/* nots --> eors.  */
-    case 2032: value = 1371; break;	/* facle --> facge.  */
-    case 2033: value = 1372; break;	/* faclt --> facgt.  */
-    case 2034: value = 1385; break;	/* fcmle --> fcmge.  */
-    case 2035: value = 1387; break;	/* fcmlt --> fcmgt.  */
-    case 1248: value = 1393; break;	/* fmov --> fcpy.  */
-    case 1247: value = 1416; break;	/* fmov --> fdup.  */
-    case 1249: value = 1747; break;	/* mov --> orr.  */
-    case 2038: value = 1748; break;	/* orn --> orr.  */
-    case 1252: value = 1750; break;	/* mov --> orr.  */
-    case 1262: value = 1751; break;	/* movs --> orrs.  */
-    case 1257: value = 1813; break;	/* mov --> sel.  */
-    case 1260: value = 1814; break;	/* mov --> sel.  */
+    case 991: value = 990; break;	/* bic --> and.  */
+    case 993: value = 992; break;	/* mov --> orr.  */
+    case 996: value = 995; break;	/* tst --> ands.  */
+    case 1001: value = 1000; break;	/* uxtw --> mov.  */
+    case 1000: value = 999; break;	/* mov --> orr.  */
+    case 1003: value = 1002; break;	/* mvn --> orn.  */
+    case 1007: value = 1006; break;	/* tst --> ands.  */
+    case 1133: value = 1037; break;	/* staddb --> ldaddb.  */
+    case 1134: value = 1038; break;	/* staddh --> ldaddh.  */
+    case 1135: value = 1039; break;	/* stadd --> ldadd.  */
+    case 1136: value = 1041; break;	/* staddlb --> ldaddlb.  */
+    case 1137: value = 1044; break;	/* staddlh --> ldaddlh.  */
+    case 1138: value = 1047; break;	/* staddl --> ldaddl.  */
+    case 1139: value = 1049; break;	/* stclrb --> ldclrb.  */
+    case 1140: value = 1050; break;	/* stclrh --> ldclrh.  */
+    case 1141: value = 1051; break;	/* stclr --> ldclr.  */
+    case 1142: value = 1053; break;	/* stclrlb --> ldclrlb.  */
+    case 1143: value = 1056; break;	/* stclrlh --> ldclrlh.  */
+    case 1144: value = 1059; break;	/* stclrl --> ldclrl.  */
+    case 1145: value = 1061; break;	/* steorb --> ldeorb.  */
+    case 1146: value = 1062; break;	/* steorh --> ldeorh.  */
+    case 1147: value = 1063; break;	/* steor --> ldeor.  */
+    case 1148: value = 1065; break;	/* steorlb --> ldeorlb.  */
+    case 1149: value = 1068; break;	/* steorlh --> ldeorlh.  */
+    case 1150: value = 1071; break;	/* steorl --> ldeorl.  */
+    case 1151: value = 1073; break;	/* stsetb --> ldsetb.  */
+    case 1152: value = 1074; break;	/* stseth --> ldseth.  */
+    case 1153: value = 1075; break;	/* stset --> ldset.  */
+    case 1154: value = 1077; break;	/* stsetlb --> ldsetlb.  */
+    case 1155: value = 1080; break;	/* stsetlh --> ldsetlh.  */
+    case 1156: value = 1083; break;	/* stsetl --> ldsetl.  */
+    case 1157: value = 1085; break;	/* stsmaxb --> ldsmaxb.  */
+    case 1158: value = 1086; break;	/* stsmaxh --> ldsmaxh.  */
+    case 1159: value = 1087; break;	/* stsmax --> ldsmax.  */
+    case 1160: value = 1089; break;	/* stsmaxlb --> ldsmaxlb.  */
+    case 1161: value = 1092; break;	/* stsmaxlh --> ldsmaxlh.  */
+    case 1162: value = 1095; break;	/* stsmaxl --> ldsmaxl.  */
+    case 1163: value = 1097; break;	/* stsminb --> ldsminb.  */
+    case 1164: value = 1098; break;	/* stsminh --> ldsminh.  */
+    case 1165: value = 1099; break;	/* stsmin --> ldsmin.  */
+    case 1166: value = 1101; break;	/* stsminlb --> ldsminlb.  */
+    case 1167: value = 1104; break;	/* stsminlh --> ldsminlh.  */
+    case 1168: value = 1107; break;	/* stsminl --> ldsminl.  */
+    case 1169: value = 1109; break;	/* stumaxb --> ldumaxb.  */
+    case 1170: value = 1110; break;	/* stumaxh --> ldumaxh.  */
+    case 1171: value = 1111; break;	/* stumax --> ldumax.  */
+    case 1172: value = 1113; break;	/* stumaxlb --> ldumaxlb.  */
+    case 1173: value = 1116; break;	/* stumaxlh --> ldumaxlh.  */
+    case 1174: value = 1119; break;	/* stumaxl --> ldumaxl.  */
+    case 1175: value = 1121; break;	/* stuminb --> lduminb.  */
+    case 1176: value = 1122; break;	/* stuminh --> lduminh.  */
+    case 1177: value = 1123; break;	/* stumin --> ldumin.  */
+    case 1178: value = 1125; break;	/* stuminlb --> lduminlb.  */
+    case 1179: value = 1128; break;	/* stuminlh --> lduminlh.  */
+    case 1180: value = 1131; break;	/* stuminl --> lduminl.  */
+    case 1182: value = 1181; break;	/* mov --> movn.  */
+    case 1184: value = 1183; break;	/* mov --> movz.  */
+    case 1230: value = 1229; break;	/* autibsp --> autibz.  */
+    case 1229: value = 1228; break;	/* autibz --> autiasp.  */
+    case 1228: value = 1227; break;	/* autiasp --> autiaz.  */
+    case 1227: value = 1226; break;	/* autiaz --> pacibsp.  */
+    case 1226: value = 1225; break;	/* pacibsp --> pacibz.  */
+    case 1225: value = 1224; break;	/* pacibz --> paciasp.  */
+    case 1224: value = 1223; break;	/* paciasp --> paciaz.  */
+    case 1223: value = 1204; break;	/* paciaz --> psb.  */
+    case 1204: value = 1203; break;	/* psb --> esb.  */
+    case 1203: value = 1202; break;	/* esb --> autib1716.  */
+    case 1202: value = 1201; break;	/* autib1716 --> autia1716.  */
+    case 1201: value = 1200; break;	/* autia1716 --> pacib1716.  */
+    case 1200: value = 1199; break;	/* pacib1716 --> pacia1716.  */
+    case 1199: value = 1198; break;	/* pacia1716 --> xpaclri.  */
+    case 1198: value = 1197; break;	/* xpaclri --> sevl.  */
+    case 1197: value = 1196; break;	/* sevl --> sev.  */
+    case 1196: value = 1195; break;	/* sev --> wfi.  */
+    case 1195: value = 1194; break;	/* wfi --> wfe.  */
+    case 1194: value = 1193; break;	/* wfe --> yield.  */
+    case 1193: value = 1192; break;	/* yield --> bti.  */
+    case 1192: value = 1191; break;	/* bti --> csdb.  */
+    case 1191: value = 1190; break;	/* csdb --> nop.  */
+    case 1190: value = 1189; break;	/* nop --> hint.  */
+    case 1208: value = 1207; break;	/* pssbb --> ssbb.  */
+    case 1207: value = 1206; break;	/* ssbb --> dsb.  */
+    case 1219: value = 1218; break;	/* cpp --> dvp.  */
+    case 1218: value = 1217; break;	/* dvp --> cfp.  */
+    case 1217: value = 1216; break;	/* cfp --> tlbi.  */
+    case 1216: value = 1215; break;	/* tlbi --> ic.  */
+    case 1215: value = 1214; break;	/* ic --> dc.  */
+    case 1214: value = 1213; break;	/* dc --> at.  */
+    case 1213: value = 1212; break;	/* at --> sys.  */
+    case 2028: value = 1278; break;	/* bic --> and.  */
+    case 1261: value = 1280; break;	/* mov --> and.  */
+    case 1265: value = 1281; break;	/* movs --> ands.  */
+    case 2029: value = 1316; break;	/* cmple --> cmpge.  */
+    case 2032: value = 1319; break;	/* cmplt --> cmpgt.  */
+    case 2030: value = 1321; break;	/* cmplo --> cmphi.  */
+    case 2031: value = 1324; break;	/* cmpls --> cmphs.  */
+    case 1258: value = 1346; break;	/* mov --> cpy.  */
+    case 1260: value = 1347; break;	/* mov --> cpy.  */
+    case 2039: value = 1263; break;	/* fmov --> mov.  */
+    case 1263: value = 1348; break;	/* mov --> cpy.  */
+    case 1253: value = 1360; break;	/* mov --> dup.  */
+    case 1255: value = 1252; break;	/* mov --> mov.  */
+    case 1252: value = 1361; break;	/* mov --> dup.  */
+    case 2038: value = 1257; break;	/* fmov --> mov.  */
+    case 1257: value = 1362; break;	/* mov --> dup.  */
+    case 1256: value = 1363; break;	/* mov --> dupm.  */
+    case 2033: value = 1365; break;	/* eon --> eor.  */
+    case 1266: value = 1367; break;	/* not --> eor.  */
+    case 1267: value = 1368; break;	/* nots --> eors.  */
+    case 2034: value = 1373; break;	/* facle --> facge.  */
+    case 2035: value = 1374; break;	/* faclt --> facgt.  */
+    case 2036: value = 1387; break;	/* fcmle --> fcmge.  */
+    case 2037: value = 1389; break;	/* fcmlt --> fcmgt.  */
+    case 1250: value = 1395; break;	/* fmov --> fcpy.  */
+    case 1249: value = 1418; break;	/* fmov --> fdup.  */
+    case 1251: value = 1749; break;	/* mov --> orr.  */
+    case 2040: value = 1750; break;	/* orn --> orr.  */
+    case 1254: value = 1752; break;	/* mov --> orr.  */
+    case 1264: value = 1753; break;	/* movs --> orrs.  */
+    case 1259: value = 1815; break;	/* mov --> sel.  */
+    case 1262: value = 1816; break;	/* mov --> sel.  */
     default: return NULL;
     }
 
@@ -20005,14 +20027,14 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 5:
     case 6:
     case 7:
-    case 9:
+    case 8:
     case 10:
     case 11:
-    case 15:
+    case 12:
     case 16:
     case 17:
     case 18:
-    case 20:
+    case 19:
     case 21:
     case 22:
     case 23:
@@ -20022,7 +20044,7 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 27:
     case 28:
     case 29:
-    case 159:
+    case 30:
     case 160:
     case 161:
     case 162:
@@ -20032,7 +20054,7 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 166:
     case 167:
     case 168:
-    case 181:
+    case 169:
     case 182:
     case 183:
     case 184:
@@ -20041,38 +20063,38 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 187:
     case 188:
     case 189:
-    case 193:
-    case 196:
+    case 190:
+    case 194:
+    case 197:
       return aarch64_ext_regno (self, info, code, inst, errors);
-    case 8:
+    case 9:
       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);
-    case 12:
-      return aarch64_ext_regno_pair (self, info, code, inst, errors);
     case 13:
-      return aarch64_ext_reg_extended (self, info, code, inst, errors);
+      return aarch64_ext_regno_pair (self, info, code, inst, errors);
     case 14:
+      return aarch64_ext_reg_extended (self, info, code, inst, errors);
+    case 15:
       return aarch64_ext_reg_shifted (self, info, code, inst, errors);
-    case 19:
+    case 20:
       return aarch64_ext_ft (self, info, code, inst, errors);
-    case 30:
     case 31:
     case 32:
     case 33:
-    case 198:
-      return aarch64_ext_reglane (self, info, code, inst, errors);
     case 34:
-      return aarch64_ext_reglist (self, info, code, inst, errors);
+    case 199:
+      return aarch64_ext_reglane (self, info, code, inst, errors);
     case 35:
-      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);
+      return aarch64_ext_reglist (self, info, code, inst, errors);
     case 36:
-      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);
+      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);
     case 37:
-      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);
+      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);
     case 38:
+      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);
     case 39:
     case 40:
     case 41:
-    case 51:
+    case 42:
     case 52:
     case 53:
     case 54:
@@ -20088,14 +20110,14 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 64:
     case 65:
     case 66:
-    case 77:
+    case 67:
     case 78:
     case 79:
     case 80:
     case 81:
-    case 156:
-    case 158:
-    case 173:
+    case 82:
+    case 157:
+    case 159:
     case 174:
     case 175:
     case 176:
@@ -20103,92 +20125,92 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 178:
     case 179:
     case 180:
+    case 181:
       return aarch64_ext_imm (self, info, code, inst, errors);
-    case 42:
     case 43:
-      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);
     case 44:
+      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);
     case 45:
     case 46:
-      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);
     case 47:
+      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);
+    case 48:
       return aarch64_ext_shll_imm (self, info, code, inst, errors);
-    case 50:
-    case 147:
+    case 51:
+    case 148:
       return aarch64_ext_fpimm (self, info, code, inst, errors);
-    case 67:
-    case 154:
-      return aarch64_ext_limm (self, info, code, inst, errors);
     case 68:
-      return aarch64_ext_aimm (self, info, code, inst, errors);
+    case 155:
+      return aarch64_ext_limm (self, info, code, inst, errors);
     case 69:
-      return aarch64_ext_imm_half (self, info, code, inst, errors);
+      return aarch64_ext_aimm (self, info, code, inst, errors);
     case 70:
+      return aarch64_ext_imm_half (self, info, code, inst, errors);
+    case 71:
       return aarch64_ext_fbits (self, info, code, inst, errors);
-    case 72:
     case 73:
-    case 152:
-      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);
     case 74:
-    case 151:
-      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);
+    case 153:
+      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);
     case 75:
+    case 152:
+      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);
     case 76:
+    case 77:
       return aarch64_ext_cond (self, info, code, inst, errors);
-    case 82:
-    case 91:
-      return aarch64_ext_addr_simple (self, info, code, inst, errors);
     case 83:
-      return aarch64_ext_addr_regoff (self, info, code, inst, errors);
+    case 92:
+      return aarch64_ext_addr_simple (self, info, code, inst, errors);
     case 84:
+      return aarch64_ext_addr_regoff (self, info, code, inst, errors);
     case 85:
     case 86:
-    case 88:
-    case 90:
-      return aarch64_ext_addr_simm (self, info, code, inst, errors);
     case 87:
-      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);
     case 89:
+    case 91:
+      return aarch64_ext_addr_simm (self, info, code, inst, errors);
+    case 88:
+      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);
+    case 90:
       return aarch64_ext_addr_uimm12 (self, info, code, inst, errors);
-    case 92:
-      return aarch64_ext_addr_offset (self, info, code, inst, errors);
     case 93:
-      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);
+      return aarch64_ext_addr_offset (self, info, code, inst, errors);
     case 94:
-      return aarch64_ext_sysreg (self, info, code, inst, errors);
+      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);
     case 95:
-      return aarch64_ext_pstatefield (self, info, code, inst, errors);
+      return aarch64_ext_sysreg (self, info, code, inst, errors);
     case 96:
+      return aarch64_ext_pstatefield (self, info, code, inst, errors);
     case 97:
     case 98:
     case 99:
     case 100:
-      return aarch64_ext_sysins_op (self, info, code, inst, errors);
     case 101:
+      return aarch64_ext_sysins_op (self, info, code, inst, errors);
     case 102:
-      return aarch64_ext_barrier (self, info, code, inst, errors);
     case 103:
-      return aarch64_ext_prfop (self, info, code, inst, errors);
+      return aarch64_ext_barrier (self, info, code, inst, errors);
     case 104:
+      return aarch64_ext_prfop (self, info, code, inst, errors);
     case 105:
-      return aarch64_ext_hint (self, info, code, inst, errors);
     case 106:
-      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);
+      return aarch64_ext_hint (self, info, code, inst, errors);
     case 107:
+      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);
     case 108:
     case 109:
     case 110:
-      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);
     case 111:
-      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);
     case 112:
-      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);
     case 113:
+      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);
     case 114:
     case 115:
     case 116:
-      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);
     case 117:
+      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);
     case 118:
     case 119:
     case 120:
@@ -20201,8 +20223,8 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 127:
     case 128:
     case 129:
-      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);
     case 130:
+      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);
     case 131:
     case 132:
     case 133:
@@ -20210,48 +20232,49 @@ aarch64_extract_operand (const aarch64_operand *self,
     case 135:
     case 136:
     case 137:
-      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);
     case 138:
+      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);
     case 139:
     case 140:
     case 141:
-      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);
     case 142:
-      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);
     case 143:
-      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);
     case 144:
-      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);
     case 145:
-      return aarch64_ext_sve_aimm (self, info, code, inst, errors);
+      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);
     case 146:
+      return aarch64_ext_sve_aimm (self, info, code, inst, errors);
+    case 147:
       return aarch64_ext_sve_asimm (self, info, code, inst, errors);
-    case 148:
-      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);
     case 149:
-      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);
+      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);
     case 150:
+      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);
+    case 151:
       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);
-    case 153:
+    case 154:
       return aarch64_ext_inv_limm (self, info, code, inst, errors);
-    case 155:
+    case 156:
       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);
-    case 157:
+    case 158:
       return aarch64_ext_sve_scale (self, info, code, inst, errors);
-    case 169:
     case 170:
-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);
     case 171:
+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);
     case 172:
+    case 173:
       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);
-    case 190:
     case 191:
     case 192:
+    case 193:
       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);
-    case 194:
-      return aarch64_ext_sve_index (self, info, code, inst, errors);
     case 195:
-    case 197:
+      return aarch64_ext_sve_index (self, info, code, inst, errors);
+    case 196:
+    case 198:
       return aarch64_ext_sve_reglist (self, info, code, inst, errors);
     default: assert (0); abort ();
     }
diff --git a/opcodes/aarch64-dis.c b/opcodes/aarch64-dis.c
index 4c31f57451..eea649fd3c 100644
--- a/opcodes/aarch64-dis.c
+++ b/opcodes/aarch64-dis.c
@@ -37,6 +37,7 @@ enum map_type
 
 static enum map_type last_type;
 static int last_mapping_sym = -1;
+static bfd_vma last_stop_offset = 0;
 static bfd_vma last_mapping_addr = 0;
 
 /* Other options */
@@ -3317,14 +3318,26 @@ print_insn_aarch64 (bfd_vma pc,
   /* Aarch64 instructions are always little-endian */
   info->endian_code = BFD_ENDIAN_LITTLE;
 
+  /* Default to DATA.  A text section is required by the ABI to contain an
+     INSN mapping symbol at the start.  A data section has no such
+     requirement, hence if no mapping symbol is found the section must
+     contain only data.  This however isn't very useful if the user has
+     fully stripped the binaries.  If this is the case use the section
+     attributes to determine the default.  If we have no section default to
+     INSN as well, as we may be disassembling some raw bytes on a baremetal
+     HEX file or similar.  */
+  enum map_type type = MAP_DATA;
+  if ((info->section && info->section->flags & SEC_CODE) || !info->section)
+    type = MAP_INSN;
+
   /* First check the full symtab for a mapping symbol, even if there
      are no usable non-mapping symbols for this address.  */
   if (info->symtab_size != 0
       && bfd_asymbol_flavour (*info->symtab) == bfd_target_elf_flavour)
     {
-      enum map_type type = MAP_INSN;
       int last_sym = -1;
-      bfd_vma addr;
+      bfd_vma addr, section_vma = 0;
+      bfd_boolean can_use_search_opt_p;
       int n;
 
       if (pc <= last_mapping_addr)
@@ -3333,10 +3346,20 @@ print_insn_aarch64 (bfd_vma pc,
       /* Start scanning at the start of the function, or wherever
 	 we finished last time.  */
       n = info->symtab_pos + 1;
-      if (n < last_mapping_sym)
+
+      /* If the last stop offset is different from the current one it means we
+	 are disassembling a different glob of bytes.  As such the optimization
+	 would not be safe and we should start over.  */
+      can_use_search_opt_p = last_mapping_sym >= 0
+			     && info->stop_offset == last_stop_offset;
+
+      if (n >= last_mapping_sym && can_use_search_opt_p)
 	n = last_mapping_sym;
 
-      /* Scan up to the location being disassembled.  */
+      /* Look down while we haven't passed the location being disassembled.
+	 The reason for this is that there's no defined order between a symbol
+	 and an mapping symbol that may be at the same address.  We may have to
+	 look at least one position ahead.  */
       for (; n < info->symtab_size; n++)
 	{
 	  addr = bfd_asymbol_value (info->symtab[n]);
@@ -3352,13 +3375,24 @@ print_insn_aarch64 (bfd_vma pc,
       if (!found)
 	{
 	  n = info->symtab_pos;
-	  if (n < last_mapping_sym)
+	  if (n >= last_mapping_sym && can_use_search_opt_p)
 	    n = last_mapping_sym;
 
 	  /* No mapping symbol found at this address.  Look backwards
-	     for a preceeding one.  */
+	     for a preceeding one, but don't go pass the section start
+	     otherwise a data section with no mapping symbol can pick up
+	     a text mapping symbol of a preceeding section.  The documentation
+	     says section can be NULL, in which case we will seek up all the
+	     way to the top.  */
+	  if (info->section)
+	    section_vma = info->section->vma;
+
 	  for (; n >= 0; n--)
 	    {
+	      addr = bfd_asymbol_value (info->symtab[n]);
+	      if (addr < section_vma)
+		break;
+
 	      if (get_sym_code_type (info, n, &type))
 		{
 		  last_sym = n;
@@ -3370,6 +3404,7 @@ print_insn_aarch64 (bfd_vma pc,
 
       last_mapping_sym = last_sym;
       last_type = type;
+      last_stop_offset = info->stop_offset;
 
       /* Look a little bit ahead to see if we should print out
 	 less than four bytes of data.  If there's a symbol,
@@ -3395,8 +3430,11 @@ print_insn_aarch64 (bfd_vma pc,
 	    size = (pc & 1) ? 1 : 2;
 	}
     }
+  else
+    last_type = type;
 
-  if (last_type == MAP_DATA)
+  /* PR 10263: Disassemble data if requested to do so by the user.  */
+  if (last_type == MAP_DATA && ((info->flags & DISASSEMBLE_DATA) == 0))
     {
       /* size was set above.  */
       info->bytes_per_chunk = size;
diff --git a/opcodes/aarch64-opc-2.c b/opcodes/aarch64-opc-2.c
index 15f2b9ff5d..6902136e14 100644
--- a/opcodes/aarch64-opc-2.c
+++ b/opcodes/aarch64-opc-2.c
@@ -30,6 +30,7 @@ const struct aarch64_operand aarch64_operands[] =
   {AARCH64_OPND_CLASS_INT_REG, "Rm", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rm}, "an integer register"},
   {AARCH64_OPND_CLASS_INT_REG, "Rt", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, "an integer register"},
   {AARCH64_OPND_CLASS_INT_REG, "Rt2", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt2}, "an integer register"},
+  {AARCH64_OPND_CLASS_INT_REG, "Rt_SP", OPD_F_MAYBE_SP | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, "an integer or stack pointer register"},
   {AARCH64_OPND_CLASS_INT_REG, "Rs", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rs}, "an integer register"},
   {AARCH64_OPND_CLASS_INT_REG, "Ra", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Ra}, "an integer register"},
   {AARCH64_OPND_CLASS_INT_REG, "Rt_SYS", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, "an integer register"},
@@ -256,24 +257,24 @@ static const unsigned op_enum_table [] =
   925,
   931,
   932,
-  984,
-  985,
   986,
   987,
+  988,
+  989,
   12,
   636,
   637,
-  1179,
   1181,
   1183,
-  991,
+  1185,
+  993,
+  1184,
   1182,
-  1180,
   318,
   624,
   635,
   634,
-  989,
+  991,
   631,
   628,
   620,
@@ -283,7 +284,7 @@ static const unsigned op_enum_table [] =
   630,
   632,
   633,
-  999,
+  1001,
   664,
   667,
   670,
@@ -300,17 +301,17 @@ static const unsigned op_enum_table [] =
   391,
   413,
   415,
+  1254,
+  1259,
   1252,
-  1257,
-  1250,
-  1249,
-  1253,
-  1260,
+  1251,
+  1255,
   1262,
-  1263,
-  1259,
-  1265,
   1264,
+  1265,
+  1261,
+  1267,
+  1266,
   131,
 };
 
diff --git a/opcodes/aarch64-opc.c b/opcodes/aarch64-opc.c
index 22839ca724..32ab2e2ac4 100644
--- a/opcodes/aarch64-opc.c
+++ b/opcodes/aarch64-opc.c
@@ -3155,6 +3155,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,
 
     case AARCH64_OPND_Rd_SP:
     case AARCH64_OPND_Rn_SP:
+    case AARCH64_OPND_Rt_SP:
     case AARCH64_OPND_SVE_Rn_SP:
     case AARCH64_OPND_Rm_SP:
       assert (opnd->qualifier == AARCH64_OPND_QLF_W
@@ -3931,6 +3932,7 @@ const aarch64_sys_reg aarch64_sys_regs [] =
   { "tfsr_el12",	CPENC(3,5,C6,C6,0), F_ARCHEXT },
   { "rgsr_el1",		CPENC(3,0,C1,C0,5), F_ARCHEXT },
   { "gcr_el1",		CPENC(3,0,C1,C0,6), F_ARCHEXT },
+  { "gmid_el1",		CPENC(3,1,C0,C0,4), F_ARCHEXT | F_REG_READ }, /* RO */
   { "tpidr_el0",        CPENC(3,3,C13,C0,2),	0 },
   { "tpidrro_el0",      CPENC(3,3,C13,C0,3),	0 }, /* RW */
   { "tpidr_el1",        CPENC(3,0,C13,C0,4),	0 },
@@ -4402,7 +4404,8 @@ aarch64_sys_reg_supported_p (const aarch64_feature_set features,
        || reg->value == CPENC (3, 6, C6, C6, 0)
        || reg->value == CPENC (3, 5, C6, C6, 0)
        || reg->value == CPENC (3, 0, C1, C0, 5)
-       || reg->value == CPENC (3, 0, C1, C0, 6))
+       || reg->value == CPENC (3, 0, C1, C0, 6)
+       || reg->value == CPENC (3, 1, C0, C0, 4))
       && !(AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_MEMTAG)))
     return FALSE;
 
@@ -4901,10 +4904,6 @@ verify_constraints (const struct aarch64_inst *inst,
 		  case AARCH64_OPND_Vm:
 		  case AARCH64_OPND_Sn:
 		  case AARCH64_OPND_Sm:
-		  case AARCH64_OPND_Rn:
-		  case AARCH64_OPND_Rm:
-		  case AARCH64_OPND_Rn_SP:
-		  case AARCH64_OPND_Rm_SP:
 		    if (inst_op.reg.regno == blk_dest.reg.regno)
 		      {
 			num_op_used++;
diff --git a/opcodes/aarch64-tbl.h b/opcodes/aarch64-tbl.h
index ac05aae582..bc2f64fc15 100644
--- a/opcodes/aarch64-tbl.h
+++ b/opcodes/aarch64-tbl.h
@@ -125,10 +125,11 @@
   QLF1(X),			\
 }
 
-/* e.g. STG Xt, [<Xn|SP>, #<imm9>].  */
+/* e.g. STG <Xt|SP>, [<Xn|SP>, #<imm9>].  */
 #define QL_LDST_AT		\
 {				\
   QLF2(X, imm_tag),		\
+  QLF2(SP, imm_tag),		\
 }
 
 /* e.g. RBIT <Wd>, <Wn>.  */
@@ -3237,14 +3238,14 @@ struct aarch64_opcode aarch64_opcode_table[] =
   CORE_INSN ("ldr", 0xb8400400, 0xbfe00400, ldst_imm9, 0, OP2 (Rt, ADDR_SIMM9), QL_LDST_R, F_GPRSIZE_IN_Q),
   CORE_INSN ("ldrsw", 0xb8800400, 0xffe00400, ldst_imm9, 0, OP2 (Rt, ADDR_SIMM9), QL_LDST_X32, 0),
   /* Load/store Allocation Tag instructions.  */
-  MEMTAG_INSN ("stg",  0xd9200800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("stzg", 0xd9600800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("st2g", 0xd9a00800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("stz2g",0xd9e00800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("stg",  0xd9200400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("stzg", 0xd9600400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("st2g", 0xd9a00400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
-  MEMTAG_INSN ("stz2g",0xd9e00400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stg",  0xd9200800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stzg", 0xd9600800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("st2g", 0xd9a00800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stz2g",0xd9e00800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stg",  0xd9200400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stzg", 0xd9600400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("st2g", 0xd9a00400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
+  MEMTAG_INSN ("stz2g",0xd9e00400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),
   /* Load/store register (unsigned immediate).  */
   CORE_INSN ("strb", 0x39000000, 0xffc00000, ldst_pos, OP_STRB_POS, OP2 (Rt, ADDR_UIMM12), QL_LDST_W8, 0),
   CORE_INSN ("ldrb", 0x39400000, 0xffc00000, ldst_pos, OP_LDRB_POS, OP2 (Rt, ADDR_UIMM12), QL_LDST_W8, 0),
@@ -3324,6 +3325,8 @@ struct aarch64_opcode aarch64_opcode_table[] =
   RCPC_INSN ("ldaprb", 0x38bfc000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_W1_LDST_EXC, 0),
   RCPC_INSN ("ldaprh", 0x78bfc000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_W1_LDST_EXC, 0),
   RCPC_INSN ("ldapr", 0xb8bfc000, 0xbffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_R1NIL, F_GPRSIZE_IN_Q),
+  MEMTAG_INSN ("ldgm", 0xd9e00000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_X1NIL, 0),
+  MEMTAG_INSN ("stgm", 0xd9a00000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_X1NIL, 0),
   MEMTAG_INSN ("stzgm", 0xd9200000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_X1NIL, 0),
   /* Limited Ordering Regions load/store instructions.  */
   _LOR_INSN ("ldlar",  0x88df7c00, 0xbfe08000, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_R1NIL,       F_GPRSIZE_IN_Q),
@@ -3625,7 +3628,7 @@ struct aarch64_opcode aarch64_opcode_table[] =
   CORE_INSN ("ble", 0x5400000d, 0xff00001f, condbranch, 0, OP1 (ADDR_PCREL19), QL_PCREL_NIL, F_ALIAS | F_PSEUDO),
   /* SVE instructions.  */
   _SVE_INSN ("fmov", 0x2539c000, 0xff3fe000, sve_size_hsd, 0, OP2 (SVE_Zd, SVE_FPIMM8), OP_SVE_VU_HSD, F_ALIAS, 0),
-  _SVE_INSN ("fmov", 0x0510c000, 0xff30e000, sve_size_hsd, 0, OP3 (SVE_Zd, SVE_Pg4_16, SVE_FPIMM8), OP_SVE_VMU_HSD, F_ALIAS, 0),
+  _SVE_INSNC ("fmov", 0x0510c000, 0xff30e000, sve_size_hsd, 0, OP3 (SVE_Zd, SVE_Pg4_16, SVE_FPIMM8), OP_SVE_VMU_HSD, F_ALIAS, C_SCAN_MOVPRFX, 0),
   _SVE_INSN ("mov", 0x04603000, 0xffe0fc00, sve_misc, OP_MOV_Z_Z, OP2 (SVE_Zd, SVE_Zn), OP_SVE_DD, F_ALIAS | F_MISC, 0),
   _SVE_INSN ("mov", 0x05202000, 0xff20fc00, sve_index, OP_MOV_Z_V, OP2 (SVE_Zd, SVE_VZn), OP_SVE_VV_BHSDQ, F_ALIAS | F_MISC, 0),
   _SVE_INSN ("mov", 0x05203800, 0xff3ffc00, sve_size_bhsd, 0, OP2 (SVE_Zd, Rn_SP), OP_SVE_VR_BHSD, F_ALIAS, 0),
@@ -3777,20 +3780,20 @@ struct aarch64_opcode aarch64_opcode_table[] =
   _SVE_INSNC ("fcvt", 0x65c9a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
   _SVE_INSNC ("fcvt", 0x65caa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
   _SVE_INSNC ("fcvt", 0x65cba000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
-  _SVE_INSNC ("fcvtzs", 0x655aa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x655ca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x655ea000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x659ca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x65d8a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x65dca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzs", 0x65dea000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x655ba000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x655da000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x655fa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x659da000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x65d9a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x65dda000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("fcvtzu", 0x65dfa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX, 0),
+  _SVE_INSNC ("fcvtzs", 0x655aa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x655ca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x655ea000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x659ca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x65d8a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x65dca000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzs", 0x65dea000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x655ba000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x655da000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x655fa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x659da000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x65d9a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x65dda000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("fcvtzu", 0x65dfa000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
   _SVE_INSNC ("fdiv", 0x650d8000, 0xff3fe000, sve_size_hsd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_HSD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSNC ("fdivr", 0x650c8000, 0xff3fe000, sve_size_hsd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_HSD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSN ("fdup", 0x2539c000, 0xff3fe000, sve_size_hsd, 0, OP2 (SVE_Zd, SVE_FPIMM8), OP_SVE_VU_HSD, F_HAS_ALIAS, 0),
@@ -4186,13 +4189,13 @@ struct aarch64_opcode aarch64_opcode_table[] =
   _SVE_INSNC ("revw", 0x05e68000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX, 0),
   _SVE_INSNC ("sabd", 0x040c0000, 0xff3fe000, sve_size_bhsd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_BHSD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSN ("saddv", 0x04002000, 0xff3fe000, sve_size_bhs, 0, OP3 (SVE_Vd, SVE_Pg3, SVE_Zn), OP_SVE_DUV_BHS, 0, 0),
-  _SVE_INSNC ("scvtf", 0x6552a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x6554a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x6594a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x65d0a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x6556a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x65d4a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("scvtf", 0x65d6a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX, 0),
+  _SVE_INSNC ("scvtf", 0x6552a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x6554a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x6594a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x65d0a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x6556a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x65d4a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("scvtf", 0x65d6a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
   _SVE_INSNC ("sdiv", 0x04940000, 0xffbfe000, sve_size_sd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_SD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSNC ("sdivr", 0x04960000, 0xffbfe000, sve_size_sd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_SD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSNC ("sdot", 0x44800000, 0xffa0fc00, sve_size_sd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_SD_BH, 0, C_SCAN_MOVPRFX, 0),
@@ -4338,13 +4341,13 @@ struct aarch64_opcode aarch64_opcode_table[] =
   _SVE_INSN ("trn2", 0x05207400, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, 0),
   _SVE_INSNC ("uabd", 0x040d0000, 0xff3fe000, sve_size_bhsd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_BHSD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSN ("uaddv", 0x04012000, 0xff3fe000, sve_size_bhsd, 0, OP3 (SVE_Vd, SVE_Pg3, SVE_Zn), OP_SVE_DUV_BHSD, 0, 0),
-  _SVE_INSNC ("ucvtf", 0x6553a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x6555a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x6595a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x65d1a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x6557a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x65d5a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX, 0),
-  _SVE_INSNC ("ucvtf", 0x65d7a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX, 0),
+  _SVE_INSNC ("ucvtf", 0x6553a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMH, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x6555a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x6595a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x65d1a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMS, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x6557a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x65d5a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_SMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
+  _SVE_INSNC ("ucvtf", 0x65d7a000, 0xffffe000, sve_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_DMD, 0, C_SCAN_MOVPRFX | C_MAX_ELEM, 0),
   _SVE_INSNC ("udiv", 0x04950000, 0xffbfe000, sve_size_sd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_SD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSNC ("udivr", 0x04970000, 0xffbfe000, sve_size_sd, 0, OP4 (SVE_Zd, SVE_Pg3, SVE_Zd, SVE_Zm_5), OP_SVE_VMVV_SD, 0, C_SCAN_MOVPRFX, 2),
   _SVE_INSNC ("udot", 0x44800400, 0xffa0fc00, sve_size_sd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_SD_BH, 0, C_SCAN_MOVPRFX, 0),
@@ -4516,6 +4519,8 @@ struct aarch64_opcode aarch64_opcode_table[] =
     Y(INT_REG, regno, "Rm", 0, F(FLD_Rm), "an integer register")	\
     Y(INT_REG, regno, "Rt", 0, F(FLD_Rt), "an integer register")	\
     Y(INT_REG, regno, "Rt2", 0, F(FLD_Rt2), "an integer register")	\
+    Y(INT_REG, regno, "Rt_SP", OPD_F_MAYBE_SP, F(FLD_Rt),		\
+      "an integer or stack pointer register")				\
     Y(INT_REG, regno, "Rs", 0, F(FLD_Rs), "an integer register")	\
     Y(INT_REG, regno, "Ra", 0, F(FLD_Ra), "an integer register")	\
     X(INT_REG, ins_regno, ext_regrt_sysins, "Rt_SYS", 0, F(FLD_Rt),	\
diff --git a/opcodes/arm-dis.c b/opcodes/arm-dis.c
index 488522770f..d47ef32b97 100644
--- a/opcodes/arm-dis.c
+++ b/opcodes/arm-dis.c
@@ -56,15 +56,14 @@ struct arm_private_data
   /* The features to use when disassembling optional instructions.  */
   arm_feature_set features;
 
-  /* Whether any mapping symbols are present in the provided symbol
-     table.  -1 if we do not know yet, otherwise 0 or 1.  */
-  int has_mapping_symbols;
-
   /* Track the last type (although this doesn't seem to be useful) */
   enum map_type last_type;
 
   /* Tracking symbol table information */
   int last_mapping_sym;
+
+  /* The end range of the current range being disassembled.  */
+  bfd_vma last_stop_offset;
   bfd_vma last_mapping_addr;
 };
 
@@ -1788,7 +1787,8 @@ static const struct opcode32 arm_opcodes[] =
   /* V8 instructions.  */
   {ARM_FEATURE_CORE_LOW (ARM_EXT_V8),
     0x0320f005, 0x0fffffff, "sevl"},
-  {ARM_FEATURE_CORE_LOW (ARM_EXT_V8),
+  /* Defined in V8 but is in NOP space so available to all arch.  */
+  {ARM_FEATURE_CORE_LOW (ARM_EXT_V1),
     0xe1000070, 0xfff000f0, "hlt\t0x%16-19X%12-15X%8-11X%0-3X"},
   {ARM_FEATURE_CORE_HIGH (ARM_EXT2_ATOMICS),
     0x01800e90, 0x0ff00ff0, "stlex%c\t%12-15r, %0-3r, [%16-19R]"},
@@ -6350,52 +6350,114 @@ static bfd_boolean
 mapping_symbol_for_insn (bfd_vma pc, struct disassemble_info *info,
 			 enum map_type *map_symbol)
 {
-  bfd_vma addr;
-  int n, start = 0;
+  bfd_vma addr, section_vma = 0;
+  int n, last_sym = -1;
   bfd_boolean found = FALSE;
-  enum map_type type = MAP_ARM;
+  bfd_boolean can_use_search_opt_p = FALSE;
+
+  /* Default to DATA.  A text section is required by the ABI to contain an
+     INSN mapping symbol at the start.  A data section has no such
+     requirement, hence if no mapping symbol is found the section must
+     contain only data.  This however isn't very useful if the user has
+     fully stripped the binaries.  If this is the case use the section
+     attributes to determine the default.  If we have no section default to
+     INSN as well, as we may be disassembling some raw bytes on a baremetal
+     HEX file or similar.  */
+  enum map_type type = MAP_DATA;
+  if ((info->section && info->section->flags & SEC_CODE) || !info->section)
+    type = MAP_ARM;
   struct arm_private_data *private_data;
 
-  if (info->private_data == NULL || info->symtab_size == 0
+  if (info->private_data == NULL
       || bfd_asymbol_flavour (*info->symtab) != bfd_target_elf_flavour)
     return FALSE;
 
   private_data = info->private_data;
-  if (pc == 0)
-    start = 0;
-  else
-    start = private_data->last_mapping_sym;
 
-  start = (start == -1)? 0 : start;
-  addr = bfd_asymbol_value (info->symtab[start]);
+  /* First, look for mapping symbols.  */
+  if (info->symtab_size != 0)
+  {
+    if (pc <= private_data->last_mapping_addr)
+      private_data->last_mapping_sym = -1;
+
+    /* Start scanning at the start of the function, or wherever
+       we finished last time.  */
+    n = info->symtab_pos + 1;
+
+    /* If the last stop offset is different from the current one it means we
+       are disassembling a different glob of bytes.  As such the optimization
+       would not be safe and we should start over.  */
+    can_use_search_opt_p
+      = private_data->last_mapping_sym >= 0
+	&& info->stop_offset == private_data->last_stop_offset;
+
+    if (n >= private_data->last_mapping_sym && can_use_search_opt_p)
+      n = private_data->last_mapping_sym;
+
+    /* Look down while we haven't passed the location being disassembled.
+       The reason for this is that there's no defined order between a symbol
+       and an mapping symbol that may be at the same address.  We may have to
+       look at least one position ahead.  */
+    for (; n < info->symtab_size; n++)
+      {
+	addr = bfd_asymbol_value (info->symtab[n]);
+	if (addr > pc)
+	  break;
+	if (get_map_sym_type (info, n, &type))
+	  {
+	    last_sym = n;
+	    found = TRUE;
+	  }
+      }
+
+    if (!found)
+      {
+	n = info->symtab_pos;
+	if (n >= private_data->last_mapping_sym && can_use_search_opt_p)
+	  n = private_data->last_mapping_sym;
+
+	/* No mapping symbol found at this address.  Look backwards
+	   for a preceeding one, but don't go pass the section start
+	   otherwise a data section with no mapping symbol can pick up
+	   a text mapping symbol of a preceeding section.  The documentation
+	   says section can be NULL, in which case we will seek up all the
+	   way to the top.  */
+	if (info->section)
+	  section_vma = info->section->vma;
+
+	for (; n >= 0; n--)
+	  {
+	    addr = bfd_asymbol_value (info->symtab[n]);
+	    if (addr < section_vma)
+	      break;
 
-  if (pc >= addr)
-    {
-      if (get_map_sym_type (info, start, &type))
-      found = TRUE;
-    }
-  else
+	    if (get_map_sym_type (info, n, &type))
+	      {
+		last_sym = n;
+		found = TRUE;
+		break;
+	      }
+	  }
+      }
+  }
+
+  /* If no mapping symbol was found, try looking up without a mapping
+     symbol.  This is done by walking up from the current PC to the nearest
+     symbol.  We don't actually have to loop here since symtab_pos will
+     contain the nearest symbol already.  */
+  if (!found)
     {
-      for (n = start - 1; n >= 0; n--)
+      n = info->symtab_pos;
+      if (n >= 0 && get_sym_code_type (info, n, &type))
 	{
-	  if (get_map_sym_type (info, n, &type))
-	    {
-	      found = TRUE;
-	      break;
-	    }
+	  last_sym = n;
+	  found = TRUE;
 	}
     }
 
-  /* No mapping symbols were found.  A leading $d may be
-     omitted for sections which start with data; but for
-     compatibility with legacy and stripped binaries, only
-     assume the leading $d if there is at least one mapping
-     symbol in the file.  */
-  if (!found && private_data->has_mapping_symbols == 1)
-    {
-      type = MAP_DATA;
-      found = TRUE;
-    }
+  private_data->last_mapping_sym = last_sym;
+  private_data->last_type = type;
+  private_data->last_stop_offset = info->stop_offset;
 
   *map_symbol = type;
   return found;
@@ -6534,9 +6596,9 @@ print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)
 	 during disassembly....  */
       select_arm_features (info->mach, & private.features);
 
-      private.has_mapping_symbols = -1;
       private.last_mapping_sym = -1;
       private.last_mapping_addr = 0;
+      private.last_stop_offset = 0;
 
       info->private_data = & private;
     }
@@ -6553,121 +6615,13 @@ print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)
       && bfd_asymbol_flavour (*info->symtab) == bfd_target_elf_flavour)
     {
       bfd_vma addr;
-      int n, start;
+      int n;
       int last_sym = -1;
       enum map_type type = MAP_ARM;
 
-      /* Start scanning at the start of the function, or wherever
-	 we finished last time.  */
-      /* PR 14006.  When the address is 0 we are either at the start of the
-	 very first function, or else the first function in a new, unlinked
-	 executable section (eg because of -ffunction-sections).  Either way
-	 start scanning from the beginning of the symbol table, not where we
-	 left off last time.  */
-      if (pc == 0)
-	start = 0;
-      else
-	{
-	  start = info->symtab_pos + 1;
-	  if (start < private_data->last_mapping_sym)
-	    start = private_data->last_mapping_sym;
-	}
-      found = FALSE;
-
-      /* First, look for mapping symbols.  */
-      if (private_data->has_mapping_symbols != 0)
-	{
-	  /* Scan up to the location being disassembled.  */
-	  for (n = start; n < info->symtab_size; n++)
-	    {
-	      addr = bfd_asymbol_value (info->symtab[n]);
-	      if (addr > pc)
-		break;
-	      if (get_map_sym_type (info, n, &type))
-		{
-		  last_sym = n;
-		  found = TRUE;
-		}
-	    }
-
-	  if (!found)
-	    {
-	      /* No mapping symbol found at this address.  Look backwards
-		 for a preceding one.  */
-	      for (n = start - 1; n >= 0; n--)
-		{
-		  if (get_map_sym_type (info, n, &type))
-		    {
-		      last_sym = n;
-		      found = TRUE;
-		      break;
-		    }
-		}
-	    }
-
-	  if (found)
-	    private_data->has_mapping_symbols = 1;
-
-	  /* No mapping symbols were found.  A leading $d may be
-	     omitted for sections which start with data; but for
-	     compatibility with legacy and stripped binaries, only
-	     assume the leading $d if there is at least one mapping
-	     symbol in the file.  */
-	  if (!found && private_data->has_mapping_symbols == -1)
-	    {
-	      /* Look for mapping symbols, in any section.  */
-	      for (n = 0; n < info->symtab_size; n++)
-		if (is_mapping_symbol (info, n, &type))
-		  {
-		    private_data->has_mapping_symbols = 1;
-		    break;
-		  }
-	      if (private_data->has_mapping_symbols == -1)
-		private_data->has_mapping_symbols = 0;
-	    }
-
-	  if (!found && private_data->has_mapping_symbols == 1)
-	    {
-	      type = MAP_DATA;
-	      found = TRUE;
-	    }
-	}
-
-      /* Next search for function symbols to separate ARM from Thumb
-	 in binaries without mapping symbols.  */
-      if (!found)
-	{
-	  /* Scan up to the location being disassembled.  */
-	  for (n = start; n < info->symtab_size; n++)
-	    {
-	      addr = bfd_asymbol_value (info->symtab[n]);
-	      if (addr > pc)
-		break;
-	      if (get_sym_code_type (info, n, &type))
-		{
-		  last_sym = n;
-		  found = TRUE;
-		}
-	    }
-
-	  if (!found)
-	    {
-	      /* No mapping symbol found at this address.  Look backwards
-		 for a preceding one.  */
-	      for (n = start - 1; n >= 0; n--)
-		{
-		  if (get_sym_code_type (info, n, &type))
-		    {
-		      last_sym = n;
-		      found = TRUE;
-		      break;
-		    }
-		}
-	    }
-	}
+      found = mapping_symbol_for_insn (pc, info, &type);
+      last_sym = private_data->last_mapping_sym;
 
-      private_data->last_mapping_sym = last_sym;
-      private_data->last_type = type;
       is_thumb = (private_data->last_type == MAP_THUMB);
       is_data = (private_data->last_type == MAP_DATA);
 
diff --git a/opcodes/configure b/opcodes/configure
index e3e3ac24e3..91b4beed01 100755
--- a/opcodes/configure
+++ b/opcodes/configure
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for opcodes 2.32.
+# Generated by GNU Autoconf 2.69 for opcodes 2.32.0.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -587,8 +587,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='opcodes'
 PACKAGE_TARNAME='opcodes'
-PACKAGE_VERSION='2.32'
-PACKAGE_STRING='opcodes 2.32'
+PACKAGE_VERSION='2.32.0'
+PACKAGE_STRING='opcodes 2.32.0'
 PACKAGE_BUGREPORT=''
 PACKAGE_URL=''
 
@@ -1356,7 +1356,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures opcodes 2.32 to adapt to many kinds of systems.
+\`configure' configures opcodes 2.32.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1427,7 +1427,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of opcodes 2.32:";;
+     short | recursive ) echo "Configuration of opcodes 2.32.0:";;
    esac
   cat <<\_ACEOF
 
@@ -1539,7 +1539,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-opcodes configure 2.32
+opcodes configure 2.32.0
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -1950,7 +1950,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by opcodes $as_me 2.32, which was
+It was created by opcodes $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -3897,7 +3897,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='opcodes'
- VERSION='2.32'
+ VERSION='2.32.0'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -13533,7 +13533,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by opcodes $as_me 2.32, which was
+This file was extended by opcodes $as_me 2.32.0, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -13599,7 +13599,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-opcodes config.status 2.32
+opcodes config.status 2.32.0
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
diff --git a/opcodes/po/opcodes.pot b/opcodes/po/opcodes.pot
index d87d0e30a3..733bceae07 100644
--- a/opcodes/po/opcodes.pot
+++ b/opcodes/po/opcodes.pot
@@ -8,7 +8,7 @@ msgid ""
 msgstr ""
 "Project-Id-Version: PACKAGE VERSION\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2019-02-02 15:50+0000\n"
+"POT-Creation-Date: 2019-02-02 17:29+0000\n"
 "PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
 "Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
 "Language-Team: LANGUAGE <LL@li.org>\n"
diff --git a/opcodes/po/sv.po b/opcodes/po/sv.po
index 257db0c4d9..43ce0243e6 100644
--- a/opcodes/po/sv.po
+++ b/opcodes/po/sv.po
@@ -1,16 +1,16 @@
 # Swedish messages for opcodes.
-# Copyright (C) 2001, 2002, 2003, 2006, 2017, 2018 Free Software Foundation, Inc.
+# Copyright (C) 2001, 2002, 2003, 2006, 2017, 2018, 2019 Free Software Foundation, Inc.
 # This file is distributed under the same license as the binutils package.
 # Christian Rose <menthos@menthos.com>, 2001, 2002, 2003.
 # Daniel Nylander <po@danielnylander.se>, 2006.
-# Sebastian Rasmussen <sebras@gmail.com>, 2017, 2018.
+# Sebastian Rasmussen <sebras@gmail.com>, 2017, 2018, 2019.
 #
 msgid ""
 msgstr ""
-"Project-Id-Version: opcodes 2.30.90\n"
+"Project-Id-Version: opcodes 2.31.90\n"
 "Report-Msgid-Bugs-To: bug-binutils@gnu.org\n"
-"POT-Creation-Date: 2018-06-24 19:41+0100\n"
-"PO-Revision-Date: 2018-07-24 23:26+0800\n"
+"POT-Creation-Date: 2019-01-19 16:32+0000\n"
+"PO-Revision-Date: 2019-02-05 18:47+0100\n"
 "Last-Translator: Sebastian Rasmussen <sebras@gmail.com>\n"
 "Language-Team: Swedish <tp-sv@listor.tp-sv.se>\n"
 "Language: sv\n"
@@ -19,23 +19,23 @@ msgstr ""
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=2; plural=(n != 1);\n"
 "X-Bugs: Report translation errors to the Language-Team address.\n"
-"X-Generator: Poedit 2.0.9\n"
+"X-Generator: Poedit 2.2.1\n"
 
-#: aarch64-asm.c:805
+#: aarch64-asm.c:819
 msgid "specified register cannot be read from"
 msgstr "angivet register kan inte läsas från"
 
-#: aarch64-asm.c:814
+#: aarch64-asm.c:828
 msgid "specified register cannot be written to"
 msgstr "angivet register kan inte skrivas till"
 
 #. Invalid option.
-#: aarch64-dis.c:94 arc-dis.c:782 arm-dis.c:6158
+#: aarch64-dis.c:92 arc-dis.c:782 arm-dis.c:6174
 #, c-format
 msgid "unrecognised disassembler option: %s"
 msgstr "okänt avassemblerflagga: %s"
 
-#: aarch64-dis.c:3362
+#: aarch64-dis.c:3448
 #, c-format
 msgid ""
 "\n"
@@ -46,7 +46,7 @@ msgstr ""
 "Följande AARCH64-specifika avassemblerarflaggor stöds för användning\n"
 "tillsammans med flaggan -M (flera flaggor kan skiljas åt med komman):\n"
 
-#: aarch64-dis.c:3366
+#: aarch64-dis.c:3452
 #, c-format
 msgid ""
 "\n"
@@ -55,7 +55,7 @@ msgstr ""
 "\n"
 "  no-aliases         Skriv inte ut instruktionsalias.\n"
 
-#: aarch64-dis.c:3369
+#: aarch64-dis.c:3455
 #, c-format
 msgid ""
 "\n"
@@ -64,7 +64,7 @@ msgstr ""
 "\n"
 "  aliases            Skriv ut instruktionsalias.\n"
 
-#: aarch64-dis.c:3372
+#: aarch64-dis.c:3458
 #, c-format
 msgid ""
 "\n"
@@ -73,7 +73,7 @@ msgstr ""
 "\n"
 "  no-notes         Skriv inte ut instruktionsnoteringar.\n"
 
-#: aarch64-dis.c:3375
+#: aarch64-dis.c:3461
 #, c-format
 msgid ""
 "\n"
@@ -82,7 +82,7 @@ msgstr ""
 "\n"
 "  notes            Skriv ut instruktionsnoteringar.\n"
 
-#: aarch64-dis.c:3379
+#: aarch64-dis.c:3465
 #, c-format
 msgid ""
 "\n"
@@ -91,222 +91,266 @@ msgstr ""
 "\n"
 "  debug_dump         Tillfällig flagga för felsökningsspårning.\n"
 
-#: aarch64-dis.c:3383 mips-dis.c:2612 mips-dis.c:2620 mips-dis.c:2622
-#: nfp-dis.c:2981 riscv-dis.c:509
+#: aarch64-dis.c:3469 mips-dis.c:2773 mips-dis.c:2783 mips-dis.c:2786
+#: nfp-dis.c:2981 riscv-dis.c:552
 #, c-format
 msgid "\n"
 msgstr "\n"
 
-#: aarch64-opc.c:1311
+#: aarch64-opc.c:1339
 msgid "immediate value"
 msgstr "omedelbart värde"
 
-#: aarch64-opc.c:1321
+#: aarch64-opc.c:1349
 msgid "immediate offset"
 msgstr "omedelbar position"
 
-#: aarch64-opc.c:1331
+#: aarch64-opc.c:1359
 msgid "register number"
 msgstr "registernummer"
 
-#: aarch64-opc.c:1341
+#: aarch64-opc.c:1369
 msgid "register element index"
 msgstr "registerelementindex"
 
-#: aarch64-opc.c:1351
+#: aarch64-opc.c:1379
 msgid "shift amount"
 msgstr "skiftmängd"
 
-#: aarch64-opc.c:1363
+#: aarch64-opc.c:1391
 msgid "multiplier"
 msgstr "multiplikator"
 
-#: aarch64-opc.c:1436
+#: aarch64-opc.c:1464
 msgid "reg pair must start from even reg"
 msgstr "registerpar måste börja med jämnt register"
 
-#: aarch64-opc.c:1442
+#: aarch64-opc.c:1470
 msgid "reg pair must be contiguous"
 msgstr "registerpar måste vara kontinuerligt"
 
-#: aarch64-opc.c:1456
+#: aarch64-opc.c:1484
 msgid "extraneous register"
 msgstr "extra register"
 
-#: aarch64-opc.c:1462
+#: aarch64-opc.c:1490
 msgid "missing register"
 msgstr "saknar register"
 
-#: aarch64-opc.c:1473
+#: aarch64-opc.c:1501
 msgid "stack pointer register expected"
 msgstr "stackpekarregister förväntat"
 
-#: aarch64-opc.c:1496
+#: aarch64-opc.c:1524
 msgid "z0-z15 expected"
 msgstr "z0-z15 förväntat"
 
-#: aarch64-opc.c:1497
+#: aarch64-opc.c:1525
 msgid "z0-z7 expected"
 msgstr "z0-z7 förväntat"
 
-#: aarch64-opc.c:1523
+#: aarch64-opc.c:1551
 msgid "invalid register list"
 msgstr "ogiltig registerlista"
 
-#: aarch64-opc.c:1537
+#: aarch64-opc.c:1565
 msgid "p0-p7 expected"
 msgstr "p0-p7 förväntat"
 
-#: aarch64-opc.c:1563 aarch64-opc.c:1571
+#: aarch64-opc.c:1591 aarch64-opc.c:1599
 msgid "unexpected address writeback"
 msgstr "oväntad adressåterskrivning"
 
-#: aarch64-opc.c:1582
+#: aarch64-opc.c:1611
 msgid "address writeback expected"
 msgstr "adressåterskrivning förväntad"
 
-#: aarch64-opc.c:1629
+#: aarch64-opc.c:1658
 msgid "negative or unaligned offset expected"
 msgstr "negativ eller ojusterad position förväntad"
 
-#: aarch64-opc.c:1656
+#: aarch64-opc.c:1715
 msgid "invalid register offset"
 msgstr "ogiltig registerposition"
 
-#: aarch64-opc.c:1678
+#: aarch64-opc.c:1737
 msgid "invalid post-increment amount"
 msgstr "ogiltig efter-inkrementeringsmängd"
 
-#: aarch64-opc.c:1694 aarch64-opc.c:2172
+#: aarch64-opc.c:1753 aarch64-opc.c:2247
 msgid "invalid shift amount"
 msgstr "ogiltigt skiftmängd"
 
-#: aarch64-opc.c:1707
+#: aarch64-opc.c:1766
 msgid "invalid extend/shift operator"
 msgstr "ogiltig utökad-/skiftoperator"
 
-#: aarch64-opc.c:1753 aarch64-opc.c:1993 aarch64-opc.c:2028 aarch64-opc.c:2047
-#: aarch64-opc.c:2055 aarch64-opc.c:2126 aarch64-opc.c:2302 aarch64-opc.c:2402
-#: aarch64-opc.c:2415
+#: aarch64-opc.c:1812 aarch64-opc.c:2052 aarch64-opc.c:2087 aarch64-opc.c:2106
+#: aarch64-opc.c:2114 aarch64-opc.c:2201 aarch64-opc.c:2377 aarch64-opc.c:2477
+#: aarch64-opc.c:2490
 msgid "immediate out of range"
 msgstr "omedelbar är utanför intervall"
 
-#: aarch64-opc.c:1775 aarch64-opc.c:1817 aarch64-opc.c:1867 aarch64-opc.c:1901
+#: aarch64-opc.c:1834 aarch64-opc.c:1876 aarch64-opc.c:1926 aarch64-opc.c:1960
 msgid "invalid addressing mode"
 msgstr "ogiltigt adresseringsläge"
 
-#: aarch64-opc.c:1859
+#: aarch64-opc.c:1918
 msgid "index register xzr is not allowed"
 msgstr "indexregister xzr är inte tillåtet"
 
-#: aarch64-opc.c:1981 aarch64-opc.c:2003 aarch64-opc.c:2205 aarch64-opc.c:2213
-#: aarch64-opc.c:2279 aarch64-opc.c:2308
+#: aarch64-opc.c:2040 aarch64-opc.c:2062 aarch64-opc.c:2280 aarch64-opc.c:2288
+#: aarch64-opc.c:2354 aarch64-opc.c:2383
 msgid "invalid shift operator"
 msgstr "ogiltig skiftoperator"
 
-#: aarch64-opc.c:1987
+#: aarch64-opc.c:2046
 msgid "shift amount must be 0 or 12"
 msgstr "skiftmängd måste vara 0 eller 12"
 
-#: aarch64-opc.c:2010
+#: aarch64-opc.c:2069
 msgid "shift amount must be a multiple of 16"
 msgstr "skiftmängden måste vara en multipel av 16"
 
-#: aarch64-opc.c:2022
+#: aarch64-opc.c:2081
 msgid "negative immediate value not allowed"
 msgstr "negativ omedelbart värde tillåts inte"
 
-#: aarch64-opc.c:2137
+#: aarch64-opc.c:2212
 msgid "immediate zero expected"
 msgstr "omedelbar nolla förväntad"
 
-#: aarch64-opc.c:2151
+#: aarch64-opc.c:2226
 msgid "rotate expected to be 0, 90, 180 or 270"
 msgstr "rotation förväntades vara 0, 90, 180 eller 270"
 
-#: aarch64-opc.c:2161
+#: aarch64-opc.c:2236
 msgid "rotate expected to be 90 or 270"
 msgstr "rotation förväntades vara 90 eller 270"
 
-#: aarch64-opc.c:2221
+#: aarch64-opc.c:2296
 msgid "shift is not permitted"
 msgstr "skift är inte tillåtet"
 
-#: aarch64-opc.c:2246
+#: aarch64-opc.c:2321
 msgid "invalid value for immediate"
 msgstr "ogiltigt värde för omedelbar"
 
-#: aarch64-opc.c:2271
+#: aarch64-opc.c:2346
 msgid "shift amount must be 0 or 16"
 msgstr "skiftmängd måste vara 0 eller 16"
 
-#: aarch64-opc.c:2292
+#: aarch64-opc.c:2367
 msgid "floating-point immediate expected"
 msgstr "omedelbart flyttal förväntades"
 
-#: aarch64-opc.c:2326
+#: aarch64-opc.c:2401
 msgid "no shift amount allowed for 8-bit constants"
 msgstr "ingen skiftmängd tillåten för 8-bitarskonstanter"
 
-#: aarch64-opc.c:2336
+#: aarch64-opc.c:2411
 msgid "shift amount must be 0 or 8"
 msgstr "skiftmängd måste vara 0 eller 8"
 
-#: aarch64-opc.c:2349
+#: aarch64-opc.c:2424
 msgid "immediate too big for element size"
 msgstr "omedelbar för stor för elementstorlek"
 
-#: aarch64-opc.c:2356
+#: aarch64-opc.c:2431
 msgid "invalid arithmetic immediate"
 msgstr "ogiltigt aritmetiskt omedelbar"
 
-#: aarch64-opc.c:2370
+#: aarch64-opc.c:2445
 msgid "floating-point value must be 0.5 or 1.0"
 msgstr "flyttalsvärde måste vara 0.5 eller 1.0"
 
-#: aarch64-opc.c:2380
+#: aarch64-opc.c:2455
 msgid "floating-point value must be 0.5 or 2.0"
 msgstr "flyttalsvärde måste vara 0.5 eller 2.0"
 
-#: aarch64-opc.c:2390
+#: aarch64-opc.c:2465
 msgid "floating-point value must be 0.0 or 1.0"
 msgstr "flyttalsvärde måste vara 0.0 eller 1.0"
 
-#: aarch64-opc.c:2421
+#: aarch64-opc.c:2496
 msgid "invalid replicated MOV immediate"
 msgstr "ogiltig, replikerad MOV-omedelbar"
 
-#: aarch64-opc.c:2536
+#: aarch64-opc.c:2614
 msgid "extend operator expected"
 msgstr "utökad operator förväntades"
 
-#: aarch64-opc.c:2549
+#: aarch64-opc.c:2627
 msgid "missing extend operator"
 msgstr "saknar utökad operator"
 
-#: aarch64-opc.c:2555
+#: aarch64-opc.c:2633
 msgid "'LSL' operator not allowed"
 msgstr "”LSL”-operator inte tillåten"
 
-#: aarch64-opc.c:2576
+#: aarch64-opc.c:2654
 msgid "W register expected"
 msgstr "W-register förvätnades"
 
-#: aarch64-opc.c:2587
+#: aarch64-opc.c:2665
 msgid "shift operator expected"
 msgstr "skiftoperator förväntades"
 
-#: aarch64-opc.c:2594
+#: aarch64-opc.c:2672
 msgid "'ROR' operator not allowed"
 msgstr "”ROR”-operator inte tillåten"
 
-#: aarch64-opc.c:3583
-msgid "reading from a write-only register."
-msgstr "läsning från ett register som endast kan skrivas."
+#: aarch64-opc.c:3671
+msgid "reading from a write-only register"
+msgstr "läsning från ett register som endast kan skrivas"
 
-#: aarch64-opc.c:3585
-msgid "writing to a read-only register."
-msgstr "skrivning till ett register som endast kan läsas."
+#: aarch64-opc.c:3673
+msgid "writing to a read-only register"
+msgstr "skrivning till ett register som endast kan läsas"
+
+#: aarch64-opc.c:4815
+msgid "instruction opens new dependency sequence without ending previous one"
+msgstr "instruktion öppnar en ny beroende sekvens utan att avsluta föregående"
+
+#: aarch64-opc.c:4835
+msgid "previous `movprfx' sequence not closed"
+msgstr "föregående ”movprfx”-sekvens inte stängd"
+
+#: aarch64-opc.c:4852
+msgid "SVE instruction expected after `movprfx'"
+msgstr "SVE-instruktion förväntad efter ”movprfx”"
+
+#: aarch64-opc.c:4865
+msgid "SVE `movprfx' compatible instruction expected"
+msgstr "SVE ”movprfx”-kompatibel instruktion förväntad"
+
+#: aarch64-opc.c:4956
+msgid "predicated instruction expected after `movprfx'"
+msgstr "instruktion med predikat förväntad efter ”movprfx”"
+
+#: aarch64-opc.c:4968
+msgid "merging predicate expected due to preceding `movprfx'"
+msgstr "sammanslagningspredikat förväntat på grund av föregående ”movprfx”"
+
+#: aarch64-opc.c:4980
+msgid "predicate register differs from that in preceding `movprfx'"
+msgstr "predikatregister skiljer sig från det i föregående ”movprfx”"
+
+#: aarch64-opc.c:4999
+msgid "output register of preceding `movprfx' not used in current instruction"
+msgstr "utdataregister från föregående ”movprfx” används inte i aktuell instruktion"
+
+#: aarch64-opc.c:5012
+msgid "output register of preceding `movprfx' expected as output"
+msgstr "utdataregister från föregående ”movprfx” förväntat som utdata"
+
+#: aarch64-opc.c:5024
+msgid "output register of preceding `movprfx' used as input"
+msgstr "utdataregister från föregående ”movprfx” används som indata"
+
+#: aarch64-opc.c:5040
+msgid "register size not compatible with previous `movprfx'"
+msgstr "registerstorlek inte kompatibel med föregående ”movprfx”"
 
 #: alpha-opc.c:154
 msgid "branch operand unaligned"
@@ -449,7 +493,7 @@ msgid "register must be ILINK2"
 msgstr "register måste vara ILINK2"
 
 #. ARC NPS400 Support: See comment near head of file.
-#: arc-opc.c:379 arc-opc.c:417 arc-opc.c:455 arc-opc.c:720
+#: arc-opc.c:379 arc-opc.c:417 arc-opc.c:455 arc-opc.c:724
 msgid "register must be either r0-r3 or r12-r15"
 msgstr "register måste vara antingen r0-r3 eller r12-r15"
 
@@ -477,116 +521,116 @@ msgstr "ogiltigt registernummer, borde vara blink"
 msgid "invalid register number, should be pcl"
 msgstr "ogiltigt registernummer, borde vara pcl"
 
-#: arc-opc.c:768
+#: arc-opc.c:772
 msgid "invalid size, should be 1, 2, 4, or 8"
 msgstr "ogiltigt storlek, borde vara 1, 2, 4 eller 8"
 
-#: arc-opc.c:813
+#: arc-opc.c:817
 msgid "invalid immediate, must be 1, 2, or 4"
 msgstr "ogiltig omedelbar, måste vara 1, 2 eller 4"
 
-#: arc-opc.c:852
+#: arc-opc.c:856
 msgid "invalid value for CMEM ld/st immediate"
 msgstr "ogiltigt värde för CMEM ld/st-omedelbar"
 
-#: arc-opc.c:879
+#: arc-opc.c:883
 msgid "invalid position, should be 0, 16, 32, 48 or 64."
 msgstr "ogiltig position, borde vara 0, 16, 32, 48 eller 64."
 
-#: arc-opc.c:913
+#: arc-opc.c:917
 msgid "invalid position, should be 16, 32, 64 or 128."
 msgstr "ogiltig position, borde vara 16, 32, 64 eller 128."
 
-#: arc-opc.c:935
+#: arc-opc.c:939
 msgid "invalid size value must be on range 1-64."
 msgstr "ogiltigt storleksvärde måste vara i intervallet 1-64."
 
-#: arc-opc.c:966
+#: arc-opc.c:970
 msgid "invalid position, should be 0, 8, 16, or 24"
 msgstr "ogiltig position, borde vara 0, 8, 16 eller 24"
 
-#: arc-opc.c:991
+#: arc-opc.c:995
 msgid "invalid size, value must be "
 msgstr "ogiltig storlek, värde måste vara "
 
-#: arc-opc.c:1065
+#: arc-opc.c:1069
 msgid "value out of range 1 - 256"
 msgstr "värde utanför intervall 1-256"
 
-#: arc-opc.c:1074
+#: arc-opc.c:1078
 msgid "value must be power of 2"
 msgstr "värde måste vara en tvåpotens"
 
-#: arc-opc.c:1127
+#: arc-opc.c:1131
 msgid "value must be in the range 0 to 28"
 msgstr "värde måste vara i intervallet 0 till 28"
 
-#: arc-opc.c:1149
+#: arc-opc.c:1153
 msgid "value must be in the range 1 to "
 msgstr "värde måste vara i intervallet 1 till "
 
-#: arc-opc.c:1179
+#: arc-opc.c:1183
 msgid "value must be in the range 0 to 240"
 msgstr "värde måste vara i intervallet 0 till 240"
 
-#: arc-opc.c:1181
+#: arc-opc.c:1185
 msgid "value must be a multiple of 16"
 msgstr "värde måste vara en multipel av 16"
 
-#: arc-opc.c:1201
+#: arc-opc.c:1205
 msgid "invalid address type for operand"
 msgstr "ogiltig adresstyp för operand"
 
-#: arc-opc.c:1235
+#: arc-opc.c:1239
 msgid "value must be in the range 0 to 31"
 msgstr "värde måste vara i intervallet 0 till 31"
 
-#: arc-opc.c:1260
+#: arc-opc.c:1264
 msgid "invalid position, should be one of: 0,4,8,...124."
 msgstr "ogiltig position, borde vara endera av: 0, 4, 8, …124."
 
-#: arm-dis.c:3229
+#: arm-dis.c:3242
 msgid "Select raw register names"
 msgstr "Välj råa registernamn"
 
-#: arm-dis.c:3231
+#: arm-dis.c:3244
 msgid "Select register names used by GCC"
 msgstr "Välj registernamn som används av GCC"
 
-#: arm-dis.c:3233
+#: arm-dis.c:3246
 msgid "Select register names used in ARM's ISA documentation"
 msgstr "Välj registernamn som används i ARM:s ISA-dokumentation"
 
-#: arm-dis.c:3235
+#: arm-dis.c:3248
 msgid "Assume all insns are Thumb insns"
 msgstr "Förvänta att alla instr är Thumb-instr"
 
-#: arm-dis.c:3236
+#: arm-dis.c:3249
 msgid "Examine preceding label to determine an insn's type"
 msgstr "Undersök föregående etikett för att avgöra en instruktions typ"
 
-#: arm-dis.c:3237
+#: arm-dis.c:3250
 msgid "Select register names used in the APCS"
 msgstr "Välj registernamn som används i APCS"
 
-#: arm-dis.c:3239
+#: arm-dis.c:3252
 msgid "Select register names used in the ATPCS"
 msgstr "Välj register namn som används i ATPCS"
 
-#: arm-dis.c:3241
+#: arm-dis.c:3254
 msgid "Select special register names used in the ATPCS"
 msgstr "Välj specialregisternamn som används i ATPCS"
 
-#: arm-dis.c:3639
+#: arm-dis.c:3652
 msgid "<illegal precision>"
 msgstr "<otillåten precision>"
 
-#: arm-dis.c:6149
+#: arm-dis.c:6165
 #, c-format
 msgid "unrecognised register name set: %s"
 msgstr "okänt registernamnsuppsättning: %s"
 
-#: arm-dis.c:6855
+#: arm-dis.c:6906
 #, c-format
 msgid ""
 "\n"
@@ -683,7 +727,7 @@ msgstr "Inte en pc-relativ adress."
 
 #: epiphany-asm.c:456 fr30-asm.c:311 frv-asm.c:1264 ip2k-asm.c:512
 #: iq2000-asm.c:460 lm32-asm.c:350 m32c-asm.c:1585 m32r-asm.c:329
-#: mep-asm.c:1288 mt-asm.c:596 or1k-asm.c:504 xc16x-asm.c:377
+#: mep-asm.c:1288 mt-asm.c:596 or1k-asm.c:512 xc16x-asm.c:377
 #: xstormy16-asm.c:277
 #, c-format
 msgid "internal error: unrecognized field %d while parsing"
@@ -691,7 +735,7 @@ msgstr "internt fel: okänt fält %d vid tolkning"
 
 #: epiphany-asm.c:508 fr30-asm.c:363 frv-asm.c:1316 ip2k-asm.c:564
 #: iq2000-asm.c:512 lm32-asm.c:402 m32c-asm.c:1637 m32r-asm.c:381
-#: mep-asm.c:1340 mt-asm.c:648 or1k-asm.c:556 xc16x-asm.c:429
+#: mep-asm.c:1340 mt-asm.c:648 or1k-asm.c:564 xc16x-asm.c:429
 #: xstormy16-asm.c:329
 msgid "missing mnemonic in syntax string"
 msgstr "instruktion saknas i syntaxsträng"
@@ -706,7 +750,7 @@ msgstr "instruktion saknas i syntaxsträng"
 #: m32c-asm.c:1865 m32c-asm.c:1972 m32r-asm.c:516 m32r-asm.c:520
 #: m32r-asm.c:609 m32r-asm.c:716 mep-asm.c:1475 mep-asm.c:1479 mep-asm.c:1568
 #: mep-asm.c:1675 mt-asm.c:783 mt-asm.c:787 mt-asm.c:876 mt-asm.c:983
-#: or1k-asm.c:691 or1k-asm.c:695 or1k-asm.c:784 or1k-asm.c:891 xc16x-asm.c:564
+#: or1k-asm.c:699 or1k-asm.c:703 or1k-asm.c:792 or1k-asm.c:899 xc16x-asm.c:564
 #: xc16x-asm.c:568 xc16x-asm.c:657 xc16x-asm.c:764 xstormy16-asm.c:464
 #: xstormy16-asm.c:468 xstormy16-asm.c:557 xstormy16-asm.c:664
 msgid "unrecognized instruction"
@@ -714,7 +758,7 @@ msgstr "okänd instruktion"
 
 #: epiphany-asm.c:690 fr30-asm.c:545 frv-asm.c:1498 ip2k-asm.c:746
 #: iq2000-asm.c:694 lm32-asm.c:584 m32c-asm.c:1819 m32r-asm.c:563
-#: mep-asm.c:1522 mt-asm.c:830 or1k-asm.c:738 xc16x-asm.c:611
+#: mep-asm.c:1522 mt-asm.c:830 or1k-asm.c:746 xc16x-asm.c:611
 #: xstormy16-asm.c:511
 #, c-format
 msgid "syntax error (expected char `%c', found `%c')"
@@ -722,7 +766,7 @@ msgstr "syntaxfel (tecknet \"%c\" förväntades, hittade \"%c\")"
 
 #: epiphany-asm.c:700 fr30-asm.c:555 frv-asm.c:1508 ip2k-asm.c:756
 #: iq2000-asm.c:704 lm32-asm.c:594 m32c-asm.c:1829 m32r-asm.c:573
-#: mep-asm.c:1532 mt-asm.c:840 or1k-asm.c:748 xc16x-asm.c:621
+#: mep-asm.c:1532 mt-asm.c:840 or1k-asm.c:756 xc16x-asm.c:621
 #: xstormy16-asm.c:521
 #, c-format
 msgid "syntax error (expected char `%c', found end of instruction)"
@@ -730,21 +774,21 @@ msgstr "syntaxfel (tecknet \"%c\" förväntades, hittade slutet på instruktion)
 
 #: epiphany-asm.c:730 fr30-asm.c:585 frv-asm.c:1538 ip2k-asm.c:786
 #: iq2000-asm.c:734 lm32-asm.c:624 m32c-asm.c:1859 m32r-asm.c:603
-#: mep-asm.c:1562 mt-asm.c:870 or1k-asm.c:778 xc16x-asm.c:651
+#: mep-asm.c:1562 mt-asm.c:870 or1k-asm.c:786 xc16x-asm.c:651
 #: xstormy16-asm.c:551
 msgid "junk at end of line"
 msgstr "skräp vid slutet på raden"
 
 #: epiphany-asm.c:842 fr30-asm.c:697 frv-asm.c:1650 ip2k-asm.c:898
 #: iq2000-asm.c:846 lm32-asm.c:736 m32c-asm.c:1971 m32r-asm.c:715
-#: mep-asm.c:1674 mt-asm.c:982 or1k-asm.c:890 xc16x-asm.c:763
+#: mep-asm.c:1674 mt-asm.c:982 or1k-asm.c:898 xc16x-asm.c:763
 #: xstormy16-asm.c:663
 msgid "unrecognized form of instruction"
 msgstr "okänd instruktionsform"
 
 #: epiphany-asm.c:856 fr30-asm.c:711 frv-asm.c:1664 ip2k-asm.c:912
 #: iq2000-asm.c:860 lm32-asm.c:750 m32c-asm.c:1985 m32r-asm.c:729
-#: mep-asm.c:1688 mt-asm.c:996 or1k-asm.c:904 xc16x-asm.c:777
+#: mep-asm.c:1688 mt-asm.c:996 or1k-asm.c:912 xc16x-asm.c:777
 #: xstormy16-asm.c:677
 #, c-format
 msgid "bad instruction `%.50s...'"
@@ -752,7 +796,7 @@ msgstr "felaktig instruktion \"%.50s...\""
 
 #: epiphany-asm.c:859 fr30-asm.c:714 frv-asm.c:1667 ip2k-asm.c:915
 #: iq2000-asm.c:863 lm32-asm.c:753 m32c-asm.c:1988 m32r-asm.c:732
-#: mep-asm.c:1691 mt-asm.c:999 or1k-asm.c:907 xc16x-asm.c:780
+#: mep-asm.c:1691 mt-asm.c:999 or1k-asm.c:915 xc16x-asm.c:780
 #: xstormy16-asm.c:680
 #, c-format
 msgid "bad instruction `%.50s'"
@@ -776,13 +820,13 @@ msgstr "internt fel: epiphany_cgen_cpu_open: ingen byteordning angiven"
 #. Default text to print if an instruction isn't recognized.
 #: epiphany-dis.c:41 fr30-dis.c:41 frv-dis.c:41 ip2k-dis.c:41 iq2000-dis.c:41
 #: lm32-dis.c:41 m32c-dis.c:41 m32r-dis.c:41 mep-dis.c:41 mmix-dis.c:275
-#: mt-dis.c:41 nds32-dis.c:39 or1k-dis.c:41 xc16x-dis.c:41 xstormy16-dis.c:41
+#: mt-dis.c:41 nds32-dis.c:64 or1k-dis.c:41 xc16x-dis.c:41 xstormy16-dis.c:41
 msgid "*unknown*"
 msgstr "*okänd*"
 
 #: epiphany-dis.c:279 fr30-dis.c:300 frv-dis.c:397 ip2k-dis.c:289
 #: iq2000-dis.c:190 lm32-dis.c:148 m32c-dis.c:892 m32r-dis.c:280
-#: mep-dis.c:1188 mt-dis.c:291 or1k-dis.c:142 xc16x-dis.c:421
+#: mep-dis.c:1188 mt-dis.c:291 or1k-dis.c:145 xc16x-dis.c:421
 #: xstormy16-dis.c:169
 #, c-format
 msgid "internal error: unrecognized field %d while printing insn"
@@ -806,7 +850,7 @@ msgstr "operand utanför intervall (0x%lx inte mellan 0 och 0x%lx)"
 
 #: epiphany-ibld.c:880 fr30-ibld.c:735 frv-ibld.c:861 ip2k-ibld.c:612
 #: iq2000-ibld.c:718 lm32-ibld.c:639 m32c-ibld.c:1736 m32r-ibld.c:670
-#: mep-ibld.c:1213 mt-ibld.c:754 or1k-ibld.c:651 xc16x-ibld.c:757
+#: mep-ibld.c:1213 mt-ibld.c:754 or1k-ibld.c:658 xc16x-ibld.c:757
 #: xstormy16-ibld.c:683
 #, c-format
 msgid "internal error: unrecognized field %d while building insn"
@@ -814,7 +858,7 @@ msgstr "internt fel: okänt fält %d vid konstruktion av instruktion"
 
 #: epiphany-ibld.c:1175 fr30-ibld.c:941 frv-ibld.c:1179 ip2k-ibld.c:688
 #: iq2000-ibld.c:894 lm32-ibld.c:744 m32c-ibld.c:2898 m32r-ibld.c:808
-#: mep-ibld.c:1813 mt-ibld.c:975 or1k-ibld.c:757 xc16x-ibld.c:978
+#: mep-ibld.c:1813 mt-ibld.c:975 or1k-ibld.c:772 xc16x-ibld.c:978
 #: xstormy16-ibld.c:830
 #, c-format
 msgid "internal error: unrecognized field %d while decoding insn"
@@ -822,7 +866,7 @@ msgstr "internt fel: okänt fält %d vid avkodning av instruktion"
 
 #: epiphany-ibld.c:1319 fr30-ibld.c:1088 frv-ibld.c:1458 ip2k-ibld.c:763
 #: iq2000-ibld.c:1026 lm32-ibld.c:834 m32c-ibld.c:3516 m32r-ibld.c:922
-#: mep-ibld.c:2284 mt-ibld.c:1176 or1k-ibld.c:841 xc16x-ibld.c:1200
+#: mep-ibld.c:2284 mt-ibld.c:1176 or1k-ibld.c:859 xc16x-ibld.c:1200
 #: xstormy16-ibld.c:941
 #, c-format
 msgid "internal error: unrecognized field %d while getting int operand"
@@ -830,7 +874,7 @@ msgstr "internt fel: okänt fält %d vid hämtning av heltalsoperand"
 
 #: epiphany-ibld.c:1445 fr30-ibld.c:1217 frv-ibld.c:1719 ip2k-ibld.c:820
 #: iq2000-ibld.c:1140 lm32-ibld.c:906 m32c-ibld.c:4116 m32r-ibld.c:1018
-#: mep-ibld.c:2737 mt-ibld.c:1359 or1k-ibld.c:907 xc16x-ibld.c:1404
+#: mep-ibld.c:2737 mt-ibld.c:1359 or1k-ibld.c:928 xc16x-ibld.c:1404
 #: xstormy16-ibld.c:1034
 #, c-format
 msgid "internal error: unrecognized field %d while getting vma operand"
@@ -838,7 +882,7 @@ msgstr "internt fel: okänt fält %d vid hämtning av vma-operand"
 
 #: epiphany-ibld.c:1578 fr30-ibld.c:1349 frv-ibld.c:1987 ip2k-ibld.c:880
 #: iq2000-ibld.c:1261 lm32-ibld.c:985 m32c-ibld.c:4704 m32r-ibld.c:1120
-#: mep-ibld.c:3151 mt-ibld.c:1549 or1k-ibld.c:980 xc16x-ibld.c:1609
+#: mep-ibld.c:3151 mt-ibld.c:1549 or1k-ibld.c:1004 xc16x-ibld.c:1609
 #: xstormy16-ibld.c:1134
 #, c-format
 msgid "internal error: unrecognized field %d while setting int operand"
@@ -846,7 +890,7 @@ msgstr "internt fel: okänt fält %d vid inställning av heltalsoperand"
 
 #: epiphany-ibld.c:1701 fr30-ibld.c:1471 frv-ibld.c:2245 ip2k-ibld.c:930
 #: iq2000-ibld.c:1372 lm32-ibld.c:1054 m32c-ibld.c:5282 m32r-ibld.c:1212
-#: mep-ibld.c:3555 mt-ibld.c:1729 or1k-ibld.c:1043 xc16x-ibld.c:1804
+#: mep-ibld.c:3555 mt-ibld.c:1729 or1k-ibld.c:1070 xc16x-ibld.c:1804
 #: xstormy16-ibld.c:1224
 #, c-format
 msgid "internal error: unrecognized field %d while setting vma operand"
@@ -944,11 +988,11 @@ msgstr "Hmmmm 0x%x"
 msgid "Don't understand 0x%x \n"
 msgstr "Förstår inte 0x%x \n"
 
-#: i386-dis.c:12405
+#: i386-dis.c:11058
 msgid "<internal disassembler error>"
 msgstr "<internt fel i avassembleraren>"
 
-#: i386-dis.c:12700
+#: i386-dis.c:11353
 #, c-format
 msgid ""
 "\n"
@@ -959,32 +1003,32 @@ msgstr ""
 "Följande i386/x86-64-specifika avassemblerarflaggor stöds för användning\n"
 "tillsammans med flaggan -M (flera flaggor kan skiljas åt med komman):\n"
 
-#: i386-dis.c:12704
+#: i386-dis.c:11357
 #, c-format
 msgid "  x86-64      Disassemble in 64bit mode\n"
 msgstr "  x86-64      Avassemblera i 64-bitarsläge\n"
 
-#: i386-dis.c:12705
+#: i386-dis.c:11358
 #, c-format
 msgid "  i386        Disassemble in 32bit mode\n"
 msgstr "  i386        Avassemblera i 32-bitarsläge\n"
 
-#: i386-dis.c:12706
+#: i386-dis.c:11359
 #, c-format
 msgid "  i8086       Disassemble in 16bit mode\n"
 msgstr "  i8086       Avassemblera i 16-bitarsläge\n"
 
-#: i386-dis.c:12707
+#: i386-dis.c:11360
 #, c-format
 msgid "  att         Display instruction in AT&T syntax\n"
 msgstr "  att         Visa instruktion i AT&T-syntax\n"
 
-#: i386-dis.c:12708
+#: i386-dis.c:11361
 #, c-format
 msgid "  intel       Display instruction in Intel syntax\n"
 msgstr "  intel       Visa instruktion i Intel-syntax\n"
 
-#: i386-dis.c:12709
+#: i386-dis.c:11362
 #, c-format
 msgid ""
 "  att-mnemonic\n"
@@ -993,7 +1037,7 @@ msgstr ""
 "  att-mnemonic\n"
 "              Visa instruktion i AT&T-mnemonic\n"
 
-#: i386-dis.c:12711
+#: i386-dis.c:11364
 #, c-format
 msgid ""
 "  intel-mnemonic\n"
@@ -1002,106 +1046,106 @@ msgstr ""
 "  intel-mnemonic\n"
 "              Visa instruktion i Intel-mnemonic\n"
 
-#: i386-dis.c:12713
+#: i386-dis.c:11366
 #, c-format
 msgid "  addr64      Assume 64bit address size\n"
 msgstr "  addr64      Antag 64-bitars adresstorlek\n"
 
-#: i386-dis.c:12714
+#: i386-dis.c:11367
 #, c-format
 msgid "  addr32      Assume 32bit address size\n"
 msgstr "  addr32      Antag 32-bitars adresstorlek\n"
 
-#: i386-dis.c:12715
+#: i386-dis.c:11368
 #, c-format
 msgid "  addr16      Assume 16bit address size\n"
 msgstr "  addr16      Antag 16-bitars adresstorlek\n"
 
-#: i386-dis.c:12716
+#: i386-dis.c:11369
 #, c-format
 msgid "  data32      Assume 32bit data size\n"
 msgstr "  data32      Antag 32-bitars datastorlek\n"
 
-#: i386-dis.c:12717
+#: i386-dis.c:11370
 #, c-format
 msgid "  data16      Assume 16bit data size\n"
 msgstr "  data16      Antag 16-bitars datastorlek\n"
 
-#: i386-dis.c:12718
+#: i386-dis.c:11371
 #, c-format
 msgid "  suffix      Always display instruction suffix in AT&T syntax\n"
 msgstr "  suffix      Visa alltid instruktionssuffix i AT&T-syntax\n"
 
-#: i386-dis.c:12719
+#: i386-dis.c:11372
 #, c-format
 msgid "  amd64       Display instruction in AMD64 ISA\n"
 msgstr "  amd64       Visa instruktion i AMD64 ISA\n"
 
-#: i386-dis.c:12720
+#: i386-dis.c:11373
 #, c-format
 msgid "  intel64     Display instruction in Intel64 ISA\n"
 msgstr "  intel64     Visa instruktion i Intel64 ISA\n"
 
-#: i386-dis.c:13260
+#: i386-dis.c:11936
 msgid "64-bit address is disabled"
 msgstr "64-bitars adress är inaktiverad"
 
-#: i386-gen.c:730
+#: i386-gen.c:732
 #, c-format
 msgid "%s: error: "
 msgstr "%s: fel: "
 
-#: i386-gen.c:909
+#: i386-gen.c:911
 #, c-format
 msgid "%s: %d: unknown bitfield: %s\n"
 msgstr "%s: %d: okänt bitfält: %s\n"
 
-#: i386-gen.c:911
+#: i386-gen.c:913
 #, c-format
 msgid "unknown bitfield: %s\n"
 msgstr "okänt bitfält: %s\n"
 
-#: i386-gen.c:974
+#: i386-gen.c:976
 #, c-format
 msgid "%s: %d: missing `)' in bitfield: %s\n"
 msgstr "%s: %d: saknar ”)” i bitfält: %s\n"
 
-#: i386-gen.c:1275
+#: i386-gen.c:1077
 #, c-format
-msgid "can't find i386-opc.tbl for reading, errno = %s\n"
-msgstr "kan inte hitta i386-opc.tbl för läsning, errno = %s\n"
+msgid "unknown broadcast operand: %s\n"
+msgstr "okänd utsändningsoperand: %s\n"
 
-#: i386-gen.c:1406
+#: i386-gen.c:1478
 #, c-format
 msgid "can't find i386-reg.tbl for reading, errno = %s\n"
 msgstr "kan inte hitta i386-reg.tbl för läsning, errno = %s\n"
 
-#: i386-gen.c:1484
+#: i386-gen.c:1556
 #, c-format
 msgid "can't create i386-init.h, errno = %s\n"
 msgstr "kan inte skapa i386-init.h, errno = %s\n"
 
-#: i386-gen.c:1574 ia64-gen.c:2829
+#: i386-gen.c:1646 ia64-gen.c:2829
 #, c-format
 msgid "unable to change directory to \"%s\", errno = %s\n"
 msgstr "kan inte byta katalog till \"%s\", felnummer = %s\n"
 
-#: i386-gen.c:1586 i386-gen.c:1589
+#: i386-gen.c:1658 i386-gen.c:1661
 #, c-format
 msgid "CpuMax != %d!\n"
 msgstr "CpuMax != %d!\n"
 
-#: i386-gen.c:1593
+#: i386-gen.c:1665
 #, c-format
 msgid "%d unused bits in i386_cpu_flags.\n"
 msgstr "%d oanvända bitar i i386_cpu_flags.\n"
 
-#: i386-gen.c:1600
+#: i386-gen.c:1672
 #, c-format
 msgid "%d unused bits in i386_operand_type.\n"
 msgstr "%d oanvända bitar i386_operand_type.\n"
 
-#: i386-gen.c:1614
+#: i386-gen.c:1686
 #, c-format
 msgid "can't create i386-tbl.h, errno = %s\n"
 msgstr "kan inte skapa i386-tbl.h, errno = %s\n"
@@ -1517,163 +1561,117 @@ msgstr "internt fel: mep_cgen_cpu_open: argument stöds ej ”%d”"
 msgid "internal error: mep_cgen_cpu_open: no endianness specified"
 msgstr "internt fel: mep_cgen_cpu_open: ingen byteordning angiven"
 
-#: mips-dis.c:1758 mips-dis.c:1984
+#: mips-dis.c:1800 mips-dis.c:2026
 #, c-format
 msgid "# internal error, undefined operand in `%s %s'"
 msgstr "# internt fel, okänd operand i ”%s %s”"
 
-#: mips-dis.c:2560
-#, c-format
-msgid ""
-"\n"
-"The following MIPS specific disassembler options are supported for use\n"
-"with the -M switch (multiple options should be separated by commas):\n"
-msgstr ""
-"\n"
-"Följande MIPS-specifika avassemblerarflaggor stöds för användning\n"
-"tillsammans med flaggan -M (flera flaggor kan skiljas åt med komman):\n"
+#: mips-dis.c:2615
+msgid "Use canonical instruction forms.\n"
+msgstr "Använd kanoniska instruktionsformer.\n"
 
-#: mips-dis.c:2564
-#, c-format
-msgid ""
-"\n"
-"  no-aliases               Use canonical instruction forms.\n"
-msgstr ""
-"\n"
-"  no-aliases               Använd kanoniska instruktionsformer.\n"
+#: mips-dis.c:2617
+msgid "Recognize MSA instructions.\n"
+msgstr "Kän igen MSA-instruktioner.\n"
 
-#: mips-dis.c:2567
-#, c-format
-msgid ""
-"\n"
-"  msa                      Recognize MSA instructions.\n"
-msgstr ""
-"\n"
-"  msa                      Känn igen MSA-instruktioner.\n"
+#: mips-dis.c:2619
+msgid "Recognize the virtualization ASE instructions.\n"
+msgstr "Känn igen ASE-virtualiseringsinstruktioner.\n"
 
-#: mips-dis.c:2570
-#, c-format
+#: mips-dis.c:2621
 msgid ""
-"\n"
-"  virt                     Recognize the virtualization ASE instructions.\n"
+"Recognize the eXtended Physical Address (XPA) ASE\n"
+"                  instructions.\n"
 msgstr ""
-"\n"
-"  virt                     Känn igen ASE-virtualiseringsinstruktioner.\n"
+"Känn igen utökade fysiskadress- (XPA) ASE-\n"
+"                  instruktioner.\n"
 
-#: mips-dis.c:2573
-#, c-format
-msgid ""
-"\n"
-"  xpa                      Recognize the eXtended Physical Address (XPA)\n"
-"                           ASE instructions.\n"
-msgstr ""
-"\n"
-"  xpa                      Känn igen utökade fysiskadress- (XPA)\n"
-"                           ASE-instruktioner.\n"
+#: mips-dis.c:2624
+msgid "Recognize the Global INValidate (GINV) ASE instructions.\n"
+msgstr "Känn igen globala invaliderings- (GINV) ASE-instruktioner.\n"
 
-#: mips-dis.c:2577
-#, c-format
-msgid ""
-"\n"
-"  ginv                     Recognize the Global INValidate (GINV) ASE\n"
-"                           instructions.\n"
-msgstr ""
-"\n"
-"  xpa                      Känn igen globala invaliderings- (GINV)\n"
-"                           ASE-instruktioner.\n"
+#: mips-dis.c:2628
+msgid "Recognize the Loongson MultiMedia extensions Instructions (MMI) ASE instructions.\n"
+msgstr "Känn igen Loongson MultiMedia extensions Instructions (MMI) ASE-instruktioner\n"
 
-#: mips-dis.c:2581
-#, c-format
-msgid ""
-"\n"
-"  gpr-names=ABI            Print GPR names according to specified ABI.\n"
-"                           Default: based on binary being disassembled.\n"
-msgstr ""
-"\n"
-"  gpr-names=ABI            Skriv ut GPR-namn enligt angivet ABI.\n"
-"                           Standard: baserat på den binärfil som\n"
-"                           avassembleras.\n"
+#: mips-dis.c:2632
+msgid "Recognize the Loongson Content Address Memory (CAM)  instructions.\n"
+msgstr "Känn igen Loongson Content Address Memory (CAM)-instruktioner.\n"
 
-#: mips-dis.c:2585
-#, c-format
+#: mips-dis.c:2636
+msgid "Recognize the Loongson EXTensions (EXT)  instructions.\n"
+msgstr "Känn igen Loongson EXTensions (EXT)-instruktioner.\n"
+
+#: mips-dis.c:2640
+msgid "Recognize the Loongson EXTensions R2 (EXT2)  instructions.\n"
+msgstr "Känn igen Loongson EXTensions R2 (EXT2)-instruktioner.\n"
+
+#: mips-dis.c:2643
 msgid ""
-"\n"
-"  fpr-names=ABI            Print FPR names according to specified ABI.\n"
-"                           Default: numeric.\n"
+"Print GPR names according to specified ABI.\n"
+"                  Default: based on binary being disassembled.\n"
 msgstr ""
-"\n"
-"  fpr-names=ABI            Skriv ut FPR-namn enligt det angivna ABI:t.\n"
-"                           Standard: numeriskt.\n"
+"Skriv ut GPR-namn enligt angivet ABI.\n"
+"                  Standard: baserat på den binärfil som avassembleras.\n"
 
-#: mips-dis.c:2589
-#, c-format
+#: mips-dis.c:2646
 msgid ""
-"\n"
-"  cp0-names=ARCH           Print CP0 register names according to\n"
-"                           specified architecture.\n"
-"                           Default: based on binary being disassembled.\n"
+"Print FPR names according to specified ABI.\n"
+"                  Default: numeric.\n"
 msgstr ""
-"\n"
-"  cp0-names=ARK            Skriv ut CP0-registernamn enligt den angivna\n"
-"                           arkitekturen.\n"
-"                           Standard: baserat på den binärfil som\n"
-"                           disassembleras.\n"
+"Skriv ut FPR-namn enligt angivet ABI.\n"
+"                  Standard: numeriskt.\n"
 
-#: mips-dis.c:2594
-#, c-format
+#: mips-dis.c:2649
 msgid ""
-"\n"
-"  hwr-names=ARCH           Print HWR names according to specified \n"
-"                           architecture.\n"
-"                           Default: based on binary being disassembled.\n"
+"Print CP0 register names according to specified architecture.\n"
+"                  Default: based on binary being disassembled.\n"
 msgstr ""
-"\n"
-"  hwr-names=ARCH           Skriv ut HWR-namn enligt angiven \n"
-"                           arkitektur.\n"
-"                           Standard: baserat på binären som avassembleras.\n"
+"Skriv ut CP0-registernamn enligt den angiven arkitektur.\n"
+"                  Standard: baserat på den binärfil som disassembleras.\n"
 
-#: mips-dis.c:2599
-#, c-format
+#: mips-dis.c:2653
 msgid ""
-"\n"
-"  reg-names=ABI            Print GPR and FPR names according to\n"
-"                           specified ABI.\n"
+"Print HWR names according to specified architecture.\n"
+"                  Default: based on binary being disassembled.\n"
 msgstr ""
-"\n"
-"  reg-names=ABI            Skriv ut GPR- och FPR-namn enligt det angivna\n"
-"                           ABI:t.\n"
+"Skriv ut HWR-namn enligt angiven arkitektur.\n"
+"                  Standard: baserat på den binärfil som avassembleras.\n"
 
-#: mips-dis.c:2603
-#, c-format
+#: mips-dis.c:2656
+msgid "Print GPR and FPR names according to specified ABI.\n"
+msgstr "Skriv ut GPR- och FPR-namn enligt det angivna ABI:t.\n"
+
+#: mips-dis.c:2658
 msgid ""
-"\n"
-"  reg-names=ARCH           Print CP0 register and HWR names according to\n"
-"                           specified architecture.\n"
+"Print CP0 register and HWR names according to specified\n"
+"                  architecture."
 msgstr ""
-"\n"
-"  reg-names=ARK            Skriv ut CP0-register med HWR-namn enligt\n"
-"                           angiven arkitektur.\n"
+"Skriv ut CP0-register med HWR-namn enligt angiven\n"
+"                  arkitektur."
 
-#: mips-dis.c:2607
+#: mips-dis.c:2744
 #, c-format
 msgid ""
 "\n"
-"  For the options above, the following values are supported for \"ABI\":\n"
-"   "
+"The following MIPS specific disassembler options are supported for use\n"
+"with the -M switch (multiple options should be separated by commas):\n"
+"\n"
 msgstr ""
 "\n"
-"  För flaggorna ovan stöds följande värden på \"ABI\":\n"
-"   "
+"Följande MIPS-specifika avassemblerarflaggor stöds för användning\n"
+"tillsammans med flaggan -M (flera flaggor kan skiljas åt med komman):\n"
+"\n"
 
-#: mips-dis.c:2614
+#: mips-dis.c:2778
 #, c-format
 msgid ""
 "\n"
-"  For the options above, The following values are supported for \"ARCH\":\n"
+"  For the options above, the following values are supported for \"%s\":\n"
 "   "
 msgstr ""
 "\n"
-"  För flaggorna ovan stöds följande värden på \"ARK\":\n"
+"  För flaggorna ovan stöds följande värden på \"%s\":\n"
 "   "
 
 #: mmix-dis.c:33
@@ -1759,17 +1757,17 @@ msgstr "internt fel: mt_cgen_cpu_open: argument stöds ej ”%d”"
 msgid "internal error: mt_cgen_cpu_open: no endianness specified"
 msgstr "internt fel: mt_cgen_cpu_open: ingen byteordning angiven"
 
-#: nds32-asm.c:1508
+#: nds32-asm.c:1760
 #, c-format
 msgid "internal error: unknown operand, %s"
 msgstr "internt fel: okänd operand, %s"
 
-#: nds32-asm.c:2062
+#: nds32-asm.c:2396
 #, c-format
 msgid "internal error: don't know how to handle parsing results"
 msgstr "internt fel: vet inte hur tolkningsresultaten ska hanteras"
 
-#: nds32-asm.c:2070
+#: nds32-asm.c:2404
 #, c-format
 msgid "internal error: unknown hardware resource"
 msgstr "internt fel: okänd hårdvaruresurs"
@@ -1831,12 +1829,12 @@ msgid ""
 "\n"
 "  no-pc\t\t    Don't print program counter prefix.\n"
 "  ctx4\t\t    Force disassembly using 4-context mode.\n"
-"  ctx8\t\t    Force 8-context mode, takes presedence.\""
+"  ctx8\t\t    Force 8-context mode, takes precedence."
 msgstr ""
 "\n"
 "  no-pc\t\t    Skriv inte ut programräknarprefix.\n"
 "  ctx4\t\t    Tvinga avassemblering via 4-kontextläge.\n"
-"  ctx8\t\t    Tvinga 8-kontextläge, tar företräde.\""
+"  ctx8\t\t    Tvinga 8-kontextläge, tar företräde."
 
 #: nios2-dis.c:135
 #, c-format
@@ -1858,27 +1856,35 @@ msgstr "internt fel: trasig instruktionsbeskrivning för ”%s %s”"
 msgid "$<undefined>"
 msgstr "$<odefinierad>"
 
-#: or1k-desc.c:1948
+#: or1k-asm.c:55
+msgid "relocation invalid for store"
+msgstr "omlokalisering ogiltig för lagring"
+
+#: or1k-asm.c:56
+msgid "internal relocation type invalid"
+msgstr "intern omlokaliserings typ ogiltig"
+
+#: or1k-desc.c:1978
 #, c-format
 msgid "internal error: or1k_cgen_rebuild_tables: conflicting insn-chunk-bitsize values: `%d' vs. `%d'"
 msgstr "internt fel: or1k_cgen_rebuild_tables: insn-chunk-bitsize-värden i konflikt: ”%d” vs. ”%d”"
 
-#: or1k-desc.c:2031
+#: or1k-desc.c:2061
 #, c-format
 msgid "internal error: or1k_cgen_cpu_open: unsupported argument `%d'"
 msgstr "internt fel: or1k_cgen_cpu_open: argument stöds inte ”%d”"
 
-#: or1k-desc.c:2050
+#: or1k-desc.c:2080
 #, c-format
 msgid "internal error: or1k_cgen_cpu_open: no endianness specified"
 msgstr "internt fel: or1k_cgen_cpu_open: ingen byteordning angiven"
 
-#: ppc-dis.c:363
+#: ppc-dis.c:370
 #, c-format
 msgid "warning: ignoring unknown -M%s option"
 msgstr "varning: hoppar över okänd -M%s-flagga"
 
-#: ppc-dis.c:838
+#: ppc-dis.c:858
 #, c-format
 msgid ""
 "\n"
@@ -1889,95 +1895,99 @@ msgstr ""
 "Följande PPC-specifika avassemblerarflaggor stöds för användning\n"
 "tillsammans med flaggan -M:\n"
 
-#: ppc-opc.c:52 ppc-opc.c:75 ppc-opc.c:100 ppc-opc.c:129
+#: ppc-opc.c:51 ppc-opc.c:74 ppc-opc.c:100 ppc-opc.c:130
 msgid "invalid register"
 msgstr "ogiltigt register"
 
-#: ppc-opc.c:382 ppc-opc.c:410
+#: ppc-opc.c:384 ppc-opc.c:412
 msgid "invalid conditional option"
 msgstr "ogiltig villkorlig flagga"
 
-#: ppc-opc.c:384 ppc-opc.c:412
+#: ppc-opc.c:386 ppc-opc.c:414
 msgid "invalid counter access"
 msgstr "ogiltig räknaråtkomst"
 
-#: ppc-opc.c:414
+#: ppc-opc.c:416
 msgid "attempt to set y bit when using + or - modifier"
 msgstr "försök att ställa in y-biten då modifieraren + eller - användes"
 
-#: ppc-opc.c:505
+#: ppc-opc.c:507
 msgid "invalid mask field"
 msgstr "ogiltigt maskfält"
 
-#: ppc-opc.c:528
+#: ppc-opc.c:530
 msgid "invalid mfcr mask"
 msgstr "ogiltig mfcr-mask"
 
-#: ppc-opc.c:601 ppc-opc.c:641
+#: ppc-opc.c:606
 msgid "illegal L operand value"
 msgstr "felaktigt L-operandsvärde"
 
-#: ppc-opc.c:647
+#: ppc-opc.c:645
 msgid "incompatible L operand value"
 msgstr "inkompatibelt L-operandsvärde"
 
-#: ppc-opc.c:691 ppc-opc.c:726
+#: ppc-opc.c:684 ppc-opc.c:719
 msgid "illegal bitmask"
 msgstr "otillåten bitmask"
 
-#: ppc-opc.c:813
+#: ppc-opc.c:806
 msgid "address register in load range"
 msgstr "addressregister i inläsningsintervall"
 
-#: ppc-opc.c:879
+#: ppc-opc.c:872
 msgid "index register in load range"
 msgstr "indexregistret är i inläsningsintervallet"
 
-#: ppc-opc.c:908 ppc-opc.c:991
+#: ppc-opc.c:901 ppc-opc.c:986
 msgid "source and target register operands must be different"
 msgstr "käll- och målregisteroperander måste vara olika"
 
-#: ppc-opc.c:936
+#: ppc-opc.c:931
 msgid "invalid register operand when updating"
 msgstr "ogiltig registeroperand vid uppdatering"
 
-#: ppc-opc.c:1054
+#: ppc-opc.c:1049
 msgid "illegal immediate value"
 msgstr "felaktigt omedelbart värde"
 
-#: ppc-opc.c:1201
+#: ppc-opc.c:1154
+msgid "invalid bat number"
+msgstr "ogiltigt bat-nummer"
+
+#: ppc-opc.c:1189
 msgid "invalid sprg number"
 msgstr "ogiltigt sprg-nummer"
 
-#: ppc-opc.c:1238
+#: ppc-opc.c:1226
 msgid "invalid tbr number"
 msgstr "ogiltigt tbr-nummer"
 
-#: ppc-opc.c:1381
+#: ppc-opc.c:1372
 msgid "invalid constant"
 msgstr "ogiltig konstant"
 
-#: ppc-opc.c:1486 ppc-opc.c:1513 ppc-opc.c:1540 ppc-opc.c:1567
+#: ppc-opc.c:1474 ppc-opc.c:1497 ppc-opc.c:1520 ppc-opc.c:1543
 msgid "UIMM = 00000 is illegal"
 msgstr "UIMM = 00000 är otillåtet"
 
-#: ppc-opc.c:1594
+#: ppc-opc.c:1566
 msgid "UIMM values >7 are illegal"
 msgstr "UIMM-värden >7 är otillåtna"
 
-#: ppc-opc.c:1621
+#: ppc-opc.c:1589
 msgid "UIMM values >15 are illegal"
 msgstr "UIMM-värden >15 är otillåtna"
 
-#: ppc-opc.c:1648
+#: ppc-opc.c:1612
 msgid "GPR odd is illegal"
 msgstr "Udda GPR är otillåtet"
 
-#: ppc-opc.c:1675 ppc-opc.c:1702
+#: ppc-opc.c:1635 ppc-opc.c:1658
 msgid "invalid offset"
 msgstr "ogiltig position"
 
-#: ppc-opc.c:1729
+#: ppc-opc.c:1681
 msgid "invalid Ddd value"
 msgstr "ogiltigt Ddd-värde"
 
@@ -1991,7 +2001,7 @@ msgstr "okänd avassembleringsflagga: %s"
 msgid "# internal error, undefined modifier (%c)"
 msgstr "# internt fel, okänd modifierare (%c)"
 
-#: riscv-dis.c:498
+#: riscv-dis.c:541
 #, c-format
 msgid ""
 "\n"
@@ -2003,7 +2013,7 @@ msgstr ""
 "tillsammans med flaggan -M (flera flaggor kan skiljas åt med komman):\n"
 
 # sebras: typo in English text
-#: riscv-dis.c:502
+#: riscv-dis.c:545
 #, c-format
 msgid ""
 "\n"
@@ -2012,7 +2022,7 @@ msgstr ""
 "\n"
 "  numeric       Skriv ut numeriska registernamn, snarare än ABI-namn.\n"
 
-#: riscv-dis.c:505
+#: riscv-dis.c:548
 #, c-format
 msgid ""
 "\n"
@@ -2040,7 +2050,7 @@ msgstr "Skriv ut okända instruktioner enligt längd från de första två bitar
 msgid "unknown S/390 disassembler option: %s"
 msgstr "okänt S/390-avassemblerflagga: %s"
 
-#: s390-dis.c:410
+#: s390-dis.c:416
 #, c-format
 msgid ""
 "\n"
@@ -2261,6 +2271,36 @@ msgstr "internt fel: xstormy16_cgen_cpu_open: argument stöds inte ”%d”"
 msgid "internal error: xstormy16_cgen_cpu_open: no endianness specified"
 msgstr "internt fel: xstormy16_cgen_cpu_open: ingen byteordning angiven"
 
+#~ msgid "can't find i386-opc.tbl for reading, errno = %s\n"
+#~ msgstr "kan inte hitta i386-opc.tbl för läsning, errno = %s\n"
+
+#~ msgid ""
+#~ "\n"
+#~ "  msa                      Recognize MSA instructions.\n"
+#~ msgstr ""
+#~ "\n"
+#~ "  msa                      Känn igen MSA-instruktioner.\n"
+
+#~ msgid ""
+#~ "\n"
+#~ "  hwr-names=ARCH           Print HWR names according to specified \n"
+#~ "                           architecture.\n"
+#~ "                           Default: based on binary being disassembled.\n"
+#~ msgstr ""
+#~ "\n"
+#~ "  hwr-names=ARCH           Skriv ut HWR-namn enligt angiven \n"
+#~ "                           arkitektur.\n"
+#~ "                           Standard: baserat på binären som avassembleras.\n"
+
+#~ msgid ""
+#~ "\n"
+#~ "  For the options above, The following values are supported for \"ARCH\":\n"
+#~ "   "
+#~ msgstr ""
+#~ "\n"
+#~ "  För flaggorna ovan stöds följande värden på \"ARK\":\n"
+#~ "   "
+
 #~ msgid "Internal disassembler error"
 #~ msgstr "Internt fel i avassembleraren"
 
diff --git a/opcodes/s390-opc.txt b/opcodes/s390-opc.txt
index be4c97db2f..7569a5675e 100644
--- a/opcodes/s390-opc.txt
+++ b/opcodes/s390-opc.txt
@@ -1888,106 +1888,120 @@ e70000000036 vlm VRS_VVRDU "vector load multiple" arch12 zarch optparm
 e7000000000e vst VRX_VRRDU "vector store" arch12 zarch optparm
 e7000000003e vstm VRS_VVRDU "vector store multiple" arch12 zarch optparm
 
+
 # arch13 instructions
 
-b9f5 ncrk RRF_R0RR2 " " arch13 zarch
-b9e5 ncgrk RRF_R0RR2 " " arch13 zarch
-e50a mvcrl SSE_RDRD " " arch13 zarch
-b974 nnrk RRF_R0RR2 " " arch13 zarch
-b964 nngrk RRF_R0RR2 " " arch13 zarch
-b976 nork RRF_R0RR2 " " arch13 zarch
-b966 nogrk RRF_R0RR2 " " arch13 zarch
-b977 nxrk RRF_R0RR2 " " arch13 zarch
-b967 nxgrk RRF_R0RR2 " " arch13 zarch
-b975 ocrk RRF_R0RR2 " " arch13 zarch
-b965 ocgrk RRF_R0RR2 " " arch13 zarch
-b9e1 popcnt RRF_U0RR " " arch13 zarch optparm
-b9f0 selr RRF_RURR " " arch13 zarch
-b9f00000 selr*20 RRF_R0RR3 " " arch13 zarch
-b9e3 selgr RRF_RURR " " arch13 zarch
-b9e30000 selgr*20 RRF_R0RR3 " " arch13 zarch
-b9c0 selhhhr RRF_RURR " " arch13 zarch
-b9c00000 selhhhr*20 RRF_R0RR3 " " arch13 zarch
-
-e60000000006 vlbr VRX_VRRDU " " arch13 zarch
-e60000001006 vlbrh VRX_VRRD " " arch13 zarch
-e60000002006 vlbrf VRX_VRRD " " arch13 zarch
-e60000003006 vlbrg VRX_VRRD " " arch13 zarch
-e60000004006 vlbrq VRX_VRRD " " arch13 zarch
-
-e60000000007 vler VRX_VRRDU " " arch13 zarch
-e60000001007 vlerh VRX_VRRD " " arch13 zarch
-e60000002007 vlerf VRX_VRRD " " arch13 zarch
-e60000003007 vlerg VRX_VRRD " " arch13 zarch
-
-e60000000004 vllebrz VRX_VRRDU " " arch13 zarch
-e60000001004 vllebrzh VRX_VRRD " " arch13 zarch
-e60000002004 vllebrzf VRX_VRRD " " arch13 zarch
-e60000003004 ldrv VRX_VRRD " " arch13 zarch
-e60000003004 vllebrzg VRX_VRRD " " arch13 zarch
-e60000006004 lerv VRX_VRRD " " arch13 zarch
-e60000006004 vllebrze VRX_VRRD " " arch13 zarch
-
-e60000000001 vlebrh VRX_VRRDU " " arch13 zarch
-e60000000003 vlebrf VRX_VRRDU " " arch13 zarch
-e60000000002 vlebrg VRX_VRRDU " " arch13 zarch
-
-e60000000005 vlbrrep VRX_VRRDU " " arch13 zarch
-e60000001005 vlbrreph VRX_VRRD " " arch13 zarch
-e60000002005 vlbrrepf VRX_VRRD " " arch13 zarch
-e60000003005 vlbrrepg VRX_VRRD " " arch13 zarch
-
-e6000000000e vstbr VRX_VRRDU " " arch13 zarch
-e6000000100e vstbrh VRX_VRRD " " arch13 zarch
-e6000000200e vstbrf VRX_VRRD " " arch13 zarch
-e6000000300e vstbrg VRX_VRRD " " arch13 zarch
-e6000000400e vstbrq VRX_VRRD " " arch13 zarch
-
-e6000000000f vster VRX_VRRDU " " arch13 zarch
-e6000000100f vsterh VRX_VRRD " " arch13 zarch
-e6000000200f vsterf VRX_VRRD " " arch13 zarch
-e6000000300f vsterg VRX_VRRD " " arch13 zarch
-
-e60000000009 vstebrh VRX_VRRDU " " arch13 zarch
-e6000000000b vstebrf VRX_VRRDU " " arch13 zarch
-e6000000000b sterv VRX_VRRD " " arch13 zarch
-e6000000000a vstebrg VRX_VRRDU " " arch13 zarch
-e6000000000a stdrv VRX_VRRD " " arch13 zarch
-
-e70000000086 vsld VRI_VVV0U " " arch13 zarch
-e70000000087 vsrd VRI_VVV0U " " arch13 zarch
-
-e7000000008b vstrs VRR_VVVUU0V " " arch13 zarch optparm
-
-e7000000008b vstrsb VRR_VVVU0VB " " arch13 zarch optparm
-e7000100008b vstrsh VRR_VVVU0VB " " arch13 zarch optparm
-e7000200008b vstrsf VRR_VVVU0VB " " arch13 zarch optparm
-
-e7000020008b vstrszb VRR_VVVU0VB2 " " arch13 zarch optparm
-e7000120008b vstrszh VRR_VVVU0VB2 " " arch13 zarch optparm
-e7000220008b vstrszf VRR_VVVU0VB2 " " arch13 zarch optparm
-
-e700000000c3 vcfps VRR_VV0UUU " " arch13 zarch
-e700000020c3 vcefb VRR_VV0UU " " arch13 zarch
-e700000820c3 wcefb VRR_VV0UU8 " " arch13 zarch
-
-e700000000c1 vcfpl VRR_VV0UUU " " arch13 zarch
-e700000020c1 vcelfb VRR_VV0UU " " arch13 zarch
-e700000820c1 wcelfb VRR_VV0UU8 " " arch13 zarch
-
-e700000000c2 vcsfp VRR_VV0UUU " " arch13 zarch
-e700000020c2 vcfeb VRR_VV0UU " " arch13 zarch
-e700000820c2 wcfeb VRR_VV0UU8 " " arch13 zarch
-
-e700000000c0 vclfp VRR_VV0UUU " " arch13 zarch
-e700000020c0 vclfeb VRR_VV0UU " " arch13 zarch
-e700000820c0 wclfeb VRR_VV0UU8 " " arch13 zarch
-
-b939 dfltcc RRF_R0RR2 " " arch13 zarch
-
-b938 sortl RRE_RR " " arch13 zarch
-
-e60000000050 vcvb VRR_RV0UU " " arch13 zarch optparm
-e60000000052 vcvbg VRR_RV0UU " " arch13 zarch optparm
-
-b93a kdsa RRE_RR " " arch13 zarch
+
+# Miscellaneous Instruction Extensions Facility 2
+
+b9f5 ncrk RRF_R0RR2 "and with complement 32 bit" arch13 zarch
+b9e5 ncgrk RRF_R0RR2 "and with complement 64 bit" arch13 zarch
+e50a mvcrl SSE_RDRD "move right to left" arch13 zarch
+b974 nnrk RRF_R0RR2 "nand 32 bit" arch13 zarch
+b964 nngrk RRF_R0RR2 "nand 64 bit" arch13 zarch
+b976 nork RRF_R0RR2 "nor 32 bit" arch13 zarch
+b966 nogrk RRF_R0RR2 "nor 64 bit" arch13 zarch
+b977 nxrk RRF_R0RR2 "not exclusive or 32 bit" arch13 zarch
+b967 nxgrk RRF_R0RR2 "not exclusive or 64 bit" arch13 zarch
+b975 ocrk RRF_R0RR2 "or with complement 32 bit" arch13 zarch
+b965 ocgrk RRF_R0RR2 "or with complement 64 bit" arch13 zarch
+b9e1 popcnt RRF_U0RR "population count arch13" arch13 zarch optparm
+b9f0 selr RRF_RURR "select 32 bit" arch13 zarch
+b9f00000 selr*20 RRF_R0RR3 "select 32 bit" arch13 zarch
+b9e3 selgr RRF_RURR "select 64 bit" arch13 zarch
+b9e30000 selgr*20 RRF_R0RR3 "select 64 bit" arch13 zarch
+b9c0 selfhr RRF_RURR "select high" arch13 zarch
+b9c00000 selfhr*20 RRF_R0RR3 "select high" arch13 zarch
+
+# Vector Enhancements Facility 2
+
+e60000000006 vlbr VRX_VRRDU "vector load byte reversed elements" arch13 zarch
+e60000001006 vlbrh VRX_VRRD "vector load byte reversed halfword elements" arch13 zarch
+e60000002006 vlbrf VRX_VRRD "vector load byte reversed word elements" arch13 zarch
+e60000003006 vlbrg VRX_VRRD "vector load byte reversed doubleword elements" arch13 zarch
+e60000004006 vlbrq VRX_VRRD "vector load byte reversed quadword elements" arch13 zarch
+
+e60000000007 vler VRX_VRRDU "vector load elements reversed" arch13 zarch
+e60000001007 vlerh VRX_VRRD "vector load halfword elements reversed" arch13 zarch
+e60000002007 vlerf VRX_VRRD "vector load word elements reversed" arch13 zarch
+e60000003007 vlerg VRX_VRRD "vector load doubleword elements reversed" arch13 zarch
+
+e60000000004 vllebrz VRX_VRRDU "vector load byte reversed element and zero" arch13 zarch
+e60000001004 vllebrzh VRX_VRRD "vector load byte reversed halfword element and zero" arch13 zarch
+e60000002004 vllebrzf VRX_VRRD "vector load byte reversed word element and zero" arch13 zarch
+e60000003004 ldrv VRX_VRRD "load byte reversed doubleword" arch13 zarch
+e60000003004 vllebrzg VRX_VRRD "vector load byte reversed doubleword element and zero" arch13 zarch
+e60000006004 lerv VRX_VRRD "load byte reversed word" arch13 zarch
+e60000006004 vllebrze VRX_VRRD "vector load byte reversed word element left-aligned and zero" arch13 zarch
+
+e60000000001 vlebrh VRX_VRRDU "vector load byte reversed halfword element" arch13 zarch
+e60000000003 vlebrf VRX_VRRDU "vector load byte reversed word element" arch13 zarch
+e60000000002 vlebrg VRX_VRRDU "vector load byte reversed doubleword element" arch13 zarch
+
+e60000000005 vlbrrep VRX_VRRDU "vector load byte reversed element and replicate" arch13 zarch
+e60000001005 vlbrreph VRX_VRRD "vector load byte reversed halfword element and replicate" arch13 zarch
+e60000002005 vlbrrepf VRX_VRRD "vector load byte reversed word element and replicate" arch13 zarch
+e60000003005 vlbrrepg VRX_VRRD "vector load byte reversed doubleword element and replicate" arch13 zarch
+
+e6000000000e vstbr VRX_VRRDU "vector store byte reversed elements" arch13 zarch
+e6000000100e vstbrh VRX_VRRD "vector store byte reversed halfword elements" arch13 zarch
+e6000000200e vstbrf VRX_VRRD "vector store byte reversed word elements" arch13 zarch
+e6000000300e vstbrg VRX_VRRD "vector store byte reversed doubleword elements" arch13 zarch
+e6000000400e vstbrq VRX_VRRD "vector store byte reversed quadword elements" arch13 zarch
+
+e6000000000f vster VRX_VRRDU "vector store elements reversed" arch13 zarch
+e6000000100f vsterh VRX_VRRD "vector store halfword elements reversed" arch13 zarch
+e6000000200f vsterf VRX_VRRD "vector store word elements reversed" arch13 zarch
+e6000000300f vsterg VRX_VRRD "vector store doubleword elements reversed" arch13 zarch
+
+e60000000009 vstebrh VRX_VRRDU "vector store byte reversed halfword element" arch13 zarch
+e6000000000b vstebrf VRX_VRRDU "vector store byte reversed word element" arch13 zarch
+e6000000000b sterv VRX_VRRD "store byte reversed word" arch13 zarch
+e6000000000a vstebrg VRX_VRRDU "vector store byte reversed doubleword element" arch13 zarch
+e6000000000a stdrv VRX_VRRD "store byte reversed doubleword" arch13 zarch
+
+e70000000086 vsld VRI_VVV0U "vector shift left double by bit" arch13 zarch
+e70000000087 vsrd VRI_VVV0U "vector shift right double by bit" arch13 zarch
+
+e7000000008b vstrs VRR_VVVUU0V "vector string search" arch13 zarch optparm
+
+e7000000008b vstrsb VRR_VVVU0VB "vector string search byte" arch13 zarch optparm
+e7000100008b vstrsh VRR_VVVU0VB "vector string search halfword" arch13 zarch optparm
+e7000200008b vstrsf VRR_VVVU0VB "vector string search word" arch13 zarch optparm
+
+e7000020008b vstrszb VRR_VVV0V "vector string search byte zero" arch13 zarch
+e7000120008b vstrszh VRR_VVV0V "vector string search halfword zero" arch13 zarch
+e7000220008b vstrszf VRR_VVV0V "vector string search word zero" arch13 zarch
+
+e700000000c3 vcfps VRR_VV0UUU "vector fp convert from fixed" arch13 zarch
+e700000020c3 vcefb VRR_VV0UU "vector fp convert from fixed 32 bit" arch13 zarch
+e700000820c3 wcefb VRR_VV0UU8 "vector fp convert from fixed 32 bit" arch13 zarch
+
+e700000000c1 vcfpl VRR_VV0UUU "vector fp convert from logical" arch13 zarch
+e700000020c1 vcelfb VRR_VV0UU "vector fp convert from logical 32 bit" arch13 zarch
+e700000820c1 wcelfb VRR_VV0UU8 "vector fp convert from logical 32 bit" arch13 zarch
+
+e700000000c2 vcsfp VRR_VV0UUU "vector fp convert to fixed" arch13 zarch
+e700000020c2 vcfeb VRR_VV0UU "vector fp convert to fixed 32 bit" arch13 zarch
+e700000820c2 wcfeb VRR_VV0UU8 "vector fp convert to fixed 32 bit" arch13 zarch
+
+e700000000c0 vclfp VRR_VV0UUU "vector fp convert to logical" arch13 zarch
+e700000020c0 vclfeb VRR_VV0UU "vector fp convert to logical 32 bit" arch13 zarch
+e700000820c0 wclfeb VRR_VV0UU8 "vector fp convert to logical 32 bit" arch13 zarch
+
+# Deflate conversion facility
+
+b939 dfltcc RRF_R0RR2 "deflate conversion call" arch13 zarch
+
+# Enhanced-Sort Facility
+
+b938 sortl RRE_RR "sort lists" arch13 zarch
+
+# Vector packed decimal enhancement facility
+
+e60000000050 vcvb VRR_RV0UU "vector convert to binary 32 bit" arch13 zarch optparm
+e60000000052 vcvbg VRR_RV0UU "vector convert to binary 64 bit" arch13 zarch optparm
+
+# Message Security Assist Extension 9
+
+b93a kdsa RRE_RR "compute digital signature authentication" arch13 zarch
