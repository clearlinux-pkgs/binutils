From 05406bc79136e714096a5fa320ca3f2ef437746f Mon Sep 17 00:00:00 2001
From: Victor Rodriguez <victor.rodriguez.bahena@intel.com>
Date: Fri, 1 Dec 2017 17:28:43 +0000
Subject: [PATCH] Offset adjust of cve-2017-16831 for 2.29 version

This patch fix the failed HUNK from cve-2017-16831 orginal patch :

Fix excessive memory allocation attempts and possible integer
 overfloaws when attempting to read a COFF binary with a corrupt symbol count.

	PR 22385
	* coffgen.c (_bfd_coff_get_external_symbols): Check for an
	overlarge raw syment count.
	(coff_get_normalized_symtab): Likewise.

Signed-off-by: Victor Rodriguez <victor.rodriguez.bahena@intel.com>
---
 bfd/coffgen.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/bfd/coffgen.c b/bfd/coffgen.c
index 31c2c5a..0995d4a 100644
--- a/bfd/coffgen.c
+++ b/bfd/coffgen.c
@@ -1640,13 +1640,21 @@ _bfd_coff_get_external_symbols (bfd *abfd)
   size = obj_raw_syment_count (abfd) * symesz;
   if (size == 0)
     return TRUE;
-
+  /* Check for integer overflow and for unreasonable symbol counts.  */
+  if (size < obj_raw_syment_count (abfd)
+      || (bfd_get_file_size (abfd) > 0
+	  && size > bfd_get_file_size (abfd)))
+    {
+      _bfd_error_handler (_("%B: corrupt symbol count: %#Lx"),
+			  abfd, obj_raw_syment_count (abfd));
+      return FALSE;
+    }
   syms = bfd_malloc (size);
   if (syms == NULL)
     {
       /* PR 21013: Provide an error message when the alloc fails.  */
-      _bfd_error_handler (_("%B: Not enough memory to allocate space for %lu symbols"),
-			  abfd, size);
+      _bfd_error_handler (_("%B: not enough memory to allocate space for %#Lx symbols of size %#Lx"),
+              abfd, obj_raw_syment_count (abfd), symesz);
       return FALSE;
     }
 
-- 
2.15.1

